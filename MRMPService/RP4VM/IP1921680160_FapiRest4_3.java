
package rp4vm;

import java.net.URI;
import java.util.HashMap;
import java.util.Map;
import javax.annotation.Generated;
import javax.ws.rs.WebApplicationException;
import javax.ws.rs.client.Client;
import javax.ws.rs.client.ClientBuilder;
import javax.ws.rs.client.Entity;
import javax.ws.rs.client.WebTarget;
import javax.ws.rs.core.Configurable;
import javax.ws.rs.core.GenericType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.UriBuilder;
import org.glassfish.jersey.uri.UriTemplate;

@Generated(value = {
    "wadl|file:/home/phillip/Downloads/wadl-dist-1.1.6/bin/application.wadl"
}, comments = "wadl2java, http://wadl.java.net", date = "2016-06-02T14:55:34.352-04:00")
public class IP1921680160_FapiRest4_3 {

    /**
     * The base URI for the resource represented by this proxy
     * 
     */
    public final static URI BASE_URI;

    static {
        URI originalURI = URI.create("https://192.168.0.160:7225/fapi/rest/4_3/");
        // Look up to see if we have any indirection in the local copy
        // of META-INF/java-rs-catalog.xml file, assuming it will be in the
        // oasis:name:tc:entity:xmlns:xml:catalog namespace or similar duck type
        java.io.InputStream is = IP1921680160_FapiRest4_3.class.getResourceAsStream("/META-INF/jax-rs-catalog.xml");
        if (is!=null) {
            try {
                // Ignore the namespace in the catalog, can't use wildcard until
                // we are sure we have XPath 2.0
                String found = javax.xml.xpath.XPathFactory.newInstance().newXPath().evaluate(
                    "/*[name(.) = 'catalog']/*[name(.) = 'uri' and @name ='" + originalURI +"']/@uri", 
                    new org.xml.sax.InputSource(is)); 
                if (found!=null && found.length()>0) {
                    originalURI = java.net.URI.create(found);
                }
                
            }
            catch (Exception ex) {
                ex.printStackTrace();
            }
            finally {
                try {
                    is.close();
                } catch (java.io.IOException e) {
                }
            }
        }
        BASE_URI = originalURI;
    }

    public static IP1921680160_FapiRest4_3 .Transactions transactions(Client client, URI baseURI) {
        return new IP1921680160_FapiRest4_3 .Transactions(client, baseURI);
    }

    /**
     * Template method to allow tooling to customize the new Client
     * 
     */
    private static void customizeClientConfiguration(Configurable cc) {
    }

    /**
     * Template method to allow tooling to override Client factory
     * 
     */
    private static Client createClientInstance() {
        return ClientBuilder.newClient();
    }

    /**
     * Create a new Client instance
     * 
     */
    public static Client createClient() {
        Client client = createClientInstance();
        customizeClientConfiguration(client);
        return client;
    }

    public static IP1921680160_FapiRest4_3 .Transactions transactions() {
        return transactions(createClient(), BASE_URI);
    }

    public static IP1921680160_FapiRest4_3 .Transactions transactions(Client client) {
        return transactions(client, BASE_URI);
    }

    public static IP1921680160_FapiRest4_3 .Repository_volumes repository_volumes(Client client, URI baseURI) {
        return new IP1921680160_FapiRest4_3 .Repository_volumes(client, baseURI);
    }

    public static IP1921680160_FapiRest4_3 .Repository_volumes repository_volumes() {
        return repository_volumes(createClient(), BASE_URI);
    }

    public static IP1921680160_FapiRest4_3 .Repository_volumes repository_volumes(Client client) {
        return repository_volumes(client, BASE_URI);
    }

    public static IP1921680160_FapiRest4_3 .Settings settings(Client client, URI baseURI) {
        return new IP1921680160_FapiRest4_3 .Settings(client, baseURI);
    }

    public static IP1921680160_FapiRest4_3 .Settings settings() {
        return settings(createClient(), BASE_URI);
    }

    public static IP1921680160_FapiRest4_3 .Settings settings(Client client) {
        return settings(client, BASE_URI);
    }

    public static IP1921680160_FapiRest4_3 .Global_links global_links(Client client, URI baseURI) {
        return new IP1921680160_FapiRest4_3 .Global_links(client, baseURI);
    }

    public static IP1921680160_FapiRest4_3 .Global_links global_links() {
        return global_links(createClient(), BASE_URI);
    }

    public static IP1921680160_FapiRest4_3 .Global_links global_links(Client client) {
        return global_links(client, BASE_URI);
    }

    public static IP1921680160_FapiRest4_3 .Wadl wadl(Client client, URI baseURI) {
        return new IP1921680160_FapiRest4_3 .Wadl(client, baseURI);
    }

    public static IP1921680160_FapiRest4_3 .Wadl wadl() {
        return wadl(createClient(), BASE_URI);
    }

    public static IP1921680160_FapiRest4_3 .Wadl wadl(Client client) {
        return wadl(client, BASE_URI);
    }

    public static IP1921680160_FapiRest4_3 .RecoverpointWadl recoverpointWadl(Client client, URI baseURI) {
        return new IP1921680160_FapiRest4_3 .RecoverpointWadl(client, baseURI);
    }

    public static IP1921680160_FapiRest4_3 .RecoverpointWadl recoverpointWadl() {
        return recoverpointWadl(createClient(), BASE_URI);
    }

    public static IP1921680160_FapiRest4_3 .RecoverpointWadl recoverpointWadl(Client client) {
        return recoverpointWadl(client, BASE_URI);
    }

    public static IP1921680160_FapiRest4_3 .Global_policy global_policy(Client client, URI baseURI) {
        return new IP1921680160_FapiRest4_3 .Global_policy(client, baseURI);
    }

    public static IP1921680160_FapiRest4_3 .Global_policy global_policy() {
        return global_policy(createClient(), BASE_URI);
    }

    public static IP1921680160_FapiRest4_3 .Global_policy global_policy(Client client) {
        return global_policy(client, BASE_URI);
    }

    public static IP1921680160_FapiRest4_3 .Time time(Client client, URI baseURI) {
        return new IP1921680160_FapiRest4_3 .Time(client, baseURI);
    }

    public static IP1921680160_FapiRest4_3 .Time time() {
        return time(createClient(), BASE_URI);
    }

    public static IP1921680160_FapiRest4_3 .Time time(Client client) {
        return time(client, BASE_URI);
    }

    public static IP1921680160_FapiRest4_3 .Clusters clusters(Client client, URI baseURI) {
        return new IP1921680160_FapiRest4_3 .Clusters(client, baseURI);
    }

    public static IP1921680160_FapiRest4_3 .Clusters clusters() {
        return clusters(createClient(), BASE_URI);
    }

    public static IP1921680160_FapiRest4_3 .Clusters clusters(Client client) {
        return clusters(client, BASE_URI);
    }

    public static IP1921680160_FapiRest4_3 .Groups groups(Client client, URI baseURI) {
        return new IP1921680160_FapiRest4_3 .Groups(client, baseURI);
    }

    public static IP1921680160_FapiRest4_3 .Groups groups() {
        return groups(createClient(), BASE_URI);
    }

    public static IP1921680160_FapiRest4_3 .Groups groups(Client client) {
        return groups(client, BASE_URI);
    }

    public static IP1921680160_FapiRest4_3 .Ldap ldap(Client client, URI baseURI) {
        return new IP1921680160_FapiRest4_3 .Ldap(client, baseURI);
    }

    public static IP1921680160_FapiRest4_3 .Ldap ldap() {
        return ldap(createClient(), BASE_URI);
    }

    public static IP1921680160_FapiRest4_3 .Ldap ldap(Client client) {
        return ldap(client, BASE_URI);
    }

    public static IP1921680160_FapiRest4_3 .SystemConflicts systemConflicts(Client client, URI baseURI) {
        return new IP1921680160_FapiRest4_3 .SystemConflicts(client, baseURI);
    }

    public static IP1921680160_FapiRest4_3 .SystemConflicts systemConflicts() {
        return systemConflicts(createClient(), BASE_URI);
    }

    public static IP1921680160_FapiRest4_3 .SystemConflicts systemConflicts(Client client) {
        return systemConflicts(client, BASE_URI);
    }

    public static IP1921680160_FapiRest4_3 .Arrays arrays(Client client, URI baseURI) {
        return new IP1921680160_FapiRest4_3 .Arrays(client, baseURI);
    }

    public static IP1921680160_FapiRest4_3 .Arrays arrays() {
        return arrays(createClient(), BASE_URI);
    }

    public static IP1921680160_FapiRest4_3 .Arrays arrays(Client client) {
        return arrays(client, BASE_URI);
    }

    public static IP1921680160_FapiRest4_3 .Splitters splitters(Client client, URI baseURI) {
        return new IP1921680160_FapiRest4_3 .Splitters(client, baseURI);
    }

    public static IP1921680160_FapiRest4_3 .Splitters splitters() {
        return splitters(createClient(), BASE_URI);
    }

    public static IP1921680160_FapiRest4_3 .Splitters splitters(Client client) {
        return splitters(client, BASE_URI);
    }

    public static IP1921680160_FapiRest4_3 .Snmp snmp(Client client, URI baseURI) {
        return new IP1921680160_FapiRest4_3 .Snmp(client, baseURI);
    }

    public static IP1921680160_FapiRest4_3 .Snmp snmp() {
        return snmp(createClient(), BASE_URI);
    }

    public static IP1921680160_FapiRest4_3 .Snmp snmp(Client client) {
        return snmp(client, BASE_URI);
    }

    public static IP1921680160_FapiRest4_3 .Statistics statistics(Client client, URI baseURI) {
        return new IP1921680160_FapiRest4_3 .Statistics(client, baseURI);
    }

    public static IP1921680160_FapiRest4_3 .Statistics statistics() {
        return statistics(createClient(), BASE_URI);
    }

    public static IP1921680160_FapiRest4_3 .Statistics statistics(Client client) {
        return statistics(client, BASE_URI);
    }

    public static IP1921680160_FapiRest4_3 .Group_copy_policy_templates group_copy_policy_templates(Client client, URI baseURI) {
        return new IP1921680160_FapiRest4_3 .Group_copy_policy_templates(client, baseURI);
    }

    public static IP1921680160_FapiRest4_3 .Group_copy_policy_templates group_copy_policy_templates() {
        return group_copy_policy_templates(createClient(), BASE_URI);
    }

    public static IP1921680160_FapiRest4_3 .Group_copy_policy_templates group_copy_policy_templates(Client client) {
        return group_copy_policy_templates(client, BASE_URI);
    }

    public static IP1921680160_FapiRest4_3 .State state(Client client, URI baseURI) {
        return new IP1921680160_FapiRest4_3 .State(client, baseURI);
    }

    public static IP1921680160_FapiRest4_3 .State state() {
        return state(createClient(), BASE_URI);
    }

    public static IP1921680160_FapiRest4_3 .State state(Client client) {
        return state(client, BASE_URI);
    }

    public static IP1921680160_FapiRest4_3 .Contexts contexts(Client client, URI baseURI) {
        return new IP1921680160_FapiRest4_3 .Contexts(client, baseURI);
    }

    public static IP1921680160_FapiRest4_3 .Contexts contexts() {
        return contexts(createClient(), BASE_URI);
    }

    public static IP1921680160_FapiRest4_3 .Contexts contexts(Client client) {
        return contexts(client, BASE_URI);
    }

    public static IP1921680160_FapiRest4_3 .Virtual_machines virtual_machines(Client client, URI baseURI) {
        return new IP1921680160_FapiRest4_3 .Virtual_machines(client, baseURI);
    }

    public static IP1921680160_FapiRest4_3 .Virtual_machines virtual_machines() {
        return virtual_machines(createClient(), BASE_URI);
    }

    public static IP1921680160_FapiRest4_3 .Virtual_machines virtual_machines(Client client) {
        return virtual_machines(client, BASE_URI);
    }

    public static IP1921680160_FapiRest4_3 .Group_sets group_sets(Client client, URI baseURI) {
        return new IP1921680160_FapiRest4_3 .Group_sets(client, baseURI);
    }

    public static IP1921680160_FapiRest4_3 .Group_sets group_sets() {
        return group_sets(createClient(), BASE_URI);
    }

    public static IP1921680160_FapiRest4_3 .Group_sets group_sets(Client client) {
        return group_sets(client, BASE_URI);
    }

    public static IP1921680160_FapiRest4_3 .Licenses licenses(Client client, URI baseURI) {
        return new IP1921680160_FapiRest4_3 .Licenses(client, baseURI);
    }

    public static IP1921680160_FapiRest4_3 .Licenses licenses() {
        return licenses(createClient(), BASE_URI);
    }

    public static IP1921680160_FapiRest4_3 .Licenses licenses(Client client) {
        return licenses(client, BASE_URI);
    }

    public static IP1921680160_FapiRest4_3 .Events events(Client client, URI baseURI) {
        return new IP1921680160_FapiRest4_3 .Events(client, baseURI);
    }

    public static IP1921680160_FapiRest4_3 .Events events() {
        return events(createClient(), BASE_URI);
    }

    public static IP1921680160_FapiRest4_3 .Events events(Client client) {
        return events(client, BASE_URI);
    }

    public static IP1921680160_FapiRest4_3 .System system(Client client, URI baseURI) {
        return new IP1921680160_FapiRest4_3 .System(client, baseURI);
    }

    public static IP1921680160_FapiRest4_3 .System system() {
        return system(createClient(), BASE_URI);
    }

    public static IP1921680160_FapiRest4_3 .System system(Client client) {
        return system(client, BASE_URI);
    }

    public static IP1921680160_FapiRest4_3 .Account account(Client client, URI baseURI) {
        return new IP1921680160_FapiRest4_3 .Account(client, baseURI);
    }

    public static IP1921680160_FapiRest4_3 .Account account() {
        return account(createClient(), BASE_URI);
    }

    public static IP1921680160_FapiRest4_3 .Account account(Client client) {
        return account(client, BASE_URI);
    }

    public static IP1921680160_FapiRest4_3 .Index index(Client client, URI baseURI) {
        return new IP1921680160_FapiRest4_3 .Index(client, baseURI);
    }

    public static IP1921680160_FapiRest4_3 .Index index() {
        return index(createClient(), BASE_URI);
    }

    public static IP1921680160_FapiRest4_3 .Index index(Client client) {
        return index(client, BASE_URI);
    }

    public static IP1921680160_FapiRest4_3 .Reports reports(Client client, URI baseURI) {
        return new IP1921680160_FapiRest4_3 .Reports(client, baseURI);
    }

    public static IP1921680160_FapiRest4_3 .Reports reports() {
        return reports(createClient(), BASE_URI);
    }

    public static IP1921680160_FapiRest4_3 .Reports reports(Client client) {
        return reports(client, BASE_URI);
    }

    public static IP1921680160_FapiRest4_3 .Group_copies group_copies(Client client, URI baseURI) {
        return new IP1921680160_FapiRest4_3 .Group_copies(client, baseURI);
    }

    public static IP1921680160_FapiRest4_3 .Group_copies group_copies() {
        return group_copies(createClient(), BASE_URI);
    }

    public static IP1921680160_FapiRest4_3 .Group_copies group_copies(Client client) {
        return group_copies(client, BASE_URI);
    }

    public static IP1921680160_FapiRest4_3 .Vcenter_servers vcenter_servers(Client client, URI baseURI) {
        return new IP1921680160_FapiRest4_3 .Vcenter_servers(client, baseURI);
    }

    public static IP1921680160_FapiRest4_3 .Vcenter_servers vcenter_servers() {
        return vcenter_servers(createClient(), BASE_URI);
    }

    public static IP1921680160_FapiRest4_3 .Vcenter_servers vcenter_servers(Client client) {
        return vcenter_servers(client, BASE_URI);
    }

    public static IP1921680160_FapiRest4_3 .Phoenix_clusters phoenix_clusters(Client client, URI baseURI) {
        return new IP1921680160_FapiRest4_3 .Phoenix_clusters(client, baseURI);
    }

    public static IP1921680160_FapiRest4_3 .Phoenix_clusters phoenix_clusters() {
        return phoenix_clusters(createClient(), BASE_URI);
    }

    public static IP1921680160_FapiRest4_3 .Phoenix_clusters phoenix_clusters(Client client) {
        return phoenix_clusters(client, BASE_URI);
    }

    public static IP1921680160_FapiRest4_3 .Logs logs(Client client, URI baseURI) {
        return new IP1921680160_FapiRest4_3 .Logs(client, baseURI);
    }

    public static IP1921680160_FapiRest4_3 .Logs logs() {
        return logs(createClient(), BASE_URI);
    }

    public static IP1921680160_FapiRest4_3 .Logs logs(Client client) {
        return logs(client, BASE_URI);
    }

    public static IP1921680160_FapiRest4_3 .Group_link_policy_templates group_link_policy_templates(Client client, URI baseURI) {
        return new IP1921680160_FapiRest4_3 .Group_link_policy_templates(client, baseURI);
    }

    public static IP1921680160_FapiRest4_3 .Group_link_policy_templates group_link_policy_templates() {
        return group_link_policy_templates(createClient(), BASE_URI);
    }

    public static IP1921680160_FapiRest4_3 .Group_link_policy_templates group_link_policy_templates(Client client) {
        return group_link_policy_templates(client, BASE_URI);
    }

    public static IP1921680160_FapiRest4_3 .Rpas rpas(Client client, URI baseURI) {
        return new IP1921680160_FapiRest4_3 .Rpas(client, baseURI);
    }

    public static IP1921680160_FapiRest4_3 .Rpas rpas() {
        return rpas(createClient(), BASE_URI);
    }

    public static IP1921680160_FapiRest4_3 .Rpas rpas(Client client) {
        return rpas(client, BASE_URI);
    }

    public static IP1921680160_FapiRest4_3 .WadlXsl wadlXsl(Client client, URI baseURI) {
        return new IP1921680160_FapiRest4_3 .WadlXsl(client, baseURI);
    }

    public static IP1921680160_FapiRest4_3 .WadlXsl wadlXsl() {
        return wadlXsl(createClient(), BASE_URI);
    }

    public static IP1921680160_FapiRest4_3 .WadlXsl wadlXsl(Client client) {
        return wadlXsl(client, BASE_URI);
    }

    public static IP1921680160_FapiRest4_3 .Users users(Client client, URI baseURI) {
        return new IP1921680160_FapiRest4_3 .Users(client, baseURI);
    }

    public static IP1921680160_FapiRest4_3 .Users users() {
        return users(createClient(), BASE_URI);
    }

    public static IP1921680160_FapiRest4_3 .Users users(Client client) {
        return users(client, BASE_URI);
    }

    public static IP1921680160_FapiRest4_3 .ObjectsBrowser objectsBrowser(Client client, URI baseURI) {
        return new IP1921680160_FapiRest4_3 .ObjectsBrowser(client, baseURI);
    }

    public static IP1921680160_FapiRest4_3 .ObjectsBrowser objectsBrowser() {
        return objectsBrowser(createClient(), BASE_URI);
    }

    public static IP1921680160_FapiRest4_3 .ObjectsBrowser objectsBrowser(Client client) {
        return objectsBrowser(client, BASE_URI);
    }

    public static class Account {

        private Client _client;
        private UriBuilder _uriBuilder;
        private Map<String, Object> _templateAndMatrixParameterValues;

        private Account(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
            _client = client;
            _uriBuilder = uriBuilder.clone();
            _templateAndMatrixParameterValues = map;
        }

        /**
         * Create new instance using existing Client instance, and a base URI and any parameters
         * 
         */
        public Account(Client client, URI baseUri) {
            _client = client;
            _uriBuilder = UriBuilder.fromUri(baseUri);
            _uriBuilder = _uriBuilder.path("account");
            _templateAndMatrixParameterValues = new HashMap<String, Object>();
        }

        public IP1921680160_FapiRest4_3 .Account.State state() {
            return new IP1921680160_FapiRest4_3 .Account.State(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .Account.Settings settings() {
            return new IP1921680160_FapiRest4_3 .Account.Settings(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public static class Settings {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Settings(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Settings(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("settings");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class State {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private State(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public State(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("state");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

    }

    public static class Arrays {

        private Client _client;
        private UriBuilder _uriBuilder;
        private Map<String, Object> _templateAndMatrixParameterValues;

        private Arrays(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
            _client = client;
            _uriBuilder = uriBuilder.clone();
            _templateAndMatrixParameterValues = map;
        }

        /**
         * Create new instance using existing Client instance, and a base URI and any parameters
         * 
         */
        public Arrays(Client client, URI baseUri) {
            _client = client;
            _uriBuilder = UriBuilder.fromUri(baseUri);
            _uriBuilder = _uriBuilder.path("arrays");
            _templateAndMatrixParameterValues = new HashMap<String, Object>();
        }

        public<T >T postJsonAs(Object input, GenericType<T> returnType) {
            UriBuilder localUriBuilder = _uriBuilder.clone();
            WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
            Response response;
            response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
            if (response.getStatus()>= 400) {
                throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
            }
            return response.readEntity(returnType);
        }

        public<T >T postJsonAs(Object input, Class<T> returnType) {
            UriBuilder localUriBuilder = _uriBuilder.clone();
            WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
            Response response;
            response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
            if (!Response.class.isAssignableFrom(returnType)) {
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
            }
            if (!Response.class.isAssignableFrom(returnType)) {
                return response.readEntity(returnType);
            } else {
                return returnType.cast(response);
            }
        }

    }

    public static class Clusters {

        private Client _client;
        private UriBuilder _uriBuilder;
        private Map<String, Object> _templateAndMatrixParameterValues;

        private Clusters(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
            _client = client;
            _uriBuilder = uriBuilder.clone();
            _templateAndMatrixParameterValues = map;
        }

        /**
         * Create new instance using existing Client instance, and a base URI and any parameters
         * 
         */
        public Clusters(Client client, URI baseUri) {
            _client = client;
            _uriBuilder = UriBuilder.fromUri(baseUri);
            _uriBuilder = _uriBuilder.path("clusters");
            _templateAndMatrixParameterValues = new HashMap<String, Object>();
        }

        public<T >T getAsJson(GenericType<T> returnType) {
            UriBuilder localUriBuilder = _uriBuilder.clone();
            WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
            Response response;
            response = resourceBuilder.build("GET").invoke();
            if (response.getStatus()>= 400) {
                throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
            }
            return response.readEntity(returnType);
        }

        public<T >T getAsJson(Class<T> returnType) {
            UriBuilder localUriBuilder = _uriBuilder.clone();
            WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
            Response response;
            response = resourceBuilder.build("GET").invoke();
            if (!Response.class.isAssignableFrom(returnType)) {
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
            }
            if (!Response.class.isAssignableFrom(returnType)) {
                return response.readEntity(returnType);
            } else {
                return returnType.cast(response);
            }
        }

        public IP1921680160_FapiRest4_3 .Clusters.ClusterIdName clusterIdName(String clusterid) {
            return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdName(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid);
        }

        public IP1921680160_FapiRest4_3 .Clusters.ClusterIdClariion_raid_groups clusterIdClariion_raid_groups(String clusterid) {
            return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdClariion_raid_groups(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid);
        }

        public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVolumesVolumeIdUser_settings clusterIdVolumesVolumeIdUser_settings(String clusterid, String volumeid) {
            return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVolumesVolumeIdUser_settings(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid, volumeid);
        }

        public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVolumes clusterIdVolumes(String clusterid) {
            return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVolumes(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid);
        }

        public IP1921680160_FapiRest4_3 .Clusters.ClusterIdSan_splittersRescan clusterIdSan_splittersRescan(String clusterid) {
            return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdSan_splittersRescan(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid);
        }

        public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVolumesAvailable clusterIdVolumesAvailable(String clusterid) {
            return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVolumesAvailable(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid);
        }

        public IP1921680160_FapiRest4_3 .Clusters.ClusterIdPhoenix_clusters clusterIdPhoenix_clusters(String clusterid) {
            return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdPhoenix_clusters(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid);
        }

        public IP1921680160_FapiRest4_3 .Clusters.ClusterIdAcquire_management_ip clusterIdAcquire_management_ip(String clusterid) {
            return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdAcquire_management_ip(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid);
        }

        public IP1921680160_FapiRest4_3 .Clusters.ClusterIdRelease_management_ip clusterIdRelease_management_ip(String clusterid) {
            return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdRelease_management_ip(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid);
        }

        public IP1921680160_FapiRest4_3 .Clusters.ClusterIdMaintenance clusterIdMaintenance(String clusterid) {
            return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdMaintenance(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid);
        }

        public IP1921680160_FapiRest4_3 .Clusters.ClusterIdMaintenanceFinish clusterIdMaintenanceFinish(String clusterid) {
            return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdMaintenanceFinish(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid);
        }

        public IP1921680160_FapiRest4_3 .Clusters.ClusterIdRpasRpaNumMaintenanceStart clusterIdRpasRpaNumMaintenanceStart(String clusterid, String rpanum) {
            return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdRpasRpaNumMaintenanceStart(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid, rpanum);
        }

        public IP1921680160_FapiRest4_3 .Clusters.ClusterIdRpasRpaNumMaintenanceFinish clusterIdRpasRpaNumMaintenanceFinish(String clusterid, String rpanum) {
            return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdRpasRpaNumMaintenanceFinish(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid, rpanum);
        }

        public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVolumesClariionContext clusterIdVolumesClariionContext(String clusterid) {
            return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVolumesClariionContext(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid);
        }

        public IP1921680160_FapiRest4_3 .Clusters.ClusterIdContext clusterIdContext(String clusterid) {
            return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdContext(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid);
        }

        public IP1921680160_FapiRest4_3 .Clusters.ClusterIdArraysSymmetrixAvailable clusterIdArraysSymmetrixAvailable(String clusterid) {
            return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdArraysSymmetrixAvailable(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid);
        }

        public IP1921680160_FapiRest4_3 .Clusters.ClusterIdIr_throttling_policy clusterIdIr_throttling_policy(String clusterid) {
            return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdIr_throttling_policy(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid);
        }

        public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVolumesVolumeId clusterIdVolumesVolumeId(String clusterid, String volumeid) {
            return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVolumesVolumeId(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid, volumeid);
        }

        public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVc_certificate_information clusterIdVc_certificate_information(String clusterid) {
            return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVc_certificate_information(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid);
        }

        public IP1921680160_FapiRest4_3 .Clusters.ClusterIdStatistics clusterIdStatistics(String clusterid) {
            return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdStatistics(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid);
        }

        public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVolumesDeviceIdAvailable_splitters clusterIdVolumesDeviceIdAvailable_splitters(String clusterid, String deviceid) {
            return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVolumesDeviceIdAvailable_splitters(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid, deviceid);
        }

        public IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplitters_with_unattached_volumes clusterIdSplitters_with_unattached_volumes(String clusterid) {
            return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplitters_with_unattached_volumes(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid);
        }

        public IP1921680160_FapiRest4_3 .Clusters.San_splittersRescan san_splittersRescan() {
            return new IP1921680160_FapiRest4_3 .Clusters.San_splittersRescan(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVolumesVolumeIdInformation clusterIdVolumesVolumeIdInformation(String clusterid, String volumeid) {
            return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVolumesVolumeIdInformation(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid, volumeid);
        }

        public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVolumesVolumeIdPaths clusterIdVolumesVolumeIdPaths(String clusterid, String volumeid) {
            return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVolumesVolumeIdPaths(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid, volumeid);
        }

        public IP1921680160_FapiRest4_3 .Clusters.ClusterIdRpasRpaNumStateVerify clusterIdRpasRpaNumStateVerify(String clusterid, String rpanum) {
            return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdRpasRpaNumStateVerify(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid, rpanum);
        }

        public IP1921680160_FapiRest4_3 .Clusters.ClusterIdSettingsResolve clusterIdSettingsResolve(String clusterid) {
            return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdSettingsResolve(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid);
        }

        public IP1921680160_FapiRest4_3 .Clusters.ClusterIdPhoenix_clustersAvailable clusterIdPhoenix_clustersAvailable(String clusterid) {
            return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdPhoenix_clustersAvailable(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid);
        }

        public IP1921680160_FapiRest4_3 .Clusters.ClusterIdRpasStatistics clusterIdRpasStatistics(String clusterid) {
            return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdRpasStatistics(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid);
        }

        public IP1921680160_FapiRest4_3 .Clusters.ClusterIdRpasRpaIDStatistics clusterIdRpasRpaIDStatistics(String clusterid, String rpaid) {
            return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdRpasRpaIDStatistics(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid, rpaid);
        }

        public IP1921680160_FapiRest4_3 .Clusters.Rescan_all rescan_all() {
            return new IP1921680160_FapiRest4_3 .Clusters.Rescan_all(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .Clusters.ClusterIdRescan clusterIdRescan(String clusterid) {
            return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdRescan(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid);
        }

        public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVolumesAvailableClariion clusterIdVolumesAvailableClariion(String clusterid) {
            return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVolumesAvailableClariion(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid);
        }

        public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVolumesClariion clusterIdVolumesClariion(String clusterid) {
            return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVolumesClariion(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid);
        }

        public IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplittersState clusterIdSplittersState(String clusterid) {
            return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplittersState(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid);
        }

        public IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplittersSplitterIdState clusterIdSplittersSplitterIdState(String clusterid, String splitterid) {
            return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplittersSplitterIdState(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid, splitterid);
        }

        public IP1921680160_FapiRest4_3 .Clusters.ClusterIdRpasState clusterIdRpasState(String clusterid) {
            return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdRpasState(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid);
        }

        public IP1921680160_FapiRest4_3 .Clusters.ClusterIdRpasRpaIdState clusterIdRpasRpaIdState(String clusterid, String rpaid) {
            return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdRpasRpaIdState(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid, rpaid);
        }

        public IP1921680160_FapiRest4_3 .Clusters.ClusterIdRepository_volumeState clusterIdRepository_volumeState(String clusterid) {
            return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdRepository_volumeState(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid);
        }

        public IP1921680160_FapiRest4_3 .Clusters.ClusterIdSettings clusterIdSettings(String clusterid) {
            return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdSettings(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid);
        }

        public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVcenter_servers_filters clusterIdVcenter_servers_filters(String clusterid) {
            return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVcenter_servers_filters(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid);
        }

        public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVolumesVirtual clusterIdVolumesVirtual(String clusterid) {
            return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVolumesVirtual(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid);
        }

        public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVolumesVplex clusterIdVolumesVplex(String clusterid) {
            return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVolumesVplex(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid);
        }

        public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVolumesSymmetrix clusterIdVolumesSymmetrix(String clusterid) {
            return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVolumesSymmetrix(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid);
        }

        public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVolumesAvailableVirtual clusterIdVolumesAvailableVirtual(String clusterid) {
            return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVolumesAvailableVirtual(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid);
        }

        public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVolumesAvailableVplex clusterIdVolumesAvailableVplex(String clusterid) {
            return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVolumesAvailableVplex(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid);
        }

        public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVolumesAvailableSymmetrix clusterIdVolumesAvailableSymmetrix(String clusterid) {
            return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVolumesAvailableSymmetrix(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid);
        }

        public IP1921680160_FapiRest4_3 .Clusters.VolumesAvailable volumesAvailable() {
            return new IP1921680160_FapiRest4_3 .Clusters.VolumesAvailable(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .Clusters.VolumesInformation volumesInformation() {
            return new IP1921680160_FapiRest4_3 .Clusters.VolumesInformation(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVirtual_machinesInfoBy_uids clusterIdVirtual_machinesInfoBy_uids(String clusterid) {
            return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVirtual_machinesInfoBy_uids(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid);
        }

        public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVirtual_machinesStateBy_uids clusterIdVirtual_machinesStateBy_uids(String clusterid) {
            return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVirtual_machinesStateBy_uids(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid);
        }

        public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVirtual_infrastructuresState clusterIdVirtual_infrastructuresState(String clusterid) {
            return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVirtual_infrastructuresState(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid);
        }

        public IP1921680160_FapiRest4_3 .Clusters.Supported_array_management_provider_and_array_types supported_array_management_provider_and_array_types() {
            return new IP1921680160_FapiRest4_3 .Clusters.Supported_array_management_provider_and_array_types(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .Clusters.ClusterIdSupported_array_management_provider_and_array_types clusterIdSupported_array_management_provider_and_array_types(String clusterid) {
            return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdSupported_array_management_provider_and_array_types(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid);
        }

        public IP1921680160_FapiRest4_3 .Clusters.Array_management_providersState array_management_providersState() {
            return new IP1921680160_FapiRest4_3 .Clusters.Array_management_providersState(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .Clusters.ClusterIdAuto_registration_information clusterIdAuto_registration_information(String clusterid) {
            return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdAuto_registration_information(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid);
        }

        public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVirtual_infra_configuration clusterIdVirtual_infra_configuration(String clusterid) {
            return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVirtual_infra_configuration(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid);
        }

        public IP1921680160_FapiRest4_3 .Clusters.ClusterIdReplication_candidate_clusters clusterIdReplication_candidate_clusters(String clusterid) {
            return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdReplication_candidate_clusters(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid);
        }

        public IP1921680160_FapiRest4_3 .Clusters.ClusterIdArray_management_providers clusterIdArray_management_providers(String clusterid) {
            return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdArray_management_providers(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid);
        }

        public IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplitters clusterIdSplitters(String clusterid) {
            return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplitters(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid);
        }

        public IP1921680160_FapiRest4_3 .Clusters.ClusterIdArrays clusterIdArrays(String clusterid) {
            return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdArrays(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid);
        }

        public IP1921680160_FapiRest4_3 .Clusters.ClusterIdExternal_hosts clusterIdExternal_hosts(String clusterid) {
            return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdExternal_hosts(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid);
        }

        public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVcenter_servers clusterIdVcenter_servers(String clusterid) {
            return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVcenter_servers(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid);
        }

        public static class Array_management_providersState {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Array_management_providersState(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Array_management_providersState(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("array_management_providers/state");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class ClusterIdAcquire_management_ip {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private ClusterIdAcquire_management_ip(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public ClusterIdAcquire_management_ip(Client client, URI baseUri, String clusterid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{clusterId}/acquire_management_ip");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public ClusterIdAcquire_management_ip(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/clusters/{clusterId}/acquire_management_ip");
                } else {
                    template.append("clusters/{clusterId}/acquire_management_ip");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdAcquire_management_ip setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdAcquire_management_ip(_client, copyUriBuilder, copyMap);
            }

            public<T >T putAs(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putAs(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class ClusterIdArrays {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private ClusterIdArrays(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public ClusterIdArrays(Client client, URI baseUri, String clusterid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{clusterId}/arrays");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public ClusterIdArrays(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/clusters/{clusterId}/arrays");
                } else {
                    template.append("clusters/{clusterId}/arrays");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdArrays setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdArrays(_client, copyUriBuilder, copyMap);
            }

            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdArrays.ArrayIdResource_poolsAvailable arrayIdResource_poolsAvailable(String arrayid) {
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdArrays.ArrayIdResource_poolsAvailable(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), arrayid);
            }

            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdArrays.SymmetrixArrayIdGate_keepers_info symmetrixArrayIdGate_keepers_info(String arrayid) {
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdArrays.SymmetrixArrayIdGate_keepers_info(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), arrayid);
            }

            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdArrays.SymmetrixHost_ids symmetrixHost_ids() {
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdArrays.SymmetrixHost_ids(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            }

            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdArrays.ArraySerialIr_throttling_policy arraySerialIr_throttling_policy(String arrayserial) {
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdArrays.ArraySerialIr_throttling_policy(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), arrayserial);
            }

            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdArrays.ArrayIdState arrayIdState(String arrayid) {
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdArrays.ArrayIdState(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), arrayid);
            }

            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdArrays.Certificate_information certificate_information() {
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdArrays.Certificate_information(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            }

            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdArrays.ArrayId arrayId(String arrayid) {
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdArrays.ArrayId(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), arrayid);
            }

            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdArrays.Check_connectivity check_connectivity() {
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdArrays.Check_connectivity(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            }

            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdArrays.ArrayIdName arrayIdName(String arrayid) {
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdArrays.ArrayIdName(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), arrayid);
            }

            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdArrays.ArrayIdSettings arrayIdSettings(String arrayid) {
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdArrays.ArrayIdSettings(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), arrayid);
            }

            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdArrays.Vplex_certificate_information vplex_certificate_information() {
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdArrays.Vplex_certificate_information(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            }

            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdArrays.Capabilities capabilities() {
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdArrays.Capabilities(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            }

            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdArrays.ArrayIdCapabilities arrayIdCapabilities(String arrayid) {
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdArrays.ArrayIdCapabilities(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), arrayid);
            }

            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdArrays.Available available() {
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdArrays.Available(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            }

            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdArrays.Resource_pools resource_pools() {
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdArrays.Resource_pools(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            }

            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdArrays.Resource_poolsDefault resource_poolsDefault() {
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdArrays.Resource_poolsDefault(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            }

            public static class ArrayId {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private ArrayId(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public ArrayId(Client client, URI baseUri, String arrayid) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("{arrayId}");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    _templateAndMatrixParameterValues.put("arrayId", arrayid);
                }

                /**
                 * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
                 * 
                 */
                public ArrayId(Client client, URI uri) {
                    _client = client;
                    StringBuilder template = new StringBuilder(BASE_URI.toString());
                    if (template.charAt((template.length()- 1))!= '/') {
                        template.append("/clusters/{clusterId}/arrays/{arrayId}");
                    } else {
                        template.append("clusters/{clusterId}/arrays/{arrayId}");
                    }
                    _uriBuilder = UriBuilder.fromPath(template.toString());
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    UriTemplate uriTemplate = new UriTemplate(template.toString());
                    HashMap<String, String> parameters = new HashMap<String, String>();
                    uriTemplate.match(uri.toString(), parameters);
                    _templateAndMatrixParameterValues.putAll(parameters);
                }

                /**
                 * Get arrayId
                 * 
                 */
                public String getArrayid() {
                    return ((String) _templateAndMatrixParameterValues.get("arrayId"));
                }

                /**
                 * Duplicate state and set arrayId
                 * 
                 */
                public IP1921680160_FapiRest4_3 .Clusters.ClusterIdArrays.ArrayId setArrayid(String arrayid) {
                    Map<String, Object> copyMap;
                    copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                    UriBuilder copyUriBuilder = _uriBuilder.clone();
                    copyMap.put("arrayId", arrayid);
                    return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdArrays.ArrayId(_client, copyUriBuilder, copyMap);
                }

                public<T >T deleteAs(GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("DELETE").invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T deleteAs(Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("DELETE").invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class ArrayIdCapabilities {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private ArrayIdCapabilities(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public ArrayIdCapabilities(Client client, URI baseUri, String arrayid) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("{arrayId}/capabilities");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    _templateAndMatrixParameterValues.put("arrayId", arrayid);
                }

                /**
                 * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
                 * 
                 */
                public ArrayIdCapabilities(Client client, URI uri) {
                    _client = client;
                    StringBuilder template = new StringBuilder(BASE_URI.toString());
                    if (template.charAt((template.length()- 1))!= '/') {
                        template.append("/clusters/{clusterId}/arrays/{arrayId}/capabilities");
                    } else {
                        template.append("clusters/{clusterId}/arrays/{arrayId}/capabilities");
                    }
                    _uriBuilder = UriBuilder.fromPath(template.toString());
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    UriTemplate uriTemplate = new UriTemplate(template.toString());
                    HashMap<String, String> parameters = new HashMap<String, String>();
                    uriTemplate.match(uri.toString(), parameters);
                    _templateAndMatrixParameterValues.putAll(parameters);
                }

                /**
                 * Get arrayId
                 * 
                 */
                public String getArrayid() {
                    return ((String) _templateAndMatrixParameterValues.get("arrayId"));
                }

                /**
                 * Duplicate state and set arrayId
                 * 
                 */
                public IP1921680160_FapiRest4_3 .Clusters.ClusterIdArrays.ArrayIdCapabilities setArrayid(String arrayid) {
                    Map<String, Object> copyMap;
                    copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                    UriBuilder copyUriBuilder = _uriBuilder.clone();
                    copyMap.put("arrayId", arrayid);
                    return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdArrays.ArrayIdCapabilities(_client, copyUriBuilder, copyMap);
                }

                public<T >T getAsJson(GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T getAsJson(Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class ArrayIdName {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private ArrayIdName(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public ArrayIdName(Client client, URI baseUri, String arrayid) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("{arrayId}/name");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    _templateAndMatrixParameterValues.put("arrayId", arrayid);
                }

                /**
                 * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
                 * 
                 */
                public ArrayIdName(Client client, URI uri) {
                    _client = client;
                    StringBuilder template = new StringBuilder(BASE_URI.toString());
                    if (template.charAt((template.length()- 1))!= '/') {
                        template.append("/clusters/{clusterId}/arrays/{arrayId}/name");
                    } else {
                        template.append("clusters/{clusterId}/arrays/{arrayId}/name");
                    }
                    _uriBuilder = UriBuilder.fromPath(template.toString());
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    UriTemplate uriTemplate = new UriTemplate(template.toString());
                    HashMap<String, String> parameters = new HashMap<String, String>();
                    uriTemplate.match(uri.toString(), parameters);
                    _templateAndMatrixParameterValues.putAll(parameters);
                }

                /**
                 * Get arrayId
                 * 
                 */
                public String getArrayid() {
                    return ((String) _templateAndMatrixParameterValues.get("arrayId"));
                }

                /**
                 * Duplicate state and set arrayId
                 * 
                 */
                public IP1921680160_FapiRest4_3 .Clusters.ClusterIdArrays.ArrayIdName setArrayid(String arrayid) {
                    Map<String, Object> copyMap;
                    copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                    UriBuilder copyUriBuilder = _uriBuilder.clone();
                    copyMap.put("arrayId", arrayid);
                    return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdArrays.ArrayIdName(_client, copyUriBuilder, copyMap);
                }

                public<T >T getAsJson(GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T getAsJson(Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class ArrayIdResource_poolsAvailable {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private ArrayIdResource_poolsAvailable(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public ArrayIdResource_poolsAvailable(Client client, URI baseUri, String arrayid) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("{arrayId}/resource_pools/available");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    _templateAndMatrixParameterValues.put("arrayId", arrayid);
                }

                /**
                 * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
                 * 
                 */
                public ArrayIdResource_poolsAvailable(Client client, URI uri) {
                    _client = client;
                    StringBuilder template = new StringBuilder(BASE_URI.toString());
                    if (template.charAt((template.length()- 1))!= '/') {
                        template.append("/clusters/{clusterId}/arrays/{arrayId}/resource_pools/available");
                    } else {
                        template.append("clusters/{clusterId}/arrays/{arrayId}/resource_pools/available");
                    }
                    _uriBuilder = UriBuilder.fromPath(template.toString());
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    UriTemplate uriTemplate = new UriTemplate(template.toString());
                    HashMap<String, String> parameters = new HashMap<String, String>();
                    uriTemplate.match(uri.toString(), parameters);
                    _templateAndMatrixParameterValues.putAll(parameters);
                }

                /**
                 * Get arrayId
                 * 
                 */
                public String getArrayid() {
                    return ((String) _templateAndMatrixParameterValues.get("arrayId"));
                }

                /**
                 * Duplicate state and set arrayId
                 * 
                 */
                public IP1921680160_FapiRest4_3 .Clusters.ClusterIdArrays.ArrayIdResource_poolsAvailable setArrayid(String arrayid) {
                    Map<String, Object> copyMap;
                    copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                    UriBuilder copyUriBuilder = _uriBuilder.clone();
                    copyMap.put("arrayId", arrayid);
                    return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdArrays.ArrayIdResource_poolsAvailable(_client, copyUriBuilder, copyMap);
                }

                public<T >T getAsJson(GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T getAsJson(Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

                public<T >T getAsJson(String useCache, String filterManaged, GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    if (useCache == null) {
                    }
                    if (useCache!= null) {
                        localUriBuilder = localUriBuilder.replaceQueryParam("use_cache", useCache);
                    } else {
                        localUriBuilder = localUriBuilder.replaceQueryParam("use_cache", ((Object[]) null));
                    }
                    if (filterManaged == null) {
                    }
                    if (filterManaged!= null) {
                        localUriBuilder = localUriBuilder.replaceQueryParam("filter_managed", filterManaged);
                    } else {
                        localUriBuilder = localUriBuilder.replaceQueryParam("filter_managed", ((Object[]) null));
                    }
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T getAsJson(String useCache, String filterManaged, Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    if (useCache == null) {
                    }
                    if (useCache!= null) {
                        localUriBuilder = localUriBuilder.replaceQueryParam("use_cache", useCache);
                    } else {
                        localUriBuilder = localUriBuilder.replaceQueryParam("use_cache", ((Object[]) null));
                    }
                    if (filterManaged == null) {
                    }
                    if (filterManaged!= null) {
                        localUriBuilder = localUriBuilder.replaceQueryParam("filter_managed", filterManaged);
                    } else {
                        localUriBuilder = localUriBuilder.replaceQueryParam("filter_managed", ((Object[]) null));
                    }
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class ArrayIdSettings {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private ArrayIdSettings(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public ArrayIdSettings(Client client, URI baseUri, String arrayid) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("{arrayId}/settings");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    _templateAndMatrixParameterValues.put("arrayId", arrayid);
                }

                /**
                 * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
                 * 
                 */
                public ArrayIdSettings(Client client, URI uri) {
                    _client = client;
                    StringBuilder template = new StringBuilder(BASE_URI.toString());
                    if (template.charAt((template.length()- 1))!= '/') {
                        template.append("/clusters/{clusterId}/arrays/{arrayId}/settings");
                    } else {
                        template.append("clusters/{clusterId}/arrays/{arrayId}/settings");
                    }
                    _uriBuilder = UriBuilder.fromPath(template.toString());
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    UriTemplate uriTemplate = new UriTemplate(template.toString());
                    HashMap<String, String> parameters = new HashMap<String, String>();
                    uriTemplate.match(uri.toString(), parameters);
                    _templateAndMatrixParameterValues.putAll(parameters);
                }

                /**
                 * Get arrayId
                 * 
                 */
                public String getArrayid() {
                    return ((String) _templateAndMatrixParameterValues.get("arrayId"));
                }

                /**
                 * Duplicate state and set arrayId
                 * 
                 */
                public IP1921680160_FapiRest4_3 .Clusters.ClusterIdArrays.ArrayIdSettings setArrayid(String arrayid) {
                    Map<String, Object> copyMap;
                    copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                    UriBuilder copyUriBuilder = _uriBuilder.clone();
                    copyMap.put("arrayId", arrayid);
                    return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdArrays.ArrayIdSettings(_client, copyUriBuilder, copyMap);
                }

                public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T putJsonAs(Object input, Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class ArrayIdState {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private ArrayIdState(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public ArrayIdState(Client client, URI baseUri, String arrayid) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("{arrayId}/state");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    _templateAndMatrixParameterValues.put("arrayId", arrayid);
                }

                /**
                 * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
                 * 
                 */
                public ArrayIdState(Client client, URI uri) {
                    _client = client;
                    StringBuilder template = new StringBuilder(BASE_URI.toString());
                    if (template.charAt((template.length()- 1))!= '/') {
                        template.append("/clusters/{clusterId}/arrays/{arrayId}/state");
                    } else {
                        template.append("clusters/{clusterId}/arrays/{arrayId}/state");
                    }
                    _uriBuilder = UriBuilder.fromPath(template.toString());
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    UriTemplate uriTemplate = new UriTemplate(template.toString());
                    HashMap<String, String> parameters = new HashMap<String, String>();
                    uriTemplate.match(uri.toString(), parameters);
                    _templateAndMatrixParameterValues.putAll(parameters);
                }

                /**
                 * Get arrayId
                 * 
                 */
                public String getArrayid() {
                    return ((String) _templateAndMatrixParameterValues.get("arrayId"));
                }

                /**
                 * Duplicate state and set arrayId
                 * 
                 */
                public IP1921680160_FapiRest4_3 .Clusters.ClusterIdArrays.ArrayIdState setArrayid(String arrayid) {
                    Map<String, Object> copyMap;
                    copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                    UriBuilder copyUriBuilder = _uriBuilder.clone();
                    copyMap.put("arrayId", arrayid);
                    return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdArrays.ArrayIdState(_client, copyUriBuilder, copyMap);
                }

                public<T >T getAsJson(GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T getAsJson(Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class ArraySerialIr_throttling_policy {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private ArraySerialIr_throttling_policy(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public ArraySerialIr_throttling_policy(Client client, URI baseUri, String arrayserial) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("{arraySerial}/ir_throttling_policy");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    _templateAndMatrixParameterValues.put("arraySerial", arrayserial);
                }

                /**
                 * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
                 * 
                 */
                public ArraySerialIr_throttling_policy(Client client, URI uri) {
                    _client = client;
                    StringBuilder template = new StringBuilder(BASE_URI.toString());
                    if (template.charAt((template.length()- 1))!= '/') {
                        template.append("/clusters/{clusterId}/arrays/{arraySerial}/ir_throttling_policy");
                    } else {
                        template.append("clusters/{clusterId}/arrays/{arraySerial}/ir_throttling_policy");
                    }
                    _uriBuilder = UriBuilder.fromPath(template.toString());
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    UriTemplate uriTemplate = new UriTemplate(template.toString());
                    HashMap<String, String> parameters = new HashMap<String, String>();
                    uriTemplate.match(uri.toString(), parameters);
                    _templateAndMatrixParameterValues.putAll(parameters);
                }

                /**
                 * Get arraySerial
                 * 
                 */
                public String getArrayserial() {
                    return ((String) _templateAndMatrixParameterValues.get("arraySerial"));
                }

                /**
                 * Duplicate state and set arraySerial
                 * 
                 */
                public IP1921680160_FapiRest4_3 .Clusters.ClusterIdArrays.ArraySerialIr_throttling_policy setArrayserial(String arrayserial) {
                    Map<String, Object> copyMap;
                    copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                    UriBuilder copyUriBuilder = _uriBuilder.clone();
                    copyMap.put("arraySerial", arrayserial);
                    return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdArrays.ArraySerialIr_throttling_policy(_client, copyUriBuilder, copyMap);
                }

                public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T putJsonAs(Object input, Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

                public<T >T getAsJson(GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T getAsJson(Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class Available {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private Available(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public Available(Client client, URI baseUri) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("available");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                }

                public<T >T getAsJson(GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T getAsJson(Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class Capabilities {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private Capabilities(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public Capabilities(Client client, URI baseUri) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("capabilities");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                }

                public<T >T postJson(Object input, GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T postJson(Object input, Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class Certificate_information {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private Certificate_information(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public Certificate_information(Client client, URI baseUri) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("certificate_information");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                }

                public<T >T postJson(Object input, GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T postJson(Object input, Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class Check_connectivity {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private Check_connectivity(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public Check_connectivity(Client client, URI baseUri) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("check_connectivity");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                }

                public<T >T postJson(Object input, GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T postJson(Object input, Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class Resource_pools {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private Resource_pools(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public Resource_pools(Client client, URI baseUri) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("resource_pools");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                }

                public<T >T postJsonAs(Object input, GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T postJsonAs(Object input, Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

                public<T >T deleteJsonAs(Object input, GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("DELETE", Entity.entity(input, "application/json")).invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T deleteJsonAs(Object input, Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("DELETE", Entity.entity(input, "application/json")).invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class Resource_poolsDefault {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private Resource_poolsDefault(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public Resource_poolsDefault(Client client, URI baseUri) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("resource_pools/default");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                }

                public<T >T postJson(Object input, GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T postJson(Object input, Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class SymmetrixArrayIdGate_keepers_info {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private SymmetrixArrayIdGate_keepers_info(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public SymmetrixArrayIdGate_keepers_info(Client client, URI baseUri, String arrayid) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("symmetrix/{arrayId}/gate_keepers_info");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    _templateAndMatrixParameterValues.put("arrayId", arrayid);
                }

                /**
                 * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
                 * 
                 */
                public SymmetrixArrayIdGate_keepers_info(Client client, URI uri) {
                    _client = client;
                    StringBuilder template = new StringBuilder(BASE_URI.toString());
                    if (template.charAt((template.length()- 1))!= '/') {
                        template.append("/clusters/{clusterId}/arrays/symmetrix/{arrayId}/gate_keepers_info");
                    } else {
                        template.append("clusters/{clusterId}/arrays/symmetrix/{arrayId}/gate_keepers_info");
                    }
                    _uriBuilder = UriBuilder.fromPath(template.toString());
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    UriTemplate uriTemplate = new UriTemplate(template.toString());
                    HashMap<String, String> parameters = new HashMap<String, String>();
                    uriTemplate.match(uri.toString(), parameters);
                    _templateAndMatrixParameterValues.putAll(parameters);
                }

                /**
                 * Get arrayId
                 * 
                 */
                public String getArrayid() {
                    return ((String) _templateAndMatrixParameterValues.get("arrayId"));
                }

                /**
                 * Duplicate state and set arrayId
                 * 
                 */
                public IP1921680160_FapiRest4_3 .Clusters.ClusterIdArrays.SymmetrixArrayIdGate_keepers_info setArrayid(String arrayid) {
                    Map<String, Object> copyMap;
                    copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                    UriBuilder copyUriBuilder = _uriBuilder.clone();
                    copyMap.put("arrayId", arrayid);
                    return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdArrays.SymmetrixArrayIdGate_keepers_info(_client, copyUriBuilder, copyMap);
                }

                public<T >T getAsJson(GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T getAsJson(Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class SymmetrixHost_ids {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private SymmetrixHost_ids(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public SymmetrixHost_ids(Client client, URI baseUri) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("symmetrix/host_ids");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                }

                public<T >T getAsJson(GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T getAsJson(Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class Vplex_certificate_information {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private Vplex_certificate_information(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public Vplex_certificate_information(Client client, URI baseUri) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("vplex_certificate_information");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                }

                public<T >T postJson(Object input, GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T postJson(Object input, Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

        }

        public static class ClusterIdArraysSymmetrixAvailable {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private ClusterIdArraysSymmetrixAvailable(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public ClusterIdArraysSymmetrixAvailable(Client client, URI baseUri, String clusterid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{clusterId}/arrays/symmetrix/available");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public ClusterIdArraysSymmetrixAvailable(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/clusters/{clusterId}/arrays/symmetrix/available");
                } else {
                    template.append("clusters/{clusterId}/arrays/symmetrix/available");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdArraysSymmetrixAvailable setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdArraysSymmetrixAvailable(_client, copyUriBuilder, copyMap);
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class ClusterIdArray_management_providers {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private ClusterIdArray_management_providers(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public ClusterIdArray_management_providers(Client client, URI baseUri, String clusterid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{clusterId}/array_management_providers");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public ClusterIdArray_management_providers(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/clusters/{clusterId}/array_management_providers");
                } else {
                    template.append("clusters/{clusterId}/array_management_providers");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdArray_management_providers setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdArray_management_providers(_client, copyUriBuilder, copyMap);
            }

            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdArray_management_providers.ArrayManagementProviderIdSettings arrayManagementProviderIdSettings(String arraymanagementproviderid) {
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdArray_management_providers.ArrayManagementProviderIdSettings(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), arraymanagementproviderid);
            }

            public static class ArrayManagementProviderIdSettings {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private ArrayManagementProviderIdSettings(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public ArrayManagementProviderIdSettings(Client client, URI baseUri, String arraymanagementproviderid) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("{arrayManagementProviderId}/settings");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    _templateAndMatrixParameterValues.put("arrayManagementProviderId", arraymanagementproviderid);
                }

                /**
                 * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
                 * 
                 */
                public ArrayManagementProviderIdSettings(Client client, URI uri) {
                    _client = client;
                    StringBuilder template = new StringBuilder(BASE_URI.toString());
                    if (template.charAt((template.length()- 1))!= '/') {
                        template.append("/clusters/{clusterId}/array_management_providers/{arrayManagementProviderId}/settings");
                    } else {
                        template.append("clusters/{clusterId}/array_management_providers/{arrayManagementProviderId}/settings");
                    }
                    _uriBuilder = UriBuilder.fromPath(template.toString());
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    UriTemplate uriTemplate = new UriTemplate(template.toString());
                    HashMap<String, String> parameters = new HashMap<String, String>();
                    uriTemplate.match(uri.toString(), parameters);
                    _templateAndMatrixParameterValues.putAll(parameters);
                }

                /**
                 * Get arrayManagementProviderId
                 * 
                 */
                public String getArraymanagementproviderid() {
                    return ((String) _templateAndMatrixParameterValues.get("arrayManagementProviderId"));
                }

                /**
                 * Duplicate state and set arrayManagementProviderId
                 * 
                 */
                public IP1921680160_FapiRest4_3 .Clusters.ClusterIdArray_management_providers.ArrayManagementProviderIdSettings setArraymanagementproviderid(String arraymanagementproviderid) {
                    Map<String, Object> copyMap;
                    copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                    UriBuilder copyUriBuilder = _uriBuilder.clone();
                    copyMap.put("arrayManagementProviderId", arraymanagementproviderid);
                    return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdArray_management_providers.ArrayManagementProviderIdSettings(_client, copyUriBuilder, copyMap);
                }

                public<T >T getAsJson(GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T getAsJson(Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

        }

        public static class ClusterIdAuto_registration_information {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private ClusterIdAuto_registration_information(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public ClusterIdAuto_registration_information(Client client, URI baseUri, String clusterid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{clusterId}/auto_registration_information");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public ClusterIdAuto_registration_information(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/clusters/{clusterId}/auto_registration_information");
                } else {
                    template.append("clusters/{clusterId}/auto_registration_information");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdAuto_registration_information setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdAuto_registration_information(_client, copyUriBuilder, copyMap);
            }

            public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class ClusterIdClariion_raid_groups {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private ClusterIdClariion_raid_groups(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public ClusterIdClariion_raid_groups(Client client, URI baseUri, String clusterid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{clusterId}/clariion_raid_groups");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public ClusterIdClariion_raid_groups(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/clusters/{clusterId}/clariion_raid_groups");
                } else {
                    template.append("clusters/{clusterId}/clariion_raid_groups");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdClariion_raid_groups setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdClariion_raid_groups(_client, copyUriBuilder, copyMap);
            }

            public<T >T postJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T postJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class ClusterIdContext {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private ClusterIdContext(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public ClusterIdContext(Client client, URI baseUri, String clusterid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{clusterId}/context");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public ClusterIdContext(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/clusters/{clusterId}/context");
                } else {
                    template.append("clusters/{clusterId}/context");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdContext setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdContext(_client, copyUriBuilder, copyMap);
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class ClusterIdExternal_hosts {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private ClusterIdExternal_hosts(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public ClusterIdExternal_hosts(Client client, URI baseUri, String clusterid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{clusterId}/external_hosts");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public ClusterIdExternal_hosts(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/clusters/{clusterId}/external_hosts");
                } else {
                    template.append("clusters/{clusterId}/external_hosts");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdExternal_hosts setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdExternal_hosts(_client, copyUriBuilder, copyMap);
            }

            public<T >T postJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T postJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdExternal_hosts.Check_connectivity check_connectivity() {
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdExternal_hosts.Check_connectivity(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            }

            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdExternal_hosts.HostIdCheck_connectivity hostIdCheck_connectivity(String hostid) {
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdExternal_hosts.HostIdCheck_connectivity(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), hostid);
            }

            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdExternal_hosts.HostIdSettings hostIdSettings(String hostid) {
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdExternal_hosts.HostIdSettings(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), hostid);
            }

            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdExternal_hosts.HostId hostId(String hostid) {
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdExternal_hosts.HostId(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), hostid);
            }

            public static class Check_connectivity {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private Check_connectivity(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public Check_connectivity(Client client, URI baseUri) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("check_connectivity");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                }

                public<T >T postJson(Object input, GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T postJson(Object input, Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class HostId {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private HostId(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public HostId(Client client, URI baseUri, String hostid) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("{hostId}");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    _templateAndMatrixParameterValues.put("hostId", hostid);
                }

                /**
                 * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
                 * 
                 */
                public HostId(Client client, URI uri) {
                    _client = client;
                    StringBuilder template = new StringBuilder(BASE_URI.toString());
                    if (template.charAt((template.length()- 1))!= '/') {
                        template.append("/clusters/{clusterId}/external_hosts/{hostId}");
                    } else {
                        template.append("clusters/{clusterId}/external_hosts/{hostId}");
                    }
                    _uriBuilder = UriBuilder.fromPath(template.toString());
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    UriTemplate uriTemplate = new UriTemplate(template.toString());
                    HashMap<String, String> parameters = new HashMap<String, String>();
                    uriTemplate.match(uri.toString(), parameters);
                    _templateAndMatrixParameterValues.putAll(parameters);
                }

                /**
                 * Get hostId
                 * 
                 */
                public String getHostid() {
                    return ((String) _templateAndMatrixParameterValues.get("hostId"));
                }

                /**
                 * Duplicate state and set hostId
                 * 
                 */
                public IP1921680160_FapiRest4_3 .Clusters.ClusterIdExternal_hosts.HostId setHostid(String hostid) {
                    Map<String, Object> copyMap;
                    copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                    UriBuilder copyUriBuilder = _uriBuilder.clone();
                    copyMap.put("hostId", hostid);
                    return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdExternal_hosts.HostId(_client, copyUriBuilder, copyMap);
                }

                public<T >T deleteAs(GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("DELETE").invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T deleteAs(Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("DELETE").invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class HostIdCheck_connectivity {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private HostIdCheck_connectivity(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public HostIdCheck_connectivity(Client client, URI baseUri, String hostid) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("{hostId}/check_connectivity");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    _templateAndMatrixParameterValues.put("hostId", hostid);
                }

                /**
                 * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
                 * 
                 */
                public HostIdCheck_connectivity(Client client, URI uri) {
                    _client = client;
                    StringBuilder template = new StringBuilder(BASE_URI.toString());
                    if (template.charAt((template.length()- 1))!= '/') {
                        template.append("/clusters/{clusterId}/external_hosts/{hostId}/check_connectivity");
                    } else {
                        template.append("clusters/{clusterId}/external_hosts/{hostId}/check_connectivity");
                    }
                    _uriBuilder = UriBuilder.fromPath(template.toString());
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    UriTemplate uriTemplate = new UriTemplate(template.toString());
                    HashMap<String, String> parameters = new HashMap<String, String>();
                    uriTemplate.match(uri.toString(), parameters);
                    _templateAndMatrixParameterValues.putAll(parameters);
                }

                /**
                 * Get hostId
                 * 
                 */
                public String getHostid() {
                    return ((String) _templateAndMatrixParameterValues.get("hostId"));
                }

                /**
                 * Duplicate state and set hostId
                 * 
                 */
                public IP1921680160_FapiRest4_3 .Clusters.ClusterIdExternal_hosts.HostIdCheck_connectivity setHostid(String hostid) {
                    Map<String, Object> copyMap;
                    copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                    UriBuilder copyUriBuilder = _uriBuilder.clone();
                    copyMap.put("hostId", hostid);
                    return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdExternal_hosts.HostIdCheck_connectivity(_client, copyUriBuilder, copyMap);
                }

                public<T >T postAsJson(GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("POST").invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T postAsJson(Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("POST").invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class HostIdSettings {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private HostIdSettings(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public HostIdSettings(Client client, URI baseUri, String hostid) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("{hostId}/settings");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    _templateAndMatrixParameterValues.put("hostId", hostid);
                }

                /**
                 * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
                 * 
                 */
                public HostIdSettings(Client client, URI uri) {
                    _client = client;
                    StringBuilder template = new StringBuilder(BASE_URI.toString());
                    if (template.charAt((template.length()- 1))!= '/') {
                        template.append("/clusters/{clusterId}/external_hosts/{hostId}/settings");
                    } else {
                        template.append("clusters/{clusterId}/external_hosts/{hostId}/settings");
                    }
                    _uriBuilder = UriBuilder.fromPath(template.toString());
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    UriTemplate uriTemplate = new UriTemplate(template.toString());
                    HashMap<String, String> parameters = new HashMap<String, String>();
                    uriTemplate.match(uri.toString(), parameters);
                    _templateAndMatrixParameterValues.putAll(parameters);
                }

                /**
                 * Get hostId
                 * 
                 */
                public String getHostid() {
                    return ((String) _templateAndMatrixParameterValues.get("hostId"));
                }

                /**
                 * Duplicate state and set hostId
                 * 
                 */
                public IP1921680160_FapiRest4_3 .Clusters.ClusterIdExternal_hosts.HostIdSettings setHostid(String hostid) {
                    Map<String, Object> copyMap;
                    copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                    UriBuilder copyUriBuilder = _uriBuilder.clone();
                    copyMap.put("hostId", hostid);
                    return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdExternal_hosts.HostIdSettings(_client, copyUriBuilder, copyMap);
                }

                public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T putJsonAs(Object input, Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

        }

        public static class ClusterIdIr_throttling_policy {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private ClusterIdIr_throttling_policy(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public ClusterIdIr_throttling_policy(Client client, URI baseUri, String clusterid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{clusterId}/ir_throttling_policy");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public ClusterIdIr_throttling_policy(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/clusters/{clusterId}/ir_throttling_policy");
                } else {
                    template.append("clusters/{clusterId}/ir_throttling_policy");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdIr_throttling_policy setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdIr_throttling_policy(_client, copyUriBuilder, copyMap);
            }

            public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class ClusterIdMaintenance {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private ClusterIdMaintenance(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public ClusterIdMaintenance(Client client, URI baseUri, String clusterid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{clusterId}/maintenance");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public ClusterIdMaintenance(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/clusters/{clusterId}/maintenance");
                } else {
                    template.append("clusters/{clusterId}/maintenance");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdMaintenance setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdMaintenance(_client, copyUriBuilder, copyMap);
            }

            public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class ClusterIdMaintenanceFinish {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private ClusterIdMaintenanceFinish(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public ClusterIdMaintenanceFinish(Client client, URI baseUri, String clusterid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{clusterId}/maintenance/finish");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public ClusterIdMaintenanceFinish(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/clusters/{clusterId}/maintenance/finish");
                } else {
                    template.append("clusters/{clusterId}/maintenance/finish");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdMaintenanceFinish setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdMaintenanceFinish(_client, copyUriBuilder, copyMap);
            }

            public<T >T putAs(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putAs(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class ClusterIdName {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private ClusterIdName(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public ClusterIdName(Client client, URI baseUri, String clusterid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{clusterId}/name");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public ClusterIdName(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/clusters/{clusterId}/name");
                } else {
                    template.append("clusters/{clusterId}/name");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdName setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdName(_client, copyUriBuilder, copyMap);
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class ClusterIdPhoenix_clusters {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private ClusterIdPhoenix_clusters(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public ClusterIdPhoenix_clusters(Client client, URI baseUri, String clusterid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{clusterId}/phoenix_clusters");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public ClusterIdPhoenix_clusters(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/clusters/{clusterId}/phoenix_clusters");
                } else {
                    template.append("clusters/{clusterId}/phoenix_clusters");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdPhoenix_clusters setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdPhoenix_clusters(_client, copyUriBuilder, copyMap);
            }

            public<T >T postJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T postJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

            public<T >T deleteAs(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("DELETE").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T deleteAs(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("DELETE").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class ClusterIdPhoenix_clustersAvailable {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private ClusterIdPhoenix_clustersAvailable(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public ClusterIdPhoenix_clustersAvailable(Client client, URI baseUri, String clusterid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{clusterId}/phoenix_clusters/available");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public ClusterIdPhoenix_clustersAvailable(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/clusters/{clusterId}/phoenix_clusters/available");
                } else {
                    template.append("clusters/{clusterId}/phoenix_clusters/available");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdPhoenix_clustersAvailable setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdPhoenix_clustersAvailable(_client, copyUriBuilder, copyMap);
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class ClusterIdRelease_management_ip {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private ClusterIdRelease_management_ip(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public ClusterIdRelease_management_ip(Client client, URI baseUri, String clusterid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{clusterId}/release_management_ip");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public ClusterIdRelease_management_ip(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/clusters/{clusterId}/release_management_ip");
                } else {
                    template.append("clusters/{clusterId}/release_management_ip");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdRelease_management_ip setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdRelease_management_ip(_client, copyUriBuilder, copyMap);
            }

            public<T >T putAs(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putAs(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class ClusterIdReplication_candidate_clusters {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private ClusterIdReplication_candidate_clusters(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public ClusterIdReplication_candidate_clusters(Client client, URI baseUri, String clusterid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{clusterId}/replication_candidate_clusters");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public ClusterIdReplication_candidate_clusters(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/clusters/{clusterId}/replication_candidate_clusters");
                } else {
                    template.append("clusters/{clusterId}/replication_candidate_clusters");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdReplication_candidate_clusters setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdReplication_candidate_clusters(_client, copyUriBuilder, copyMap);
            }

            public<T >T postJson(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T postJson(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class ClusterIdRepository_volumeState {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private ClusterIdRepository_volumeState(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public ClusterIdRepository_volumeState(Client client, URI baseUri, String clusterid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{clusterId}/repository_volume/state");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public ClusterIdRepository_volumeState(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/clusters/{clusterId}/repository_volume/state");
                } else {
                    template.append("clusters/{clusterId}/repository_volume/state");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdRepository_volumeState setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdRepository_volumeState(_client, copyUriBuilder, copyMap);
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class ClusterIdRescan {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private ClusterIdRescan(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public ClusterIdRescan(Client client, URI baseUri, String clusterid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{clusterId}/rescan");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public ClusterIdRescan(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/clusters/{clusterId}/rescan");
                } else {
                    template.append("clusters/{clusterId}/rescan");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdRescan setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdRescan(_client, copyUriBuilder, copyMap);
            }

            public<T >T putAs(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putAs(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

            public<T >T putAs(String checkexistingvolumesaswell, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                if (checkexistingvolumesaswell == null) {
                }
                if (checkexistingvolumesaswell!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("checkExistingVolumesAsWell", checkexistingvolumesaswell);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("checkExistingVolumesAsWell", ((Object[]) null));
                }
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putAs(String checkexistingvolumesaswell, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                if (checkexistingvolumesaswell == null) {
                }
                if (checkexistingvolumesaswell!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("checkExistingVolumesAsWell", checkexistingvolumesaswell);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("checkExistingVolumesAsWell", ((Object[]) null));
                }
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class ClusterIdRpasRpaIdState {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private ClusterIdRpasRpaIdState(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public ClusterIdRpasRpaIdState(Client client, URI baseUri, String clusterid, String rpaid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{clusterId}/rpas/{rpaId}/state");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
                _templateAndMatrixParameterValues.put("rpaId", rpaid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public ClusterIdRpasRpaIdState(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/clusters/{clusterId}/rpas/{rpaId}/state");
                } else {
                    template.append("clusters/{clusterId}/rpas/{rpaId}/state");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdRpasRpaIdState setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdRpasRpaIdState(_client, copyUriBuilder, copyMap);
            }

            /**
             * Get rpaId
             * 
             */
            public String getRpaid() {
                return ((String) _templateAndMatrixParameterValues.get("rpaId"));
            }

            /**
             * Duplicate state and set rpaId
             * 
             */
            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdRpasRpaIdState setRpaid(String rpaid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("rpaId", rpaid);
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdRpasRpaIdState(_client, copyUriBuilder, copyMap);
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class ClusterIdRpasRpaIDStatistics {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private ClusterIdRpasRpaIDStatistics(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public ClusterIdRpasRpaIDStatistics(Client client, URI baseUri, String clusterid, String rpaid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{clusterId}/rpas/{rpaID}/statistics");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
                _templateAndMatrixParameterValues.put("rpaID", rpaid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public ClusterIdRpasRpaIDStatistics(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/clusters/{clusterId}/rpas/{rpaID}/statistics");
                } else {
                    template.append("clusters/{clusterId}/rpas/{rpaID}/statistics");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdRpasRpaIDStatistics setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdRpasRpaIDStatistics(_client, copyUriBuilder, copyMap);
            }

            /**
             * Get rpaID
             * 
             */
            public String getRpaid() {
                return ((String) _templateAndMatrixParameterValues.get("rpaID"));
            }

            /**
             * Duplicate state and set rpaID
             * 
             */
            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdRpasRpaIDStatistics setRpaid(String rpaid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("rpaID", rpaid);
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdRpasRpaIDStatistics(_client, copyUriBuilder, copyMap);
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class ClusterIdRpasRpaNumMaintenanceFinish {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private ClusterIdRpasRpaNumMaintenanceFinish(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public ClusterIdRpasRpaNumMaintenanceFinish(Client client, URI baseUri, String clusterid, String rpanum) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{clusterId}/rpas/{rpaNum}/maintenance/finish");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
                _templateAndMatrixParameterValues.put("rpaNum", rpanum);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public ClusterIdRpasRpaNumMaintenanceFinish(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/clusters/{clusterId}/rpas/{rpaNum}/maintenance/finish");
                } else {
                    template.append("clusters/{clusterId}/rpas/{rpaNum}/maintenance/finish");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdRpasRpaNumMaintenanceFinish setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdRpasRpaNumMaintenanceFinish(_client, copyUriBuilder, copyMap);
            }

            /**
             * Get rpaNum
             * 
             */
            public String getRpanum() {
                return ((String) _templateAndMatrixParameterValues.get("rpaNum"));
            }

            /**
             * Duplicate state and set rpaNum
             * 
             */
            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdRpasRpaNumMaintenanceFinish setRpanum(String rpanum) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("rpaNum", rpanum);
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdRpasRpaNumMaintenanceFinish(_client, copyUriBuilder, copyMap);
            }

            public<T >T putAs(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putAs(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class ClusterIdRpasRpaNumMaintenanceStart {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private ClusterIdRpasRpaNumMaintenanceStart(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public ClusterIdRpasRpaNumMaintenanceStart(Client client, URI baseUri, String clusterid, String rpanum) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{clusterId}/rpas/{rpaNum}/maintenance/start");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
                _templateAndMatrixParameterValues.put("rpaNum", rpanum);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public ClusterIdRpasRpaNumMaintenanceStart(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/clusters/{clusterId}/rpas/{rpaNum}/maintenance/start");
                } else {
                    template.append("clusters/{clusterId}/rpas/{rpaNum}/maintenance/start");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdRpasRpaNumMaintenanceStart setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdRpasRpaNumMaintenanceStart(_client, copyUriBuilder, copyMap);
            }

            /**
             * Get rpaNum
             * 
             */
            public String getRpanum() {
                return ((String) _templateAndMatrixParameterValues.get("rpaNum"));
            }

            /**
             * Duplicate state and set rpaNum
             * 
             */
            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdRpasRpaNumMaintenanceStart setRpanum(String rpanum) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("rpaNum", rpanum);
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdRpasRpaNumMaintenanceStart(_client, copyUriBuilder, copyMap);
            }

            public<T >T putAs(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putAs(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class ClusterIdRpasRpaNumStateVerify {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private ClusterIdRpasRpaNumStateVerify(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public ClusterIdRpasRpaNumStateVerify(Client client, URI baseUri, String clusterid, String rpanum) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{clusterId}/rpas/{rpaNum}/state/verify");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
                _templateAndMatrixParameterValues.put("rpaNum", rpanum);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public ClusterIdRpasRpaNumStateVerify(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/clusters/{clusterId}/rpas/{rpaNum}/state/verify");
                } else {
                    template.append("clusters/{clusterId}/rpas/{rpaNum}/state/verify");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdRpasRpaNumStateVerify setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdRpasRpaNumStateVerify(_client, copyUriBuilder, copyMap);
            }

            /**
             * Get rpaNum
             * 
             */
            public String getRpanum() {
                return ((String) _templateAndMatrixParameterValues.get("rpaNum"));
            }

            /**
             * Duplicate state and set rpaNum
             * 
             */
            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdRpasRpaNumStateVerify setRpanum(String rpanum) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("rpaNum", rpanum);
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdRpasRpaNumStateVerify(_client, copyUriBuilder, copyMap);
            }

            public<T >T postJson(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T postJson(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

            public<T >T postJson(Object input, String timeoutInSeconds, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                if (timeoutInSeconds == null) {
                }
                if (timeoutInSeconds!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("timeout_in_seconds", timeoutInSeconds);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("timeout_in_seconds", ((Object[]) null));
                }
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T postJson(Object input, String timeoutInSeconds, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                if (timeoutInSeconds == null) {
                }
                if (timeoutInSeconds!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("timeout_in_seconds", timeoutInSeconds);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("timeout_in_seconds", ((Object[]) null));
                }
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class ClusterIdRpasState {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private ClusterIdRpasState(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public ClusterIdRpasState(Client client, URI baseUri, String clusterid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{clusterId}/rpas/state");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public ClusterIdRpasState(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/clusters/{clusterId}/rpas/state");
                } else {
                    template.append("clusters/{clusterId}/rpas/state");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdRpasState setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdRpasState(_client, copyUriBuilder, copyMap);
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class ClusterIdRpasStatistics {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private ClusterIdRpasStatistics(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public ClusterIdRpasStatistics(Client client, URI baseUri, String clusterid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{clusterId}/rpas/statistics");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public ClusterIdRpasStatistics(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/clusters/{clusterId}/rpas/statistics");
                } else {
                    template.append("clusters/{clusterId}/rpas/statistics");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdRpasStatistics setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdRpasStatistics(_client, copyUriBuilder, copyMap);
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class ClusterIdSan_splittersRescan {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private ClusterIdSan_splittersRescan(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public ClusterIdSan_splittersRescan(Client client, URI baseUri, String clusterid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{clusterId}/san_splitters/rescan");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public ClusterIdSan_splittersRescan(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/clusters/{clusterId}/san_splitters/rescan");
                } else {
                    template.append("clusters/{clusterId}/san_splitters/rescan");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdSan_splittersRescan setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdSan_splittersRescan(_client, copyUriBuilder, copyMap);
            }

            public<T >T putAs(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putAs(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class ClusterIdSettings {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private ClusterIdSettings(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public ClusterIdSettings(Client client, URI baseUri, String clusterid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{clusterId}/settings");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public ClusterIdSettings(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/clusters/{clusterId}/settings");
                } else {
                    template.append("clusters/{clusterId}/settings");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdSettings setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdSettings(_client, copyUriBuilder, copyMap);
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class ClusterIdSettingsResolve {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private ClusterIdSettingsResolve(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public ClusterIdSettingsResolve(Client client, URI baseUri, String clusterid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{clusterId}/settings/resolve");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public ClusterIdSettingsResolve(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/clusters/{clusterId}/settings/resolve");
                } else {
                    template.append("clusters/{clusterId}/settings/resolve");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdSettingsResolve setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdSettingsResolve(_client, copyUriBuilder, copyMap);
            }

            public<T >T putAs(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putAs(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class ClusterIdSplitters {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private ClusterIdSplitters(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public ClusterIdSplitters(Client client, URI baseUri, String clusterid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{clusterId}/splitters");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public ClusterIdSplitters(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/clusters/{clusterId}/splitters");
                } else {
                    template.append("clusters/{clusterId}/splitters");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplitters setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplitters(_client, copyUriBuilder, copyMap);
            }

            public<T >T postJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T postJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplitters.Settings settings() {
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplitters.Settings(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            }

            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplitters.Available available() {
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplitters.Available(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            }

            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplitters.SplitterIdName splitterIdName(String splitterid) {
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplitters.SplitterIdName(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), splitterid);
            }

            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplitters.SplitterIdStateVerify splitterIdStateVerify(String splitterid) {
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplitters.SplitterIdStateVerify(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), splitterid);
            }

            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplitters.SplitterIdVolumesAttach_volumes splitterIdVolumesAttach_volumes(String splitterid) {
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplitters.SplitterIdVolumesAttach_volumes(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), splitterid);
            }

            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplitters.SplitterIdVolumes splitterIdVolumes(String splitterid) {
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplitters.SplitterIdVolumes(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), splitterid);
            }

            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplitters.SplitterIdAvailable_volumes splitterIdAvailable_volumes(String splitterid) {
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplitters.SplitterIdAvailable_volumes(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), splitterid);
            }

            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplitters.SplitterIdVolumesAttached splitterIdVolumesAttached(String splitterid) {
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplitters.SplitterIdVolumesAttached(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), splitterid);
            }

            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplitters.San_view san_view() {
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplitters.San_view(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            }

            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplitters.SplitterIdAuto_register_rpas_initiator_policy splitterIdAuto_register_rpas_initiator_policy(String splitterid) {
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplitters.SplitterIdAuto_register_rpas_initiator_policy(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), splitterid);
            }

            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplitters.Volume_connectionsRescan volume_connectionsRescan() {
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplitters.Volume_connectionsRescan(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            }

            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplitters.SplitterIdVolume_connectionsRescan splitterIdVolume_connectionsRescan(String splitterid) {
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplitters.SplitterIdVolume_connectionsRescan(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), splitterid);
            }

            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplitters.SplitterIdVolumesVolumeId splitterIdVolumesVolumeId(String splitterid, String volumeid) {
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplitters.SplitterIdVolumesVolumeId(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), splitterid, volumeid);
            }

            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplitters.SplitterIdSan_view splitterIdSan_view(String splitterid) {
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplitters.SplitterIdSan_view(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), splitterid);
            }

            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplitters.SplitterIdSettings splitterIdSettings(String splitterid) {
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplitters.SplitterIdSettings(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), splitterid);
            }

            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplitters.SplitterIdState splitterIdState(String splitterid) {
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplitters.SplitterIdState(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), splitterid);
            }

            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplitters.SplitterId splitterId(String splitterid) {
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplitters.SplitterId(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), splitterid);
            }

            public static class Available {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private Available(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public Available(Client client, URI baseUri) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("available");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                }

                public<T >T getAsJson(GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T getAsJson(Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class San_view {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private San_view(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public San_view(Client client, URI baseUri) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("san_view");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                }

                public<T >T getAsJson(GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T getAsJson(Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class Settings {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private Settings(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public Settings(Client client, URI baseUri) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("settings");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                }

                public<T >T getAsJson(GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T getAsJson(Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class SplitterId {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private SplitterId(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public SplitterId(Client client, URI baseUri, String splitterid) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("{splitterId}");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    _templateAndMatrixParameterValues.put("splitterId", splitterid);
                }

                /**
                 * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
                 * 
                 */
                public SplitterId(Client client, URI uri) {
                    _client = client;
                    StringBuilder template = new StringBuilder(BASE_URI.toString());
                    if (template.charAt((template.length()- 1))!= '/') {
                        template.append("/clusters/{clusterId}/splitters/{splitterId}");
                    } else {
                        template.append("clusters/{clusterId}/splitters/{splitterId}");
                    }
                    _uriBuilder = UriBuilder.fromPath(template.toString());
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    UriTemplate uriTemplate = new UriTemplate(template.toString());
                    HashMap<String, String> parameters = new HashMap<String, String>();
                    uriTemplate.match(uri.toString(), parameters);
                    _templateAndMatrixParameterValues.putAll(parameters);
                }

                /**
                 * Get splitterId
                 * 
                 */
                public String getSplitterid() {
                    return ((String) _templateAndMatrixParameterValues.get("splitterId"));
                }

                /**
                 * Duplicate state and set splitterId
                 * 
                 */
                public IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplitters.SplitterId setSplitterid(String splitterid) {
                    Map<String, Object> copyMap;
                    copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                    UriBuilder copyUriBuilder = _uriBuilder.clone();
                    copyMap.put("splitterId", splitterid);
                    return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplitters.SplitterId(_client, copyUriBuilder, copyMap);
                }

                public<T >T deleteAs(GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("DELETE").invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T deleteAs(Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("DELETE").invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class SplitterIdAuto_register_rpas_initiator_policy {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private SplitterIdAuto_register_rpas_initiator_policy(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public SplitterIdAuto_register_rpas_initiator_policy(Client client, URI baseUri, String splitterid) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("{splitterId}/auto_register_rpas_initiator_policy");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    _templateAndMatrixParameterValues.put("splitterId", splitterid);
                }

                /**
                 * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
                 * 
                 */
                public SplitterIdAuto_register_rpas_initiator_policy(Client client, URI uri) {
                    _client = client;
                    StringBuilder template = new StringBuilder(BASE_URI.toString());
                    if (template.charAt((template.length()- 1))!= '/') {
                        template.append("/clusters/{clusterId}/splitters/{splitterId}/auto_register_rpas_initiator_policy");
                    } else {
                        template.append("clusters/{clusterId}/splitters/{splitterId}/auto_register_rpas_initiator_policy");
                    }
                    _uriBuilder = UriBuilder.fromPath(template.toString());
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    UriTemplate uriTemplate = new UriTemplate(template.toString());
                    HashMap<String, String> parameters = new HashMap<String, String>();
                    uriTemplate.match(uri.toString(), parameters);
                    _templateAndMatrixParameterValues.putAll(parameters);
                }

                /**
                 * Get splitterId
                 * 
                 */
                public String getSplitterid() {
                    return ((String) _templateAndMatrixParameterValues.get("splitterId"));
                }

                /**
                 * Duplicate state and set splitterId
                 * 
                 */
                public IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplitters.SplitterIdAuto_register_rpas_initiator_policy setSplitterid(String splitterid) {
                    Map<String, Object> copyMap;
                    copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                    UriBuilder copyUriBuilder = _uriBuilder.clone();
                    copyMap.put("splitterId", splitterid);
                    return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplitters.SplitterIdAuto_register_rpas_initiator_policy(_client, copyUriBuilder, copyMap);
                }

                public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T putJsonAs(Object input, Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class SplitterIdAvailable_volumes {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private SplitterIdAvailable_volumes(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public SplitterIdAvailable_volumes(Client client, URI baseUri, String splitterid) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("{splitterId}/available_volumes");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    _templateAndMatrixParameterValues.put("splitterId", splitterid);
                }

                /**
                 * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
                 * 
                 */
                public SplitterIdAvailable_volumes(Client client, URI uri) {
                    _client = client;
                    StringBuilder template = new StringBuilder(BASE_URI.toString());
                    if (template.charAt((template.length()- 1))!= '/') {
                        template.append("/clusters/{clusterId}/splitters/{splitterId}/available_volumes");
                    } else {
                        template.append("clusters/{clusterId}/splitters/{splitterId}/available_volumes");
                    }
                    _uriBuilder = UriBuilder.fromPath(template.toString());
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    UriTemplate uriTemplate = new UriTemplate(template.toString());
                    HashMap<String, String> parameters = new HashMap<String, String>();
                    uriTemplate.match(uri.toString(), parameters);
                    _templateAndMatrixParameterValues.putAll(parameters);
                }

                /**
                 * Get splitterId
                 * 
                 */
                public String getSplitterid() {
                    return ((String) _templateAndMatrixParameterValues.get("splitterId"));
                }

                /**
                 * Duplicate state and set splitterId
                 * 
                 */
                public IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplitters.SplitterIdAvailable_volumes setSplitterid(String splitterid) {
                    Map<String, Object> copyMap;
                    copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                    UriBuilder copyUriBuilder = _uriBuilder.clone();
                    copyMap.put("splitterId", splitterid);
                    return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplitters.SplitterIdAvailable_volumes(_client, copyUriBuilder, copyMap);
                }

                public<T >T getAsJson(GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T getAsJson(Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

                public<T >T getAsJson(String filterunseenvolumes, GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    if (filterunseenvolumes == null) {
                    }
                    if (filterunseenvolumes!= null) {
                        localUriBuilder = localUriBuilder.replaceQueryParam("filterUnseenVolumes", filterunseenvolumes);
                    } else {
                        localUriBuilder = localUriBuilder.replaceQueryParam("filterUnseenVolumes", ((Object[]) null));
                    }
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T getAsJson(String filterunseenvolumes, Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    if (filterunseenvolumes == null) {
                    }
                    if (filterunseenvolumes!= null) {
                        localUriBuilder = localUriBuilder.replaceQueryParam("filterUnseenVolumes", filterunseenvolumes);
                    } else {
                        localUriBuilder = localUriBuilder.replaceQueryParam("filterUnseenVolumes", ((Object[]) null));
                    }
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class SplitterIdName {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private SplitterIdName(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public SplitterIdName(Client client, URI baseUri, String splitterid) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("{splitterId}/name");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    _templateAndMatrixParameterValues.put("splitterId", splitterid);
                }

                /**
                 * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
                 * 
                 */
                public SplitterIdName(Client client, URI uri) {
                    _client = client;
                    StringBuilder template = new StringBuilder(BASE_URI.toString());
                    if (template.charAt((template.length()- 1))!= '/') {
                        template.append("/clusters/{clusterId}/splitters/{splitterId}/name");
                    } else {
                        template.append("clusters/{clusterId}/splitters/{splitterId}/name");
                    }
                    _uriBuilder = UriBuilder.fromPath(template.toString());
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    UriTemplate uriTemplate = new UriTemplate(template.toString());
                    HashMap<String, String> parameters = new HashMap<String, String>();
                    uriTemplate.match(uri.toString(), parameters);
                    _templateAndMatrixParameterValues.putAll(parameters);
                }

                /**
                 * Get splitterId
                 * 
                 */
                public String getSplitterid() {
                    return ((String) _templateAndMatrixParameterValues.get("splitterId"));
                }

                /**
                 * Duplicate state and set splitterId
                 * 
                 */
                public IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplitters.SplitterIdName setSplitterid(String splitterid) {
                    Map<String, Object> copyMap;
                    copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                    UriBuilder copyUriBuilder = _uriBuilder.clone();
                    copyMap.put("splitterId", splitterid);
                    return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplitters.SplitterIdName(_client, copyUriBuilder, copyMap);
                }

                public<T >T getAsJson(GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T getAsJson(Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class SplitterIdSan_view {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private SplitterIdSan_view(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public SplitterIdSan_view(Client client, URI baseUri, String splitterid) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("{splitterId}/san_view");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    _templateAndMatrixParameterValues.put("splitterId", splitterid);
                }

                /**
                 * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
                 * 
                 */
                public SplitterIdSan_view(Client client, URI uri) {
                    _client = client;
                    StringBuilder template = new StringBuilder(BASE_URI.toString());
                    if (template.charAt((template.length()- 1))!= '/') {
                        template.append("/clusters/{clusterId}/splitters/{splitterId}/san_view");
                    } else {
                        template.append("clusters/{clusterId}/splitters/{splitterId}/san_view");
                    }
                    _uriBuilder = UriBuilder.fromPath(template.toString());
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    UriTemplate uriTemplate = new UriTemplate(template.toString());
                    HashMap<String, String> parameters = new HashMap<String, String>();
                    uriTemplate.match(uri.toString(), parameters);
                    _templateAndMatrixParameterValues.putAll(parameters);
                }

                /**
                 * Get splitterId
                 * 
                 */
                public String getSplitterid() {
                    return ((String) _templateAndMatrixParameterValues.get("splitterId"));
                }

                /**
                 * Duplicate state and set splitterId
                 * 
                 */
                public IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplitters.SplitterIdSan_view setSplitterid(String splitterid) {
                    Map<String, Object> copyMap;
                    copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                    UriBuilder copyUriBuilder = _uriBuilder.clone();
                    copyMap.put("splitterId", splitterid);
                    return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplitters.SplitterIdSan_view(_client, copyUriBuilder, copyMap);
                }

                public<T >T getAsJson(GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T getAsJson(Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class SplitterIdSettings {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private SplitterIdSettings(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public SplitterIdSettings(Client client, URI baseUri, String splitterid) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("{splitterId}/settings");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    _templateAndMatrixParameterValues.put("splitterId", splitterid);
                }

                /**
                 * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
                 * 
                 */
                public SplitterIdSettings(Client client, URI uri) {
                    _client = client;
                    StringBuilder template = new StringBuilder(BASE_URI.toString());
                    if (template.charAt((template.length()- 1))!= '/') {
                        template.append("/clusters/{clusterId}/splitters/{splitterId}/settings");
                    } else {
                        template.append("clusters/{clusterId}/splitters/{splitterId}/settings");
                    }
                    _uriBuilder = UriBuilder.fromPath(template.toString());
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    UriTemplate uriTemplate = new UriTemplate(template.toString());
                    HashMap<String, String> parameters = new HashMap<String, String>();
                    uriTemplate.match(uri.toString(), parameters);
                    _templateAndMatrixParameterValues.putAll(parameters);
                }

                /**
                 * Get splitterId
                 * 
                 */
                public String getSplitterid() {
                    return ((String) _templateAndMatrixParameterValues.get("splitterId"));
                }

                /**
                 * Duplicate state and set splitterId
                 * 
                 */
                public IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplitters.SplitterIdSettings setSplitterid(String splitterid) {
                    Map<String, Object> copyMap;
                    copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                    UriBuilder copyUriBuilder = _uriBuilder.clone();
                    copyMap.put("splitterId", splitterid);
                    return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplitters.SplitterIdSettings(_client, copyUriBuilder, copyMap);
                }

                public<T >T getAsJson(GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T getAsJson(Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class SplitterIdState {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private SplitterIdState(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public SplitterIdState(Client client, URI baseUri, String splitterid) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("{splitterId}/state");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    _templateAndMatrixParameterValues.put("splitterId", splitterid);
                }

                /**
                 * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
                 * 
                 */
                public SplitterIdState(Client client, URI uri) {
                    _client = client;
                    StringBuilder template = new StringBuilder(BASE_URI.toString());
                    if (template.charAt((template.length()- 1))!= '/') {
                        template.append("/clusters/{clusterId}/splitters/{splitterId}/state");
                    } else {
                        template.append("clusters/{clusterId}/splitters/{splitterId}/state");
                    }
                    _uriBuilder = UriBuilder.fromPath(template.toString());
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    UriTemplate uriTemplate = new UriTemplate(template.toString());
                    HashMap<String, String> parameters = new HashMap<String, String>();
                    uriTemplate.match(uri.toString(), parameters);
                    _templateAndMatrixParameterValues.putAll(parameters);
                }

                /**
                 * Get splitterId
                 * 
                 */
                public String getSplitterid() {
                    return ((String) _templateAndMatrixParameterValues.get("splitterId"));
                }

                /**
                 * Duplicate state and set splitterId
                 * 
                 */
                public IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplitters.SplitterIdState setSplitterid(String splitterid) {
                    Map<String, Object> copyMap;
                    copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                    UriBuilder copyUriBuilder = _uriBuilder.clone();
                    copyMap.put("splitterId", splitterid);
                    return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplitters.SplitterIdState(_client, copyUriBuilder, copyMap);
                }

                public<T >T getAsJson(GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T getAsJson(Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class SplitterIdStateVerify {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private SplitterIdStateVerify(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public SplitterIdStateVerify(Client client, URI baseUri, String splitterid) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("{splitterId}/state/verify");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    _templateAndMatrixParameterValues.put("splitterId", splitterid);
                }

                /**
                 * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
                 * 
                 */
                public SplitterIdStateVerify(Client client, URI uri) {
                    _client = client;
                    StringBuilder template = new StringBuilder(BASE_URI.toString());
                    if (template.charAt((template.length()- 1))!= '/') {
                        template.append("/clusters/{clusterId}/splitters/{splitterId}/state/verify");
                    } else {
                        template.append("clusters/{clusterId}/splitters/{splitterId}/state/verify");
                    }
                    _uriBuilder = UriBuilder.fromPath(template.toString());
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    UriTemplate uriTemplate = new UriTemplate(template.toString());
                    HashMap<String, String> parameters = new HashMap<String, String>();
                    uriTemplate.match(uri.toString(), parameters);
                    _templateAndMatrixParameterValues.putAll(parameters);
                }

                /**
                 * Get splitterId
                 * 
                 */
                public String getSplitterid() {
                    return ((String) _templateAndMatrixParameterValues.get("splitterId"));
                }

                /**
                 * Duplicate state and set splitterId
                 * 
                 */
                public IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplitters.SplitterIdStateVerify setSplitterid(String splitterid) {
                    Map<String, Object> copyMap;
                    copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                    UriBuilder copyUriBuilder = _uriBuilder.clone();
                    copyMap.put("splitterId", splitterid);
                    return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplitters.SplitterIdStateVerify(_client, copyUriBuilder, copyMap);
                }

                public<T >T postJson(Object input, GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T postJson(Object input, Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

                public<T >T postJson(Object input, String timeoutInSeconds, GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    if (timeoutInSeconds == null) {
                    }
                    if (timeoutInSeconds!= null) {
                        localUriBuilder = localUriBuilder.replaceQueryParam("timeout_in_seconds", timeoutInSeconds);
                    } else {
                        localUriBuilder = localUriBuilder.replaceQueryParam("timeout_in_seconds", ((Object[]) null));
                    }
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T postJson(Object input, String timeoutInSeconds, Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    if (timeoutInSeconds == null) {
                    }
                    if (timeoutInSeconds!= null) {
                        localUriBuilder = localUriBuilder.replaceQueryParam("timeout_in_seconds", timeoutInSeconds);
                    } else {
                        localUriBuilder = localUriBuilder.replaceQueryParam("timeout_in_seconds", ((Object[]) null));
                    }
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class SplitterIdVolumes {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private SplitterIdVolumes(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public SplitterIdVolumes(Client client, URI baseUri, String splitterid) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("{splitterId}/volumes");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    _templateAndMatrixParameterValues.put("splitterId", splitterid);
                }

                /**
                 * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
                 * 
                 */
                public SplitterIdVolumes(Client client, URI uri) {
                    _client = client;
                    StringBuilder template = new StringBuilder(BASE_URI.toString());
                    if (template.charAt((template.length()- 1))!= '/') {
                        template.append("/clusters/{clusterId}/splitters/{splitterId}/volumes");
                    } else {
                        template.append("clusters/{clusterId}/splitters/{splitterId}/volumes");
                    }
                    _uriBuilder = UriBuilder.fromPath(template.toString());
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    UriTemplate uriTemplate = new UriTemplate(template.toString());
                    HashMap<String, String> parameters = new HashMap<String, String>();
                    uriTemplate.match(uri.toString(), parameters);
                    _templateAndMatrixParameterValues.putAll(parameters);
                }

                /**
                 * Get splitterId
                 * 
                 */
                public String getSplitterid() {
                    return ((String) _templateAndMatrixParameterValues.get("splitterId"));
                }

                /**
                 * Duplicate state and set splitterId
                 * 
                 */
                public IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplitters.SplitterIdVolumes setSplitterid(String splitterid) {
                    Map<String, Object> copyMap;
                    copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                    UriBuilder copyUriBuilder = _uriBuilder.clone();
                    copyMap.put("splitterId", splitterid);
                    return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplitters.SplitterIdVolumes(_client, copyUriBuilder, copyMap);
                }

                public<T >T deleteJsonAs(Object input, GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("DELETE", Entity.entity(input, "application/json")).invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T deleteJsonAs(Object input, Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("DELETE", Entity.entity(input, "application/json")).invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

                public<T >T postJsonAs(Object input, GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T postJsonAs(Object input, Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class SplitterIdVolumesAttached {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private SplitterIdVolumesAttached(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public SplitterIdVolumesAttached(Client client, URI baseUri, String splitterid) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("{splitterId}/volumes/attached");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    _templateAndMatrixParameterValues.put("splitterId", splitterid);
                }

                /**
                 * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
                 * 
                 */
                public SplitterIdVolumesAttached(Client client, URI uri) {
                    _client = client;
                    StringBuilder template = new StringBuilder(BASE_URI.toString());
                    if (template.charAt((template.length()- 1))!= '/') {
                        template.append("/clusters/{clusterId}/splitters/{splitterId}/volumes/attached");
                    } else {
                        template.append("clusters/{clusterId}/splitters/{splitterId}/volumes/attached");
                    }
                    _uriBuilder = UriBuilder.fromPath(template.toString());
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    UriTemplate uriTemplate = new UriTemplate(template.toString());
                    HashMap<String, String> parameters = new HashMap<String, String>();
                    uriTemplate.match(uri.toString(), parameters);
                    _templateAndMatrixParameterValues.putAll(parameters);
                }

                /**
                 * Get splitterId
                 * 
                 */
                public String getSplitterid() {
                    return ((String) _templateAndMatrixParameterValues.get("splitterId"));
                }

                /**
                 * Duplicate state and set splitterId
                 * 
                 */
                public IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplitters.SplitterIdVolumesAttached setSplitterid(String splitterid) {
                    Map<String, Object> copyMap;
                    copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                    UriBuilder copyUriBuilder = _uriBuilder.clone();
                    copyMap.put("splitterId", splitterid);
                    return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplitters.SplitterIdVolumesAttached(_client, copyUriBuilder, copyMap);
                }

                public<T >T postJsonAs(Object input, GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T postJsonAs(Object input, Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class SplitterIdVolumesAttach_volumes {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private SplitterIdVolumesAttach_volumes(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public SplitterIdVolumesAttach_volumes(Client client, URI baseUri, String splitterid) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("{splitterId}/volumes/attach_volumes");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    _templateAndMatrixParameterValues.put("splitterId", splitterid);
                }

                /**
                 * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
                 * 
                 */
                public SplitterIdVolumesAttach_volumes(Client client, URI uri) {
                    _client = client;
                    StringBuilder template = new StringBuilder(BASE_URI.toString());
                    if (template.charAt((template.length()- 1))!= '/') {
                        template.append("/clusters/{clusterId}/splitters/{splitterId}/volumes/attach_volumes");
                    } else {
                        template.append("clusters/{clusterId}/splitters/{splitterId}/volumes/attach_volumes");
                    }
                    _uriBuilder = UriBuilder.fromPath(template.toString());
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    UriTemplate uriTemplate = new UriTemplate(template.toString());
                    HashMap<String, String> parameters = new HashMap<String, String>();
                    uriTemplate.match(uri.toString(), parameters);
                    _templateAndMatrixParameterValues.putAll(parameters);
                }

                /**
                 * Get splitterId
                 * 
                 */
                public String getSplitterid() {
                    return ((String) _templateAndMatrixParameterValues.get("splitterId"));
                }

                /**
                 * Duplicate state and set splitterId
                 * 
                 */
                public IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplitters.SplitterIdVolumesAttach_volumes setSplitterid(String splitterid) {
                    Map<String, Object> copyMap;
                    copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                    UriBuilder copyUriBuilder = _uriBuilder.clone();
                    copyMap.put("splitterId", splitterid);
                    return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplitters.SplitterIdVolumesAttach_volumes(_client, copyUriBuilder, copyMap);
                }

                public<T >T postJsonAs(Object input, GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T postJsonAs(Object input, Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class SplitterIdVolumesVolumeId {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private SplitterIdVolumesVolumeId(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public SplitterIdVolumesVolumeId(Client client, URI baseUri, String splitterid, String volumeid) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("{splitterId}/volumes/{volumeId}");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    _templateAndMatrixParameterValues.put("splitterId", splitterid);
                    _templateAndMatrixParameterValues.put("volumeId", volumeid);
                }

                /**
                 * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
                 * 
                 */
                public SplitterIdVolumesVolumeId(Client client, URI uri) {
                    _client = client;
                    StringBuilder template = new StringBuilder(BASE_URI.toString());
                    if (template.charAt((template.length()- 1))!= '/') {
                        template.append("/clusters/{clusterId}/splitters/{splitterId}/volumes/{volumeId}");
                    } else {
                        template.append("clusters/{clusterId}/splitters/{splitterId}/volumes/{volumeId}");
                    }
                    _uriBuilder = UriBuilder.fromPath(template.toString());
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    UriTemplate uriTemplate = new UriTemplate(template.toString());
                    HashMap<String, String> parameters = new HashMap<String, String>();
                    uriTemplate.match(uri.toString(), parameters);
                    _templateAndMatrixParameterValues.putAll(parameters);
                }

                /**
                 * Get splitterId
                 * 
                 */
                public String getSplitterid() {
                    return ((String) _templateAndMatrixParameterValues.get("splitterId"));
                }

                /**
                 * Duplicate state and set splitterId
                 * 
                 */
                public IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplitters.SplitterIdVolumesVolumeId setSplitterid(String splitterid) {
                    Map<String, Object> copyMap;
                    copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                    UriBuilder copyUriBuilder = _uriBuilder.clone();
                    copyMap.put("splitterId", splitterid);
                    return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplitters.SplitterIdVolumesVolumeId(_client, copyUriBuilder, copyMap);
                }

                /**
                 * Get volumeId
                 * 
                 */
                public String getVolumeid() {
                    return ((String) _templateAndMatrixParameterValues.get("volumeId"));
                }

                /**
                 * Duplicate state and set volumeId
                 * 
                 */
                public IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplitters.SplitterIdVolumesVolumeId setVolumeid(String volumeid) {
                    Map<String, Object> copyMap;
                    copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                    UriBuilder copyUriBuilder = _uriBuilder.clone();
                    copyMap.put("volumeId", volumeid);
                    return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplitters.SplitterIdVolumesVolumeId(_client, copyUriBuilder, copyMap);
                }

                public<T >T deleteAs(GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("DELETE").invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T deleteAs(Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("DELETE").invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class SplitterIdVolume_connectionsRescan {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private SplitterIdVolume_connectionsRescan(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public SplitterIdVolume_connectionsRescan(Client client, URI baseUri, String splitterid) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("{splitterId}/volume_connections/rescan");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    _templateAndMatrixParameterValues.put("splitterId", splitterid);
                }

                /**
                 * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
                 * 
                 */
                public SplitterIdVolume_connectionsRescan(Client client, URI uri) {
                    _client = client;
                    StringBuilder template = new StringBuilder(BASE_URI.toString());
                    if (template.charAt((template.length()- 1))!= '/') {
                        template.append("/clusters/{clusterId}/splitters/{splitterId}/volume_connections/rescan");
                    } else {
                        template.append("clusters/{clusterId}/splitters/{splitterId}/volume_connections/rescan");
                    }
                    _uriBuilder = UriBuilder.fromPath(template.toString());
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    UriTemplate uriTemplate = new UriTemplate(template.toString());
                    HashMap<String, String> parameters = new HashMap<String, String>();
                    uriTemplate.match(uri.toString(), parameters);
                    _templateAndMatrixParameterValues.putAll(parameters);
                }

                /**
                 * Get splitterId
                 * 
                 */
                public String getSplitterid() {
                    return ((String) _templateAndMatrixParameterValues.get("splitterId"));
                }

                /**
                 * Duplicate state and set splitterId
                 * 
                 */
                public IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplitters.SplitterIdVolume_connectionsRescan setSplitterid(String splitterid) {
                    Map<String, Object> copyMap;
                    copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                    UriBuilder copyUriBuilder = _uriBuilder.clone();
                    copyMap.put("splitterId", splitterid);
                    return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplitters.SplitterIdVolume_connectionsRescan(_client, copyUriBuilder, copyMap);
                }

                public<T >T putAs(GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT").invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T putAs(Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT").invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class Volume_connectionsRescan {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private Volume_connectionsRescan(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public Volume_connectionsRescan(Client client, URI baseUri) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("volume_connections/rescan");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                }

                public<T >T putAs(GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT").invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T putAs(Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT").invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

        }

        public static class ClusterIdSplittersSplitterIdState {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private ClusterIdSplittersSplitterIdState(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public ClusterIdSplittersSplitterIdState(Client client, URI baseUri, String clusterid, String splitterid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{clusterId}/splitters/{splitterId}/state");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
                _templateAndMatrixParameterValues.put("splitterId", splitterid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public ClusterIdSplittersSplitterIdState(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/clusters/{clusterId}/splitters/{splitterId}/state");
                } else {
                    template.append("clusters/{clusterId}/splitters/{splitterId}/state");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplittersSplitterIdState setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplittersSplitterIdState(_client, copyUriBuilder, copyMap);
            }

            /**
             * Get splitterId
             * 
             */
            public String getSplitterid() {
                return ((String) _templateAndMatrixParameterValues.get("splitterId"));
            }

            /**
             * Duplicate state and set splitterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplittersSplitterIdState setSplitterid(String splitterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("splitterId", splitterid);
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplittersSplitterIdState(_client, copyUriBuilder, copyMap);
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class ClusterIdSplittersState {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private ClusterIdSplittersState(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public ClusterIdSplittersState(Client client, URI baseUri, String clusterid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{clusterId}/splitters/state");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public ClusterIdSplittersState(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/clusters/{clusterId}/splitters/state");
                } else {
                    template.append("clusters/{clusterId}/splitters/state");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplittersState setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplittersState(_client, copyUriBuilder, copyMap);
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class ClusterIdSplitters_with_unattached_volumes {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private ClusterIdSplitters_with_unattached_volumes(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public ClusterIdSplitters_with_unattached_volumes(Client client, URI baseUri, String clusterid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{clusterId}/splitters_with_unattached_volumes");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public ClusterIdSplitters_with_unattached_volumes(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/clusters/{clusterId}/splitters_with_unattached_volumes");
                } else {
                    template.append("clusters/{clusterId}/splitters_with_unattached_volumes");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplitters_with_unattached_volumes setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdSplitters_with_unattached_volumes(_client, copyUriBuilder, copyMap);
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class ClusterIdStatistics {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private ClusterIdStatistics(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public ClusterIdStatistics(Client client, URI baseUri, String clusterid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{clusterId}/statistics");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public ClusterIdStatistics(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/clusters/{clusterId}/statistics");
                } else {
                    template.append("clusters/{clusterId}/statistics");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdStatistics setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdStatistics(_client, copyUriBuilder, copyMap);
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class ClusterIdSupported_array_management_provider_and_array_types {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private ClusterIdSupported_array_management_provider_and_array_types(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public ClusterIdSupported_array_management_provider_and_array_types(Client client, URI baseUri, String clusterid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{clusterId}/supported_array_management_provider_and_array_types");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public ClusterIdSupported_array_management_provider_and_array_types(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/clusters/{clusterId}/supported_array_management_provider_and_array_types");
                } else {
                    template.append("clusters/{clusterId}/supported_array_management_provider_and_array_types");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdSupported_array_management_provider_and_array_types setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdSupported_array_management_provider_and_array_types(_client, copyUriBuilder, copyMap);
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class ClusterIdVcenter_servers {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private ClusterIdVcenter_servers(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public ClusterIdVcenter_servers(Client client, URI baseUri, String clusterid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{clusterId}/vcenter_servers");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public ClusterIdVcenter_servers(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/clusters/{clusterId}/vcenter_servers");
                } else {
                    template.append("clusters/{clusterId}/vcenter_servers");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVcenter_servers setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVcenter_servers(_client, copyUriBuilder, copyMap);
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVcenter_servers.VcUIDVirtual_machinesVmUIDAvailable_networks vcUIDVirtual_machinesVmUIDAvailable_networks(String vcuid, String vmuid) {
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVcenter_servers.VcUIDVirtual_machinesVmUIDAvailable_networks(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), vcuid, vmuid);
            }

            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVcenter_servers.VcUIDVirtual_machinesAvailable_networks vcUIDVirtual_machinesAvailable_networks(String vcuid) {
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVcenter_servers.VcUIDVirtual_machinesAvailable_networks(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), vcuid);
            }

            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVcenter_servers.VcUIDVirtual_machinesVmUIDReplication_candidate_clusters vcUIDVirtual_machinesVmUIDReplication_candidate_clusters(String vcuid, String vmuid) {
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVcenter_servers.VcUIDVirtual_machinesVmUIDReplication_candidate_clusters(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), vcuid, vmuid);
            }

            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVcenter_servers.VcUIDVirtual_machinesVmUIDTarget_vm_candidates vcUIDVirtual_machinesVmUIDTarget_vm_candidates(String vcuid, String vmuid) {
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVcenter_servers.VcUIDVirtual_machinesVmUIDTarget_vm_candidates(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), vcuid, vmuid);
            }

            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVcenter_servers.ServerIPRemove_all_filters serverIPRemove_all_filters(String serverip) {
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVcenter_servers.ServerIPRemove_all_filters(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), serverip);
            }

            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVcenter_servers.ServerIPVcenter_servers_filters serverIPVcenter_servers_filters(String serverip) {
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVcenter_servers.ServerIPVcenter_servers_filters(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), serverip);
            }

            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVcenter_servers.ServerIPRemove_vcenter_server_filter serverIPRemove_vcenter_server_filter(String serverip) {
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVcenter_servers.ServerIPRemove_vcenter_server_filter(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), serverip);
            }

            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVcenter_servers.ServerIPVcenter_server_filters serverIPVcenter_server_filters(String serverip) {
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVcenter_servers.ServerIPVcenter_server_filters(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), serverip);
            }

            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVcenter_servers.Context context() {
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVcenter_servers.Context(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            }

            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVcenter_servers.ServerIPVcenter_view serverIPVcenter_view(String serverip) {
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVcenter_servers.ServerIPVcenter_view(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), serverip);
            }

            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVcenter_servers.ServerIP serverIP(String serverip) {
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVcenter_servers.ServerIP(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), serverip);
            }

            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVcenter_servers.View view() {
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVcenter_servers.View(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            }

            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVcenter_servers.ServerIPFilter_for_unknown_luns serverIPFilter_for_unknown_luns(String serverip) {
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVcenter_servers.ServerIPFilter_for_unknown_luns(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), serverip);
            }

            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVcenter_servers.VcUIDDcUIDEsxClusterUIDAvailable_vms_for_replication vcUIDDcUIDEsxClusterUIDAvailable_vms_for_replication(String vcuid, String dcuid, String esxclusteruid) {
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVcenter_servers.VcUIDDcUIDEsxClusterUIDAvailable_vms_for_replication(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), vcuid, dcuid, esxclusteruid);
            }

            public static class Context {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private Context(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public Context(Client client, URI baseUri) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("context");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                }

                public<T >T getAsJson(GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T getAsJson(Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class ServerIP {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private ServerIP(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public ServerIP(Client client, URI baseUri, String serverip) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("{serverIP}");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    _templateAndMatrixParameterValues.put("serverIP", serverip);
                }

                /**
                 * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
                 * 
                 */
                public ServerIP(Client client, URI uri) {
                    _client = client;
                    StringBuilder template = new StringBuilder(BASE_URI.toString());
                    if (template.charAt((template.length()- 1))!= '/') {
                        template.append("/clusters/{clusterId}/vcenter_servers/{serverIP}");
                    } else {
                        template.append("clusters/{clusterId}/vcenter_servers/{serverIP}");
                    }
                    _uriBuilder = UriBuilder.fromPath(template.toString());
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    UriTemplate uriTemplate = new UriTemplate(template.toString());
                    HashMap<String, String> parameters = new HashMap<String, String>();
                    uriTemplate.match(uri.toString(), parameters);
                    _templateAndMatrixParameterValues.putAll(parameters);
                }

                /**
                 * Get serverIP
                 * 
                 */
                public String getServerip() {
                    return ((String) _templateAndMatrixParameterValues.get("serverIP"));
                }

                /**
                 * Duplicate state and set serverIP
                 * 
                 */
                public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVcenter_servers.ServerIP setServerip(String serverip) {
                    Map<String, Object> copyMap;
                    copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                    UriBuilder copyUriBuilder = _uriBuilder.clone();
                    copyMap.put("serverIP", serverip);
                    return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVcenter_servers.ServerIP(_client, copyUriBuilder, copyMap);
                }

                public<T >T getAsJson(GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T getAsJson(Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class ServerIPFilter_for_unknown_luns {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private ServerIPFilter_for_unknown_luns(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public ServerIPFilter_for_unknown_luns(Client client, URI baseUri, String serverip) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("{serverIP}/filter_for_unknown_luns");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    _templateAndMatrixParameterValues.put("serverIP", serverip);
                }

                /**
                 * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
                 * 
                 */
                public ServerIPFilter_for_unknown_luns(Client client, URI uri) {
                    _client = client;
                    StringBuilder template = new StringBuilder(BASE_URI.toString());
                    if (template.charAt((template.length()- 1))!= '/') {
                        template.append("/clusters/{clusterId}/vcenter_servers/{serverIP}/filter_for_unknown_luns");
                    } else {
                        template.append("clusters/{clusterId}/vcenter_servers/{serverIP}/filter_for_unknown_luns");
                    }
                    _uriBuilder = UriBuilder.fromPath(template.toString());
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    UriTemplate uriTemplate = new UriTemplate(template.toString());
                    HashMap<String, String> parameters = new HashMap<String, String>();
                    uriTemplate.match(uri.toString(), parameters);
                    _templateAndMatrixParameterValues.putAll(parameters);
                }

                /**
                 * Get serverIP
                 * 
                 */
                public String getServerip() {
                    return ((String) _templateAndMatrixParameterValues.get("serverIP"));
                }

                /**
                 * Duplicate state and set serverIP
                 * 
                 */
                public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVcenter_servers.ServerIPFilter_for_unknown_luns setServerip(String serverip) {
                    Map<String, Object> copyMap;
                    copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                    UriBuilder copyUriBuilder = _uriBuilder.clone();
                    copyMap.put("serverIP", serverip);
                    return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVcenter_servers.ServerIPFilter_for_unknown_luns(_client, copyUriBuilder, copyMap);
                }

                public<T >T postAs(GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("POST").invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T postAs(Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("POST").invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

                public<T >T postAs(String shouldfilterunknownluns, GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    if (shouldfilterunknownluns == null) {
                    }
                    if (shouldfilterunknownluns!= null) {
                        localUriBuilder = localUriBuilder.replaceQueryParam("shouldFilterUnknownLuns", shouldfilterunknownluns);
                    } else {
                        localUriBuilder = localUriBuilder.replaceQueryParam("shouldFilterUnknownLuns", ((Object[]) null));
                    }
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("POST").invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T postAs(String shouldfilterunknownluns, Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    if (shouldfilterunknownluns == null) {
                    }
                    if (shouldfilterunknownluns!= null) {
                        localUriBuilder = localUriBuilder.replaceQueryParam("shouldFilterUnknownLuns", shouldfilterunknownluns);
                    } else {
                        localUriBuilder = localUriBuilder.replaceQueryParam("shouldFilterUnknownLuns", ((Object[]) null));
                    }
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("POST").invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class ServerIPRemove_all_filters {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private ServerIPRemove_all_filters(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public ServerIPRemove_all_filters(Client client, URI baseUri, String serverip) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("{serverIP}/remove_all_filters");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    _templateAndMatrixParameterValues.put("serverIP", serverip);
                }

                /**
                 * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
                 * 
                 */
                public ServerIPRemove_all_filters(Client client, URI uri) {
                    _client = client;
                    StringBuilder template = new StringBuilder(BASE_URI.toString());
                    if (template.charAt((template.length()- 1))!= '/') {
                        template.append("/clusters/{clusterId}/vcenter_servers/{serverIP}/remove_all_filters");
                    } else {
                        template.append("clusters/{clusterId}/vcenter_servers/{serverIP}/remove_all_filters");
                    }
                    _uriBuilder = UriBuilder.fromPath(template.toString());
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    UriTemplate uriTemplate = new UriTemplate(template.toString());
                    HashMap<String, String> parameters = new HashMap<String, String>();
                    uriTemplate.match(uri.toString(), parameters);
                    _templateAndMatrixParameterValues.putAll(parameters);
                }

                /**
                 * Get serverIP
                 * 
                 */
                public String getServerip() {
                    return ((String) _templateAndMatrixParameterValues.get("serverIP"));
                }

                /**
                 * Duplicate state and set serverIP
                 * 
                 */
                public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVcenter_servers.ServerIPRemove_all_filters setServerip(String serverip) {
                    Map<String, Object> copyMap;
                    copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                    UriBuilder copyUriBuilder = _uriBuilder.clone();
                    copyMap.put("serverIP", serverip);
                    return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVcenter_servers.ServerIPRemove_all_filters(_client, copyUriBuilder, copyMap);
                }

                public<T >T putAs(GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT").invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T putAs(Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT").invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class ServerIPRemove_vcenter_server_filter {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private ServerIPRemove_vcenter_server_filter(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public ServerIPRemove_vcenter_server_filter(Client client, URI baseUri, String serverip) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("{serverIP}/remove_vcenter_server_filter");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    _templateAndMatrixParameterValues.put("serverIP", serverip);
                }

                /**
                 * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
                 * 
                 */
                public ServerIPRemove_vcenter_server_filter(Client client, URI uri) {
                    _client = client;
                    StringBuilder template = new StringBuilder(BASE_URI.toString());
                    if (template.charAt((template.length()- 1))!= '/') {
                        template.append("/clusters/{clusterId}/vcenter_servers/{serverIP}/remove_vcenter_server_filter");
                    } else {
                        template.append("clusters/{clusterId}/vcenter_servers/{serverIP}/remove_vcenter_server_filter");
                    }
                    _uriBuilder = UriBuilder.fromPath(template.toString());
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    UriTemplate uriTemplate = new UriTemplate(template.toString());
                    HashMap<String, String> parameters = new HashMap<String, String>();
                    uriTemplate.match(uri.toString(), parameters);
                    _templateAndMatrixParameterValues.putAll(parameters);
                }

                /**
                 * Get serverIP
                 * 
                 */
                public String getServerip() {
                    return ((String) _templateAndMatrixParameterValues.get("serverIP"));
                }

                /**
                 * Duplicate state and set serverIP
                 * 
                 */
                public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVcenter_servers.ServerIPRemove_vcenter_server_filter setServerip(String serverip) {
                    Map<String, Object> copyMap;
                    copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                    UriBuilder copyUriBuilder = _uriBuilder.clone();
                    copyMap.put("serverIP", serverip);
                    return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVcenter_servers.ServerIPRemove_vcenter_server_filter(_client, copyUriBuilder, copyMap);
                }

                public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T putJsonAs(Object input, Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class ServerIPVcenter_servers_filters {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private ServerIPVcenter_servers_filters(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public ServerIPVcenter_servers_filters(Client client, URI baseUri, String serverip) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("{serverIP}/vcenter_servers_filters");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    _templateAndMatrixParameterValues.put("serverIP", serverip);
                }

                /**
                 * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
                 * 
                 */
                public ServerIPVcenter_servers_filters(Client client, URI uri) {
                    _client = client;
                    StringBuilder template = new StringBuilder(BASE_URI.toString());
                    if (template.charAt((template.length()- 1))!= '/') {
                        template.append("/clusters/{clusterId}/vcenter_servers/{serverIP}/vcenter_servers_filters");
                    } else {
                        template.append("clusters/{clusterId}/vcenter_servers/{serverIP}/vcenter_servers_filters");
                    }
                    _uriBuilder = UriBuilder.fromPath(template.toString());
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    UriTemplate uriTemplate = new UriTemplate(template.toString());
                    HashMap<String, String> parameters = new HashMap<String, String>();
                    uriTemplate.match(uri.toString(), parameters);
                    _templateAndMatrixParameterValues.putAll(parameters);
                }

                /**
                 * Get serverIP
                 * 
                 */
                public String getServerip() {
                    return ((String) _templateAndMatrixParameterValues.get("serverIP"));
                }

                /**
                 * Duplicate state and set serverIP
                 * 
                 */
                public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVcenter_servers.ServerIPVcenter_servers_filters setServerip(String serverip) {
                    Map<String, Object> copyMap;
                    copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                    UriBuilder copyUriBuilder = _uriBuilder.clone();
                    copyMap.put("serverIP", serverip);
                    return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVcenter_servers.ServerIPVcenter_servers_filters(_client, copyUriBuilder, copyMap);
                }

                public<T >T getAsJson(GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T getAsJson(Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class ServerIPVcenter_server_filters {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private ServerIPVcenter_server_filters(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public ServerIPVcenter_server_filters(Client client, URI baseUri, String serverip) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("{serverIP}/vcenter_server_filters");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    _templateAndMatrixParameterValues.put("serverIP", serverip);
                }

                /**
                 * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
                 * 
                 */
                public ServerIPVcenter_server_filters(Client client, URI uri) {
                    _client = client;
                    StringBuilder template = new StringBuilder(BASE_URI.toString());
                    if (template.charAt((template.length()- 1))!= '/') {
                        template.append("/clusters/{clusterId}/vcenter_servers/{serverIP}/vcenter_server_filters");
                    } else {
                        template.append("clusters/{clusterId}/vcenter_servers/{serverIP}/vcenter_server_filters");
                    }
                    _uriBuilder = UriBuilder.fromPath(template.toString());
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    UriTemplate uriTemplate = new UriTemplate(template.toString());
                    HashMap<String, String> parameters = new HashMap<String, String>();
                    uriTemplate.match(uri.toString(), parameters);
                    _templateAndMatrixParameterValues.putAll(parameters);
                }

                /**
                 * Get serverIP
                 * 
                 */
                public String getServerip() {
                    return ((String) _templateAndMatrixParameterValues.get("serverIP"));
                }

                /**
                 * Duplicate state and set serverIP
                 * 
                 */
                public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVcenter_servers.ServerIPVcenter_server_filters setServerip(String serverip) {
                    Map<String, Object> copyMap;
                    copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                    UriBuilder copyUriBuilder = _uriBuilder.clone();
                    copyMap.put("serverIP", serverip);
                    return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVcenter_servers.ServerIPVcenter_server_filters(_client, copyUriBuilder, copyMap);
                }

                public<T >T postJsonAs(Object input, GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T postJsonAs(Object input, Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

                public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T putJsonAs(Object input, Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class ServerIPVcenter_view {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private ServerIPVcenter_view(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public ServerIPVcenter_view(Client client, URI baseUri, String serverip) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("{serverIP}/vcenter_view");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    _templateAndMatrixParameterValues.put("serverIP", serverip);
                }

                /**
                 * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
                 * 
                 */
                public ServerIPVcenter_view(Client client, URI uri) {
                    _client = client;
                    StringBuilder template = new StringBuilder(BASE_URI.toString());
                    if (template.charAt((template.length()- 1))!= '/') {
                        template.append("/clusters/{clusterId}/vcenter_servers/{serverIP}/vcenter_view");
                    } else {
                        template.append("clusters/{clusterId}/vcenter_servers/{serverIP}/vcenter_view");
                    }
                    _uriBuilder = UriBuilder.fromPath(template.toString());
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    UriTemplate uriTemplate = new UriTemplate(template.toString());
                    HashMap<String, String> parameters = new HashMap<String, String>();
                    uriTemplate.match(uri.toString(), parameters);
                    _templateAndMatrixParameterValues.putAll(parameters);
                }

                /**
                 * Get serverIP
                 * 
                 */
                public String getServerip() {
                    return ((String) _templateAndMatrixParameterValues.get("serverIP"));
                }

                /**
                 * Duplicate state and set serverIP
                 * 
                 */
                public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVcenter_servers.ServerIPVcenter_view setServerip(String serverip) {
                    Map<String, Object> copyMap;
                    copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                    UriBuilder copyUriBuilder = _uriBuilder.clone();
                    copyMap.put("serverIP", serverip);
                    return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVcenter_servers.ServerIPVcenter_view(_client, copyUriBuilder, copyMap);
                }

                public<T >T getAsJson(GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T getAsJson(Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

                public<T >T getAsJson(String shouldrescan, GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    if (shouldrescan == null) {
                    }
                    if (shouldrescan!= null) {
                        localUriBuilder = localUriBuilder.replaceQueryParam("shouldRescan", shouldrescan);
                    } else {
                        localUriBuilder = localUriBuilder.replaceQueryParam("shouldRescan", ((Object[]) null));
                    }
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T getAsJson(String shouldrescan, Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    if (shouldrescan == null) {
                    }
                    if (shouldrescan!= null) {
                        localUriBuilder = localUriBuilder.replaceQueryParam("shouldRescan", shouldrescan);
                    } else {
                        localUriBuilder = localUriBuilder.replaceQueryParam("shouldRescan", ((Object[]) null));
                    }
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class VcUIDDcUIDEsxClusterUIDAvailable_vms_for_replication {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private VcUIDDcUIDEsxClusterUIDAvailable_vms_for_replication(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public VcUIDDcUIDEsxClusterUIDAvailable_vms_for_replication(Client client, URI baseUri, String vcuid, String dcuid, String esxclusteruid) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("{vcUID}/{dcUID}/{esxClusterUID}/available_vms_for_replication");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    _templateAndMatrixParameterValues.put("vcUID", vcuid);
                    _templateAndMatrixParameterValues.put("dcUID", dcuid);
                    _templateAndMatrixParameterValues.put("esxClusterUID", esxclusteruid);
                }

                /**
                 * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
                 * 
                 */
                public VcUIDDcUIDEsxClusterUIDAvailable_vms_for_replication(Client client, URI uri) {
                    _client = client;
                    StringBuilder template = new StringBuilder(BASE_URI.toString());
                    if (template.charAt((template.length()- 1))!= '/') {
                        template.append("/clusters/{clusterId}/vcenter_servers/{vcUID}/{dcUID}/{esxClusterUID}/available_vms_for_replication");
                    } else {
                        template.append("clusters/{clusterId}/vcenter_servers/{vcUID}/{dcUID}/{esxClusterUID}/available_vms_for_replication");
                    }
                    _uriBuilder = UriBuilder.fromPath(template.toString());
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    UriTemplate uriTemplate = new UriTemplate(template.toString());
                    HashMap<String, String> parameters = new HashMap<String, String>();
                    uriTemplate.match(uri.toString(), parameters);
                    _templateAndMatrixParameterValues.putAll(parameters);
                }

                /**
                 * Get vcUID
                 * 
                 */
                public String getVcuid() {
                    return ((String) _templateAndMatrixParameterValues.get("vcUID"));
                }

                /**
                 * Duplicate state and set vcUID
                 * 
                 */
                public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVcenter_servers.VcUIDDcUIDEsxClusterUIDAvailable_vms_for_replication setVcuid(String vcuid) {
                    Map<String, Object> copyMap;
                    copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                    UriBuilder copyUriBuilder = _uriBuilder.clone();
                    copyMap.put("vcUID", vcuid);
                    return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVcenter_servers.VcUIDDcUIDEsxClusterUIDAvailable_vms_for_replication(_client, copyUriBuilder, copyMap);
                }

                /**
                 * Get dcUID
                 * 
                 */
                public String getDcuid() {
                    return ((String) _templateAndMatrixParameterValues.get("dcUID"));
                }

                /**
                 * Duplicate state and set dcUID
                 * 
                 */
                public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVcenter_servers.VcUIDDcUIDEsxClusterUIDAvailable_vms_for_replication setDcuid(String dcuid) {
                    Map<String, Object> copyMap;
                    copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                    UriBuilder copyUriBuilder = _uriBuilder.clone();
                    copyMap.put("dcUID", dcuid);
                    return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVcenter_servers.VcUIDDcUIDEsxClusterUIDAvailable_vms_for_replication(_client, copyUriBuilder, copyMap);
                }

                /**
                 * Get esxClusterUID
                 * 
                 */
                public String getEsxclusteruid() {
                    return ((String) _templateAndMatrixParameterValues.get("esxClusterUID"));
                }

                /**
                 * Duplicate state and set esxClusterUID
                 * 
                 */
                public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVcenter_servers.VcUIDDcUIDEsxClusterUIDAvailable_vms_for_replication setEsxclusteruid(String esxclusteruid) {
                    Map<String, Object> copyMap;
                    copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                    UriBuilder copyUriBuilder = _uriBuilder.clone();
                    copyMap.put("esxClusterUID", esxclusteruid);
                    return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVcenter_servers.VcUIDDcUIDEsxClusterUIDAvailable_vms_for_replication(_client, copyUriBuilder, copyMap);
                }

                public<T >T getAsJson(GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T getAsJson(Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class VcUIDVirtual_machinesAvailable_networks {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private VcUIDVirtual_machinesAvailable_networks(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public VcUIDVirtual_machinesAvailable_networks(Client client, URI baseUri, String vcuid) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("{vcUID}/virtual_machines/available_networks");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    _templateAndMatrixParameterValues.put("vcUID", vcuid);
                }

                /**
                 * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
                 * 
                 */
                public VcUIDVirtual_machinesAvailable_networks(Client client, URI uri) {
                    _client = client;
                    StringBuilder template = new StringBuilder(BASE_URI.toString());
                    if (template.charAt((template.length()- 1))!= '/') {
                        template.append("/clusters/{clusterId}/vcenter_servers/{vcUID}/virtual_machines/available_networks");
                    } else {
                        template.append("clusters/{clusterId}/vcenter_servers/{vcUID}/virtual_machines/available_networks");
                    }
                    _uriBuilder = UriBuilder.fromPath(template.toString());
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    UriTemplate uriTemplate = new UriTemplate(template.toString());
                    HashMap<String, String> parameters = new HashMap<String, String>();
                    uriTemplate.match(uri.toString(), parameters);
                    _templateAndMatrixParameterValues.putAll(parameters);
                }

                /**
                 * Get vcUID
                 * 
                 */
                public String getVcuid() {
                    return ((String) _templateAndMatrixParameterValues.get("vcUID"));
                }

                /**
                 * Duplicate state and set vcUID
                 * 
                 */
                public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVcenter_servers.VcUIDVirtual_machinesAvailable_networks setVcuid(String vcuid) {
                    Map<String, Object> copyMap;
                    copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                    UriBuilder copyUriBuilder = _uriBuilder.clone();
                    copyMap.put("vcUID", vcuid);
                    return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVcenter_servers.VcUIDVirtual_machinesAvailable_networks(_client, copyUriBuilder, copyMap);
                }

                public<T >T postJson(Object input, GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T postJson(Object input, Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class VcUIDVirtual_machinesVmUIDAvailable_networks {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private VcUIDVirtual_machinesVmUIDAvailable_networks(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public VcUIDVirtual_machinesVmUIDAvailable_networks(Client client, URI baseUri, String vcuid, String vmuid) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("{vcUID}/virtual_machines/{vmUID}/available_networks");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    _templateAndMatrixParameterValues.put("vcUID", vcuid);
                    _templateAndMatrixParameterValues.put("vmUID", vmuid);
                }

                /**
                 * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
                 * 
                 */
                public VcUIDVirtual_machinesVmUIDAvailable_networks(Client client, URI uri) {
                    _client = client;
                    StringBuilder template = new StringBuilder(BASE_URI.toString());
                    if (template.charAt((template.length()- 1))!= '/') {
                        template.append("/clusters/{clusterId}/vcenter_servers/{vcUID}/virtual_machines/{vmUID}/available_networks");
                    } else {
                        template.append("clusters/{clusterId}/vcenter_servers/{vcUID}/virtual_machines/{vmUID}/available_networks");
                    }
                    _uriBuilder = UriBuilder.fromPath(template.toString());
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    UriTemplate uriTemplate = new UriTemplate(template.toString());
                    HashMap<String, String> parameters = new HashMap<String, String>();
                    uriTemplate.match(uri.toString(), parameters);
                    _templateAndMatrixParameterValues.putAll(parameters);
                }

                /**
                 * Get vcUID
                 * 
                 */
                public String getVcuid() {
                    return ((String) _templateAndMatrixParameterValues.get("vcUID"));
                }

                /**
                 * Duplicate state and set vcUID
                 * 
                 */
                public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVcenter_servers.VcUIDVirtual_machinesVmUIDAvailable_networks setVcuid(String vcuid) {
                    Map<String, Object> copyMap;
                    copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                    UriBuilder copyUriBuilder = _uriBuilder.clone();
                    copyMap.put("vcUID", vcuid);
                    return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVcenter_servers.VcUIDVirtual_machinesVmUIDAvailable_networks(_client, copyUriBuilder, copyMap);
                }

                /**
                 * Get vmUID
                 * 
                 */
                public String getVmuid() {
                    return ((String) _templateAndMatrixParameterValues.get("vmUID"));
                }

                /**
                 * Duplicate state and set vmUID
                 * 
                 */
                public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVcenter_servers.VcUIDVirtual_machinesVmUIDAvailable_networks setVmuid(String vmuid) {
                    Map<String, Object> copyMap;
                    copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                    UriBuilder copyUriBuilder = _uriBuilder.clone();
                    copyMap.put("vmUID", vmuid);
                    return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVcenter_servers.VcUIDVirtual_machinesVmUIDAvailable_networks(_client, copyUriBuilder, copyMap);
                }

                public<T >T getAsJson(GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T getAsJson(Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class VcUIDVirtual_machinesVmUIDReplication_candidate_clusters {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private VcUIDVirtual_machinesVmUIDReplication_candidate_clusters(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public VcUIDVirtual_machinesVmUIDReplication_candidate_clusters(Client client, URI baseUri, String vcuid, String vmuid) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("{vcUID}/virtual_machines/{vmUID}/replication_candidate_clusters");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    _templateAndMatrixParameterValues.put("vcUID", vcuid);
                    _templateAndMatrixParameterValues.put("vmUID", vmuid);
                }

                /**
                 * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
                 * 
                 */
                public VcUIDVirtual_machinesVmUIDReplication_candidate_clusters(Client client, URI uri) {
                    _client = client;
                    StringBuilder template = new StringBuilder(BASE_URI.toString());
                    if (template.charAt((template.length()- 1))!= '/') {
                        template.append("/clusters/{clusterId}/vcenter_servers/{vcUID}/virtual_machines/{vmUID}/replication_candidate_clusters");
                    } else {
                        template.append("clusters/{clusterId}/vcenter_servers/{vcUID}/virtual_machines/{vmUID}/replication_candidate_clusters");
                    }
                    _uriBuilder = UriBuilder.fromPath(template.toString());
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    UriTemplate uriTemplate = new UriTemplate(template.toString());
                    HashMap<String, String> parameters = new HashMap<String, String>();
                    uriTemplate.match(uri.toString(), parameters);
                    _templateAndMatrixParameterValues.putAll(parameters);
                }

                /**
                 * Get vcUID
                 * 
                 */
                public String getVcuid() {
                    return ((String) _templateAndMatrixParameterValues.get("vcUID"));
                }

                /**
                 * Duplicate state and set vcUID
                 * 
                 */
                public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVcenter_servers.VcUIDVirtual_machinesVmUIDReplication_candidate_clusters setVcuid(String vcuid) {
                    Map<String, Object> copyMap;
                    copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                    UriBuilder copyUriBuilder = _uriBuilder.clone();
                    copyMap.put("vcUID", vcuid);
                    return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVcenter_servers.VcUIDVirtual_machinesVmUIDReplication_candidate_clusters(_client, copyUriBuilder, copyMap);
                }

                /**
                 * Get vmUID
                 * 
                 */
                public String getVmuid() {
                    return ((String) _templateAndMatrixParameterValues.get("vmUID"));
                }

                /**
                 * Duplicate state and set vmUID
                 * 
                 */
                public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVcenter_servers.VcUIDVirtual_machinesVmUIDReplication_candidate_clusters setVmuid(String vmuid) {
                    Map<String, Object> copyMap;
                    copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                    UriBuilder copyUriBuilder = _uriBuilder.clone();
                    copyMap.put("vmUID", vmuid);
                    return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVcenter_servers.VcUIDVirtual_machinesVmUIDReplication_candidate_clusters(_client, copyUriBuilder, copyMap);
                }

                public<T >T getAsJson(GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T getAsJson(Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class VcUIDVirtual_machinesVmUIDTarget_vm_candidates {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private VcUIDVirtual_machinesVmUIDTarget_vm_candidates(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public VcUIDVirtual_machinesVmUIDTarget_vm_candidates(Client client, URI baseUri, String vcuid, String vmuid) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("{vcUID}/virtual_machines/{vmUID}/target_vm_candidates");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    _templateAndMatrixParameterValues.put("vcUID", vcuid);
                    _templateAndMatrixParameterValues.put("vmUID", vmuid);
                }

                /**
                 * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
                 * 
                 */
                public VcUIDVirtual_machinesVmUIDTarget_vm_candidates(Client client, URI uri) {
                    _client = client;
                    StringBuilder template = new StringBuilder(BASE_URI.toString());
                    if (template.charAt((template.length()- 1))!= '/') {
                        template.append("/clusters/{clusterId}/vcenter_servers/{vcUID}/virtual_machines/{vmUID}/target_vm_candidates");
                    } else {
                        template.append("clusters/{clusterId}/vcenter_servers/{vcUID}/virtual_machines/{vmUID}/target_vm_candidates");
                    }
                    _uriBuilder = UriBuilder.fromPath(template.toString());
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    UriTemplate uriTemplate = new UriTemplate(template.toString());
                    HashMap<String, String> parameters = new HashMap<String, String>();
                    uriTemplate.match(uri.toString(), parameters);
                    _templateAndMatrixParameterValues.putAll(parameters);
                }

                /**
                 * Get vcUID
                 * 
                 */
                public String getVcuid() {
                    return ((String) _templateAndMatrixParameterValues.get("vcUID"));
                }

                /**
                 * Duplicate state and set vcUID
                 * 
                 */
                public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVcenter_servers.VcUIDVirtual_machinesVmUIDTarget_vm_candidates setVcuid(String vcuid) {
                    Map<String, Object> copyMap;
                    copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                    UriBuilder copyUriBuilder = _uriBuilder.clone();
                    copyMap.put("vcUID", vcuid);
                    return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVcenter_servers.VcUIDVirtual_machinesVmUIDTarget_vm_candidates(_client, copyUriBuilder, copyMap);
                }

                /**
                 * Get vmUID
                 * 
                 */
                public String getVmuid() {
                    return ((String) _templateAndMatrixParameterValues.get("vmUID"));
                }

                /**
                 * Duplicate state and set vmUID
                 * 
                 */
                public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVcenter_servers.VcUIDVirtual_machinesVmUIDTarget_vm_candidates setVmuid(String vmuid) {
                    Map<String, Object> copyMap;
                    copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                    UriBuilder copyUriBuilder = _uriBuilder.clone();
                    copyMap.put("vmUID", vmuid);
                    return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVcenter_servers.VcUIDVirtual_machinesVmUIDTarget_vm_candidates(_client, copyUriBuilder, copyMap);
                }

                public<T >T getAsJson(GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T getAsJson(Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

                public<T >T getAsJson(String targetclusteruid, String targetvirtualcenteruid, String targetdatacenteruid, String targetesxclusteruid, GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    if (targetclusteruid == null) {
                    }
                    if (targetclusteruid!= null) {
                        localUriBuilder = localUriBuilder.replaceQueryParam("targetClusterUID", targetclusteruid);
                    } else {
                        localUriBuilder = localUriBuilder.replaceQueryParam("targetClusterUID", ((Object[]) null));
                    }
                    if (targetvirtualcenteruid == null) {
                    }
                    if (targetvirtualcenteruid!= null) {
                        localUriBuilder = localUriBuilder.replaceQueryParam("targetVirtualCenterUID", targetvirtualcenteruid);
                    } else {
                        localUriBuilder = localUriBuilder.replaceQueryParam("targetVirtualCenterUID", ((Object[]) null));
                    }
                    if (targetdatacenteruid == null) {
                    }
                    if (targetdatacenteruid!= null) {
                        localUriBuilder = localUriBuilder.replaceQueryParam("targetDatacenterUID", targetdatacenteruid);
                    } else {
                        localUriBuilder = localUriBuilder.replaceQueryParam("targetDatacenterUID", ((Object[]) null));
                    }
                    if (targetesxclusteruid == null) {
                    }
                    if (targetesxclusteruid!= null) {
                        localUriBuilder = localUriBuilder.replaceQueryParam("targetEsxClusterUID", targetesxclusteruid);
                    } else {
                        localUriBuilder = localUriBuilder.replaceQueryParam("targetEsxClusterUID", ((Object[]) null));
                    }
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T getAsJson(String targetclusteruid, String targetvirtualcenteruid, String targetdatacenteruid, String targetesxclusteruid, Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    if (targetclusteruid == null) {
                    }
                    if (targetclusteruid!= null) {
                        localUriBuilder = localUriBuilder.replaceQueryParam("targetClusterUID", targetclusteruid);
                    } else {
                        localUriBuilder = localUriBuilder.replaceQueryParam("targetClusterUID", ((Object[]) null));
                    }
                    if (targetvirtualcenteruid == null) {
                    }
                    if (targetvirtualcenteruid!= null) {
                        localUriBuilder = localUriBuilder.replaceQueryParam("targetVirtualCenterUID", targetvirtualcenteruid);
                    } else {
                        localUriBuilder = localUriBuilder.replaceQueryParam("targetVirtualCenterUID", ((Object[]) null));
                    }
                    if (targetdatacenteruid == null) {
                    }
                    if (targetdatacenteruid!= null) {
                        localUriBuilder = localUriBuilder.replaceQueryParam("targetDatacenterUID", targetdatacenteruid);
                    } else {
                        localUriBuilder = localUriBuilder.replaceQueryParam("targetDatacenterUID", ((Object[]) null));
                    }
                    if (targetesxclusteruid == null) {
                    }
                    if (targetesxclusteruid!= null) {
                        localUriBuilder = localUriBuilder.replaceQueryParam("targetEsxClusterUID", targetesxclusteruid);
                    } else {
                        localUriBuilder = localUriBuilder.replaceQueryParam("targetEsxClusterUID", ((Object[]) null));
                    }
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class View {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private View(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public View(Client client, URI baseUri) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("view");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                }

                public<T >T getAsJson(GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T getAsJson(Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

                public<T >T getAsJson(String shouldrescan, GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    if (shouldrescan == null) {
                    }
                    if (shouldrescan!= null) {
                        localUriBuilder = localUriBuilder.replaceQueryParam("shouldRescan", shouldrescan);
                    } else {
                        localUriBuilder = localUriBuilder.replaceQueryParam("shouldRescan", ((Object[]) null));
                    }
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T getAsJson(String shouldrescan, Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    if (shouldrescan == null) {
                    }
                    if (shouldrescan!= null) {
                        localUriBuilder = localUriBuilder.replaceQueryParam("shouldRescan", shouldrescan);
                    } else {
                        localUriBuilder = localUriBuilder.replaceQueryParam("shouldRescan", ((Object[]) null));
                    }
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

        }

        public static class ClusterIdVcenter_servers_filters {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private ClusterIdVcenter_servers_filters(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public ClusterIdVcenter_servers_filters(Client client, URI baseUri, String clusterid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{clusterId}/vcenter_servers_filters");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public ClusterIdVcenter_servers_filters(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/clusters/{clusterId}/vcenter_servers_filters");
                } else {
                    template.append("clusters/{clusterId}/vcenter_servers_filters");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVcenter_servers_filters setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVcenter_servers_filters(_client, copyUriBuilder, copyMap);
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class ClusterIdVc_certificate_information {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private ClusterIdVc_certificate_information(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public ClusterIdVc_certificate_information(Client client, URI baseUri, String clusterid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{clusterId}/vc_certificate_information");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public ClusterIdVc_certificate_information(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/clusters/{clusterId}/vc_certificate_information");
                } else {
                    template.append("clusters/{clusterId}/vc_certificate_information");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVc_certificate_information setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVc_certificate_information(_client, copyUriBuilder, copyMap);
            }

            public<T >T postJson(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T postJson(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class ClusterIdVirtual_infrastructuresState {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private ClusterIdVirtual_infrastructuresState(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public ClusterIdVirtual_infrastructuresState(Client client, URI baseUri, String clusterid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{clusterId}/virtual_infrastructures/state");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public ClusterIdVirtual_infrastructuresState(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/clusters/{clusterId}/virtual_infrastructures/state");
                } else {
                    template.append("clusters/{clusterId}/virtual_infrastructures/state");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVirtual_infrastructuresState setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVirtual_infrastructuresState(_client, copyUriBuilder, copyMap);
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class ClusterIdVirtual_infra_configuration {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private ClusterIdVirtual_infra_configuration(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public ClusterIdVirtual_infra_configuration(Client client, URI baseUri, String clusterid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{clusterId}/virtual_infra_configuration");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public ClusterIdVirtual_infra_configuration(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/clusters/{clusterId}/virtual_infra_configuration");
                } else {
                    template.append("clusters/{clusterId}/virtual_infra_configuration");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVirtual_infra_configuration setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVirtual_infra_configuration(_client, copyUriBuilder, copyMap);
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class ClusterIdVirtual_machinesInfoBy_uids {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private ClusterIdVirtual_machinesInfoBy_uids(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public ClusterIdVirtual_machinesInfoBy_uids(Client client, URI baseUri, String clusterid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{clusterId}/virtual_machines/info/by_uids");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public ClusterIdVirtual_machinesInfoBy_uids(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/clusters/{clusterId}/virtual_machines/info/by_uids");
                } else {
                    template.append("clusters/{clusterId}/virtual_machines/info/by_uids");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVirtual_machinesInfoBy_uids setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVirtual_machinesInfoBy_uids(_client, copyUriBuilder, copyMap);
            }

            public<T >T postJson(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T postJson(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class ClusterIdVirtual_machinesStateBy_uids {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private ClusterIdVirtual_machinesStateBy_uids(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public ClusterIdVirtual_machinesStateBy_uids(Client client, URI baseUri, String clusterid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{clusterId}/virtual_machines/state/by_uids");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public ClusterIdVirtual_machinesStateBy_uids(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/clusters/{clusterId}/virtual_machines/state/by_uids");
                } else {
                    template.append("clusters/{clusterId}/virtual_machines/state/by_uids");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVirtual_machinesStateBy_uids setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVirtual_machinesStateBy_uids(_client, copyUriBuilder, copyMap);
            }

            public<T >T postJson(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T postJson(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class ClusterIdVolumes {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private ClusterIdVolumes(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public ClusterIdVolumes(Client client, URI baseUri, String clusterid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{clusterId}/volumes");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public ClusterIdVolumes(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/clusters/{clusterId}/volumes");
                } else {
                    template.append("clusters/{clusterId}/volumes");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVolumes setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVolumes(_client, copyUriBuilder, copyMap);
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

            public<T >T getAsJson(String refreshview, String product, String minVolumeSize, String maxVolumeSize, String direction, String sortBy, String page, String pagesize, String vendor, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                if (refreshview == null) {
                }
                if (refreshview!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("refreshView", refreshview);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("refreshView", ((Object[]) null));
                }
                if (product == null) {
                }
                if (product!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("product", product);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("product", ((Object[]) null));
                }
                if (minVolumeSize == null) {
                }
                if (minVolumeSize!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("min_volume_size", minVolumeSize);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("min_volume_size", ((Object[]) null));
                }
                if (maxVolumeSize == null) {
                }
                if (maxVolumeSize!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("max_volume_size", maxVolumeSize);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("max_volume_size", ((Object[]) null));
                }
                if (direction == null) {
                }
                if (direction!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("direction", direction);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("direction", ((Object[]) null));
                }
                if (sortBy == null) {
                }
                if (sortBy!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("sort_by", sortBy);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("sort_by", ((Object[]) null));
                }
                if (page == null) {
                }
                if (page!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("page", page);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("page", ((Object[]) null));
                }
                if (pagesize == null) {
                }
                if (pagesize!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("pagesize", pagesize);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("pagesize", ((Object[]) null));
                }
                if (vendor == null) {
                }
                if (vendor!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("vendor", vendor);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("vendor", ((Object[]) null));
                }
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(String refreshview, String product, String minVolumeSize, String maxVolumeSize, String direction, String sortBy, String page, String pagesize, String vendor, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                if (refreshview == null) {
                }
                if (refreshview!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("refreshView", refreshview);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("refreshView", ((Object[]) null));
                }
                if (product == null) {
                }
                if (product!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("product", product);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("product", ((Object[]) null));
                }
                if (minVolumeSize == null) {
                }
                if (minVolumeSize!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("min_volume_size", minVolumeSize);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("min_volume_size", ((Object[]) null));
                }
                if (maxVolumeSize == null) {
                }
                if (maxVolumeSize!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("max_volume_size", maxVolumeSize);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("max_volume_size", ((Object[]) null));
                }
                if (direction == null) {
                }
                if (direction!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("direction", direction);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("direction", ((Object[]) null));
                }
                if (sortBy == null) {
                }
                if (sortBy!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("sort_by", sortBy);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("sort_by", ((Object[]) null));
                }
                if (page == null) {
                }
                if (page!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("page", page);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("page", ((Object[]) null));
                }
                if (pagesize == null) {
                }
                if (pagesize!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("pagesize", pagesize);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("pagesize", ((Object[]) null));
                }
                if (vendor == null) {
                }
                if (vendor!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("vendor", vendor);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("vendor", ((Object[]) null));
                }
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class ClusterIdVolumesAvailable {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private ClusterIdVolumesAvailable(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public ClusterIdVolumesAvailable(Client client, URI baseUri, String clusterid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{clusterId}/volumes/available");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public ClusterIdVolumesAvailable(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/clusters/{clusterId}/volumes/available");
                } else {
                    template.append("clusters/{clusterId}/volumes/available");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVolumesAvailable setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVolumesAvailable(_client, copyUriBuilder, copyMap);
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

            public<T >T getAsJson(String refreshview, String vendor, String product, String page, String pagesize, String minVolumeSize, String maxVolumeSize, String direction, String sortBy, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                if (refreshview == null) {
                }
                if (refreshview!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("refreshView", refreshview);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("refreshView", ((Object[]) null));
                }
                if (vendor == null) {
                }
                if (vendor!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("vendor", vendor);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("vendor", ((Object[]) null));
                }
                if (product == null) {
                }
                if (product!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("product", product);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("product", ((Object[]) null));
                }
                if (page == null) {
                }
                if (page!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("page", page);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("page", ((Object[]) null));
                }
                if (pagesize == null) {
                }
                if (pagesize!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("pagesize", pagesize);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("pagesize", ((Object[]) null));
                }
                if (minVolumeSize == null) {
                }
                if (minVolumeSize!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("min_volume_size", minVolumeSize);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("min_volume_size", ((Object[]) null));
                }
                if (maxVolumeSize == null) {
                }
                if (maxVolumeSize!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("max_volume_size", maxVolumeSize);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("max_volume_size", ((Object[]) null));
                }
                if (direction == null) {
                }
                if (direction!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("direction", direction);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("direction", ((Object[]) null));
                }
                if (sortBy == null) {
                }
                if (sortBy!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("sort_by", sortBy);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("sort_by", ((Object[]) null));
                }
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(String refreshview, String vendor, String product, String page, String pagesize, String minVolumeSize, String maxVolumeSize, String direction, String sortBy, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                if (refreshview == null) {
                }
                if (refreshview!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("refreshView", refreshview);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("refreshView", ((Object[]) null));
                }
                if (vendor == null) {
                }
                if (vendor!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("vendor", vendor);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("vendor", ((Object[]) null));
                }
                if (product == null) {
                }
                if (product!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("product", product);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("product", ((Object[]) null));
                }
                if (page == null) {
                }
                if (page!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("page", page);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("page", ((Object[]) null));
                }
                if (pagesize == null) {
                }
                if (pagesize!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("pagesize", pagesize);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("pagesize", ((Object[]) null));
                }
                if (minVolumeSize == null) {
                }
                if (minVolumeSize!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("min_volume_size", minVolumeSize);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("min_volume_size", ((Object[]) null));
                }
                if (maxVolumeSize == null) {
                }
                if (maxVolumeSize!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("max_volume_size", maxVolumeSize);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("max_volume_size", ((Object[]) null));
                }
                if (direction == null) {
                }
                if (direction!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("direction", direction);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("direction", ((Object[]) null));
                }
                if (sortBy == null) {
                }
                if (sortBy!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("sort_by", sortBy);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("sort_by", ((Object[]) null));
                }
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class ClusterIdVolumesAvailableClariion {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private ClusterIdVolumesAvailableClariion(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public ClusterIdVolumesAvailableClariion(Client client, URI baseUri, String clusterid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{clusterId}/volumes/available/clariion");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public ClusterIdVolumesAvailableClariion(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/clusters/{clusterId}/volumes/available/clariion");
                } else {
                    template.append("clusters/{clusterId}/volumes/available/clariion");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVolumesAvailableClariion setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVolumesAvailableClariion(_client, copyUriBuilder, copyMap);
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

            public<T >T getAsJson(String refreshview, String vendor, String product, String minVolumeSize, String maxVolumeSize, String page, String pagesize, String direction, String sortBy, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                if (refreshview == null) {
                }
                if (refreshview!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("refreshView", refreshview);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("refreshView", ((Object[]) null));
                }
                if (vendor == null) {
                }
                if (vendor!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("vendor", vendor);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("vendor", ((Object[]) null));
                }
                if (product == null) {
                }
                if (product!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("product", product);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("product", ((Object[]) null));
                }
                if (minVolumeSize == null) {
                }
                if (minVolumeSize!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("min_volume_size", minVolumeSize);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("min_volume_size", ((Object[]) null));
                }
                if (maxVolumeSize == null) {
                }
                if (maxVolumeSize!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("max_volume_size", maxVolumeSize);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("max_volume_size", ((Object[]) null));
                }
                if (page == null) {
                }
                if (page!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("page", page);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("page", ((Object[]) null));
                }
                if (pagesize == null) {
                }
                if (pagesize!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("pagesize", pagesize);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("pagesize", ((Object[]) null));
                }
                if (direction == null) {
                }
                if (direction!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("direction", direction);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("direction", ((Object[]) null));
                }
                if (sortBy == null) {
                }
                if (sortBy!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("sort_by", sortBy);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("sort_by", ((Object[]) null));
                }
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(String refreshview, String vendor, String product, String minVolumeSize, String maxVolumeSize, String page, String pagesize, String direction, String sortBy, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                if (refreshview == null) {
                }
                if (refreshview!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("refreshView", refreshview);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("refreshView", ((Object[]) null));
                }
                if (vendor == null) {
                }
                if (vendor!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("vendor", vendor);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("vendor", ((Object[]) null));
                }
                if (product == null) {
                }
                if (product!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("product", product);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("product", ((Object[]) null));
                }
                if (minVolumeSize == null) {
                }
                if (minVolumeSize!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("min_volume_size", minVolumeSize);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("min_volume_size", ((Object[]) null));
                }
                if (maxVolumeSize == null) {
                }
                if (maxVolumeSize!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("max_volume_size", maxVolumeSize);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("max_volume_size", ((Object[]) null));
                }
                if (page == null) {
                }
                if (page!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("page", page);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("page", ((Object[]) null));
                }
                if (pagesize == null) {
                }
                if (pagesize!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("pagesize", pagesize);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("pagesize", ((Object[]) null));
                }
                if (direction == null) {
                }
                if (direction!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("direction", direction);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("direction", ((Object[]) null));
                }
                if (sortBy == null) {
                }
                if (sortBy!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("sort_by", sortBy);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("sort_by", ((Object[]) null));
                }
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class ClusterIdVolumesAvailableSymmetrix {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private ClusterIdVolumesAvailableSymmetrix(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public ClusterIdVolumesAvailableSymmetrix(Client client, URI baseUri, String clusterid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{clusterId}/volumes/available/symmetrix");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public ClusterIdVolumesAvailableSymmetrix(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/clusters/{clusterId}/volumes/available/symmetrix");
                } else {
                    template.append("clusters/{clusterId}/volumes/available/symmetrix");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVolumesAvailableSymmetrix setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVolumesAvailableSymmetrix(_client, copyUriBuilder, copyMap);
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

            public<T >T getAsJson(String refreshview, String page, String pagesize, String vendor, String product, String minVolumeSize, String maxVolumeSize, String direction, String sortBy, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                if (refreshview == null) {
                }
                if (refreshview!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("refreshView", refreshview);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("refreshView", ((Object[]) null));
                }
                if (page == null) {
                }
                if (page!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("page", page);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("page", ((Object[]) null));
                }
                if (pagesize == null) {
                }
                if (pagesize!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("pagesize", pagesize);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("pagesize", ((Object[]) null));
                }
                if (vendor == null) {
                }
                if (vendor!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("vendor", vendor);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("vendor", ((Object[]) null));
                }
                if (product == null) {
                }
                if (product!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("product", product);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("product", ((Object[]) null));
                }
                if (minVolumeSize == null) {
                }
                if (minVolumeSize!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("min_volume_size", minVolumeSize);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("min_volume_size", ((Object[]) null));
                }
                if (maxVolumeSize == null) {
                }
                if (maxVolumeSize!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("max_volume_size", maxVolumeSize);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("max_volume_size", ((Object[]) null));
                }
                if (direction == null) {
                }
                if (direction!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("direction", direction);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("direction", ((Object[]) null));
                }
                if (sortBy == null) {
                }
                if (sortBy!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("sort_by", sortBy);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("sort_by", ((Object[]) null));
                }
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(String refreshview, String page, String pagesize, String vendor, String product, String minVolumeSize, String maxVolumeSize, String direction, String sortBy, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                if (refreshview == null) {
                }
                if (refreshview!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("refreshView", refreshview);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("refreshView", ((Object[]) null));
                }
                if (page == null) {
                }
                if (page!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("page", page);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("page", ((Object[]) null));
                }
                if (pagesize == null) {
                }
                if (pagesize!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("pagesize", pagesize);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("pagesize", ((Object[]) null));
                }
                if (vendor == null) {
                }
                if (vendor!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("vendor", vendor);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("vendor", ((Object[]) null));
                }
                if (product == null) {
                }
                if (product!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("product", product);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("product", ((Object[]) null));
                }
                if (minVolumeSize == null) {
                }
                if (minVolumeSize!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("min_volume_size", minVolumeSize);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("min_volume_size", ((Object[]) null));
                }
                if (maxVolumeSize == null) {
                }
                if (maxVolumeSize!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("max_volume_size", maxVolumeSize);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("max_volume_size", ((Object[]) null));
                }
                if (direction == null) {
                }
                if (direction!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("direction", direction);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("direction", ((Object[]) null));
                }
                if (sortBy == null) {
                }
                if (sortBy!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("sort_by", sortBy);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("sort_by", ((Object[]) null));
                }
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class ClusterIdVolumesAvailableVirtual {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private ClusterIdVolumesAvailableVirtual(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public ClusterIdVolumesAvailableVirtual(Client client, URI baseUri, String clusterid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{clusterId}/volumes/available/virtual");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public ClusterIdVolumesAvailableVirtual(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/clusters/{clusterId}/volumes/available/virtual");
                } else {
                    template.append("clusters/{clusterId}/volumes/available/virtual");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVolumesAvailableVirtual setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVolumesAvailableVirtual(_client, copyUriBuilder, copyMap);
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

            public<T >T getAsJson(String refreshview, String page, String pagesize, String vendor, String product, String minVolumeSize, String maxVolumeSize, String direction, String sortBy, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                if (refreshview == null) {
                }
                if (refreshview!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("refreshView", refreshview);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("refreshView", ((Object[]) null));
                }
                if (page == null) {
                }
                if (page!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("page", page);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("page", ((Object[]) null));
                }
                if (pagesize == null) {
                }
                if (pagesize!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("pagesize", pagesize);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("pagesize", ((Object[]) null));
                }
                if (vendor == null) {
                }
                if (vendor!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("vendor", vendor);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("vendor", ((Object[]) null));
                }
                if (product == null) {
                }
                if (product!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("product", product);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("product", ((Object[]) null));
                }
                if (minVolumeSize == null) {
                }
                if (minVolumeSize!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("min_volume_size", minVolumeSize);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("min_volume_size", ((Object[]) null));
                }
                if (maxVolumeSize == null) {
                }
                if (maxVolumeSize!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("max_volume_size", maxVolumeSize);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("max_volume_size", ((Object[]) null));
                }
                if (direction == null) {
                }
                if (direction!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("direction", direction);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("direction", ((Object[]) null));
                }
                if (sortBy == null) {
                }
                if (sortBy!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("sort_by", sortBy);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("sort_by", ((Object[]) null));
                }
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(String refreshview, String page, String pagesize, String vendor, String product, String minVolumeSize, String maxVolumeSize, String direction, String sortBy, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                if (refreshview == null) {
                }
                if (refreshview!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("refreshView", refreshview);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("refreshView", ((Object[]) null));
                }
                if (page == null) {
                }
                if (page!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("page", page);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("page", ((Object[]) null));
                }
                if (pagesize == null) {
                }
                if (pagesize!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("pagesize", pagesize);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("pagesize", ((Object[]) null));
                }
                if (vendor == null) {
                }
                if (vendor!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("vendor", vendor);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("vendor", ((Object[]) null));
                }
                if (product == null) {
                }
                if (product!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("product", product);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("product", ((Object[]) null));
                }
                if (minVolumeSize == null) {
                }
                if (minVolumeSize!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("min_volume_size", minVolumeSize);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("min_volume_size", ((Object[]) null));
                }
                if (maxVolumeSize == null) {
                }
                if (maxVolumeSize!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("max_volume_size", maxVolumeSize);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("max_volume_size", ((Object[]) null));
                }
                if (direction == null) {
                }
                if (direction!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("direction", direction);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("direction", ((Object[]) null));
                }
                if (sortBy == null) {
                }
                if (sortBy!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("sort_by", sortBy);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("sort_by", ((Object[]) null));
                }
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class ClusterIdVolumesAvailableVplex {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private ClusterIdVolumesAvailableVplex(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public ClusterIdVolumesAvailableVplex(Client client, URI baseUri, String clusterid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{clusterId}/volumes/available/vplex");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public ClusterIdVolumesAvailableVplex(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/clusters/{clusterId}/volumes/available/vplex");
                } else {
                    template.append("clusters/{clusterId}/volumes/available/vplex");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVolumesAvailableVplex setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVolumesAvailableVplex(_client, copyUriBuilder, copyMap);
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

            public<T >T getAsJson(String refreshview, String page, String pagesize, String vendor, String product, String minVolumeSize, String maxVolumeSize, String direction, String sortBy, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                if (refreshview == null) {
                }
                if (refreshview!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("refreshView", refreshview);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("refreshView", ((Object[]) null));
                }
                if (page == null) {
                }
                if (page!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("page", page);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("page", ((Object[]) null));
                }
                if (pagesize == null) {
                }
                if (pagesize!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("pagesize", pagesize);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("pagesize", ((Object[]) null));
                }
                if (vendor == null) {
                }
                if (vendor!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("vendor", vendor);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("vendor", ((Object[]) null));
                }
                if (product == null) {
                }
                if (product!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("product", product);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("product", ((Object[]) null));
                }
                if (minVolumeSize == null) {
                }
                if (minVolumeSize!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("min_volume_size", minVolumeSize);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("min_volume_size", ((Object[]) null));
                }
                if (maxVolumeSize == null) {
                }
                if (maxVolumeSize!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("max_volume_size", maxVolumeSize);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("max_volume_size", ((Object[]) null));
                }
                if (direction == null) {
                }
                if (direction!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("direction", direction);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("direction", ((Object[]) null));
                }
                if (sortBy == null) {
                }
                if (sortBy!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("sort_by", sortBy);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("sort_by", ((Object[]) null));
                }
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(String refreshview, String page, String pagesize, String vendor, String product, String minVolumeSize, String maxVolumeSize, String direction, String sortBy, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                if (refreshview == null) {
                }
                if (refreshview!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("refreshView", refreshview);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("refreshView", ((Object[]) null));
                }
                if (page == null) {
                }
                if (page!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("page", page);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("page", ((Object[]) null));
                }
                if (pagesize == null) {
                }
                if (pagesize!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("pagesize", pagesize);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("pagesize", ((Object[]) null));
                }
                if (vendor == null) {
                }
                if (vendor!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("vendor", vendor);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("vendor", ((Object[]) null));
                }
                if (product == null) {
                }
                if (product!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("product", product);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("product", ((Object[]) null));
                }
                if (minVolumeSize == null) {
                }
                if (minVolumeSize!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("min_volume_size", minVolumeSize);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("min_volume_size", ((Object[]) null));
                }
                if (maxVolumeSize == null) {
                }
                if (maxVolumeSize!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("max_volume_size", maxVolumeSize);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("max_volume_size", ((Object[]) null));
                }
                if (direction == null) {
                }
                if (direction!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("direction", direction);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("direction", ((Object[]) null));
                }
                if (sortBy == null) {
                }
                if (sortBy!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("sort_by", sortBy);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("sort_by", ((Object[]) null));
                }
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class ClusterIdVolumesClariion {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private ClusterIdVolumesClariion(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public ClusterIdVolumesClariion(Client client, URI baseUri, String clusterid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{clusterId}/volumes/clariion");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public ClusterIdVolumesClariion(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/clusters/{clusterId}/volumes/clariion");
                } else {
                    template.append("clusters/{clusterId}/volumes/clariion");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVolumesClariion setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVolumesClariion(_client, copyUriBuilder, copyMap);
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

            public<T >T getAsJson(String refreshview, String page, String pagesize, String vendor, String product, String minVolumeSize, String maxVolumeSize, String direction, String sortBy, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                if (refreshview == null) {
                }
                if (refreshview!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("refreshView", refreshview);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("refreshView", ((Object[]) null));
                }
                if (page == null) {
                }
                if (page!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("page", page);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("page", ((Object[]) null));
                }
                if (pagesize == null) {
                }
                if (pagesize!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("pagesize", pagesize);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("pagesize", ((Object[]) null));
                }
                if (vendor == null) {
                }
                if (vendor!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("vendor", vendor);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("vendor", ((Object[]) null));
                }
                if (product == null) {
                }
                if (product!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("product", product);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("product", ((Object[]) null));
                }
                if (minVolumeSize == null) {
                }
                if (minVolumeSize!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("min_volume_size", minVolumeSize);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("min_volume_size", ((Object[]) null));
                }
                if (maxVolumeSize == null) {
                }
                if (maxVolumeSize!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("max_volume_size", maxVolumeSize);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("max_volume_size", ((Object[]) null));
                }
                if (direction == null) {
                }
                if (direction!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("direction", direction);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("direction", ((Object[]) null));
                }
                if (sortBy == null) {
                }
                if (sortBy!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("sort_by", sortBy);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("sort_by", ((Object[]) null));
                }
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(String refreshview, String page, String pagesize, String vendor, String product, String minVolumeSize, String maxVolumeSize, String direction, String sortBy, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                if (refreshview == null) {
                }
                if (refreshview!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("refreshView", refreshview);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("refreshView", ((Object[]) null));
                }
                if (page == null) {
                }
                if (page!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("page", page);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("page", ((Object[]) null));
                }
                if (pagesize == null) {
                }
                if (pagesize!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("pagesize", pagesize);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("pagesize", ((Object[]) null));
                }
                if (vendor == null) {
                }
                if (vendor!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("vendor", vendor);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("vendor", ((Object[]) null));
                }
                if (product == null) {
                }
                if (product!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("product", product);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("product", ((Object[]) null));
                }
                if (minVolumeSize == null) {
                }
                if (minVolumeSize!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("min_volume_size", minVolumeSize);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("min_volume_size", ((Object[]) null));
                }
                if (maxVolumeSize == null) {
                }
                if (maxVolumeSize!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("max_volume_size", maxVolumeSize);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("max_volume_size", ((Object[]) null));
                }
                if (direction == null) {
                }
                if (direction!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("direction", direction);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("direction", ((Object[]) null));
                }
                if (sortBy == null) {
                }
                if (sortBy!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("sort_by", sortBy);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("sort_by", ((Object[]) null));
                }
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class ClusterIdVolumesClariionContext {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private ClusterIdVolumesClariionContext(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public ClusterIdVolumesClariionContext(Client client, URI baseUri, String clusterid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{clusterId}/volumes/clariion/context");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public ClusterIdVolumesClariionContext(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/clusters/{clusterId}/volumes/clariion/context");
                } else {
                    template.append("clusters/{clusterId}/volumes/clariion/context");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVolumesClariionContext setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVolumesClariionContext(_client, copyUriBuilder, copyMap);
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class ClusterIdVolumesDeviceIdAvailable_splitters {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private ClusterIdVolumesDeviceIdAvailable_splitters(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public ClusterIdVolumesDeviceIdAvailable_splitters(Client client, URI baseUri, String clusterid, String deviceid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{clusterId}/volumes/{deviceId}/available_splitters");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
                _templateAndMatrixParameterValues.put("deviceId", deviceid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public ClusterIdVolumesDeviceIdAvailable_splitters(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/clusters/{clusterId}/volumes/{deviceId}/available_splitters");
                } else {
                    template.append("clusters/{clusterId}/volumes/{deviceId}/available_splitters");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVolumesDeviceIdAvailable_splitters setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVolumesDeviceIdAvailable_splitters(_client, copyUriBuilder, copyMap);
            }

            /**
             * Get deviceId
             * 
             */
            public String getDeviceid() {
                return ((String) _templateAndMatrixParameterValues.get("deviceId"));
            }

            /**
             * Duplicate state and set deviceId
             * 
             */
            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVolumesDeviceIdAvailable_splitters setDeviceid(String deviceid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("deviceId", deviceid);
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVolumesDeviceIdAvailable_splitters(_client, copyUriBuilder, copyMap);
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class ClusterIdVolumesSymmetrix {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private ClusterIdVolumesSymmetrix(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public ClusterIdVolumesSymmetrix(Client client, URI baseUri, String clusterid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{clusterId}/volumes/symmetrix");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public ClusterIdVolumesSymmetrix(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/clusters/{clusterId}/volumes/symmetrix");
                } else {
                    template.append("clusters/{clusterId}/volumes/symmetrix");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVolumesSymmetrix setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVolumesSymmetrix(_client, copyUriBuilder, copyMap);
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

            public<T >T getAsJson(String refreshview, String page, String pagesize, String vendor, String product, String minVolumeSize, String maxVolumeSize, String direction, String sortBy, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                if (refreshview == null) {
                }
                if (refreshview!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("refreshView", refreshview);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("refreshView", ((Object[]) null));
                }
                if (page == null) {
                }
                if (page!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("page", page);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("page", ((Object[]) null));
                }
                if (pagesize == null) {
                }
                if (pagesize!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("pagesize", pagesize);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("pagesize", ((Object[]) null));
                }
                if (vendor == null) {
                }
                if (vendor!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("vendor", vendor);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("vendor", ((Object[]) null));
                }
                if (product == null) {
                }
                if (product!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("product", product);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("product", ((Object[]) null));
                }
                if (minVolumeSize == null) {
                }
                if (minVolumeSize!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("min_volume_size", minVolumeSize);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("min_volume_size", ((Object[]) null));
                }
                if (maxVolumeSize == null) {
                }
                if (maxVolumeSize!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("max_volume_size", maxVolumeSize);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("max_volume_size", ((Object[]) null));
                }
                if (direction == null) {
                }
                if (direction!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("direction", direction);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("direction", ((Object[]) null));
                }
                if (sortBy == null) {
                }
                if (sortBy!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("sort_by", sortBy);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("sort_by", ((Object[]) null));
                }
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(String refreshview, String page, String pagesize, String vendor, String product, String minVolumeSize, String maxVolumeSize, String direction, String sortBy, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                if (refreshview == null) {
                }
                if (refreshview!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("refreshView", refreshview);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("refreshView", ((Object[]) null));
                }
                if (page == null) {
                }
                if (page!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("page", page);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("page", ((Object[]) null));
                }
                if (pagesize == null) {
                }
                if (pagesize!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("pagesize", pagesize);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("pagesize", ((Object[]) null));
                }
                if (vendor == null) {
                }
                if (vendor!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("vendor", vendor);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("vendor", ((Object[]) null));
                }
                if (product == null) {
                }
                if (product!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("product", product);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("product", ((Object[]) null));
                }
                if (minVolumeSize == null) {
                }
                if (minVolumeSize!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("min_volume_size", minVolumeSize);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("min_volume_size", ((Object[]) null));
                }
                if (maxVolumeSize == null) {
                }
                if (maxVolumeSize!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("max_volume_size", maxVolumeSize);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("max_volume_size", ((Object[]) null));
                }
                if (direction == null) {
                }
                if (direction!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("direction", direction);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("direction", ((Object[]) null));
                }
                if (sortBy == null) {
                }
                if (sortBy!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("sort_by", sortBy);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("sort_by", ((Object[]) null));
                }
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class ClusterIdVolumesVirtual {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private ClusterIdVolumesVirtual(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public ClusterIdVolumesVirtual(Client client, URI baseUri, String clusterid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{clusterId}/volumes/virtual");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public ClusterIdVolumesVirtual(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/clusters/{clusterId}/volumes/virtual");
                } else {
                    template.append("clusters/{clusterId}/volumes/virtual");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVolumesVirtual setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVolumesVirtual(_client, copyUriBuilder, copyMap);
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

            public<T >T getAsJson(String refreshview, String page, String pagesize, String vendor, String product, String minVolumeSize, String maxVolumeSize, String direction, String sortBy, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                if (refreshview == null) {
                }
                if (refreshview!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("refreshView", refreshview);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("refreshView", ((Object[]) null));
                }
                if (page == null) {
                }
                if (page!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("page", page);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("page", ((Object[]) null));
                }
                if (pagesize == null) {
                }
                if (pagesize!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("pagesize", pagesize);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("pagesize", ((Object[]) null));
                }
                if (vendor == null) {
                }
                if (vendor!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("vendor", vendor);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("vendor", ((Object[]) null));
                }
                if (product == null) {
                }
                if (product!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("product", product);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("product", ((Object[]) null));
                }
                if (minVolumeSize == null) {
                }
                if (minVolumeSize!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("min_volume_size", minVolumeSize);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("min_volume_size", ((Object[]) null));
                }
                if (maxVolumeSize == null) {
                }
                if (maxVolumeSize!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("max_volume_size", maxVolumeSize);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("max_volume_size", ((Object[]) null));
                }
                if (direction == null) {
                }
                if (direction!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("direction", direction);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("direction", ((Object[]) null));
                }
                if (sortBy == null) {
                }
                if (sortBy!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("sort_by", sortBy);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("sort_by", ((Object[]) null));
                }
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(String refreshview, String page, String pagesize, String vendor, String product, String minVolumeSize, String maxVolumeSize, String direction, String sortBy, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                if (refreshview == null) {
                }
                if (refreshview!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("refreshView", refreshview);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("refreshView", ((Object[]) null));
                }
                if (page == null) {
                }
                if (page!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("page", page);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("page", ((Object[]) null));
                }
                if (pagesize == null) {
                }
                if (pagesize!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("pagesize", pagesize);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("pagesize", ((Object[]) null));
                }
                if (vendor == null) {
                }
                if (vendor!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("vendor", vendor);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("vendor", ((Object[]) null));
                }
                if (product == null) {
                }
                if (product!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("product", product);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("product", ((Object[]) null));
                }
                if (minVolumeSize == null) {
                }
                if (minVolumeSize!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("min_volume_size", minVolumeSize);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("min_volume_size", ((Object[]) null));
                }
                if (maxVolumeSize == null) {
                }
                if (maxVolumeSize!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("max_volume_size", maxVolumeSize);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("max_volume_size", ((Object[]) null));
                }
                if (direction == null) {
                }
                if (direction!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("direction", direction);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("direction", ((Object[]) null));
                }
                if (sortBy == null) {
                }
                if (sortBy!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("sort_by", sortBy);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("sort_by", ((Object[]) null));
                }
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class ClusterIdVolumesVolumeId {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private ClusterIdVolumesVolumeId(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public ClusterIdVolumesVolumeId(Client client, URI baseUri, String clusterid, String volumeid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{clusterId}/volumes/{volumeId}");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
                _templateAndMatrixParameterValues.put("volumeId", volumeid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public ClusterIdVolumesVolumeId(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/clusters/{clusterId}/volumes/{volumeId}");
                } else {
                    template.append("clusters/{clusterId}/volumes/{volumeId}");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVolumesVolumeId setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVolumesVolumeId(_client, copyUriBuilder, copyMap);
            }

            /**
             * Get volumeId
             * 
             */
            public String getVolumeid() {
                return ((String) _templateAndMatrixParameterValues.get("volumeId"));
            }

            /**
             * Duplicate state and set volumeId
             * 
             */
            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVolumesVolumeId setVolumeid(String volumeid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("volumeId", volumeid);
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVolumesVolumeId(_client, copyUriBuilder, copyMap);
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class ClusterIdVolumesVolumeIdInformation {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private ClusterIdVolumesVolumeIdInformation(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public ClusterIdVolumesVolumeIdInformation(Client client, URI baseUri, String clusterid, String volumeid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{clusterId}/volumes/{volumeId}/information");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
                _templateAndMatrixParameterValues.put("volumeId", volumeid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public ClusterIdVolumesVolumeIdInformation(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/clusters/{clusterId}/volumes/{volumeId}/information");
                } else {
                    template.append("clusters/{clusterId}/volumes/{volumeId}/information");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVolumesVolumeIdInformation setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVolumesVolumeIdInformation(_client, copyUriBuilder, copyMap);
            }

            /**
             * Get volumeId
             * 
             */
            public String getVolumeid() {
                return ((String) _templateAndMatrixParameterValues.get("volumeId"));
            }

            /**
             * Duplicate state and set volumeId
             * 
             */
            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVolumesVolumeIdInformation setVolumeid(String volumeid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("volumeId", volumeid);
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVolumesVolumeIdInformation(_client, copyUriBuilder, copyMap);
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class ClusterIdVolumesVolumeIdPaths {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private ClusterIdVolumesVolumeIdPaths(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public ClusterIdVolumesVolumeIdPaths(Client client, URI baseUri, String clusterid, String volumeid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{clusterId}/volumes/{volumeId}/paths");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
                _templateAndMatrixParameterValues.put("volumeId", volumeid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public ClusterIdVolumesVolumeIdPaths(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/clusters/{clusterId}/volumes/{volumeId}/paths");
                } else {
                    template.append("clusters/{clusterId}/volumes/{volumeId}/paths");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVolumesVolumeIdPaths setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVolumesVolumeIdPaths(_client, copyUriBuilder, copyMap);
            }

            /**
             * Get volumeId
             * 
             */
            public String getVolumeid() {
                return ((String) _templateAndMatrixParameterValues.get("volumeId"));
            }

            /**
             * Duplicate state and set volumeId
             * 
             */
            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVolumesVolumeIdPaths setVolumeid(String volumeid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("volumeId", volumeid);
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVolumesVolumeIdPaths(_client, copyUriBuilder, copyMap);
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class ClusterIdVolumesVolumeIdUser_settings {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private ClusterIdVolumesVolumeIdUser_settings(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public ClusterIdVolumesVolumeIdUser_settings(Client client, URI baseUri, String clusterid, String volumeid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{clusterId}/volumes/{volumeId}/user_settings");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
                _templateAndMatrixParameterValues.put("volumeId", volumeid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public ClusterIdVolumesVolumeIdUser_settings(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/clusters/{clusterId}/volumes/{volumeId}/user_settings");
                } else {
                    template.append("clusters/{clusterId}/volumes/{volumeId}/user_settings");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVolumesVolumeIdUser_settings setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVolumesVolumeIdUser_settings(_client, copyUriBuilder, copyMap);
            }

            /**
             * Get volumeId
             * 
             */
            public String getVolumeid() {
                return ((String) _templateAndMatrixParameterValues.get("volumeId"));
            }

            /**
             * Duplicate state and set volumeId
             * 
             */
            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVolumesVolumeIdUser_settings setVolumeid(String volumeid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("volumeId", volumeid);
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVolumesVolumeIdUser_settings(_client, copyUriBuilder, copyMap);
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class ClusterIdVolumesVplex {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private ClusterIdVolumesVplex(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public ClusterIdVolumesVplex(Client client, URI baseUri, String clusterid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{clusterId}/volumes/vplex");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public ClusterIdVolumesVplex(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/clusters/{clusterId}/volumes/vplex");
                } else {
                    template.append("clusters/{clusterId}/volumes/vplex");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Clusters.ClusterIdVolumesVplex setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Clusters.ClusterIdVolumesVplex(_client, copyUriBuilder, copyMap);
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

            public<T >T getAsJson(String refreshview, String page, String pagesize, String vendor, String product, String minVolumeSize, String maxVolumeSize, String direction, String sortBy, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                if (refreshview == null) {
                }
                if (refreshview!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("refreshView", refreshview);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("refreshView", ((Object[]) null));
                }
                if (page == null) {
                }
                if (page!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("page", page);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("page", ((Object[]) null));
                }
                if (pagesize == null) {
                }
                if (pagesize!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("pagesize", pagesize);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("pagesize", ((Object[]) null));
                }
                if (vendor == null) {
                }
                if (vendor!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("vendor", vendor);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("vendor", ((Object[]) null));
                }
                if (product == null) {
                }
                if (product!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("product", product);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("product", ((Object[]) null));
                }
                if (minVolumeSize == null) {
                }
                if (minVolumeSize!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("min_volume_size", minVolumeSize);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("min_volume_size", ((Object[]) null));
                }
                if (maxVolumeSize == null) {
                }
                if (maxVolumeSize!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("max_volume_size", maxVolumeSize);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("max_volume_size", ((Object[]) null));
                }
                if (direction == null) {
                }
                if (direction!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("direction", direction);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("direction", ((Object[]) null));
                }
                if (sortBy == null) {
                }
                if (sortBy!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("sort_by", sortBy);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("sort_by", ((Object[]) null));
                }
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(String refreshview, String page, String pagesize, String vendor, String product, String minVolumeSize, String maxVolumeSize, String direction, String sortBy, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                if (refreshview == null) {
                }
                if (refreshview!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("refreshView", refreshview);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("refreshView", ((Object[]) null));
                }
                if (page == null) {
                }
                if (page!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("page", page);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("page", ((Object[]) null));
                }
                if (pagesize == null) {
                }
                if (pagesize!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("pagesize", pagesize);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("pagesize", ((Object[]) null));
                }
                if (vendor == null) {
                }
                if (vendor!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("vendor", vendor);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("vendor", ((Object[]) null));
                }
                if (product == null) {
                }
                if (product!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("product", product);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("product", ((Object[]) null));
                }
                if (minVolumeSize == null) {
                }
                if (minVolumeSize!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("min_volume_size", minVolumeSize);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("min_volume_size", ((Object[]) null));
                }
                if (maxVolumeSize == null) {
                }
                if (maxVolumeSize!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("max_volume_size", maxVolumeSize);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("max_volume_size", ((Object[]) null));
                }
                if (direction == null) {
                }
                if (direction!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("direction", direction);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("direction", ((Object[]) null));
                }
                if (sortBy == null) {
                }
                if (sortBy!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("sort_by", sortBy);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("sort_by", ((Object[]) null));
                }
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Rescan_all {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Rescan_all(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Rescan_all(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("rescan_all");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T putAs(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putAs(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

            public<T >T putAs(String checkexistingvolumesaswell, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                if (checkexistingvolumesaswell == null) {
                }
                if (checkexistingvolumesaswell!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("checkExistingVolumesAsWell", checkexistingvolumesaswell);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("checkExistingVolumesAsWell", ((Object[]) null));
                }
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putAs(String checkexistingvolumesaswell, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                if (checkexistingvolumesaswell == null) {
                }
                if (checkexistingvolumesaswell!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("checkExistingVolumesAsWell", checkexistingvolumesaswell);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("checkExistingVolumesAsWell", ((Object[]) null));
                }
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class San_splittersRescan {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private San_splittersRescan(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public San_splittersRescan(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("san_splitters/rescan");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T putAs(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putAs(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Supported_array_management_provider_and_array_types {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Supported_array_management_provider_and_array_types(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Supported_array_management_provider_and_array_types(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("supported_array_management_provider_and_array_types");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class VolumesAvailable {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private VolumesAvailable(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public VolumesAvailable(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("volumes/available");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

            public<T >T getAsJson(String refreshview, String vendor, String product, String page, String pagesize, String minVolumeSize, String maxVolumeSize, String direction, String sortBy, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                if (refreshview == null) {
                }
                if (refreshview!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("refreshView", refreshview);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("refreshView", ((Object[]) null));
                }
                if (vendor == null) {
                }
                if (vendor!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("vendor", vendor);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("vendor", ((Object[]) null));
                }
                if (product == null) {
                }
                if (product!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("product", product);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("product", ((Object[]) null));
                }
                if (page == null) {
                }
                if (page!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("page", page);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("page", ((Object[]) null));
                }
                if (pagesize == null) {
                }
                if (pagesize!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("pagesize", pagesize);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("pagesize", ((Object[]) null));
                }
                if (minVolumeSize == null) {
                }
                if (minVolumeSize!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("min_volume_size", minVolumeSize);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("min_volume_size", ((Object[]) null));
                }
                if (maxVolumeSize == null) {
                }
                if (maxVolumeSize!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("max_volume_size", maxVolumeSize);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("max_volume_size", ((Object[]) null));
                }
                if (direction == null) {
                }
                if (direction!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("direction", direction);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("direction", ((Object[]) null));
                }
                if (sortBy == null) {
                }
                if (sortBy!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("sort_by", sortBy);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("sort_by", ((Object[]) null));
                }
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(String refreshview, String vendor, String product, String page, String pagesize, String minVolumeSize, String maxVolumeSize, String direction, String sortBy, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                if (refreshview == null) {
                }
                if (refreshview!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("refreshView", refreshview);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("refreshView", ((Object[]) null));
                }
                if (vendor == null) {
                }
                if (vendor!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("vendor", vendor);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("vendor", ((Object[]) null));
                }
                if (product == null) {
                }
                if (product!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("product", product);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("product", ((Object[]) null));
                }
                if (page == null) {
                }
                if (page!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("page", page);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("page", ((Object[]) null));
                }
                if (pagesize == null) {
                }
                if (pagesize!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("pagesize", pagesize);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("pagesize", ((Object[]) null));
                }
                if (minVolumeSize == null) {
                }
                if (minVolumeSize!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("min_volume_size", minVolumeSize);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("min_volume_size", ((Object[]) null));
                }
                if (maxVolumeSize == null) {
                }
                if (maxVolumeSize!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("max_volume_size", maxVolumeSize);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("max_volume_size", ((Object[]) null));
                }
                if (direction == null) {
                }
                if (direction!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("direction", direction);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("direction", ((Object[]) null));
                }
                if (sortBy == null) {
                }
                if (sortBy!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("sort_by", sortBy);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("sort_by", ((Object[]) null));
                }
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class VolumesInformation {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private VolumesInformation(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public VolumesInformation(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("volumes/information");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

    }

    public static class Contexts {

        private Client _client;
        private UriBuilder _uriBuilder;
        private Map<String, Object> _templateAndMatrixParameterValues;

        private Contexts(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
            _client = client;
            _uriBuilder = uriBuilder.clone();
            _templateAndMatrixParameterValues = map;
        }

        /**
         * Create new instance using existing Client instance, and a base URI and any parameters
         * 
         */
        public Contexts(Client client, URI baseUri) {
            _client = client;
            _uriBuilder = UriBuilder.fromUri(baseUri);
            _uriBuilder = _uriBuilder.path("contexts");
            _templateAndMatrixParameterValues = new HashMap<String, Object>();
        }

        public<T >T getAsJson(GenericType<T> returnType) {
            UriBuilder localUriBuilder = _uriBuilder.clone();
            WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
            Response response;
            response = resourceBuilder.build("GET").invoke();
            if (response.getStatus()>= 400) {
                throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
            }
            return response.readEntity(returnType);
        }

        public<T >T getAsJson(Class<T> returnType) {
            UriBuilder localUriBuilder = _uriBuilder.clone();
            WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
            Response response;
            response = resourceBuilder.build("GET").invoke();
            if (!Response.class.isAssignableFrom(returnType)) {
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
            }
            if (!Response.class.isAssignableFrom(returnType)) {
                return response.readEntity(returnType);
            } else {
                return returnType.cast(response);
            }
        }

        public IP1921680160_FapiRest4_3 .Contexts.Full full() {
            return new IP1921680160_FapiRest4_3 .Contexts.Full(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .Contexts.Clariion_volumesClusterId clariion_volumesClusterId(String clusterid) {
            return new IP1921680160_FapiRest4_3 .Contexts.Clariion_volumesClusterId(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid);
        }

        public IP1921680160_FapiRest4_3 .Contexts.Vcenter_serversClusterId vcenter_serversClusterId(String clusterid) {
            return new IP1921680160_FapiRest4_3 .Contexts.Vcenter_serversClusterId(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid);
        }

        public IP1921680160_FapiRest4_3 .Contexts.San_volumesClusterId san_volumesClusterId(String clusterid) {
            return new IP1921680160_FapiRest4_3 .Contexts.San_volumesClusterId(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid);
        }

        public IP1921680160_FapiRest4_3 .Contexts.System_status system_status() {
            return new IP1921680160_FapiRest4_3 .Contexts.System_status(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .Contexts.State state() {
            return new IP1921680160_FapiRest4_3 .Contexts.State(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .Contexts.Settings settings() {
            return new IP1921680160_FapiRest4_3 .Contexts.Settings(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .Contexts.San_volumes san_volumes() {
            return new IP1921680160_FapiRest4_3 .Contexts.San_volumes(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .Contexts.Clariion_volumes clariion_volumes() {
            return new IP1921680160_FapiRest4_3 .Contexts.Clariion_volumes(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .Contexts.Vcenter_servers vcenter_servers() {
            return new IP1921680160_FapiRest4_3 .Contexts.Vcenter_servers(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public static class Clariion_volumes {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Clariion_volumes(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Clariion_volumes(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("clariion_volumes");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Clariion_volumesClusterId {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Clariion_volumesClusterId(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Clariion_volumesClusterId(Client client, URI baseUri, String clusterid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("clariion_volumes/{clusterId}");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public Clariion_volumesClusterId(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/contexts/clariion_volumes/{clusterId}");
                } else {
                    template.append("contexts/clariion_volumes/{clusterId}");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Contexts.Clariion_volumesClusterId setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Contexts.Clariion_volumesClusterId(_client, copyUriBuilder, copyMap);
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Full {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Full(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Full(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("full");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class San_volumes {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private San_volumes(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public San_volumes(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("san_volumes");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class San_volumesClusterId {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private San_volumesClusterId(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public San_volumesClusterId(Client client, URI baseUri, String clusterid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("san_volumes/{clusterId}");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public San_volumesClusterId(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/contexts/san_volumes/{clusterId}");
                } else {
                    template.append("contexts/san_volumes/{clusterId}");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Contexts.San_volumesClusterId setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Contexts.San_volumesClusterId(_client, copyUriBuilder, copyMap);
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Settings {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Settings(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Settings(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("settings");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class State {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private State(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public State(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("state");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class System_status {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private System_status(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public System_status(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("system_status");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Vcenter_servers {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Vcenter_servers(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Vcenter_servers(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("vcenter_servers");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Vcenter_serversClusterId {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Vcenter_serversClusterId(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Vcenter_serversClusterId(Client client, URI baseUri, String clusterid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("vcenter_servers/{clusterId}");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public Vcenter_serversClusterId(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/contexts/vcenter_servers/{clusterId}");
                } else {
                    template.append("contexts/vcenter_servers/{clusterId}");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Contexts.Vcenter_serversClusterId setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Contexts.Vcenter_serversClusterId(_client, copyUriBuilder, copyMap);
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

    }

    public static class Events {

        private Client _client;
        private UriBuilder _uriBuilder;
        private Map<String, Object> _templateAndMatrixParameterValues;

        private Events(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
            _client = client;
            _uriBuilder = uriBuilder.clone();
            _templateAndMatrixParameterValues = map;
        }

        /**
         * Create new instance using existing Client instance, and a base URI and any parameters
         * 
         */
        public Events(Client client, URI baseUri) {
            _client = client;
            _uriBuilder = UriBuilder.fromUri(baseUri);
            _uriBuilder = _uriBuilder.path("events");
            _templateAndMatrixParameterValues = new HashMap<String, Object>();
        }

        public<T >T getAsJson(GenericType<T> returnType) {
            UriBuilder localUriBuilder = _uriBuilder.clone();
            WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
            Response response;
            response = resourceBuilder.build("GET").invoke();
            if (response.getStatus()>= 400) {
                throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
            }
            return response.readEntity(returnType);
        }

        public<T >T getAsJson(Class<T> returnType) {
            UriBuilder localUriBuilder = _uriBuilder.clone();
            WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
            Response response;
            response = resourceBuilder.build("GET").invoke();
            if (!Response.class.isAssignableFrom(returnType)) {
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
            }
            if (!Response.class.isAssignableFrom(returnType)) {
                return response.readEntity(returnType);
            } else {
                return returnType.cast(response);
            }
        }

        public<T >T getAsJson(String minevent, String direction, String sortBy, String page, String pagesize, GenericType<T> returnType) {
            UriBuilder localUriBuilder = _uriBuilder.clone();
            if (minevent == null) {
            }
            if (minevent!= null) {
                localUriBuilder = localUriBuilder.replaceQueryParam("minEvent", minevent);
            } else {
                localUriBuilder = localUriBuilder.replaceQueryParam("minEvent", ((Object[]) null));
            }
            if (direction == null) {
            }
            if (direction!= null) {
                localUriBuilder = localUriBuilder.replaceQueryParam("direction", direction);
            } else {
                localUriBuilder = localUriBuilder.replaceQueryParam("direction", ((Object[]) null));
            }
            if (sortBy == null) {
            }
            if (sortBy!= null) {
                localUriBuilder = localUriBuilder.replaceQueryParam("sort_by", sortBy);
            } else {
                localUriBuilder = localUriBuilder.replaceQueryParam("sort_by", ((Object[]) null));
            }
            if (page == null) {
            }
            if (page!= null) {
                localUriBuilder = localUriBuilder.replaceQueryParam("page", page);
            } else {
                localUriBuilder = localUriBuilder.replaceQueryParam("page", ((Object[]) null));
            }
            if (pagesize == null) {
            }
            if (pagesize!= null) {
                localUriBuilder = localUriBuilder.replaceQueryParam("pagesize", pagesize);
            } else {
                localUriBuilder = localUriBuilder.replaceQueryParam("pagesize", ((Object[]) null));
            }
            WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
            Response response;
            response = resourceBuilder.build("GET").invoke();
            if (response.getStatus()>= 400) {
                throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
            }
            return response.readEntity(returnType);
        }

        public<T >T getAsJson(String minevent, String direction, String sortBy, String page, String pagesize, Class<T> returnType) {
            UriBuilder localUriBuilder = _uriBuilder.clone();
            if (minevent == null) {
            }
            if (minevent!= null) {
                localUriBuilder = localUriBuilder.replaceQueryParam("minEvent", minevent);
            } else {
                localUriBuilder = localUriBuilder.replaceQueryParam("minEvent", ((Object[]) null));
            }
            if (direction == null) {
            }
            if (direction!= null) {
                localUriBuilder = localUriBuilder.replaceQueryParam("direction", direction);
            } else {
                localUriBuilder = localUriBuilder.replaceQueryParam("direction", ((Object[]) null));
            }
            if (sortBy == null) {
            }
            if (sortBy!= null) {
                localUriBuilder = localUriBuilder.replaceQueryParam("sort_by", sortBy);
            } else {
                localUriBuilder = localUriBuilder.replaceQueryParam("sort_by", ((Object[]) null));
            }
            if (page == null) {
            }
            if (page!= null) {
                localUriBuilder = localUriBuilder.replaceQueryParam("page", page);
            } else {
                localUriBuilder = localUriBuilder.replaceQueryParam("page", ((Object[]) null));
            }
            if (pagesize == null) {
            }
            if (pagesize!= null) {
                localUriBuilder = localUriBuilder.replaceQueryParam("pagesize", pagesize);
            } else {
                localUriBuilder = localUriBuilder.replaceQueryParam("pagesize", ((Object[]) null));
            }
            WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
            Response response;
            response = resourceBuilder.build("GET").invoke();
            if (!Response.class.isAssignableFrom(returnType)) {
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
            }
            if (!Response.class.isAssignableFrom(returnType)) {
                return response.readEntity(returnType);
            } else {
                return returnType.cast(response);
            }
        }

        public IP1921680160_FapiRest4_3 .Events.Filtered filtered() {
            return new IP1921680160_FapiRest4_3 .Events.Filtered(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .Events.Tracked tracked() {
            return new IP1921680160_FapiRest4_3 .Events.Tracked(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .Events.EventId eventId(String eventid) {
            return new IP1921680160_FapiRest4_3 .Events.EventId(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), eventid);
        }

        public static class EventId {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private EventId(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public EventId(Client client, URI baseUri, String eventid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{eventId}");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("eventId", eventid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public EventId(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/events/{eventId}");
                } else {
                    template.append("events/{eventId}");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get eventId
             * 
             */
            public String getEventid() {
                return ((String) _templateAndMatrixParameterValues.get("eventId"));
            }

            /**
             * Duplicate state and set eventId
             * 
             */
            public IP1921680160_FapiRest4_3 .Events.EventId setEventid(String eventid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("eventId", eventid);
                return new IP1921680160_FapiRest4_3 .Events.EventId(_client, copyUriBuilder, copyMap);
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

            public<T >T getAsJson(String limit, String direction, String sortBy, String page, String pagesize, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                if (limit == null) {
                }
                if (limit!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("limit", limit);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("limit", ((Object[]) null));
                }
                if (direction == null) {
                }
                if (direction!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("direction", direction);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("direction", ((Object[]) null));
                }
                if (sortBy == null) {
                }
                if (sortBy!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("sort_by", sortBy);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("sort_by", ((Object[]) null));
                }
                if (page == null) {
                }
                if (page!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("page", page);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("page", ((Object[]) null));
                }
                if (pagesize == null) {
                }
                if (pagesize!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("pagesize", pagesize);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("pagesize", ((Object[]) null));
                }
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(String limit, String direction, String sortBy, String page, String pagesize, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                if (limit == null) {
                }
                if (limit!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("limit", limit);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("limit", ((Object[]) null));
                }
                if (direction == null) {
                }
                if (direction!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("direction", direction);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("direction", ((Object[]) null));
                }
                if (sortBy == null) {
                }
                if (sortBy!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("sort_by", sortBy);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("sort_by", ((Object[]) null));
                }
                if (page == null) {
                }
                if (page!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("page", page);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("page", ((Object[]) null));
                }
                if (pagesize == null) {
                }
                if (pagesize!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("pagesize", pagesize);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("pagesize", ((Object[]) null));
                }
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Filtered {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Filtered(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Filtered(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("filtered");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T deleteJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("DELETE", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T deleteJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("DELETE", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

            public<T >T postJson(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T postJson(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

            public<T >T postJson(Object input, String direction, String sortBy, String page, String pagesize, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                if (direction == null) {
                }
                if (direction!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("direction", direction);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("direction", ((Object[]) null));
                }
                if (sortBy == null) {
                }
                if (sortBy!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("sort_by", sortBy);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("sort_by", ((Object[]) null));
                }
                if (page == null) {
                }
                if (page!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("page", page);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("page", ((Object[]) null));
                }
                if (pagesize == null) {
                }
                if (pagesize!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("pagesize", pagesize);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("pagesize", ((Object[]) null));
                }
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T postJson(Object input, String direction, String sortBy, String page, String pagesize, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                if (direction == null) {
                }
                if (direction!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("direction", direction);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("direction", ((Object[]) null));
                }
                if (sortBy == null) {
                }
                if (sortBy!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("sort_by", sortBy);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("sort_by", ((Object[]) null));
                }
                if (page == null) {
                }
                if (page!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("page", page);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("page", ((Object[]) null));
                }
                if (pagesize == null) {
                }
                if (pagesize!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("pagesize", pagesize);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("pagesize", ((Object[]) null));
                }
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Tracked {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Tracked(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Tracked(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("tracked");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

    }

    public static class Global_links {

        private Client _client;
        private UriBuilder _uriBuilder;
        private Map<String, Object> _templateAndMatrixParameterValues;

        private Global_links(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
            _client = client;
            _uriBuilder = uriBuilder.clone();
            _templateAndMatrixParameterValues = map;
        }

        /**
         * Create new instance using existing Client instance, and a base URI and any parameters
         * 
         */
        public Global_links(Client client, URI baseUri) {
            _client = client;
            _uriBuilder = UriBuilder.fromUri(baseUri);
            _uriBuilder = _uriBuilder.path("global_links");
            _templateAndMatrixParameterValues = new HashMap<String, Object>();
        }

        public IP1921680160_FapiRest4_3 .Global_links.State state() {
            return new IP1921680160_FapiRest4_3 .Global_links.State(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public static class State {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private State(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public State(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("state");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

    }

    public static class Global_policy {

        private Client _client;
        private UriBuilder _uriBuilder;
        private Map<String, Object> _templateAndMatrixParameterValues;

        private Global_policy(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
            _client = client;
            _uriBuilder = uriBuilder.clone();
            _templateAndMatrixParameterValues = map;
        }

        /**
         * Create new instance using existing Client instance, and a base URI and any parameters
         * 
         */
        public Global_policy(Client client, URI baseUri) {
            _client = client;
            _uriBuilder = UriBuilder.fromUri(baseUri);
            _uriBuilder = _uriBuilder.path("global_policy");
            _templateAndMatrixParameterValues = new HashMap<String, Object>();
        }

        public<T >T getAsJson(GenericType<T> returnType) {
            UriBuilder localUriBuilder = _uriBuilder.clone();
            WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
            Response response;
            response = resourceBuilder.build("GET").invoke();
            if (response.getStatus()>= 400) {
                throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
            }
            return response.readEntity(returnType);
        }

        public<T >T getAsJson(Class<T> returnType) {
            UriBuilder localUriBuilder = _uriBuilder.clone();
            WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
            Response response;
            response = resourceBuilder.build("GET").invoke();
            if (!Response.class.isAssignableFrom(returnType)) {
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
            }
            if (!Response.class.isAssignableFrom(returnType)) {
                return response.readEntity(returnType);
            } else {
                return returnType.cast(response);
            }
        }

        public<T >T putJsonAs(Object input, GenericType<T> returnType) {
            UriBuilder localUriBuilder = _uriBuilder.clone();
            WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
            Response response;
            response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
            if (response.getStatus()>= 400) {
                throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
            }
            return response.readEntity(returnType);
        }

        public<T >T putJsonAs(Object input, Class<T> returnType) {
            UriBuilder localUriBuilder = _uriBuilder.clone();
            WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
            Response response;
            response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
            if (!Response.class.isAssignableFrom(returnType)) {
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
            }
            if (!Response.class.isAssignableFrom(returnType)) {
                return response.readEntity(returnType);
            } else {
                return returnType.cast(response);
            }
        }

    }

    public static class Groups {

        private Client _client;
        private UriBuilder _uriBuilder;
        private Map<String, Object> _templateAndMatrixParameterValues;

        private Groups(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
            _client = client;
            _uriBuilder = uriBuilder.clone();
            _templateAndMatrixParameterValues = map;
        }

        /**
         * Create new instance using existing Client instance, and a base URI and any parameters
         * 
         */
        public Groups(Client client, URI baseUri) {
            _client = client;
            _uriBuilder = UriBuilder.fromUri(baseUri);
            _uriBuilder = _uriBuilder.path("groups");
            _templateAndMatrixParameterValues = new HashMap<String, Object>();
        }

        public<T >T postJsonAs(Object input, GenericType<T> returnType) {
            UriBuilder localUriBuilder = _uriBuilder.clone();
            WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
            Response response;
            response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
            if (response.getStatus()>= 400) {
                throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
            }
            return response.readEntity(returnType);
        }

        public<T >T postJsonAs(Object input, Class<T> returnType) {
            UriBuilder localUriBuilder = _uriBuilder.clone();
            WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
            Response response;
            response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
            if (!Response.class.isAssignableFrom(returnType)) {
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
            }
            if (!Response.class.isAssignableFrom(returnType)) {
                return response.readEntity(returnType);
            } else {
                return returnType.cast(response);
            }
        }

        public<T >T getAsJson(GenericType<T> returnType) {
            UriBuilder localUriBuilder = _uriBuilder.clone();
            WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
            Response response;
            response = resourceBuilder.build("GET").invoke();
            if (response.getStatus()>= 400) {
                throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
            }
            return response.readEntity(returnType);
        }

        public<T >T getAsJson(Class<T> returnType) {
            UriBuilder localUriBuilder = _uriBuilder.clone();
            WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
            Response response;
            response = resourceBuilder.build("GET").invoke();
            if (!Response.class.isAssignableFrom(returnType)) {
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
            }
            if (!Response.class.isAssignableFrom(returnType)) {
                return response.readEntity(returnType);
            } else {
                return returnType.cast(response);
            }
        }

        public IP1921680160_FapiRest4_3 .Groups.GroupIdName groupIdName(String groupid) {
            return new IP1921680160_FapiRest4_3 .Groups.GroupIdName(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), groupid);
        }

        public IP1921680160_FapiRest4_3 .Groups.GroupId groupId(String groupid) {
            return new IP1921680160_FapiRest4_3 .Groups.GroupId(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), groupid);
        }

        public IP1921680160_FapiRest4_3 .Groups.Bookmarks bookmarks() {
            return new IP1921680160_FapiRest4_3 .Groups.Bookmarks(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .Groups.GroupIdVolumesMark_as_clean groupIdVolumesMark_as_clean(String groupid) {
            return new IP1921680160_FapiRest4_3 .Groups.GroupIdVolumesMark_as_clean(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), groupid);
        }

        public IP1921680160_FapiRest4_3 .Groups.Settings settings() {
            return new IP1921680160_FapiRest4_3 .Groups.Settings(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .Groups.SpecificSettings specificSettings() {
            return new IP1921680160_FapiRest4_3 .Groups.SpecificSettings(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .Groups.State state() {
            return new IP1921680160_FapiRest4_3 .Groups.State(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .Groups.SpecificState specificState() {
            return new IP1921680160_FapiRest4_3 .Groups.SpecificState(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .Groups.GroupIdState groupIdState(String groupid) {
            return new IP1921680160_FapiRest4_3 .Groups.GroupIdState(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), groupid);
        }

        public IP1921680160_FapiRest4_3 .Groups.Statistics statistics() {
            return new IP1921680160_FapiRest4_3 .Groups.Statistics(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .Groups.SpecificStatistics specificStatistics() {
            return new IP1921680160_FapiRest4_3 .Groups.SpecificStatistics(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .Groups.GroupIdStatistics groupIdStatistics(String groupid) {
            return new IP1921680160_FapiRest4_3 .Groups.GroupIdStatistics(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), groupid);
        }

        public IP1921680160_FapiRest4_3 .Groups.GroupIdSnapshots groupIdSnapshots(String groupid) {
            return new IP1921680160_FapiRest4_3 .Groups.GroupIdSnapshots(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), groupid);
        }

        public IP1921680160_FapiRest4_3 .Groups.GroupIdPause_transfer groupIdPause_transfer(String groupid) {
            return new IP1921680160_FapiRest4_3 .Groups.GroupIdPause_transfer(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), groupid);
        }

        public IP1921680160_FapiRest4_3 .Groups.GroupIdResume_production groupIdResume_production(String groupid) {
            return new IP1921680160_FapiRest4_3 .Groups.GroupIdResume_production(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), groupid);
        }

        public IP1921680160_FapiRest4_3 .Groups.GroupIdVolumesMark_as_dirty groupIdVolumesMark_as_dirty(String groupid) {
            return new IP1921680160_FapiRest4_3 .Groups.GroupIdVolumesMark_as_dirty(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), groupid);
        }

        public IP1921680160_FapiRest4_3 .Groups.GroupIdStart_transfer groupIdStart_transfer(String groupid) {
            return new IP1921680160_FapiRest4_3 .Groups.GroupIdStart_transfer(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), groupid);
        }

        public IP1921680160_FapiRest4_3 .Groups.GroupIdStateVerify groupIdStateVerify(String groupid) {
            return new IP1921680160_FapiRest4_3 .Groups.GroupIdStateVerify(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), groupid);
        }

        public IP1921680160_FapiRest4_3 .Groups.GroupIdReplication_sets groupIdReplication_sets(String groupid) {
            return new IP1921680160_FapiRest4_3 .Groups.GroupIdReplication_sets(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), groupid);
        }

        public IP1921680160_FapiRest4_3 .Groups.GroupIdReplication_setsReplicationSetId groupIdReplication_setsReplicationSetId(String groupid, String replicationsetid) {
            return new IP1921680160_FapiRest4_3 .Groups.GroupIdReplication_setsReplicationSetId(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), groupid, replicationsetid);
        }

        public IP1921680160_FapiRest4_3 .Groups.GroupIdReplication_setsReplicationSetIdName groupIdReplication_setsReplicationSetIdName(String groupid, String replicationsetid) {
            return new IP1921680160_FapiRest4_3 .Groups.GroupIdReplication_setsReplicationSetIdName(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), groupid, replicationsetid);
        }

        public IP1921680160_FapiRest4_3 .Groups.GroupIdSettings groupIdSettings(String groupid) {
            return new IP1921680160_FapiRest4_3 .Groups.GroupIdSettings(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), groupid);
        }

        public IP1921680160_FapiRest4_3 .Groups.GroupIdSuspend groupIdSuspend(String groupid) {
            return new IP1921680160_FapiRest4_3 .Groups.GroupIdSuspend(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), groupid);
        }

        public IP1921680160_FapiRest4_3 .Groups.GroupIdReplication_setsReplicationSetIdSize groupIdReplication_setsReplicationSetIdSize(String groupid, String replicationsetid) {
            return new IP1921680160_FapiRest4_3 .Groups.GroupIdReplication_setsReplicationSetIdSize(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), groupid, replicationsetid);
        }

        public IP1921680160_FapiRest4_3 .Groups.Recovery_activities recovery_activities() {
            return new IP1921680160_FapiRest4_3 .Groups.Recovery_activities(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .Groups.Transfer_state transfer_state() {
            return new IP1921680160_FapiRest4_3 .Groups.Transfer_state(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .Groups.GroupIdReplication_setsSettings groupIdReplication_setsSettings(String groupid) {
            return new IP1921680160_FapiRest4_3 .Groups.GroupIdReplication_setsSettings(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), groupid);
        }

        public IP1921680160_FapiRest4_3 .Groups.Distributed distributed() {
            return new IP1921680160_FapiRest4_3 .Groups.Distributed(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .Groups.SpecificVolumesState specificVolumesState() {
            return new IP1921680160_FapiRest4_3 .Groups.SpecificVolumesState(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .Groups.GroupIdRecovery_copySnapshots groupIdRecovery_copySnapshots(String groupid) {
            return new IP1921680160_FapiRest4_3 .Groups.GroupIdRecovery_copySnapshots(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), groupid);
        }

        public IP1921680160_FapiRest4_3 .Groups.GroupIdCopiesSettings groupIdCopiesSettings(String groupid) {
            return new IP1921680160_FapiRest4_3 .Groups.GroupIdCopiesSettings(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), groupid);
        }

        public IP1921680160_FapiRest4_3 .Groups.GroupIdPolicy groupIdPolicy(String groupid) {
            return new IP1921680160_FapiRest4_3 .Groups.GroupIdPolicy(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), groupid);
        }

        public IP1921680160_FapiRest4_3 .Groups.GroupIdSet_link_policy groupIdSet_link_policy(String groupid) {
            return new IP1921680160_FapiRest4_3 .Groups.GroupIdSet_link_policy(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), groupid);
        }

        public IP1921680160_FapiRest4_3 .Groups.GroupIdVirtual_machines groupIdVirtual_machines(String groupid) {
            return new IP1921680160_FapiRest4_3 .Groups.GroupIdVirtual_machines(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), groupid);
        }

        public IP1921680160_FapiRest4_3 .Groups.Virtual_machinesReplicate virtual_machinesReplicate() {
            return new IP1921680160_FapiRest4_3 .Groups.Virtual_machinesReplicate(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .Groups.GroupIdVirtual_machinesGroup_powerup_sequence groupIdVirtual_machinesGroup_powerup_sequence(String groupid) {
            return new IP1921680160_FapiRest4_3 .Groups.GroupIdVirtual_machinesGroup_powerup_sequence(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), groupid);
        }

        public IP1921680160_FapiRest4_3 .Groups.GroupIdVirtual_machinesReplication_params groupIdVirtual_machinesReplication_params(String groupid) {
            return new IP1921680160_FapiRest4_3 .Groups.GroupIdVirtual_machinesReplication_params(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), groupid);
        }

        public IP1921680160_FapiRest4_3 .Groups.GroupIdVirtual_machinesHardware_replication_params groupIdVirtual_machinesHardware_replication_params(String groupid) {
            return new IP1921680160_FapiRest4_3 .Groups.GroupIdVirtual_machinesHardware_replication_params(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), groupid);
        }

        public IP1921680160_FapiRest4_3 .Groups.GroupIdReports groupIdReports(String groupid) {
            return new IP1921680160_FapiRest4_3 .Groups.GroupIdReports(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), groupid);
        }

        public IP1921680160_FapiRest4_3 .Groups.GroupIdReportsReportIdDelete groupIdReportsReportIdDelete(String groupid, String reportid) {
            return new IP1921680160_FapiRest4_3 .Groups.GroupIdReportsReportIdDelete(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), groupid, reportid);
        }

        public IP1921680160_FapiRest4_3 .Groups.Information information() {
            return new IP1921680160_FapiRest4_3 .Groups.Information(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .Groups.GroupIdInformation groupIdInformation(String groupid) {
            return new IP1921680160_FapiRest4_3 .Groups.GroupIdInformation(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), groupid);
        }

        public IP1921680160_FapiRest4_3 .Groups.GroupIdVirtual_machinesPowerup_sequence groupIdVirtual_machinesPowerup_sequence(String groupid) {
            return new IP1921680160_FapiRest4_3 .Groups.GroupIdVirtual_machinesPowerup_sequence(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), groupid);
        }

        public IP1921680160_FapiRest4_3 .Groups.GroupIdVm_replication_sets_policy groupIdVm_replication_sets_policy(String groupid) {
            return new IP1921680160_FapiRest4_3 .Groups.GroupIdVm_replication_sets_policy(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), groupid);
        }

        public IP1921680160_FapiRest4_3 .Groups.VolumesState volumesState() {
            return new IP1921680160_FapiRest4_3 .Groups.VolumesState(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .Groups.GroupIdVolumesState groupIdVolumesState(String groupid) {
            return new IP1921680160_FapiRest4_3 .Groups.GroupIdVolumesState(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), groupid);
        }

        public IP1921680160_FapiRest4_3 .Groups.Default_group default_group() {
            return new IP1921680160_FapiRest4_3 .Groups.Default_group(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .Groups.Group_and_copies group_and_copies() {
            return new IP1921680160_FapiRest4_3 .Groups.Group_and_copies(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .Groups.GroupIdReplication_setsReplicationSetIdSettings groupIdReplication_setsReplicationSetIdSettings(String groupid, String replicationsetid) {
            return new IP1921680160_FapiRest4_3 .Groups.GroupIdReplication_setsReplicationSetIdSettings(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), groupid, replicationsetid);
        }

        public IP1921680160_FapiRest4_3 .Groups.GroupIdLinks groupIdLinks(String groupid) {
            return new IP1921680160_FapiRest4_3 .Groups.GroupIdLinks(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), groupid);
        }

        public IP1921680160_FapiRest4_3 .Groups.GroupIdCopies groupIdCopies(String groupid) {
            return new IP1921680160_FapiRest4_3 .Groups.GroupIdCopies(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), groupid);
        }

        public IP1921680160_FapiRest4_3 .Groups.GroupIdDisable groupIdDisable(String groupid) {
            return new IP1921680160_FapiRest4_3 .Groups.GroupIdDisable(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), groupid);
        }

        public IP1921680160_FapiRest4_3 .Groups.GroupIdEnable groupIdEnable(String groupid) {
            return new IP1921680160_FapiRest4_3 .Groups.GroupIdEnable(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), groupid);
        }

        public IP1921680160_FapiRest4_3 .Groups.GroupIdRemove_passive_links groupIdRemove_passive_links(String groupid) {
            return new IP1921680160_FapiRest4_3 .Groups.GroupIdRemove_passive_links(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), groupid);
        }

        public IP1921680160_FapiRest4_3 .Groups.GroupIdResume groupIdResume(String groupid) {
            return new IP1921680160_FapiRest4_3 .Groups.GroupIdResume(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), groupid);
        }

        public IP1921680160_FapiRest4_3 .Groups.GroupIdFull_policy groupIdFull_policy(String groupid) {
            return new IP1921680160_FapiRest4_3 .Groups.GroupIdFull_policy(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), groupid);
        }

        public IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId groupIdClustersClusterIdCopiesCopyId(String groupid, String clusterid, String copyid) {
            return new IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), groupid, clusterid, copyid);
        }

        public static class Bookmarks {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Bookmarks(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Bookmarks(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("bookmarks");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T postJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T postJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Default_group {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Default_group(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Default_group(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("default_group");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T postJson(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T postJson(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Distributed {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Distributed(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Distributed(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("distributed");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T postJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T postJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class GroupId {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private GroupId(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public GroupId(Client client, URI baseUri, String groupid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{groupId}");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("groupId", groupid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public GroupId(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/groups/{groupId}");
                } else {
                    template.append("groups/{groupId}");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get groupId
             * 
             */
            public String getGroupid() {
                return ((String) _templateAndMatrixParameterValues.get("groupId"));
            }

            /**
             * Duplicate state and set groupId
             * 
             */
            public IP1921680160_FapiRest4_3 .Groups.GroupId setGroupid(String groupid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("groupId", groupid);
                return new IP1921680160_FapiRest4_3 .Groups.GroupId(_client, copyUriBuilder, copyMap);
            }

            public<T >T deleteAs(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("DELETE").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T deleteAs(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("DELETE").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class GroupIdClustersClusterIdCopiesCopyId {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private GroupIdClustersClusterIdCopiesCopyId(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public GroupIdClustersClusterIdCopiesCopyId(Client client, URI baseUri, String groupid, String clusterid, String copyid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{groupId}/clusters/{clusterId}/copies/{copyId}");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("groupId", groupid);
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
                _templateAndMatrixParameterValues.put("copyId", copyid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public GroupIdClustersClusterIdCopiesCopyId(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/groups/{groupId}/clusters/{clusterId}/copies/{copyId}");
                } else {
                    template.append("groups/{groupId}/clusters/{clusterId}/copies/{copyId}");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get groupId
             * 
             */
            public String getGroupid() {
                return ((String) _templateAndMatrixParameterValues.get("groupId"));
            }

            /**
             * Duplicate state and set groupId
             * 
             */
            public IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId setGroupid(String groupid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("groupId", groupid);
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId(_client, copyUriBuilder, copyMap);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId(_client, copyUriBuilder, copyMap);
            }

            /**
             * Get copyId
             * 
             */
            public String getCopyid() {
                return ((String) _templateAndMatrixParameterValues.get("copyId"));
            }

            /**
             * Duplicate state and set copyId
             * 
             */
            public IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId setCopyid(String copyid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("copyId", copyid);
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId(_client, copyUriBuilder, copyMap);
            }

            public<T >T deleteAs(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("DELETE").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T deleteAs(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("DELETE").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

            public IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.Disable disable() {
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.Disable(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            }

            public IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.Enable enable() {
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.Enable(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            }

            public IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.SnapshotsConsolidate snapshotsConsolidate() {
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.SnapshotsConsolidate(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            }

            public IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.Enable_image_access_with_general_params enable_image_access_with_general_params() {
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.Enable_image_access_with_general_params(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            }

            public IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.VolumesMark_as_clean volumesMark_as_clean() {
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.VolumesMark_as_clean(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            }

            public IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.VolumesMark_as_dirty volumesMark_as_dirty() {
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.VolumesMark_as_dirty(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            }

            public IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.Pause_transfer pause_transfer() {
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.Pause_transfer(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            }

            public IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.Name name() {
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.Name(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            }

            public IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.Start_transfer start_transfer() {
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.Start_transfer(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            }

            public IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.Undo_writes undo_writes() {
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.Undo_writes(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            }

            public IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.SnapshotsSnapshotIdBookmark_settings snapshotsSnapshotIdBookmark_settings(String snapshotid) {
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.SnapshotsSnapshotIdBookmark_settings(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), snapshotid);
            }

            public IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.Topology topology() {
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.Topology(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            }

            public IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.Failover failover() {
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.Failover(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            }

            public IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.SnapshotsAbort_consolidation snapshotsAbort_consolidation() {
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.SnapshotsAbort_consolidation(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            }

            public IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.Disable_image_access disable_image_access() {
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.Disable_image_access(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            }

            public IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.Enable_image_access_with_params enable_image_access_with_params() {
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.Enable_image_access_with_params(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            }

            public IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.Enable_image_access enable_image_access() {
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.Enable_image_access(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            }

            public IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.Snapshots snapshots() {
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.Snapshots(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            }

            public IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.Recover_production recover_production() {
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.Recover_production(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            }

            public IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.Enable_direct_access enable_direct_access() {
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.Enable_direct_access(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            }

            public IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.Force_long_initialization force_long_initialization() {
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.Force_long_initialization(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            }

            public IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.SnapshotsVerify snapshotsVerify() {
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.SnapshotsVerify(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            }

            public IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.Journal_volumes journal_volumes() {
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.Journal_volumes(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            }

            public IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.Journal_volumesDeviceId journal_volumesDeviceId(String deviceid) {
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.Journal_volumesDeviceId(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), deviceid);
            }

            public IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.User_volumes user_volumes() {
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.User_volumes(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            }

            public IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.User_volumesDeviceId user_volumesDeviceId(String deviceid) {
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.User_volumesDeviceId(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), deviceid);
            }

            public IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.Replication_setsReplicationSetIdVolumes replication_setsReplicationSetIdVolumes(String replicationsetid) {
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.Replication_setsReplicationSetIdVolumes(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), replicationsetid);
            }

            public IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.SnapshotsSnapshotIdConsistency_type snapshotsSnapshotIdConsistency_type(String snapshotid) {
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.SnapshotsSnapshotIdConsistency_type(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), snapshotid);
            }

            public IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.Set_production_copy set_production_copy() {
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.Set_production_copy(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            }

            public IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.SnapshotsSnapshotIdConsolidation_policy snapshotsSnapshotIdConsolidation_policy(String snapshotid) {
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.SnapshotsSnapshotIdConsolidation_policy(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), snapshotid);
            }

            public IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.Signature_usage_during_initialization signature_usage_during_initialization() {
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.Signature_usage_during_initialization(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            }

            public IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.Move_to_image move_to_image() {
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.Move_to_image(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            }

            public IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.Roll_to_image roll_to_image() {
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.Roll_to_image(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            }

            public IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.Policy policy() {
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.Policy(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            }

            public IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.Image_accessLatestEnable image_accessLatestEnable() {
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.Image_accessLatestEnable(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            }

            public IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.Vm_startup_promptsDismiss vm_startup_promptsDismiss() {
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.Vm_startup_promptsDismiss(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            }

            public IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.Settings settings() {
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.Settings(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            }

            public static class Disable {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private Disable(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public Disable(Client client, URI baseUri) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("disable");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                }

                public<T >T putAs(GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT").invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T putAs(Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT").invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class Disable_image_access {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private Disable_image_access(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public Disable_image_access(Client client, URI baseUri) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("disable_image_access");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                }

                public<T >T putAs(GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT").invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T putAs(Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT").invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

                public<T >T putAs(String starttransfer, GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    if (starttransfer == null) {
                    }
                    if (starttransfer!= null) {
                        localUriBuilder = localUriBuilder.replaceQueryParam("startTransfer", starttransfer);
                    } else {
                        localUriBuilder = localUriBuilder.replaceQueryParam("startTransfer", ((Object[]) null));
                    }
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT").invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T putAs(String starttransfer, Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    if (starttransfer == null) {
                    }
                    if (starttransfer!= null) {
                        localUriBuilder = localUriBuilder.replaceQueryParam("startTransfer", starttransfer);
                    } else {
                        localUriBuilder = localUriBuilder.replaceQueryParam("startTransfer", ((Object[]) null));
                    }
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT").invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class Enable {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private Enable(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public Enable(Client client, URI baseUri) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("enable");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                }

                public<T >T putAs(GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT").invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T putAs(Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT").invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

                public<T >T putAs(String starttransfer, GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    if (starttransfer == null) {
                    }
                    if (starttransfer!= null) {
                        localUriBuilder = localUriBuilder.replaceQueryParam("startTransfer", starttransfer);
                    } else {
                        localUriBuilder = localUriBuilder.replaceQueryParam("startTransfer", ((Object[]) null));
                    }
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT").invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T putAs(String starttransfer, Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    if (starttransfer == null) {
                    }
                    if (starttransfer!= null) {
                        localUriBuilder = localUriBuilder.replaceQueryParam("startTransfer", starttransfer);
                    } else {
                        localUriBuilder = localUriBuilder.replaceQueryParam("startTransfer", ((Object[]) null));
                    }
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT").invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class Enable_direct_access {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private Enable_direct_access(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public Enable_direct_access(Client client, URI baseUri) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("enable_direct_access");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                }

                public<T >T putAs(GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT").invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T putAs(Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT").invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class Enable_image_access {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private Enable_image_access(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public Enable_image_access(Client client, URI baseUri) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("enable_image_access");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                }

                public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T putJsonAs(Object input, Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class Enable_image_access_with_general_params {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private Enable_image_access_with_general_params(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public Enable_image_access_with_general_params(Client client, URI baseUri) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("enable_image_access_with_general_params");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                }

                public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T putJsonAs(Object input, Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class Enable_image_access_with_params {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private Enable_image_access_with_params(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public Enable_image_access_with_params(Client client, URI baseUri) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("enable_image_access_with_params");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                }

                public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T putJsonAs(Object input, Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class Failover {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private Failover(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public Failover(Client client, URI baseUri) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("failover");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                }

                public<T >T putAs(GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT").invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T putAs(Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT").invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

                public<T >T putAs(String starttransfer, GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    if (starttransfer == null) {
                    }
                    if (starttransfer!= null) {
                        localUriBuilder = localUriBuilder.replaceQueryParam("startTransfer", starttransfer);
                    } else {
                        localUriBuilder = localUriBuilder.replaceQueryParam("startTransfer", ((Object[]) null));
                    }
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT").invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T putAs(String starttransfer, Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    if (starttransfer == null) {
                    }
                    if (starttransfer!= null) {
                        localUriBuilder = localUriBuilder.replaceQueryParam("startTransfer", starttransfer);
                    } else {
                        localUriBuilder = localUriBuilder.replaceQueryParam("startTransfer", ((Object[]) null));
                    }
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT").invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class Force_long_initialization {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private Force_long_initialization(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public Force_long_initialization(Client client, URI baseUri) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("force_long_initialization");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                }

                public<T >T putAs(GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT").invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T putAs(Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT").invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class Image_accessLatestEnable {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private Image_accessLatestEnable(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public Image_accessLatestEnable(Client client, URI baseUri) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("image_access/latest/enable");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                }

                public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T putJsonAs(Object input, Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class Journal_volumes {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private Journal_volumes(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public Journal_volumes(Client client, URI baseUri) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("journal_volumes");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                }

                public<T >T postJsonAs(Object input, GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T postJsonAs(Object input, Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class Journal_volumesDeviceId {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private Journal_volumesDeviceId(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public Journal_volumesDeviceId(Client client, URI baseUri, String deviceid) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("journal_volumes/{deviceId}");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    _templateAndMatrixParameterValues.put("deviceId", deviceid);
                }

                /**
                 * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
                 * 
                 */
                public Journal_volumesDeviceId(Client client, URI uri) {
                    _client = client;
                    StringBuilder template = new StringBuilder(BASE_URI.toString());
                    if (template.charAt((template.length()- 1))!= '/') {
                        template.append("/groups/{groupId}/clusters/{clusterId}/copies/{copyId}/journal_volumes/{deviceId}");
                    } else {
                        template.append("groups/{groupId}/clusters/{clusterId}/copies/{copyId}/journal_volumes/{deviceId}");
                    }
                    _uriBuilder = UriBuilder.fromPath(template.toString());
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    UriTemplate uriTemplate = new UriTemplate(template.toString());
                    HashMap<String, String> parameters = new HashMap<String, String>();
                    uriTemplate.match(uri.toString(), parameters);
                    _templateAndMatrixParameterValues.putAll(parameters);
                }

                /**
                 * Get deviceId
                 * 
                 */
                public String getDeviceid() {
                    return ((String) _templateAndMatrixParameterValues.get("deviceId"));
                }

                /**
                 * Duplicate state and set deviceId
                 * 
                 */
                public IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.Journal_volumesDeviceId setDeviceid(String deviceid) {
                    Map<String, Object> copyMap;
                    copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                    UriBuilder copyUriBuilder = _uriBuilder.clone();
                    copyMap.put("deviceId", deviceid);
                    return new IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.Journal_volumesDeviceId(_client, copyUriBuilder, copyMap);
                }

                public<T >T deleteAs(GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("DELETE").invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T deleteAs(Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("DELETE").invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class Move_to_image {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private Move_to_image(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public Move_to_image(Client client, URI baseUri) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("move_to_image");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                }

                public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T putJsonAs(Object input, Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class Name {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private Name(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public Name(Client client, URI baseUri) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("name");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                }

                public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T putJsonAs(Object input, Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

                public<T >T getAsJson(GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T getAsJson(Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class Pause_transfer {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private Pause_transfer(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public Pause_transfer(Client client, URI baseUri) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("pause_transfer");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                }

                public<T >T putAs(GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT").invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T putAs(Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT").invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class Policy {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private Policy(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public Policy(Client client, URI baseUri) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("policy");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                }

                public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T putJsonAs(Object input, Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

                public<T >T putJsonAs(Object input, String name, GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    if (name == null) {
                    }
                    if (name!= null) {
                        localUriBuilder = localUriBuilder.replaceQueryParam("name", name);
                    } else {
                        localUriBuilder = localUriBuilder.replaceQueryParam("name", ((Object[]) null));
                    }
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T putJsonAs(Object input, String name, Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    if (name == null) {
                    }
                    if (name!= null) {
                        localUriBuilder = localUriBuilder.replaceQueryParam("name", name);
                    } else {
                        localUriBuilder = localUriBuilder.replaceQueryParam("name", ((Object[]) null));
                    }
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class Recover_production {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private Recover_production(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public Recover_production(Client client, URI baseUri) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("recover_production");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                }

                public<T >T putAs(GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT").invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T putAs(Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT").invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

                public<T >T putAs(String starttransfer, GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    if (starttransfer == null) {
                    }
                    if (starttransfer!= null) {
                        localUriBuilder = localUriBuilder.replaceQueryParam("startTransfer", starttransfer);
                    } else {
                        localUriBuilder = localUriBuilder.replaceQueryParam("startTransfer", ((Object[]) null));
                    }
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT").invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T putAs(String starttransfer, Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    if (starttransfer == null) {
                    }
                    if (starttransfer!= null) {
                        localUriBuilder = localUriBuilder.replaceQueryParam("startTransfer", starttransfer);
                    } else {
                        localUriBuilder = localUriBuilder.replaceQueryParam("startTransfer", ((Object[]) null));
                    }
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT").invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class Replication_setsReplicationSetIdVolumes {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private Replication_setsReplicationSetIdVolumes(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public Replication_setsReplicationSetIdVolumes(Client client, URI baseUri, String replicationsetid) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("replication_sets/{replicationSetId}/volumes");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    _templateAndMatrixParameterValues.put("replicationSetId", replicationsetid);
                }

                /**
                 * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
                 * 
                 */
                public Replication_setsReplicationSetIdVolumes(Client client, URI uri) {
                    _client = client;
                    StringBuilder template = new StringBuilder(BASE_URI.toString());
                    if (template.charAt((template.length()- 1))!= '/') {
                        template.append("/groups/{groupId}/clusters/{clusterId}/copies/{copyId}/replication_sets/{replicationSetId}/volumes");
                    } else {
                        template.append("groups/{groupId}/clusters/{clusterId}/copies/{copyId}/replication_sets/{replicationSetId}/volumes");
                    }
                    _uriBuilder = UriBuilder.fromPath(template.toString());
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    UriTemplate uriTemplate = new UriTemplate(template.toString());
                    HashMap<String, String> parameters = new HashMap<String, String>();
                    uriTemplate.match(uri.toString(), parameters);
                    _templateAndMatrixParameterValues.putAll(parameters);
                }

                /**
                 * Get replicationSetId
                 * 
                 */
                public String getReplicationsetid() {
                    return ((String) _templateAndMatrixParameterValues.get("replicationSetId"));
                }

                /**
                 * Duplicate state and set replicationSetId
                 * 
                 */
                public IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.Replication_setsReplicationSetIdVolumes setReplicationsetid(String replicationsetid) {
                    Map<String, Object> copyMap;
                    copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                    UriBuilder copyUriBuilder = _uriBuilder.clone();
                    copyMap.put("replicationSetId", replicationsetid);
                    return new IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.Replication_setsReplicationSetIdVolumes(_client, copyUriBuilder, copyMap);
                }

                public<T >T postJsonAs(Object input, GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T postJsonAs(Object input, Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class Roll_to_image {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private Roll_to_image(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public Roll_to_image(Client client, URI baseUri) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("roll_to_image");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                }

                public<T >T putAs(GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT").invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T putAs(Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT").invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class Settings {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private Settings(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public Settings(Client client, URI baseUri) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("settings");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                }

                public<T >T getAsJson(GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T getAsJson(Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class Set_production_copy {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private Set_production_copy(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public Set_production_copy(Client client, URI baseUri) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("set_production_copy");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                }

                public<T >T putAs(GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT").invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T putAs(Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT").invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

                public<T >T putAs(String starttransfer, GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    if (starttransfer == null) {
                    }
                    if (starttransfer!= null) {
                        localUriBuilder = localUriBuilder.replaceQueryParam("startTransfer", starttransfer);
                    } else {
                        localUriBuilder = localUriBuilder.replaceQueryParam("startTransfer", ((Object[]) null));
                    }
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT").invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T putAs(String starttransfer, Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    if (starttransfer == null) {
                    }
                    if (starttransfer!= null) {
                        localUriBuilder = localUriBuilder.replaceQueryParam("startTransfer", starttransfer);
                    } else {
                        localUriBuilder = localUriBuilder.replaceQueryParam("startTransfer", ((Object[]) null));
                    }
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT").invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class Signature_usage_during_initialization {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private Signature_usage_during_initialization(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public Signature_usage_during_initialization(Client client, URI baseUri) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("signature_usage_during_initialization");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                }

                public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T putJsonAs(Object input, Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class Snapshots {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private Snapshots(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public Snapshots(Client client, URI baseUri) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("snapshots");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                }

                public<T >T getAsJson(GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T getAsJson(Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

                public<T >T getAsJson(String startTime, String endTime, String name, GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    if (startTime == null) {
                    }
                    if (startTime!= null) {
                        localUriBuilder = localUriBuilder.replaceQueryParam("start_time", startTime);
                    } else {
                        localUriBuilder = localUriBuilder.replaceQueryParam("start_time", ((Object[]) null));
                    }
                    if (endTime == null) {
                    }
                    if (endTime!= null) {
                        localUriBuilder = localUriBuilder.replaceQueryParam("end_time", endTime);
                    } else {
                        localUriBuilder = localUriBuilder.replaceQueryParam("end_time", ((Object[]) null));
                    }
                    if (name == null) {
                    }
                    if (name!= null) {
                        localUriBuilder = localUriBuilder.replaceQueryParam("name", name);
                    } else {
                        localUriBuilder = localUriBuilder.replaceQueryParam("name", ((Object[]) null));
                    }
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T getAsJson(String startTime, String endTime, String name, Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    if (startTime == null) {
                    }
                    if (startTime!= null) {
                        localUriBuilder = localUriBuilder.replaceQueryParam("start_time", startTime);
                    } else {
                        localUriBuilder = localUriBuilder.replaceQueryParam("start_time", ((Object[]) null));
                    }
                    if (endTime == null) {
                    }
                    if (endTime!= null) {
                        localUriBuilder = localUriBuilder.replaceQueryParam("end_time", endTime);
                    } else {
                        localUriBuilder = localUriBuilder.replaceQueryParam("end_time", ((Object[]) null));
                    }
                    if (name == null) {
                    }
                    if (name!= null) {
                        localUriBuilder = localUriBuilder.replaceQueryParam("name", name);
                    } else {
                        localUriBuilder = localUriBuilder.replaceQueryParam("name", ((Object[]) null));
                    }
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class SnapshotsAbort_consolidation {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private SnapshotsAbort_consolidation(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public SnapshotsAbort_consolidation(Client client, URI baseUri) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("snapshots/abort_consolidation");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                }

                public<T >T putAs(GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT").invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T putAs(Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT").invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class SnapshotsConsolidate {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private SnapshotsConsolidate(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public SnapshotsConsolidate(Client client, URI baseUri) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("snapshots/consolidate");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                }

                public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T putJsonAs(Object input, Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class SnapshotsSnapshotIdBookmark_settings {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private SnapshotsSnapshotIdBookmark_settings(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public SnapshotsSnapshotIdBookmark_settings(Client client, URI baseUri, String snapshotid) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("snapshots/{snapshotId}/bookmark_settings");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    _templateAndMatrixParameterValues.put("snapshotId", snapshotid);
                }

                /**
                 * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
                 * 
                 */
                public SnapshotsSnapshotIdBookmark_settings(Client client, URI uri) {
                    _client = client;
                    StringBuilder template = new StringBuilder(BASE_URI.toString());
                    if (template.charAt((template.length()- 1))!= '/') {
                        template.append("/groups/{groupId}/clusters/{clusterId}/copies/{copyId}/snapshots/{snapshotId}/bookmark_settings");
                    } else {
                        template.append("groups/{groupId}/clusters/{clusterId}/copies/{copyId}/snapshots/{snapshotId}/bookmark_settings");
                    }
                    _uriBuilder = UriBuilder.fromPath(template.toString());
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    UriTemplate uriTemplate = new UriTemplate(template.toString());
                    HashMap<String, String> parameters = new HashMap<String, String>();
                    uriTemplate.match(uri.toString(), parameters);
                    _templateAndMatrixParameterValues.putAll(parameters);
                }

                /**
                 * Get snapshotId
                 * 
                 */
                public String getSnapshotid() {
                    return ((String) _templateAndMatrixParameterValues.get("snapshotId"));
                }

                /**
                 * Duplicate state and set snapshotId
                 * 
                 */
                public IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.SnapshotsSnapshotIdBookmark_settings setSnapshotid(String snapshotid) {
                    Map<String, Object> copyMap;
                    copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                    UriBuilder copyUriBuilder = _uriBuilder.clone();
                    copyMap.put("snapshotId", snapshotid);
                    return new IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.SnapshotsSnapshotIdBookmark_settings(_client, copyUriBuilder, copyMap);
                }

                public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T putJsonAs(Object input, Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class SnapshotsSnapshotIdConsistency_type {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private SnapshotsSnapshotIdConsistency_type(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public SnapshotsSnapshotIdConsistency_type(Client client, URI baseUri, String snapshotid) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("snapshots/{snapshotId}/consistency_type");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    _templateAndMatrixParameterValues.put("snapshotId", snapshotid);
                }

                /**
                 * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
                 * 
                 */
                public SnapshotsSnapshotIdConsistency_type(Client client, URI uri) {
                    _client = client;
                    StringBuilder template = new StringBuilder(BASE_URI.toString());
                    if (template.charAt((template.length()- 1))!= '/') {
                        template.append("/groups/{groupId}/clusters/{clusterId}/copies/{copyId}/snapshots/{snapshotId}/consistency_type");
                    } else {
                        template.append("groups/{groupId}/clusters/{clusterId}/copies/{copyId}/snapshots/{snapshotId}/consistency_type");
                    }
                    _uriBuilder = UriBuilder.fromPath(template.toString());
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    UriTemplate uriTemplate = new UriTemplate(template.toString());
                    HashMap<String, String> parameters = new HashMap<String, String>();
                    uriTemplate.match(uri.toString(), parameters);
                    _templateAndMatrixParameterValues.putAll(parameters);
                }

                /**
                 * Get snapshotId
                 * 
                 */
                public String getSnapshotid() {
                    return ((String) _templateAndMatrixParameterValues.get("snapshotId"));
                }

                /**
                 * Duplicate state and set snapshotId
                 * 
                 */
                public IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.SnapshotsSnapshotIdConsistency_type setSnapshotid(String snapshotid) {
                    Map<String, Object> copyMap;
                    copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                    UriBuilder copyUriBuilder = _uriBuilder.clone();
                    copyMap.put("snapshotId", snapshotid);
                    return new IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.SnapshotsSnapshotIdConsistency_type(_client, copyUriBuilder, copyMap);
                }

                public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T putJsonAs(Object input, Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class SnapshotsSnapshotIdConsolidation_policy {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private SnapshotsSnapshotIdConsolidation_policy(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public SnapshotsSnapshotIdConsolidation_policy(Client client, URI baseUri, String snapshotid) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("snapshots/{snapshotId}/consolidation_policy");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    _templateAndMatrixParameterValues.put("snapshotId", snapshotid);
                }

                /**
                 * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
                 * 
                 */
                public SnapshotsSnapshotIdConsolidation_policy(Client client, URI uri) {
                    _client = client;
                    StringBuilder template = new StringBuilder(BASE_URI.toString());
                    if (template.charAt((template.length()- 1))!= '/') {
                        template.append("/groups/{groupId}/clusters/{clusterId}/copies/{copyId}/snapshots/{snapshotId}/consolidation_policy");
                    } else {
                        template.append("groups/{groupId}/clusters/{clusterId}/copies/{copyId}/snapshots/{snapshotId}/consolidation_policy");
                    }
                    _uriBuilder = UriBuilder.fromPath(template.toString());
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    UriTemplate uriTemplate = new UriTemplate(template.toString());
                    HashMap<String, String> parameters = new HashMap<String, String>();
                    uriTemplate.match(uri.toString(), parameters);
                    _templateAndMatrixParameterValues.putAll(parameters);
                }

                /**
                 * Get snapshotId
                 * 
                 */
                public String getSnapshotid() {
                    return ((String) _templateAndMatrixParameterValues.get("snapshotId"));
                }

                /**
                 * Duplicate state and set snapshotId
                 * 
                 */
                public IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.SnapshotsSnapshotIdConsolidation_policy setSnapshotid(String snapshotid) {
                    Map<String, Object> copyMap;
                    copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                    UriBuilder copyUriBuilder = _uriBuilder.clone();
                    copyMap.put("snapshotId", snapshotid);
                    return new IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.SnapshotsSnapshotIdConsolidation_policy(_client, copyUriBuilder, copyMap);
                }

                public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T putJsonAs(Object input, Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class SnapshotsVerify {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private SnapshotsVerify(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public SnapshotsVerify(Client client, URI baseUri) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("snapshots/verify");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                }

                public<T >T postJson(Object input, GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T postJson(Object input, Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

                public<T >T postJson(Object input, String timeoutInSeconds, GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    if (timeoutInSeconds == null) {
                    }
                    if (timeoutInSeconds!= null) {
                        localUriBuilder = localUriBuilder.replaceQueryParam("timeout_in_seconds", timeoutInSeconds);
                    } else {
                        localUriBuilder = localUriBuilder.replaceQueryParam("timeout_in_seconds", ((Object[]) null));
                    }
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T postJson(Object input, String timeoutInSeconds, Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    if (timeoutInSeconds == null) {
                    }
                    if (timeoutInSeconds!= null) {
                        localUriBuilder = localUriBuilder.replaceQueryParam("timeout_in_seconds", timeoutInSeconds);
                    } else {
                        localUriBuilder = localUriBuilder.replaceQueryParam("timeout_in_seconds", ((Object[]) null));
                    }
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class Start_transfer {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private Start_transfer(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public Start_transfer(Client client, URI baseUri) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("start_transfer");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                }

                public<T >T putAs(GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT").invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T putAs(Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT").invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class Topology {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private Topology(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public Topology(Client client, URI baseUri) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("topology");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                }

                public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T putJsonAs(Object input, Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

                public<T >T putJsonAs(Object input, String startTransfer, GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    if (startTransfer == null) {
                    }
                    if (startTransfer!= null) {
                        localUriBuilder = localUriBuilder.replaceQueryParam("start_transfer", startTransfer);
                    } else {
                        localUriBuilder = localUriBuilder.replaceQueryParam("start_transfer", ((Object[]) null));
                    }
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T putJsonAs(Object input, String startTransfer, Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    if (startTransfer == null) {
                    }
                    if (startTransfer!= null) {
                        localUriBuilder = localUriBuilder.replaceQueryParam("start_transfer", startTransfer);
                    } else {
                        localUriBuilder = localUriBuilder.replaceQueryParam("start_transfer", ((Object[]) null));
                    }
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class Undo_writes {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private Undo_writes(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public Undo_writes(Client client, URI baseUri) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("undo_writes");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                }

                public<T >T putAs(GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT").invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T putAs(Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT").invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class User_volumes {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private User_volumes(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public User_volumes(Client client, URI baseUri) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("user_volumes");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                }

                public<T >T postJsonAs(Object input, GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T postJsonAs(Object input, Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class User_volumesDeviceId {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private User_volumesDeviceId(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public User_volumesDeviceId(Client client, URI baseUri, String deviceid) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("user_volumes/{deviceId}");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    _templateAndMatrixParameterValues.put("deviceId", deviceid);
                }

                /**
                 * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
                 * 
                 */
                public User_volumesDeviceId(Client client, URI uri) {
                    _client = client;
                    StringBuilder template = new StringBuilder(BASE_URI.toString());
                    if (template.charAt((template.length()- 1))!= '/') {
                        template.append("/groups/{groupId}/clusters/{clusterId}/copies/{copyId}/user_volumes/{deviceId}");
                    } else {
                        template.append("groups/{groupId}/clusters/{clusterId}/copies/{copyId}/user_volumes/{deviceId}");
                    }
                    _uriBuilder = UriBuilder.fromPath(template.toString());
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                    UriTemplate uriTemplate = new UriTemplate(template.toString());
                    HashMap<String, String> parameters = new HashMap<String, String>();
                    uriTemplate.match(uri.toString(), parameters);
                    _templateAndMatrixParameterValues.putAll(parameters);
                }

                /**
                 * Get deviceId
                 * 
                 */
                public String getDeviceid() {
                    return ((String) _templateAndMatrixParameterValues.get("deviceId"));
                }

                /**
                 * Duplicate state and set deviceId
                 * 
                 */
                public IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.User_volumesDeviceId setDeviceid(String deviceid) {
                    Map<String, Object> copyMap;
                    copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                    UriBuilder copyUriBuilder = _uriBuilder.clone();
                    copyMap.put("deviceId", deviceid);
                    return new IP1921680160_FapiRest4_3 .Groups.GroupIdClustersClusterIdCopiesCopyId.User_volumesDeviceId(_client, copyUriBuilder, copyMap);
                }

                public<T >T deleteJsonAs(Object input, GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("DELETE", Entity.entity(input, "application/json")).invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T deleteJsonAs(Object input, Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("DELETE", Entity.entity(input, "application/json")).invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class Vm_startup_promptsDismiss {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private Vm_startup_promptsDismiss(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public Vm_startup_promptsDismiss(Client client, URI baseUri) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("vm_startup_prompts/dismiss");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                }

                public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T putJsonAs(Object input, Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class VolumesMark_as_clean {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private VolumesMark_as_clean(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public VolumesMark_as_clean(Client client, URI baseUri) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("volumes/mark_as_clean");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                }

                public<T >T putAs(GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT").invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T putAs(Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT").invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class VolumesMark_as_dirty {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private VolumesMark_as_dirty(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public VolumesMark_as_dirty(Client client, URI baseUri) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("volumes/mark_as_dirty");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                }

                public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T putJsonAs(Object input, Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                    Response response;
                    response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

        }

        public static class GroupIdCopies {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private GroupIdCopies(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public GroupIdCopies(Client client, URI baseUri, String groupid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{groupId}/copies");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("groupId", groupid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public GroupIdCopies(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/groups/{groupId}/copies");
                } else {
                    template.append("groups/{groupId}/copies");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get groupId
             * 
             */
            public String getGroupid() {
                return ((String) _templateAndMatrixParameterValues.get("groupId"));
            }

            /**
             * Duplicate state and set groupId
             * 
             */
            public IP1921680160_FapiRest4_3 .Groups.GroupIdCopies setGroupid(String groupid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("groupId", groupid);
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdCopies(_client, copyUriBuilder, copyMap);
            }

            public<T >T postJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T postJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class GroupIdCopiesSettings {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private GroupIdCopiesSettings(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public GroupIdCopiesSettings(Client client, URI baseUri, String groupid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{groupId}/copies/settings");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("groupId", groupid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public GroupIdCopiesSettings(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/groups/{groupId}/copies/settings");
                } else {
                    template.append("groups/{groupId}/copies/settings");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get groupId
             * 
             */
            public String getGroupid() {
                return ((String) _templateAndMatrixParameterValues.get("groupId"));
            }

            /**
             * Duplicate state and set groupId
             * 
             */
            public IP1921680160_FapiRest4_3 .Groups.GroupIdCopiesSettings setGroupid(String groupid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("groupId", groupid);
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdCopiesSettings(_client, copyUriBuilder, copyMap);
            }

            public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class GroupIdDisable {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private GroupIdDisable(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public GroupIdDisable(Client client, URI baseUri, String groupid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{groupId}/disable");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("groupId", groupid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public GroupIdDisable(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/groups/{groupId}/disable");
                } else {
                    template.append("groups/{groupId}/disable");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get groupId
             * 
             */
            public String getGroupid() {
                return ((String) _templateAndMatrixParameterValues.get("groupId"));
            }

            /**
             * Duplicate state and set groupId
             * 
             */
            public IP1921680160_FapiRest4_3 .Groups.GroupIdDisable setGroupid(String groupid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("groupId", groupid);
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdDisable(_client, copyUriBuilder, copyMap);
            }

            public<T >T putAs(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putAs(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class GroupIdEnable {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private GroupIdEnable(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public GroupIdEnable(Client client, URI baseUri, String groupid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{groupId}/enable");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("groupId", groupid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public GroupIdEnable(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/groups/{groupId}/enable");
                } else {
                    template.append("groups/{groupId}/enable");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get groupId
             * 
             */
            public String getGroupid() {
                return ((String) _templateAndMatrixParameterValues.get("groupId"));
            }

            /**
             * Duplicate state and set groupId
             * 
             */
            public IP1921680160_FapiRest4_3 .Groups.GroupIdEnable setGroupid(String groupid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("groupId", groupid);
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdEnable(_client, copyUriBuilder, copyMap);
            }

            public<T >T putAs(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putAs(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

            public<T >T putAs(String starttransfer, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                if (starttransfer == null) {
                }
                if (starttransfer!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("startTransfer", starttransfer);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("startTransfer", ((Object[]) null));
                }
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putAs(String starttransfer, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                if (starttransfer == null) {
                }
                if (starttransfer!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("startTransfer", starttransfer);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("startTransfer", ((Object[]) null));
                }
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class GroupIdFull_policy {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private GroupIdFull_policy(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public GroupIdFull_policy(Client client, URI baseUri, String groupid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{groupId}/full_policy");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("groupId", groupid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public GroupIdFull_policy(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/groups/{groupId}/full_policy");
                } else {
                    template.append("groups/{groupId}/full_policy");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get groupId
             * 
             */
            public String getGroupid() {
                return ((String) _templateAndMatrixParameterValues.get("groupId"));
            }

            /**
             * Duplicate state and set groupId
             * 
             */
            public IP1921680160_FapiRest4_3 .Groups.GroupIdFull_policy setGroupid(String groupid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("groupId", groupid);
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdFull_policy(_client, copyUriBuilder, copyMap);
            }

            public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class GroupIdInformation {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private GroupIdInformation(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public GroupIdInformation(Client client, URI baseUri, String groupid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{groupId}/information");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("groupId", groupid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public GroupIdInformation(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/groups/{groupId}/information");
                } else {
                    template.append("groups/{groupId}/information");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get groupId
             * 
             */
            public String getGroupid() {
                return ((String) _templateAndMatrixParameterValues.get("groupId"));
            }

            /**
             * Duplicate state and set groupId
             * 
             */
            public IP1921680160_FapiRest4_3 .Groups.GroupIdInformation setGroupid(String groupid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("groupId", groupid);
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdInformation(_client, copyUriBuilder, copyMap);
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class GroupIdLinks {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private GroupIdLinks(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public GroupIdLinks(Client client, URI baseUri, String groupid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{groupId}/links");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("groupId", groupid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public GroupIdLinks(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/groups/{groupId}/links");
                } else {
                    template.append("groups/{groupId}/links");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get groupId
             * 
             */
            public String getGroupid() {
                return ((String) _templateAndMatrixParameterValues.get("groupId"));
            }

            /**
             * Duplicate state and set groupId
             * 
             */
            public IP1921680160_FapiRest4_3 .Groups.GroupIdLinks setGroupid(String groupid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("groupId", groupid);
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdLinks(_client, copyUriBuilder, copyMap);
            }

            public<T >T postJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T postJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class GroupIdName {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private GroupIdName(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public GroupIdName(Client client, URI baseUri, String groupid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{groupId}/name");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("groupId", groupid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public GroupIdName(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/groups/{groupId}/name");
                } else {
                    template.append("groups/{groupId}/name");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get groupId
             * 
             */
            public String getGroupid() {
                return ((String) _templateAndMatrixParameterValues.get("groupId"));
            }

            /**
             * Duplicate state and set groupId
             * 
             */
            public IP1921680160_FapiRest4_3 .Groups.GroupIdName setGroupid(String groupid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("groupId", groupid);
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdName(_client, copyUriBuilder, copyMap);
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

            public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class GroupIdPause_transfer {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private GroupIdPause_transfer(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public GroupIdPause_transfer(Client client, URI baseUri, String groupid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{groupId}/pause_transfer");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("groupId", groupid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public GroupIdPause_transfer(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/groups/{groupId}/pause_transfer");
                } else {
                    template.append("groups/{groupId}/pause_transfer");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get groupId
             * 
             */
            public String getGroupid() {
                return ((String) _templateAndMatrixParameterValues.get("groupId"));
            }

            /**
             * Duplicate state and set groupId
             * 
             */
            public IP1921680160_FapiRest4_3 .Groups.GroupIdPause_transfer setGroupid(String groupid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("groupId", groupid);
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdPause_transfer(_client, copyUriBuilder, copyMap);
            }

            public<T >T putAs(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putAs(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class GroupIdPolicy {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private GroupIdPolicy(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public GroupIdPolicy(Client client, URI baseUri, String groupid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{groupId}/policy");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("groupId", groupid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public GroupIdPolicy(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/groups/{groupId}/policy");
                } else {
                    template.append("groups/{groupId}/policy");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get groupId
             * 
             */
            public String getGroupid() {
                return ((String) _templateAndMatrixParameterValues.get("groupId"));
            }

            /**
             * Duplicate state and set groupId
             * 
             */
            public IP1921680160_FapiRest4_3 .Groups.GroupIdPolicy setGroupid(String groupid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("groupId", groupid);
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdPolicy(_client, copyUriBuilder, copyMap);
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

            public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class GroupIdRecovery_copySnapshots {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private GroupIdRecovery_copySnapshots(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public GroupIdRecovery_copySnapshots(Client client, URI baseUri, String groupid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{groupId}/recovery_copy/snapshots");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("groupId", groupid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public GroupIdRecovery_copySnapshots(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/groups/{groupId}/recovery_copy/snapshots");
                } else {
                    template.append("groups/{groupId}/recovery_copy/snapshots");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get groupId
             * 
             */
            public String getGroupid() {
                return ((String) _templateAndMatrixParameterValues.get("groupId"));
            }

            /**
             * Duplicate state and set groupId
             * 
             */
            public IP1921680160_FapiRest4_3 .Groups.GroupIdRecovery_copySnapshots setGroupid(String groupid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("groupId", groupid);
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdRecovery_copySnapshots(_client, copyUriBuilder, copyMap);
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class GroupIdRemove_passive_links {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private GroupIdRemove_passive_links(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public GroupIdRemove_passive_links(Client client, URI baseUri, String groupid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{groupId}/remove_passive_links");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("groupId", groupid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public GroupIdRemove_passive_links(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/groups/{groupId}/remove_passive_links");
                } else {
                    template.append("groups/{groupId}/remove_passive_links");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get groupId
             * 
             */
            public String getGroupid() {
                return ((String) _templateAndMatrixParameterValues.get("groupId"));
            }

            /**
             * Duplicate state and set groupId
             * 
             */
            public IP1921680160_FapiRest4_3 .Groups.GroupIdRemove_passive_links setGroupid(String groupid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("groupId", groupid);
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdRemove_passive_links(_client, copyUriBuilder, copyMap);
            }

            public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class GroupIdReplication_sets {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private GroupIdReplication_sets(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public GroupIdReplication_sets(Client client, URI baseUri, String groupid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{groupId}/replication_sets");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("groupId", groupid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public GroupIdReplication_sets(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/groups/{groupId}/replication_sets");
                } else {
                    template.append("groups/{groupId}/replication_sets");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get groupId
             * 
             */
            public String getGroupid() {
                return ((String) _templateAndMatrixParameterValues.get("groupId"));
            }

            /**
             * Duplicate state and set groupId
             * 
             */
            public IP1921680160_FapiRest4_3 .Groups.GroupIdReplication_sets setGroupid(String groupid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("groupId", groupid);
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdReplication_sets(_client, copyUriBuilder, copyMap);
            }

            public<T >T postAs(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("POST").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T postAs(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("POST").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

            public<T >T postAs(String replicationsetname, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                if (replicationsetname == null) {
                }
                if (replicationsetname!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("replicationSetName", replicationsetname);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("replicationSetName", ((Object[]) null));
                }
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("POST").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T postAs(String replicationsetname, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                if (replicationsetname == null) {
                }
                if (replicationsetname!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("replicationSetName", replicationsetname);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("replicationSetName", ((Object[]) null));
                }
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("POST").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class GroupIdReplication_setsReplicationSetId {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private GroupIdReplication_setsReplicationSetId(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public GroupIdReplication_setsReplicationSetId(Client client, URI baseUri, String groupid, String replicationsetid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{groupId}/replication_sets/{replicationSetId}");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("groupId", groupid);
                _templateAndMatrixParameterValues.put("replicationSetId", replicationsetid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public GroupIdReplication_setsReplicationSetId(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/groups/{groupId}/replication_sets/{replicationSetId}");
                } else {
                    template.append("groups/{groupId}/replication_sets/{replicationSetId}");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get groupId
             * 
             */
            public String getGroupid() {
                return ((String) _templateAndMatrixParameterValues.get("groupId"));
            }

            /**
             * Duplicate state and set groupId
             * 
             */
            public IP1921680160_FapiRest4_3 .Groups.GroupIdReplication_setsReplicationSetId setGroupid(String groupid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("groupId", groupid);
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdReplication_setsReplicationSetId(_client, copyUriBuilder, copyMap);
            }

            /**
             * Get replicationSetId
             * 
             */
            public String getReplicationsetid() {
                return ((String) _templateAndMatrixParameterValues.get("replicationSetId"));
            }

            /**
             * Duplicate state and set replicationSetId
             * 
             */
            public IP1921680160_FapiRest4_3 .Groups.GroupIdReplication_setsReplicationSetId setReplicationsetid(String replicationsetid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("replicationSetId", replicationsetid);
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdReplication_setsReplicationSetId(_client, copyUriBuilder, copyMap);
            }

            public<T >T deleteAs(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("DELETE").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T deleteAs(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("DELETE").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class GroupIdReplication_setsReplicationSetIdName {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private GroupIdReplication_setsReplicationSetIdName(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public GroupIdReplication_setsReplicationSetIdName(Client client, URI baseUri, String groupid, String replicationsetid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{groupId}/replication_sets/{replicationSetId}/name");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("groupId", groupid);
                _templateAndMatrixParameterValues.put("replicationSetId", replicationsetid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public GroupIdReplication_setsReplicationSetIdName(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/groups/{groupId}/replication_sets/{replicationSetId}/name");
                } else {
                    template.append("groups/{groupId}/replication_sets/{replicationSetId}/name");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get groupId
             * 
             */
            public String getGroupid() {
                return ((String) _templateAndMatrixParameterValues.get("groupId"));
            }

            /**
             * Duplicate state and set groupId
             * 
             */
            public IP1921680160_FapiRest4_3 .Groups.GroupIdReplication_setsReplicationSetIdName setGroupid(String groupid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("groupId", groupid);
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdReplication_setsReplicationSetIdName(_client, copyUriBuilder, copyMap);
            }

            /**
             * Get replicationSetId
             * 
             */
            public String getReplicationsetid() {
                return ((String) _templateAndMatrixParameterValues.get("replicationSetId"));
            }

            /**
             * Duplicate state and set replicationSetId
             * 
             */
            public IP1921680160_FapiRest4_3 .Groups.GroupIdReplication_setsReplicationSetIdName setReplicationsetid(String replicationsetid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("replicationSetId", replicationsetid);
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdReplication_setsReplicationSetIdName(_client, copyUriBuilder, copyMap);
            }

            public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class GroupIdReplication_setsReplicationSetIdSettings {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private GroupIdReplication_setsReplicationSetIdSettings(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public GroupIdReplication_setsReplicationSetIdSettings(Client client, URI baseUri, String groupid, String replicationsetid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{groupId}/replication_sets/{replicationSetId}/settings");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("groupId", groupid);
                _templateAndMatrixParameterValues.put("replicationSetId", replicationsetid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public GroupIdReplication_setsReplicationSetIdSettings(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/groups/{groupId}/replication_sets/{replicationSetId}/settings");
                } else {
                    template.append("groups/{groupId}/replication_sets/{replicationSetId}/settings");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get groupId
             * 
             */
            public String getGroupid() {
                return ((String) _templateAndMatrixParameterValues.get("groupId"));
            }

            /**
             * Duplicate state and set groupId
             * 
             */
            public IP1921680160_FapiRest4_3 .Groups.GroupIdReplication_setsReplicationSetIdSettings setGroupid(String groupid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("groupId", groupid);
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdReplication_setsReplicationSetIdSettings(_client, copyUriBuilder, copyMap);
            }

            /**
             * Get replicationSetId
             * 
             */
            public String getReplicationsetid() {
                return ((String) _templateAndMatrixParameterValues.get("replicationSetId"));
            }

            /**
             * Duplicate state and set replicationSetId
             * 
             */
            public IP1921680160_FapiRest4_3 .Groups.GroupIdReplication_setsReplicationSetIdSettings setReplicationsetid(String replicationsetid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("replicationSetId", replicationsetid);
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdReplication_setsReplicationSetIdSettings(_client, copyUriBuilder, copyMap);
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class GroupIdReplication_setsReplicationSetIdSize {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private GroupIdReplication_setsReplicationSetIdSize(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public GroupIdReplication_setsReplicationSetIdSize(Client client, URI baseUri, String groupid, String replicationsetid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{groupId}/replication_sets/{replicationSetId}/size");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("groupId", groupid);
                _templateAndMatrixParameterValues.put("replicationSetId", replicationsetid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public GroupIdReplication_setsReplicationSetIdSize(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/groups/{groupId}/replication_sets/{replicationSetId}/size");
                } else {
                    template.append("groups/{groupId}/replication_sets/{replicationSetId}/size");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get groupId
             * 
             */
            public String getGroupid() {
                return ((String) _templateAndMatrixParameterValues.get("groupId"));
            }

            /**
             * Duplicate state and set groupId
             * 
             */
            public IP1921680160_FapiRest4_3 .Groups.GroupIdReplication_setsReplicationSetIdSize setGroupid(String groupid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("groupId", groupid);
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdReplication_setsReplicationSetIdSize(_client, copyUriBuilder, copyMap);
            }

            /**
             * Get replicationSetId
             * 
             */
            public String getReplicationsetid() {
                return ((String) _templateAndMatrixParameterValues.get("replicationSetId"));
            }

            /**
             * Duplicate state and set replicationSetId
             * 
             */
            public IP1921680160_FapiRest4_3 .Groups.GroupIdReplication_setsReplicationSetIdSize setReplicationsetid(String replicationsetid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("replicationSetId", replicationsetid);
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdReplication_setsReplicationSetIdSize(_client, copyUriBuilder, copyMap);
            }

            public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class GroupIdReplication_setsSettings {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private GroupIdReplication_setsSettings(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public GroupIdReplication_setsSettings(Client client, URI baseUri, String groupid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{groupId}/replication_sets/settings");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("groupId", groupid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public GroupIdReplication_setsSettings(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/groups/{groupId}/replication_sets/settings");
                } else {
                    template.append("groups/{groupId}/replication_sets/settings");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get groupId
             * 
             */
            public String getGroupid() {
                return ((String) _templateAndMatrixParameterValues.get("groupId"));
            }

            /**
             * Duplicate state and set groupId
             * 
             */
            public IP1921680160_FapiRest4_3 .Groups.GroupIdReplication_setsSettings setGroupid(String groupid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("groupId", groupid);
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdReplication_setsSettings(_client, copyUriBuilder, copyMap);
            }

            public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class GroupIdReports {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private GroupIdReports(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public GroupIdReports(Client client, URI baseUri, String groupid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{groupId}/reports");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("groupId", groupid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public GroupIdReports(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/groups/{groupId}/reports");
                } else {
                    template.append("groups/{groupId}/reports");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get groupId
             * 
             */
            public String getGroupid() {
                return ((String) _templateAndMatrixParameterValues.get("groupId"));
            }

            /**
             * Duplicate state and set groupId
             * 
             */
            public IP1921680160_FapiRest4_3 .Groups.GroupIdReports setGroupid(String groupid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("groupId", groupid);
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdReports(_client, copyUriBuilder, copyMap);
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class GroupIdReportsReportIdDelete {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private GroupIdReportsReportIdDelete(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public GroupIdReportsReportIdDelete(Client client, URI baseUri, String groupid, String reportid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{groupId}/reports/{reportId}/delete");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("groupId", groupid);
                _templateAndMatrixParameterValues.put("reportId", reportid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public GroupIdReportsReportIdDelete(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/groups/{groupId}/reports/{reportId}/delete");
                } else {
                    template.append("groups/{groupId}/reports/{reportId}/delete");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get groupId
             * 
             */
            public String getGroupid() {
                return ((String) _templateAndMatrixParameterValues.get("groupId"));
            }

            /**
             * Duplicate state and set groupId
             * 
             */
            public IP1921680160_FapiRest4_3 .Groups.GroupIdReportsReportIdDelete setGroupid(String groupid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("groupId", groupid);
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdReportsReportIdDelete(_client, copyUriBuilder, copyMap);
            }

            /**
             * Get reportId
             * 
             */
            public String getReportid() {
                return ((String) _templateAndMatrixParameterValues.get("reportId"));
            }

            /**
             * Duplicate state and set reportId
             * 
             */
            public IP1921680160_FapiRest4_3 .Groups.GroupIdReportsReportIdDelete setReportid(String reportid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("reportId", reportid);
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdReportsReportIdDelete(_client, copyUriBuilder, copyMap);
            }

            public<T >T deleteAs(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("DELETE").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T deleteAs(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("DELETE").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class GroupIdResume {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private GroupIdResume(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public GroupIdResume(Client client, URI baseUri, String groupid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{groupId}/resume");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("groupId", groupid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public GroupIdResume(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/groups/{groupId}/resume");
                } else {
                    template.append("groups/{groupId}/resume");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get groupId
             * 
             */
            public String getGroupid() {
                return ((String) _templateAndMatrixParameterValues.get("groupId"));
            }

            /**
             * Duplicate state and set groupId
             * 
             */
            public IP1921680160_FapiRest4_3 .Groups.GroupIdResume setGroupid(String groupid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("groupId", groupid);
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdResume(_client, copyUriBuilder, copyMap);
            }

            public<T >T putAs(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putAs(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class GroupIdResume_production {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private GroupIdResume_production(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public GroupIdResume_production(Client client, URI baseUri, String groupid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{groupId}/resume_production");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("groupId", groupid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public GroupIdResume_production(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/groups/{groupId}/resume_production");
                } else {
                    template.append("groups/{groupId}/resume_production");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get groupId
             * 
             */
            public String getGroupid() {
                return ((String) _templateAndMatrixParameterValues.get("groupId"));
            }

            /**
             * Duplicate state and set groupId
             * 
             */
            public IP1921680160_FapiRest4_3 .Groups.GroupIdResume_production setGroupid(String groupid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("groupId", groupid);
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdResume_production(_client, copyUriBuilder, copyMap);
            }

            public<T >T putAs(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putAs(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

            public<T >T putAs(String starttransfer, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                if (starttransfer == null) {
                }
                if (starttransfer!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("startTransfer", starttransfer);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("startTransfer", ((Object[]) null));
                }
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putAs(String starttransfer, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                if (starttransfer == null) {
                }
                if (starttransfer!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("startTransfer", starttransfer);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("startTransfer", ((Object[]) null));
                }
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class GroupIdSettings {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private GroupIdSettings(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public GroupIdSettings(Client client, URI baseUri, String groupid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{groupId}/settings");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("groupId", groupid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public GroupIdSettings(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/groups/{groupId}/settings");
                } else {
                    template.append("groups/{groupId}/settings");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get groupId
             * 
             */
            public String getGroupid() {
                return ((String) _templateAndMatrixParameterValues.get("groupId"));
            }

            /**
             * Duplicate state and set groupId
             * 
             */
            public IP1921680160_FapiRest4_3 .Groups.GroupIdSettings setGroupid(String groupid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("groupId", groupid);
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdSettings(_client, copyUriBuilder, copyMap);
            }

            public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class GroupIdSet_link_policy {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private GroupIdSet_link_policy(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public GroupIdSet_link_policy(Client client, URI baseUri, String groupid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{groupId}/set_link_policy");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("groupId", groupid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public GroupIdSet_link_policy(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/groups/{groupId}/set_link_policy");
                } else {
                    template.append("groups/{groupId}/set_link_policy");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get groupId
             * 
             */
            public String getGroupid() {
                return ((String) _templateAndMatrixParameterValues.get("groupId"));
            }

            /**
             * Duplicate state and set groupId
             * 
             */
            public IP1921680160_FapiRest4_3 .Groups.GroupIdSet_link_policy setGroupid(String groupid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("groupId", groupid);
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdSet_link_policy(_client, copyUriBuilder, copyMap);
            }

            public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class GroupIdSnapshots {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private GroupIdSnapshots(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public GroupIdSnapshots(Client client, URI baseUri, String groupid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{groupId}/snapshots");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("groupId", groupid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public GroupIdSnapshots(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/groups/{groupId}/snapshots");
                } else {
                    template.append("groups/{groupId}/snapshots");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get groupId
             * 
             */
            public String getGroupid() {
                return ((String) _templateAndMatrixParameterValues.get("groupId"));
            }

            /**
             * Duplicate state and set groupId
             * 
             */
            public IP1921680160_FapiRest4_3 .Groups.GroupIdSnapshots setGroupid(String groupid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("groupId", groupid);
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdSnapshots(_client, copyUriBuilder, copyMap);
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

            public<T >T getAsJson(String startTime, String endTime, String name, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                if (startTime == null) {
                }
                if (startTime!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("start_time", startTime);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("start_time", ((Object[]) null));
                }
                if (endTime == null) {
                }
                if (endTime!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("end_time", endTime);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("end_time", ((Object[]) null));
                }
                if (name == null) {
                }
                if (name!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("name", name);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("name", ((Object[]) null));
                }
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(String startTime, String endTime, String name, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                if (startTime == null) {
                }
                if (startTime!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("start_time", startTime);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("start_time", ((Object[]) null));
                }
                if (endTime == null) {
                }
                if (endTime!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("end_time", endTime);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("end_time", ((Object[]) null));
                }
                if (name == null) {
                }
                if (name!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("name", name);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("name", ((Object[]) null));
                }
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class GroupIdStart_transfer {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private GroupIdStart_transfer(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public GroupIdStart_transfer(Client client, URI baseUri, String groupid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{groupId}/start_transfer");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("groupId", groupid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public GroupIdStart_transfer(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/groups/{groupId}/start_transfer");
                } else {
                    template.append("groups/{groupId}/start_transfer");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get groupId
             * 
             */
            public String getGroupid() {
                return ((String) _templateAndMatrixParameterValues.get("groupId"));
            }

            /**
             * Duplicate state and set groupId
             * 
             */
            public IP1921680160_FapiRest4_3 .Groups.GroupIdStart_transfer setGroupid(String groupid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("groupId", groupid);
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdStart_transfer(_client, copyUriBuilder, copyMap);
            }

            public<T >T putAs(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putAs(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class GroupIdState {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private GroupIdState(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public GroupIdState(Client client, URI baseUri, String groupid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{groupId}/state");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("groupId", groupid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public GroupIdState(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/groups/{groupId}/state");
                } else {
                    template.append("groups/{groupId}/state");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get groupId
             * 
             */
            public String getGroupid() {
                return ((String) _templateAndMatrixParameterValues.get("groupId"));
            }

            /**
             * Duplicate state and set groupId
             * 
             */
            public IP1921680160_FapiRest4_3 .Groups.GroupIdState setGroupid(String groupid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("groupId", groupid);
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdState(_client, copyUriBuilder, copyMap);
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class GroupIdStateVerify {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private GroupIdStateVerify(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public GroupIdStateVerify(Client client, URI baseUri, String groupid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{groupId}/state/verify");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("groupId", groupid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public GroupIdStateVerify(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/groups/{groupId}/state/verify");
                } else {
                    template.append("groups/{groupId}/state/verify");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get groupId
             * 
             */
            public String getGroupid() {
                return ((String) _templateAndMatrixParameterValues.get("groupId"));
            }

            /**
             * Duplicate state and set groupId
             * 
             */
            public IP1921680160_FapiRest4_3 .Groups.GroupIdStateVerify setGroupid(String groupid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("groupId", groupid);
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdStateVerify(_client, copyUriBuilder, copyMap);
            }

            public<T >T postJson(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T postJson(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

            public<T >T postJson(Object input, String timeoutInSeconds, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                if (timeoutInSeconds == null) {
                }
                if (timeoutInSeconds!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("timeout_in_seconds", timeoutInSeconds);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("timeout_in_seconds", ((Object[]) null));
                }
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T postJson(Object input, String timeoutInSeconds, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                if (timeoutInSeconds == null) {
                }
                if (timeoutInSeconds!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("timeout_in_seconds", timeoutInSeconds);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("timeout_in_seconds", ((Object[]) null));
                }
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class GroupIdStatistics {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private GroupIdStatistics(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public GroupIdStatistics(Client client, URI baseUri, String groupid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{groupId}/statistics");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("groupId", groupid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public GroupIdStatistics(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/groups/{groupId}/statistics");
                } else {
                    template.append("groups/{groupId}/statistics");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get groupId
             * 
             */
            public String getGroupid() {
                return ((String) _templateAndMatrixParameterValues.get("groupId"));
            }

            /**
             * Duplicate state and set groupId
             * 
             */
            public IP1921680160_FapiRest4_3 .Groups.GroupIdStatistics setGroupid(String groupid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("groupId", groupid);
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdStatistics(_client, copyUriBuilder, copyMap);
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class GroupIdSuspend {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private GroupIdSuspend(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public GroupIdSuspend(Client client, URI baseUri, String groupid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{groupId}/suspend");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("groupId", groupid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public GroupIdSuspend(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/groups/{groupId}/suspend");
                } else {
                    template.append("groups/{groupId}/suspend");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get groupId
             * 
             */
            public String getGroupid() {
                return ((String) _templateAndMatrixParameterValues.get("groupId"));
            }

            /**
             * Duplicate state and set groupId
             * 
             */
            public IP1921680160_FapiRest4_3 .Groups.GroupIdSuspend setGroupid(String groupid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("groupId", groupid);
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdSuspend(_client, copyUriBuilder, copyMap);
            }

            public<T >T putAs(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putAs(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class GroupIdVirtual_machines {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private GroupIdVirtual_machines(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public GroupIdVirtual_machines(Client client, URI baseUri, String groupid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{groupId}/virtual_machines");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("groupId", groupid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public GroupIdVirtual_machines(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/groups/{groupId}/virtual_machines");
                } else {
                    template.append("groups/{groupId}/virtual_machines");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get groupId
             * 
             */
            public String getGroupid() {
                return ((String) _templateAndMatrixParameterValues.get("groupId"));
            }

            /**
             * Duplicate state and set groupId
             * 
             */
            public IP1921680160_FapiRest4_3 .Groups.GroupIdVirtual_machines setGroupid(String groupid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("groupId", groupid);
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdVirtual_machines(_client, copyUriBuilder, copyMap);
            }

            public<T >T postJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T postJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

            public<T >T deleteJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("DELETE", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T deleteJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("DELETE", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class GroupIdVirtual_machinesGroup_powerup_sequence {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private GroupIdVirtual_machinesGroup_powerup_sequence(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public GroupIdVirtual_machinesGroup_powerup_sequence(Client client, URI baseUri, String groupid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{groupId}/virtual_machines/group_powerup_sequence");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("groupId", groupid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public GroupIdVirtual_machinesGroup_powerup_sequence(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/groups/{groupId}/virtual_machines/group_powerup_sequence");
                } else {
                    template.append("groups/{groupId}/virtual_machines/group_powerup_sequence");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get groupId
             * 
             */
            public String getGroupid() {
                return ((String) _templateAndMatrixParameterValues.get("groupId"));
            }

            /**
             * Duplicate state and set groupId
             * 
             */
            public IP1921680160_FapiRest4_3 .Groups.GroupIdVirtual_machinesGroup_powerup_sequence setGroupid(String groupid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("groupId", groupid);
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdVirtual_machinesGroup_powerup_sequence(_client, copyUriBuilder, copyMap);
            }

            public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class GroupIdVirtual_machinesHardware_replication_params {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private GroupIdVirtual_machinesHardware_replication_params(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public GroupIdVirtual_machinesHardware_replication_params(Client client, URI baseUri, String groupid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{groupId}/virtual_machines/hardware_replication_params");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("groupId", groupid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public GroupIdVirtual_machinesHardware_replication_params(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/groups/{groupId}/virtual_machines/hardware_replication_params");
                } else {
                    template.append("groups/{groupId}/virtual_machines/hardware_replication_params");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get groupId
             * 
             */
            public String getGroupid() {
                return ((String) _templateAndMatrixParameterValues.get("groupId"));
            }

            /**
             * Duplicate state and set groupId
             * 
             */
            public IP1921680160_FapiRest4_3 .Groups.GroupIdVirtual_machinesHardware_replication_params setGroupid(String groupid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("groupId", groupid);
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdVirtual_machinesHardware_replication_params(_client, copyUriBuilder, copyMap);
            }

            public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class GroupIdVirtual_machinesPowerup_sequence {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private GroupIdVirtual_machinesPowerup_sequence(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public GroupIdVirtual_machinesPowerup_sequence(Client client, URI baseUri, String groupid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{groupId}/virtual_machines/powerup_sequence");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("groupId", groupid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public GroupIdVirtual_machinesPowerup_sequence(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/groups/{groupId}/virtual_machines/powerup_sequence");
                } else {
                    template.append("groups/{groupId}/virtual_machines/powerup_sequence");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get groupId
             * 
             */
            public String getGroupid() {
                return ((String) _templateAndMatrixParameterValues.get("groupId"));
            }

            /**
             * Duplicate state and set groupId
             * 
             */
            public IP1921680160_FapiRest4_3 .Groups.GroupIdVirtual_machinesPowerup_sequence setGroupid(String groupid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("groupId", groupid);
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdVirtual_machinesPowerup_sequence(_client, copyUriBuilder, copyMap);
            }

            public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class GroupIdVirtual_machinesReplication_params {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private GroupIdVirtual_machinesReplication_params(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public GroupIdVirtual_machinesReplication_params(Client client, URI baseUri, String groupid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{groupId}/virtual_machines/replication_params");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("groupId", groupid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public GroupIdVirtual_machinesReplication_params(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/groups/{groupId}/virtual_machines/replication_params");
                } else {
                    template.append("groups/{groupId}/virtual_machines/replication_params");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get groupId
             * 
             */
            public String getGroupid() {
                return ((String) _templateAndMatrixParameterValues.get("groupId"));
            }

            /**
             * Duplicate state and set groupId
             * 
             */
            public IP1921680160_FapiRest4_3 .Groups.GroupIdVirtual_machinesReplication_params setGroupid(String groupid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("groupId", groupid);
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdVirtual_machinesReplication_params(_client, copyUriBuilder, copyMap);
            }

            public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class GroupIdVm_replication_sets_policy {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private GroupIdVm_replication_sets_policy(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public GroupIdVm_replication_sets_policy(Client client, URI baseUri, String groupid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{groupId}/vm_replication_sets_policy");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("groupId", groupid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public GroupIdVm_replication_sets_policy(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/groups/{groupId}/vm_replication_sets_policy");
                } else {
                    template.append("groups/{groupId}/vm_replication_sets_policy");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get groupId
             * 
             */
            public String getGroupid() {
                return ((String) _templateAndMatrixParameterValues.get("groupId"));
            }

            /**
             * Duplicate state and set groupId
             * 
             */
            public IP1921680160_FapiRest4_3 .Groups.GroupIdVm_replication_sets_policy setGroupid(String groupid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("groupId", groupid);
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdVm_replication_sets_policy(_client, copyUriBuilder, copyMap);
            }

            public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class GroupIdVolumesMark_as_clean {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private GroupIdVolumesMark_as_clean(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public GroupIdVolumesMark_as_clean(Client client, URI baseUri, String groupid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{groupId}/volumes/mark_as_clean");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("groupId", groupid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public GroupIdVolumesMark_as_clean(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/groups/{groupId}/volumes/mark_as_clean");
                } else {
                    template.append("groups/{groupId}/volumes/mark_as_clean");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get groupId
             * 
             */
            public String getGroupid() {
                return ((String) _templateAndMatrixParameterValues.get("groupId"));
            }

            /**
             * Duplicate state and set groupId
             * 
             */
            public IP1921680160_FapiRest4_3 .Groups.GroupIdVolumesMark_as_clean setGroupid(String groupid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("groupId", groupid);
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdVolumesMark_as_clean(_client, copyUriBuilder, copyMap);
            }

            public<T >T putAs(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putAs(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class GroupIdVolumesMark_as_dirty {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private GroupIdVolumesMark_as_dirty(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public GroupIdVolumesMark_as_dirty(Client client, URI baseUri, String groupid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{groupId}/volumes/mark_as_dirty");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("groupId", groupid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public GroupIdVolumesMark_as_dirty(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/groups/{groupId}/volumes/mark_as_dirty");
                } else {
                    template.append("groups/{groupId}/volumes/mark_as_dirty");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get groupId
             * 
             */
            public String getGroupid() {
                return ((String) _templateAndMatrixParameterValues.get("groupId"));
            }

            /**
             * Duplicate state and set groupId
             * 
             */
            public IP1921680160_FapiRest4_3 .Groups.GroupIdVolumesMark_as_dirty setGroupid(String groupid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("groupId", groupid);
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdVolumesMark_as_dirty(_client, copyUriBuilder, copyMap);
            }

            public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class GroupIdVolumesState {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private GroupIdVolumesState(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public GroupIdVolumesState(Client client, URI baseUri, String groupid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{groupId}/volumes/state");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("groupId", groupid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public GroupIdVolumesState(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/groups/{groupId}/volumes/state");
                } else {
                    template.append("groups/{groupId}/volumes/state");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get groupId
             * 
             */
            public String getGroupid() {
                return ((String) _templateAndMatrixParameterValues.get("groupId"));
            }

            /**
             * Duplicate state and set groupId
             * 
             */
            public IP1921680160_FapiRest4_3 .Groups.GroupIdVolumesState setGroupid(String groupid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("groupId", groupid);
                return new IP1921680160_FapiRest4_3 .Groups.GroupIdVolumesState(_client, copyUriBuilder, copyMap);
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Group_and_copies {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Group_and_copies(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Group_and_copies(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("group_and_copies");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T postJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T postJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Information {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Information(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Information(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("information");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Recovery_activities {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Recovery_activities(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Recovery_activities(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("recovery_activities");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Settings {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Settings(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Settings(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("settings");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class SpecificSettings {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private SpecificSettings(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public SpecificSettings(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("specific/settings");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T postJson(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T postJson(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class SpecificState {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private SpecificState(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public SpecificState(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("specific/state");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T postJson(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T postJson(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class SpecificStatistics {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private SpecificStatistics(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public SpecificStatistics(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("specific/statistics");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T postJson(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T postJson(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class SpecificVolumesState {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private SpecificVolumesState(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public SpecificVolumesState(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("specific/volumes/state");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T postJson(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T postJson(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class State {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private State(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public State(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("state");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Statistics {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Statistics(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Statistics(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("statistics");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Transfer_state {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Transfer_state(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Transfer_state(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("transfer_state");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Virtual_machinesReplicate {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Virtual_machinesReplicate(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Virtual_machinesReplicate(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("virtual_machines/replicate");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T postJson(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T postJson(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class VolumesState {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private VolumesState(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public VolumesState(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("volumes/state");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

    }

    public static class Group_copies {

        private Client _client;
        private UriBuilder _uriBuilder;
        private Map<String, Object> _templateAndMatrixParameterValues;

        private Group_copies(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
            _client = client;
            _uriBuilder = uriBuilder.clone();
            _templateAndMatrixParameterValues = map;
        }

        /**
         * Create new instance using existing Client instance, and a base URI and any parameters
         * 
         */
        public Group_copies(Client client, URI baseUri) {
            _client = client;
            _uriBuilder = UriBuilder.fromUri(baseUri);
            _uriBuilder = _uriBuilder.path("group_copies");
            _templateAndMatrixParameterValues = new HashMap<String, Object>();
        }

        public<T >T postJsonAs(Object input, GenericType<T> returnType) {
            UriBuilder localUriBuilder = _uriBuilder.clone();
            WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
            Response response;
            response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
            if (response.getStatus()>= 400) {
                throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
            }
            return response.readEntity(returnType);
        }

        public<T >T postJsonAs(Object input, Class<T> returnType) {
            UriBuilder localUriBuilder = _uriBuilder.clone();
            WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
            Response response;
            response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
            if (!Response.class.isAssignableFrom(returnType)) {
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
            }
            if (!Response.class.isAssignableFrom(returnType)) {
                return response.readEntity(returnType);
            } else {
                return returnType.cast(response);
            }
        }

        public IP1921680160_FapiRest4_3 .Group_copies.Protection_windows protection_windows() {
            return new IP1921680160_FapiRest4_3 .Group_copies.Protection_windows(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .Group_copies.Unregulate unregulate() {
            return new IP1921680160_FapiRest4_3 .Group_copies.Unregulate(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public static class Protection_windows {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Protection_windows(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Protection_windows(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("protection_windows");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Unregulate {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Unregulate(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Unregulate(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("unregulate");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T putAs(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putAs(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

    }

    public static class Group_copy_policy_templates {

        private Client _client;
        private UriBuilder _uriBuilder;
        private Map<String, Object> _templateAndMatrixParameterValues;

        private Group_copy_policy_templates(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
            _client = client;
            _uriBuilder = uriBuilder.clone();
            _templateAndMatrixParameterValues = map;
        }

        /**
         * Create new instance using existing Client instance, and a base URI and any parameters
         * 
         */
        public Group_copy_policy_templates(Client client, URI baseUri) {
            _client = client;
            _uriBuilder = UriBuilder.fromUri(baseUri);
            _uriBuilder = _uriBuilder.path("group_copy_policy_templates");
            _templateAndMatrixParameterValues = new HashMap<String, Object>();
        }

        public<T >T putJsonAs(Object input, GenericType<T> returnType) {
            UriBuilder localUriBuilder = _uriBuilder.clone();
            WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
            Response response;
            response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
            if (response.getStatus()>= 400) {
                throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
            }
            return response.readEntity(returnType);
        }

        public<T >T putJsonAs(Object input, Class<T> returnType) {
            UriBuilder localUriBuilder = _uriBuilder.clone();
            WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
            Response response;
            response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
            if (!Response.class.isAssignableFrom(returnType)) {
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
            }
            if (!Response.class.isAssignableFrom(returnType)) {
                return response.readEntity(returnType);
            } else {
                return returnType.cast(response);
            }
        }

        public<T >T postJsonAs(Object input, GenericType<T> returnType) {
            UriBuilder localUriBuilder = _uriBuilder.clone();
            WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
            Response response;
            response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
            if (response.getStatus()>= 400) {
                throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
            }
            return response.readEntity(returnType);
        }

        public<T >T postJsonAs(Object input, Class<T> returnType) {
            UriBuilder localUriBuilder = _uriBuilder.clone();
            WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
            Response response;
            response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
            if (!Response.class.isAssignableFrom(returnType)) {
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
            }
            if (!Response.class.isAssignableFrom(returnType)) {
                return response.readEntity(returnType);
            } else {
                return returnType.cast(response);
            }
        }

        public<T >T deleteJsonAs(Object input, GenericType<T> returnType) {
            UriBuilder localUriBuilder = _uriBuilder.clone();
            WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
            Response response;
            response = resourceBuilder.build("DELETE", Entity.entity(input, "application/json")).invoke();
            if (response.getStatus()>= 400) {
                throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
            }
            return response.readEntity(returnType);
        }

        public<T >T deleteJsonAs(Object input, Class<T> returnType) {
            UriBuilder localUriBuilder = _uriBuilder.clone();
            WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
            Response response;
            response = resourceBuilder.build("DELETE", Entity.entity(input, "application/json")).invoke();
            if (!Response.class.isAssignableFrom(returnType)) {
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
            }
            if (!Response.class.isAssignableFrom(returnType)) {
                return response.readEntity(returnType);
            } else {
                return returnType.cast(response);
            }
        }

        public<T >T getAsJson(GenericType<T> returnType) {
            UriBuilder localUriBuilder = _uriBuilder.clone();
            WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
            Response response;
            response = resourceBuilder.build("GET").invoke();
            if (response.getStatus()>= 400) {
                throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
            }
            return response.readEntity(returnType);
        }

        public<T >T getAsJson(Class<T> returnType) {
            UriBuilder localUriBuilder = _uriBuilder.clone();
            WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
            Response response;
            response = resourceBuilder.build("GET").invoke();
            if (!Response.class.isAssignableFrom(returnType)) {
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
            }
            if (!Response.class.isAssignableFrom(returnType)) {
                return response.readEntity(returnType);
            } else {
                return returnType.cast(response);
            }
        }

        public IP1921680160_FapiRest4_3 .Group_copy_policy_templates.By_name by_name() {
            return new IP1921680160_FapiRest4_3 .Group_copy_policy_templates.By_name(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public static class By_name {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private By_name(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public By_name(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("by_name");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T postJson(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T postJson(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

    }

    public static class Group_link_policy_templates {

        private Client _client;
        private UriBuilder _uriBuilder;
        private Map<String, Object> _templateAndMatrixParameterValues;

        private Group_link_policy_templates(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
            _client = client;
            _uriBuilder = uriBuilder.clone();
            _templateAndMatrixParameterValues = map;
        }

        /**
         * Create new instance using existing Client instance, and a base URI and any parameters
         * 
         */
        public Group_link_policy_templates(Client client, URI baseUri) {
            _client = client;
            _uriBuilder = UriBuilder.fromUri(baseUri);
            _uriBuilder = _uriBuilder.path("group_link_policy_templates");
            _templateAndMatrixParameterValues = new HashMap<String, Object>();
        }

        public<T >T putJsonAs(Object input, GenericType<T> returnType) {
            UriBuilder localUriBuilder = _uriBuilder.clone();
            WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
            Response response;
            response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
            if (response.getStatus()>= 400) {
                throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
            }
            return response.readEntity(returnType);
        }

        public<T >T putJsonAs(Object input, Class<T> returnType) {
            UriBuilder localUriBuilder = _uriBuilder.clone();
            WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
            Response response;
            response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
            if (!Response.class.isAssignableFrom(returnType)) {
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
            }
            if (!Response.class.isAssignableFrom(returnType)) {
                return response.readEntity(returnType);
            } else {
                return returnType.cast(response);
            }
        }

        public<T >T postJsonAs(Object input, GenericType<T> returnType) {
            UriBuilder localUriBuilder = _uriBuilder.clone();
            WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
            Response response;
            response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
            if (response.getStatus()>= 400) {
                throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
            }
            return response.readEntity(returnType);
        }

        public<T >T postJsonAs(Object input, Class<T> returnType) {
            UriBuilder localUriBuilder = _uriBuilder.clone();
            WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
            Response response;
            response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
            if (!Response.class.isAssignableFrom(returnType)) {
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
            }
            if (!Response.class.isAssignableFrom(returnType)) {
                return response.readEntity(returnType);
            } else {
                return returnType.cast(response);
            }
        }

        public<T >T deleteJsonAs(Object input, GenericType<T> returnType) {
            UriBuilder localUriBuilder = _uriBuilder.clone();
            WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
            Response response;
            response = resourceBuilder.build("DELETE", Entity.entity(input, "application/json")).invoke();
            if (response.getStatus()>= 400) {
                throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
            }
            return response.readEntity(returnType);
        }

        public<T >T deleteJsonAs(Object input, Class<T> returnType) {
            UriBuilder localUriBuilder = _uriBuilder.clone();
            WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
            Response response;
            response = resourceBuilder.build("DELETE", Entity.entity(input, "application/json")).invoke();
            if (!Response.class.isAssignableFrom(returnType)) {
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
            }
            if (!Response.class.isAssignableFrom(returnType)) {
                return response.readEntity(returnType);
            } else {
                return returnType.cast(response);
            }
        }

        public<T >T getAsJson(GenericType<T> returnType) {
            UriBuilder localUriBuilder = _uriBuilder.clone();
            WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
            Response response;
            response = resourceBuilder.build("GET").invoke();
            if (response.getStatus()>= 400) {
                throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
            }
            return response.readEntity(returnType);
        }

        public<T >T getAsJson(Class<T> returnType) {
            UriBuilder localUriBuilder = _uriBuilder.clone();
            WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
            Response response;
            response = resourceBuilder.build("GET").invoke();
            if (!Response.class.isAssignableFrom(returnType)) {
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
            }
            if (!Response.class.isAssignableFrom(returnType)) {
                return response.readEntity(returnType);
            } else {
                return returnType.cast(response);
            }
        }

        public IP1921680160_FapiRest4_3 .Group_link_policy_templates.By_name by_name() {
            return new IP1921680160_FapiRest4_3 .Group_link_policy_templates.By_name(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public static class By_name {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private By_name(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public By_name(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("by_name");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T postJson(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T postJson(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

    }

    public static class Group_sets {

        private Client _client;
        private UriBuilder _uriBuilder;
        private Map<String, Object> _templateAndMatrixParameterValues;

        private Group_sets(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
            _client = client;
            _uriBuilder = uriBuilder.clone();
            _templateAndMatrixParameterValues = map;
        }

        /**
         * Create new instance using existing Client instance, and a base URI and any parameters
         * 
         */
        public Group_sets(Client client, URI baseUri) {
            _client = client;
            _uriBuilder = UriBuilder.fromUri(baseUri);
            _uriBuilder = _uriBuilder.path("group_sets");
            _templateAndMatrixParameterValues = new HashMap<String, Object>();
        }

        public<T >T getAsJson(GenericType<T> returnType) {
            UriBuilder localUriBuilder = _uriBuilder.clone();
            WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
            Response response;
            response = resourceBuilder.build("GET").invoke();
            if (response.getStatus()>= 400) {
                throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
            }
            return response.readEntity(returnType);
        }

        public<T >T getAsJson(Class<T> returnType) {
            UriBuilder localUriBuilder = _uriBuilder.clone();
            WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
            Response response;
            response = resourceBuilder.build("GET").invoke();
            if (!Response.class.isAssignableFrom(returnType)) {
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
            }
            if (!Response.class.isAssignableFrom(returnType)) {
                return response.readEntity(returnType);
            } else {
                return returnType.cast(response);
            }
        }

        public<T >T postJson(Object input, GenericType<T> returnType) {
            UriBuilder localUriBuilder = _uriBuilder.clone();
            WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
            Response response;
            response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
            if (response.getStatus()>= 400) {
                throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
            }
            return response.readEntity(returnType);
        }

        public<T >T postJson(Object input, Class<T> returnType) {
            UriBuilder localUriBuilder = _uriBuilder.clone();
            WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
            Response response;
            response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
            if (!Response.class.isAssignableFrom(returnType)) {
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
            }
            if (!Response.class.isAssignableFrom(returnType)) {
                return response.readEntity(returnType);
            } else {
                return returnType.cast(response);
            }
        }

        public IP1921680160_FapiRest4_3 .Group_sets.GroupSetIdName groupSetIdName(String groupsetid) {
            return new IP1921680160_FapiRest4_3 .Group_sets.GroupSetIdName(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), groupsetid);
        }

        public IP1921680160_FapiRest4_3 .Group_sets.GroupSetIdBookmark_frequency groupSetIdBookmark_frequency(String groupsetid) {
            return new IP1921680160_FapiRest4_3 .Group_sets.GroupSetIdBookmark_frequency(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), groupsetid);
        }

        public IP1921680160_FapiRest4_3 .Group_sets.GroupSetId groupSetId(String groupsetid) {
            return new IP1921680160_FapiRest4_3 .Group_sets.GroupSetId(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), groupsetid);
        }

        public IP1921680160_FapiRest4_3 .Group_sets.GroupSetIdSettings groupSetIdSettings(String groupsetid) {
            return new IP1921680160_FapiRest4_3 .Group_sets.GroupSetIdSettings(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), groupsetid);
        }

        public IP1921680160_FapiRest4_3 .Group_sets.ClustersClusterIdImage_accessLatestProblems clustersClusterIdImage_accessLatestProblems(String clusterid) {
            return new IP1921680160_FapiRest4_3 .Group_sets.ClustersClusterIdImage_accessLatestProblems(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid);
        }

        public IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIdImage_accessEnable subsetsClustersClusterIdImage_accessEnable(String clusterid) {
            return new IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIdImage_accessEnable(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid);
        }

        public IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIdImage_accessEnableProblems subsetsClustersClusterIdImage_accessEnableProblems(String clusterid) {
            return new IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIdImage_accessEnableProblems(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid);
        }

        public IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIdImage_accessEnable_with_general_params subsetsClustersClusterIdImage_accessEnable_with_general_params(String clusterid) {
            return new IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIdImage_accessEnable_with_general_params(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid);
        }

        public IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIdImage_accessEnable_with_general_paramsProblems subsetsClustersClusterIdImage_accessEnable_with_general_paramsProblems(String clusterid) {
            return new IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIdImage_accessEnable_with_general_paramsProblems(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid);
        }

        public IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIdImage_accessDisable subsetsClustersClusterIdImage_accessDisable(String clusterid) {
            return new IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIdImage_accessDisable(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid);
        }

        public IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIdImage_accessDisableProblems subsetsClustersClusterIdImage_accessDisableProblems(String clusterid) {
            return new IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIdImage_accessDisableProblems(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid);
        }

        public IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIdDirect_accessEnable subsetsClustersClusterIdDirect_accessEnable(String clusterid) {
            return new IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIdDirect_accessEnable(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid);
        }

        public IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIdDirect_accessEnableProblems subsetsClustersClusterIdDirect_accessEnableProblems(String clusterid) {
            return new IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIdDirect_accessEnableProblems(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid);
        }

        public IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIdFailover subsetsClustersClusterIdFailover(String clusterid) {
            return new IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIdFailover(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid);
        }

        public IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIdFailoverProblems subsetsClustersClusterIdFailoverProblems(String clusterid) {
            return new IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIdFailoverProblems(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid);
        }

        public IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIDRecover_production subsetsClustersClusterIDRecover_production(String clusterid) {
            return new IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIDRecover_production(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid);
        }

        public IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIdRecover_productionProblems subsetsClustersClusterIdRecover_productionProblems(String clusterid) {
            return new IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIdRecover_productionProblems(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid);
        }

        public IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIdRoll_to_image subsetsClustersClusterIdRoll_to_image(String clusterid) {
            return new IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIdRoll_to_image(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid);
        }

        public IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIdRoll_to_imageProblems subsetsClustersClusterIdRoll_to_imageProblems(String clusterid) {
            return new IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIdRoll_to_imageProblems(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid);
        }

        public IP1921680160_FapiRest4_3 .Group_sets.SubsetsSnapshots subsetsSnapshots() {
            return new IP1921680160_FapiRest4_3 .Group_sets.SubsetsSnapshots(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIdResume_production subsetsClustersClusterIdResume_production(String clusterid) {
            return new IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIdResume_production(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid);
        }

        public IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIdResume_productionProblems subsetsClustersClusterIdResume_productionProblems(String clusterid) {
            return new IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIdResume_productionProblems(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid);
        }

        public IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIdSet_production subsetsClustersClusterIdSet_production(String clusterid) {
            return new IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIdSet_production(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid);
        }

        public IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIdSet_productionProblems subsetsClustersClusterIdSet_productionProblems(String clusterid) {
            return new IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIdSet_productionProblems(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid);
        }

        public IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIdUndo_writes subsetsClustersClusterIdUndo_writes(String clusterid) {
            return new IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIdUndo_writes(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid);
        }

        public IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIdUndo_writesProblems subsetsClustersClusterIdUndo_writesProblems(String clusterid) {
            return new IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIdUndo_writesProblems(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid);
        }

        public IP1921680160_FapiRest4_3 .Group_sets.SubsetsDisable subsetsDisable() {
            return new IP1921680160_FapiRest4_3 .Group_sets.SubsetsDisable(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .Group_sets.SubsetsDisableProblems subsetsDisableProblems() {
            return new IP1921680160_FapiRest4_3 .Group_sets.SubsetsDisableProblems(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .Group_sets.SubsetsEnable subsetsEnable() {
            return new IP1921680160_FapiRest4_3 .Group_sets.SubsetsEnable(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .Group_sets.SubsetsEnableProblems subsetsEnableProblems() {
            return new IP1921680160_FapiRest4_3 .Group_sets.SubsetsEnableProblems(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .Group_sets.SubsetsPause_transfer subsetsPause_transfer() {
            return new IP1921680160_FapiRest4_3 .Group_sets.SubsetsPause_transfer(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .Group_sets.SubsetsPause_transferProblems subsetsPause_transferProblems() {
            return new IP1921680160_FapiRest4_3 .Group_sets.SubsetsPause_transferProblems(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .Group_sets.SubsetsStart_transfer subsetsStart_transfer() {
            return new IP1921680160_FapiRest4_3 .Group_sets.SubsetsStart_transfer(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .Group_sets.SubsetsStart_transferProblems subsetsStart_transferProblems() {
            return new IP1921680160_FapiRest4_3 .Group_sets.SubsetsStart_transferProblems(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public static class ClustersClusterIdImage_accessLatestProblems {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private ClustersClusterIdImage_accessLatestProblems(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public ClustersClusterIdImage_accessLatestProblems(Client client, URI baseUri, String clusterid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("clusters/{clusterId}/image_access/latest/problems");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public ClustersClusterIdImage_accessLatestProblems(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/group_sets/clusters/{clusterId}/image_access/latest/problems");
                } else {
                    template.append("group_sets/clusters/{clusterId}/image_access/latest/problems");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Group_sets.ClustersClusterIdImage_accessLatestProblems setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Group_sets.ClustersClusterIdImage_accessLatestProblems(_client, copyUriBuilder, copyMap);
            }

            public<T >T postJson(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T postJson(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class GroupSetId {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private GroupSetId(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public GroupSetId(Client client, URI baseUri, String groupsetid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{groupSetId}");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("groupSetId", groupsetid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public GroupSetId(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/group_sets/{groupSetId}");
                } else {
                    template.append("group_sets/{groupSetId}");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get groupSetId
             * 
             */
            public String getGroupsetid() {
                return ((String) _templateAndMatrixParameterValues.get("groupSetId"));
            }

            /**
             * Duplicate state and set groupSetId
             * 
             */
            public IP1921680160_FapiRest4_3 .Group_sets.GroupSetId setGroupsetid(String groupsetid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("groupSetId", groupsetid);
                return new IP1921680160_FapiRest4_3 .Group_sets.GroupSetId(_client, copyUriBuilder, copyMap);
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

            public<T >T deleteAs(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("DELETE").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T deleteAs(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("DELETE").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class GroupSetIdBookmark_frequency {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private GroupSetIdBookmark_frequency(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public GroupSetIdBookmark_frequency(Client client, URI baseUri, String groupsetid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{groupSetId}/bookmark_frequency");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("groupSetId", groupsetid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public GroupSetIdBookmark_frequency(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/group_sets/{groupSetId}/bookmark_frequency");
                } else {
                    template.append("group_sets/{groupSetId}/bookmark_frequency");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get groupSetId
             * 
             */
            public String getGroupsetid() {
                return ((String) _templateAndMatrixParameterValues.get("groupSetId"));
            }

            /**
             * Duplicate state and set groupSetId
             * 
             */
            public IP1921680160_FapiRest4_3 .Group_sets.GroupSetIdBookmark_frequency setGroupsetid(String groupsetid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("groupSetId", groupsetid);
                return new IP1921680160_FapiRest4_3 .Group_sets.GroupSetIdBookmark_frequency(_client, copyUriBuilder, copyMap);
            }

            public<T >T putAs(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putAs(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

            public<T >T putAs(String frequencyinmicroseconds, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                if (frequencyinmicroseconds == null) {
                }
                if (frequencyinmicroseconds!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("frequencyInMicroSeconds", frequencyinmicroseconds);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("frequencyInMicroSeconds", ((Object[]) null));
                }
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putAs(String frequencyinmicroseconds, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                if (frequencyinmicroseconds == null) {
                }
                if (frequencyinmicroseconds!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("frequencyInMicroSeconds", frequencyinmicroseconds);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("frequencyInMicroSeconds", ((Object[]) null));
                }
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class GroupSetIdName {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private GroupSetIdName(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public GroupSetIdName(Client client, URI baseUri, String groupsetid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{groupSetId}/name");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("groupSetId", groupsetid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public GroupSetIdName(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/group_sets/{groupSetId}/name");
                } else {
                    template.append("group_sets/{groupSetId}/name");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get groupSetId
             * 
             */
            public String getGroupsetid() {
                return ((String) _templateAndMatrixParameterValues.get("groupSetId"));
            }

            /**
             * Duplicate state and set groupSetId
             * 
             */
            public IP1921680160_FapiRest4_3 .Group_sets.GroupSetIdName setGroupsetid(String groupsetid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("groupSetId", groupsetid);
                return new IP1921680160_FapiRest4_3 .Group_sets.GroupSetIdName(_client, copyUriBuilder, copyMap);
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class GroupSetIdSettings {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private GroupSetIdSettings(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public GroupSetIdSettings(Client client, URI baseUri, String groupsetid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{groupSetId}/settings");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("groupSetId", groupsetid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public GroupSetIdSettings(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/group_sets/{groupSetId}/settings");
                } else {
                    template.append("group_sets/{groupSetId}/settings");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get groupSetId
             * 
             */
            public String getGroupsetid() {
                return ((String) _templateAndMatrixParameterValues.get("groupSetId"));
            }

            /**
             * Duplicate state and set groupSetId
             * 
             */
            public IP1921680160_FapiRest4_3 .Group_sets.GroupSetIdSettings setGroupsetid(String groupsetid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("groupSetId", groupsetid);
                return new IP1921680160_FapiRest4_3 .Group_sets.GroupSetIdSettings(_client, copyUriBuilder, copyMap);
            }

            public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class SubsetsClustersClusterIdDirect_accessEnable {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private SubsetsClustersClusterIdDirect_accessEnable(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public SubsetsClustersClusterIdDirect_accessEnable(Client client, URI baseUri, String clusterid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("subsets/clusters/{clusterId}/direct_access/enable");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public SubsetsClustersClusterIdDirect_accessEnable(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/group_sets/subsets/clusters/{clusterId}/direct_access/enable");
                } else {
                    template.append("group_sets/subsets/clusters/{clusterId}/direct_access/enable");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIdDirect_accessEnable setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIdDirect_accessEnable(_client, copyUriBuilder, copyMap);
            }

            public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class SubsetsClustersClusterIdDirect_accessEnableProblems {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private SubsetsClustersClusterIdDirect_accessEnableProblems(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public SubsetsClustersClusterIdDirect_accessEnableProblems(Client client, URI baseUri, String clusterid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("subsets/clusters/{clusterId}/direct_access/enable/problems");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public SubsetsClustersClusterIdDirect_accessEnableProblems(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/group_sets/subsets/clusters/{clusterId}/direct_access/enable/problems");
                } else {
                    template.append("group_sets/subsets/clusters/{clusterId}/direct_access/enable/problems");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIdDirect_accessEnableProblems setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIdDirect_accessEnableProblems(_client, copyUriBuilder, copyMap);
            }

            public<T >T postJson(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T postJson(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class SubsetsClustersClusterIdFailover {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private SubsetsClustersClusterIdFailover(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public SubsetsClustersClusterIdFailover(Client client, URI baseUri, String clusterid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("subsets/clusters/{clusterId}/failover");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public SubsetsClustersClusterIdFailover(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/group_sets/subsets/clusters/{clusterId}/failover");
                } else {
                    template.append("group_sets/subsets/clusters/{clusterId}/failover");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIdFailover setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIdFailover(_client, copyUriBuilder, copyMap);
            }

            public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

            public<T >T putJsonAs(Object input, String starttransfer, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                if (starttransfer == null) {
                }
                if (starttransfer!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("startTransfer", starttransfer);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("startTransfer", ((Object[]) null));
                }
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putJsonAs(Object input, String starttransfer, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                if (starttransfer == null) {
                }
                if (starttransfer!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("startTransfer", starttransfer);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("startTransfer", ((Object[]) null));
                }
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class SubsetsClustersClusterIdFailoverProblems {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private SubsetsClustersClusterIdFailoverProblems(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public SubsetsClustersClusterIdFailoverProblems(Client client, URI baseUri, String clusterid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("subsets/clusters/{clusterId}/failover/problems");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public SubsetsClustersClusterIdFailoverProblems(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/group_sets/subsets/clusters/{clusterId}/failover/problems");
                } else {
                    template.append("group_sets/subsets/clusters/{clusterId}/failover/problems");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIdFailoverProblems setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIdFailoverProblems(_client, copyUriBuilder, copyMap);
            }

            public<T >T postJson(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T postJson(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

            public<T >T postJson(Object input, String starttransfer, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                if (starttransfer == null) {
                }
                if (starttransfer!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("startTransfer", starttransfer);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("startTransfer", ((Object[]) null));
                }
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T postJson(Object input, String starttransfer, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                if (starttransfer == null) {
                }
                if (starttransfer!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("startTransfer", starttransfer);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("startTransfer", ((Object[]) null));
                }
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class SubsetsClustersClusterIdImage_accessDisable {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private SubsetsClustersClusterIdImage_accessDisable(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public SubsetsClustersClusterIdImage_accessDisable(Client client, URI baseUri, String clusterid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("subsets/clusters/{clusterId}/image_access/disable");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public SubsetsClustersClusterIdImage_accessDisable(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/group_sets/subsets/clusters/{clusterId}/image_access/disable");
                } else {
                    template.append("group_sets/subsets/clusters/{clusterId}/image_access/disable");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIdImage_accessDisable setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIdImage_accessDisable(_client, copyUriBuilder, copyMap);
            }

            public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

            public<T >T putJsonAs(Object input, String starttransfer, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                if (starttransfer == null) {
                }
                if (starttransfer!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("startTransfer", starttransfer);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("startTransfer", ((Object[]) null));
                }
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putJsonAs(Object input, String starttransfer, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                if (starttransfer == null) {
                }
                if (starttransfer!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("startTransfer", starttransfer);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("startTransfer", ((Object[]) null));
                }
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class SubsetsClustersClusterIdImage_accessDisableProblems {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private SubsetsClustersClusterIdImage_accessDisableProblems(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public SubsetsClustersClusterIdImage_accessDisableProblems(Client client, URI baseUri, String clusterid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("subsets/clusters/{clusterId}/image_access/disable/problems");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public SubsetsClustersClusterIdImage_accessDisableProblems(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/group_sets/subsets/clusters/{clusterId}/image_access/disable/problems");
                } else {
                    template.append("group_sets/subsets/clusters/{clusterId}/image_access/disable/problems");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIdImage_accessDisableProblems setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIdImage_accessDisableProblems(_client, copyUriBuilder, copyMap);
            }

            public<T >T postJson(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T postJson(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

            public<T >T postJson(Object input, String starttransfer, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                if (starttransfer == null) {
                }
                if (starttransfer!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("startTransfer", starttransfer);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("startTransfer", ((Object[]) null));
                }
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T postJson(Object input, String starttransfer, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                if (starttransfer == null) {
                }
                if (starttransfer!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("startTransfer", starttransfer);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("startTransfer", ((Object[]) null));
                }
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class SubsetsClustersClusterIdImage_accessEnable {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private SubsetsClustersClusterIdImage_accessEnable(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public SubsetsClustersClusterIdImage_accessEnable(Client client, URI baseUri, String clusterid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("subsets/clusters/{clusterId}/image_access/enable");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public SubsetsClustersClusterIdImage_accessEnable(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/group_sets/subsets/clusters/{clusterId}/image_access/enable");
                } else {
                    template.append("group_sets/subsets/clusters/{clusterId}/image_access/enable");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIdImage_accessEnable setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIdImage_accessEnable(_client, copyUriBuilder, copyMap);
            }

            public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class SubsetsClustersClusterIdImage_accessEnableProblems {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private SubsetsClustersClusterIdImage_accessEnableProblems(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public SubsetsClustersClusterIdImage_accessEnableProblems(Client client, URI baseUri, String clusterid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("subsets/clusters/{clusterId}/image_access/enable/problems");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public SubsetsClustersClusterIdImage_accessEnableProblems(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/group_sets/subsets/clusters/{clusterId}/image_access/enable/problems");
                } else {
                    template.append("group_sets/subsets/clusters/{clusterId}/image_access/enable/problems");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIdImage_accessEnableProblems setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIdImage_accessEnableProblems(_client, copyUriBuilder, copyMap);
            }

            public<T >T postJson(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T postJson(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class SubsetsClustersClusterIdImage_accessEnable_with_general_params {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private SubsetsClustersClusterIdImage_accessEnable_with_general_params(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public SubsetsClustersClusterIdImage_accessEnable_with_general_params(Client client, URI baseUri, String clusterid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("subsets/clusters/{clusterId}/image_access/enable_with_general_params");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public SubsetsClustersClusterIdImage_accessEnable_with_general_params(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/group_sets/subsets/clusters/{clusterId}/image_access/enable_with_general_params");
                } else {
                    template.append("group_sets/subsets/clusters/{clusterId}/image_access/enable_with_general_params");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIdImage_accessEnable_with_general_params setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIdImage_accessEnable_with_general_params(_client, copyUriBuilder, copyMap);
            }

            public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class SubsetsClustersClusterIdImage_accessEnable_with_general_paramsProblems {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private SubsetsClustersClusterIdImage_accessEnable_with_general_paramsProblems(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public SubsetsClustersClusterIdImage_accessEnable_with_general_paramsProblems(Client client, URI baseUri, String clusterid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("subsets/clusters/{clusterId}/image_access/enable_with_general_params/problems");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public SubsetsClustersClusterIdImage_accessEnable_with_general_paramsProblems(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/group_sets/subsets/clusters/{clusterId}/image_access/enable_with_general_params/problems");
                } else {
                    template.append("group_sets/subsets/clusters/{clusterId}/image_access/enable_with_general_params/problems");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIdImage_accessEnable_with_general_paramsProblems setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIdImage_accessEnable_with_general_paramsProblems(_client, copyUriBuilder, copyMap);
            }

            public<T >T postJson(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T postJson(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class SubsetsClustersClusterIDRecover_production {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private SubsetsClustersClusterIDRecover_production(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public SubsetsClustersClusterIDRecover_production(Client client, URI baseUri, String clusterid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("subsets/clusters/{clusterID}/recover_production");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterID", clusterid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public SubsetsClustersClusterIDRecover_production(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/group_sets/subsets/clusters/{clusterID}/recover_production");
                } else {
                    template.append("group_sets/subsets/clusters/{clusterID}/recover_production");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterID
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterID"));
            }

            /**
             * Duplicate state and set clusterID
             * 
             */
            public IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIDRecover_production setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterID", clusterid);
                return new IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIDRecover_production(_client, copyUriBuilder, copyMap);
            }

            public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

            public<T >T putJsonAs(Object input, String starttransfer, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                if (starttransfer == null) {
                }
                if (starttransfer!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("startTransfer", starttransfer);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("startTransfer", ((Object[]) null));
                }
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putJsonAs(Object input, String starttransfer, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                if (starttransfer == null) {
                }
                if (starttransfer!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("startTransfer", starttransfer);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("startTransfer", ((Object[]) null));
                }
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class SubsetsClustersClusterIdRecover_productionProblems {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private SubsetsClustersClusterIdRecover_productionProblems(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public SubsetsClustersClusterIdRecover_productionProblems(Client client, URI baseUri, String clusterid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("subsets/clusters/{clusterId}/recover_production/problems");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public SubsetsClustersClusterIdRecover_productionProblems(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/group_sets/subsets/clusters/{clusterId}/recover_production/problems");
                } else {
                    template.append("group_sets/subsets/clusters/{clusterId}/recover_production/problems");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIdRecover_productionProblems setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIdRecover_productionProblems(_client, copyUriBuilder, copyMap);
            }

            public<T >T postJson(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T postJson(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

            public<T >T postJson(Object input, String starttransfer, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                if (starttransfer == null) {
                }
                if (starttransfer!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("startTransfer", starttransfer);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("startTransfer", ((Object[]) null));
                }
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T postJson(Object input, String starttransfer, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                if (starttransfer == null) {
                }
                if (starttransfer!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("startTransfer", starttransfer);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("startTransfer", ((Object[]) null));
                }
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class SubsetsClustersClusterIdResume_production {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private SubsetsClustersClusterIdResume_production(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public SubsetsClustersClusterIdResume_production(Client client, URI baseUri, String clusterid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("subsets/clusters/{clusterId}/resume_production");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public SubsetsClustersClusterIdResume_production(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/group_sets/subsets/clusters/{clusterId}/resume_production");
                } else {
                    template.append("group_sets/subsets/clusters/{clusterId}/resume_production");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIdResume_production setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIdResume_production(_client, copyUriBuilder, copyMap);
            }

            public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

            public<T >T putJsonAs(Object input, String starttransfer, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                if (starttransfer == null) {
                }
                if (starttransfer!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("startTransfer", starttransfer);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("startTransfer", ((Object[]) null));
                }
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putJsonAs(Object input, String starttransfer, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                if (starttransfer == null) {
                }
                if (starttransfer!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("startTransfer", starttransfer);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("startTransfer", ((Object[]) null));
                }
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class SubsetsClustersClusterIdResume_productionProblems {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private SubsetsClustersClusterIdResume_productionProblems(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public SubsetsClustersClusterIdResume_productionProblems(Client client, URI baseUri, String clusterid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("subsets/clusters/{clusterId}/resume_production/problems");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public SubsetsClustersClusterIdResume_productionProblems(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/group_sets/subsets/clusters/{clusterId}/resume_production/problems");
                } else {
                    template.append("group_sets/subsets/clusters/{clusterId}/resume_production/problems");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIdResume_productionProblems setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIdResume_productionProblems(_client, copyUriBuilder, copyMap);
            }

            public<T >T postJson(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T postJson(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

            public<T >T postJson(Object input, String starttransfer, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                if (starttransfer == null) {
                }
                if (starttransfer!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("startTransfer", starttransfer);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("startTransfer", ((Object[]) null));
                }
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T postJson(Object input, String starttransfer, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                if (starttransfer == null) {
                }
                if (starttransfer!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("startTransfer", starttransfer);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("startTransfer", ((Object[]) null));
                }
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class SubsetsClustersClusterIdRoll_to_image {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private SubsetsClustersClusterIdRoll_to_image(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public SubsetsClustersClusterIdRoll_to_image(Client client, URI baseUri, String clusterid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("subsets/clusters/{clusterId}/roll_to_image");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public SubsetsClustersClusterIdRoll_to_image(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/group_sets/subsets/clusters/{clusterId}/roll_to_image");
                } else {
                    template.append("group_sets/subsets/clusters/{clusterId}/roll_to_image");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIdRoll_to_image setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIdRoll_to_image(_client, copyUriBuilder, copyMap);
            }

            public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class SubsetsClustersClusterIdRoll_to_imageProblems {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private SubsetsClustersClusterIdRoll_to_imageProblems(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public SubsetsClustersClusterIdRoll_to_imageProblems(Client client, URI baseUri, String clusterid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("subsets/clusters/{clusterId}/roll_to_image/problems");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public SubsetsClustersClusterIdRoll_to_imageProblems(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/group_sets/subsets/clusters/{clusterId}/roll_to_image/problems");
                } else {
                    template.append("group_sets/subsets/clusters/{clusterId}/roll_to_image/problems");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIdRoll_to_imageProblems setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIdRoll_to_imageProblems(_client, copyUriBuilder, copyMap);
            }

            public<T >T postJson(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T postJson(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class SubsetsClustersClusterIdSet_production {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private SubsetsClustersClusterIdSet_production(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public SubsetsClustersClusterIdSet_production(Client client, URI baseUri, String clusterid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("subsets/clusters/{clusterId}/set_production");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public SubsetsClustersClusterIdSet_production(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/group_sets/subsets/clusters/{clusterId}/set_production");
                } else {
                    template.append("group_sets/subsets/clusters/{clusterId}/set_production");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIdSet_production setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIdSet_production(_client, copyUriBuilder, copyMap);
            }

            public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

            public<T >T putJsonAs(Object input, String starttransfer, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                if (starttransfer == null) {
                }
                if (starttransfer!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("startTransfer", starttransfer);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("startTransfer", ((Object[]) null));
                }
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putJsonAs(Object input, String starttransfer, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                if (starttransfer == null) {
                }
                if (starttransfer!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("startTransfer", starttransfer);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("startTransfer", ((Object[]) null));
                }
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class SubsetsClustersClusterIdSet_productionProblems {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private SubsetsClustersClusterIdSet_productionProblems(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public SubsetsClustersClusterIdSet_productionProblems(Client client, URI baseUri, String clusterid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("subsets/clusters/{clusterId}/set_production/problems");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public SubsetsClustersClusterIdSet_productionProblems(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/group_sets/subsets/clusters/{clusterId}/set_production/problems");
                } else {
                    template.append("group_sets/subsets/clusters/{clusterId}/set_production/problems");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIdSet_productionProblems setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIdSet_productionProblems(_client, copyUriBuilder, copyMap);
            }

            public<T >T postJson(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T postJson(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

            public<T >T postJson(Object input, String starttransfer, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                if (starttransfer == null) {
                }
                if (starttransfer!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("startTransfer", starttransfer);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("startTransfer", ((Object[]) null));
                }
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T postJson(Object input, String starttransfer, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                if (starttransfer == null) {
                }
                if (starttransfer!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("startTransfer", starttransfer);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("startTransfer", ((Object[]) null));
                }
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class SubsetsClustersClusterIdUndo_writes {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private SubsetsClustersClusterIdUndo_writes(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public SubsetsClustersClusterIdUndo_writes(Client client, URI baseUri, String clusterid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("subsets/clusters/{clusterId}/undo_writes");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public SubsetsClustersClusterIdUndo_writes(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/group_sets/subsets/clusters/{clusterId}/undo_writes");
                } else {
                    template.append("group_sets/subsets/clusters/{clusterId}/undo_writes");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIdUndo_writes setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIdUndo_writes(_client, copyUriBuilder, copyMap);
            }

            public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class SubsetsClustersClusterIdUndo_writesProblems {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private SubsetsClustersClusterIdUndo_writesProblems(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public SubsetsClustersClusterIdUndo_writesProblems(Client client, URI baseUri, String clusterid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("subsets/clusters/{clusterId}/undo_writes/problems");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public SubsetsClustersClusterIdUndo_writesProblems(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/group_sets/subsets/clusters/{clusterId}/undo_writes/problems");
                } else {
                    template.append("group_sets/subsets/clusters/{clusterId}/undo_writes/problems");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIdUndo_writesProblems setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Group_sets.SubsetsClustersClusterIdUndo_writesProblems(_client, copyUriBuilder, copyMap);
            }

            public<T >T postJson(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T postJson(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class SubsetsDisable {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private SubsetsDisable(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public SubsetsDisable(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("subsets/disable");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class SubsetsDisableProblems {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private SubsetsDisableProblems(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public SubsetsDisableProblems(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("subsets/disable/problems");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T postJson(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T postJson(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class SubsetsEnable {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private SubsetsEnable(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public SubsetsEnable(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("subsets/enable");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

            public<T >T putJsonAs(Object input, String starttransfer, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                if (starttransfer == null) {
                }
                if (starttransfer!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("startTransfer", starttransfer);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("startTransfer", ((Object[]) null));
                }
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putJsonAs(Object input, String starttransfer, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                if (starttransfer == null) {
                }
                if (starttransfer!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("startTransfer", starttransfer);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("startTransfer", ((Object[]) null));
                }
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class SubsetsEnableProblems {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private SubsetsEnableProblems(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public SubsetsEnableProblems(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("subsets/enable/problems");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T postJson(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T postJson(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

            public<T >T postJson(Object input, String starttransfer, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                if (starttransfer == null) {
                }
                if (starttransfer!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("startTransfer", starttransfer);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("startTransfer", ((Object[]) null));
                }
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T postJson(Object input, String starttransfer, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                if (starttransfer == null) {
                }
                if (starttransfer!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("startTransfer", starttransfer);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("startTransfer", ((Object[]) null));
                }
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class SubsetsPause_transfer {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private SubsetsPause_transfer(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public SubsetsPause_transfer(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("subsets/pause_transfer");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class SubsetsPause_transferProblems {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private SubsetsPause_transferProblems(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public SubsetsPause_transferProblems(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("subsets/pause_transfer/problems");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T postJson(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T postJson(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class SubsetsSnapshots {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private SubsetsSnapshots(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public SubsetsSnapshots(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("subsets/snapshots");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T postJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T postJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class SubsetsStart_transfer {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private SubsetsStart_transfer(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public SubsetsStart_transfer(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("subsets/start_transfer");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class SubsetsStart_transferProblems {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private SubsetsStart_transferProblems(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public SubsetsStart_transferProblems(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("subsets/start_transfer/problems");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T postJson(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T postJson(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

    }

    public static class Index {

        private Client _client;
        private UriBuilder _uriBuilder;
        private Map<String, Object> _templateAndMatrixParameterValues;

        private Index(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
            _client = client;
            _uriBuilder = uriBuilder.clone();
            _templateAndMatrixParameterValues = map;
        }

        /**
         * Create new instance using existing Client instance, and a base URI and any parameters
         * 
         */
        public Index(Client client, URI baseUri) {
            _client = client;
            _uriBuilder = UriBuilder.fromUri(baseUri);
            _uriBuilder = _uriBuilder.path("");
            _templateAndMatrixParameterValues = new HashMap<String, Object>();
        }

        public<T >T getAsTextHtml(GenericType<T> returnType) {
            UriBuilder localUriBuilder = _uriBuilder.clone();
            WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("text/html");
            Response response;
            response = resourceBuilder.build("GET").invoke();
            if (response.getStatus()>= 400) {
                throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
            }
            return response.readEntity(returnType);
        }

        public<T >T getAsTextHtml(Class<T> returnType) {
            UriBuilder localUriBuilder = _uriBuilder.clone();
            WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("text/html");
            Response response;
            response = resourceBuilder.build("GET").invoke();
            if (!Response.class.isAssignableFrom(returnType)) {
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
            }
            if (!Response.class.isAssignableFrom(returnType)) {
                return response.readEntity(returnType);
            } else {
                return returnType.cast(response);
            }
        }

    }

    public static class Ldap {

        private Client _client;
        private UriBuilder _uriBuilder;
        private Map<String, Object> _templateAndMatrixParameterValues;

        private Ldap(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
            _client = client;
            _uriBuilder = uriBuilder.clone();
            _templateAndMatrixParameterValues = map;
        }

        /**
         * Create new instance using existing Client instance, and a base URI and any parameters
         * 
         */
        public Ldap(Client client, URI baseUri) {
            _client = client;
            _uriBuilder = UriBuilder.fromUri(baseUri);
            _uriBuilder = _uriBuilder.path("ldap");
            _templateAndMatrixParameterValues = new HashMap<String, Object>();
        }

        public IP1921680160_FapiRest4_3 .Ldap.Settings settings() {
            return new IP1921680160_FapiRest4_3 .Ldap.Settings(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .Ldap.Server_info server_info() {
            return new IP1921680160_FapiRest4_3 .Ldap.Server_info(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .Ldap.Clear_settings clear_settings() {
            return new IP1921680160_FapiRest4_3 .Ldap.Clear_settings(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .Ldap.SettingsTest settingsTest() {
            return new IP1921680160_FapiRest4_3 .Ldap.SettingsTest(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .Ldap.Disable disable() {
            return new IP1921680160_FapiRest4_3 .Ldap.Disable(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .Ldap.Enable enable() {
            return new IP1921680160_FapiRest4_3 .Ldap.Enable(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public static class Clear_settings {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Clear_settings(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Clear_settings(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("clear_settings");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T putAs(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putAs(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Disable {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Disable(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Disable(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("disable");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T putAs(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putAs(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Enable {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Enable(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Enable(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("enable");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T putAs(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putAs(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Server_info {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Server_info(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Server_info(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("server_info");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Settings {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Settings(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Settings(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("settings");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

            public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class SettingsTest {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private SettingsTest(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public SettingsTest(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("settings/test");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T putAs(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putAs(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

            public<T >T postJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T postJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

    }

    public static class Licenses {

        private Client _client;
        private UriBuilder _uriBuilder;
        private Map<String, Object> _templateAndMatrixParameterValues;

        private Licenses(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
            _client = client;
            _uriBuilder = uriBuilder.clone();
            _templateAndMatrixParameterValues = map;
        }

        /**
         * Create new instance using existing Client instance, and a base URI and any parameters
         * 
         */
        public Licenses(Client client, URI baseUri) {
            _client = client;
            _uriBuilder = UriBuilder.fromUri(baseUri);
            _uriBuilder = _uriBuilder.path("licenses");
            _templateAndMatrixParameterValues = new HashMap<String, Object>();
        }

        public<T >T postJsonAs(Object input, GenericType<T> returnType) {
            UriBuilder localUriBuilder = _uriBuilder.clone();
            WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
            Response response;
            response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
            if (response.getStatus()>= 400) {
                throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
            }
            return response.readEntity(returnType);
        }

        public<T >T postJsonAs(Object input, Class<T> returnType) {
            UriBuilder localUriBuilder = _uriBuilder.clone();
            WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
            Response response;
            response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
            if (!Response.class.isAssignableFrom(returnType)) {
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
            }
            if (!Response.class.isAssignableFrom(returnType)) {
                return response.readEntity(returnType);
            } else {
                return returnType.cast(response);
            }
        }

        public<T >T deleteJsonAs(Object input, GenericType<T> returnType) {
            UriBuilder localUriBuilder = _uriBuilder.clone();
            WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
            Response response;
            response = resourceBuilder.build("DELETE", Entity.entity(input, "application/json")).invoke();
            if (response.getStatus()>= 400) {
                throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
            }
            return response.readEntity(returnType);
        }

        public<T >T deleteJsonAs(Object input, Class<T> returnType) {
            UriBuilder localUriBuilder = _uriBuilder.clone();
            WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
            Response response;
            response = resourceBuilder.build("DELETE", Entity.entity(input, "application/json")).invoke();
            if (!Response.class.isAssignableFrom(returnType)) {
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
            }
            if (!Response.class.isAssignableFrom(returnType)) {
                return response.readEntity(returnType);
            } else {
                return returnType.cast(response);
            }
        }

        public IP1921680160_FapiRest4_3 .Licenses.Report report() {
            return new IP1921680160_FapiRest4_3 .Licenses.Report(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public static class Report {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Report(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Report(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("report");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

    }

    public static class Logs {

        private Client _client;
        private UriBuilder _uriBuilder;
        private Map<String, Object> _templateAndMatrixParameterValues;

        private Logs(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
            _client = client;
            _uriBuilder = uriBuilder.clone();
            _templateAndMatrixParameterValues = map;
        }

        /**
         * Create new instance using existing Client instance, and a base URI and any parameters
         * 
         */
        public Logs(Client client, URI baseUri) {
            _client = client;
            _uriBuilder = UriBuilder.fromUri(baseUri);
            _uriBuilder = _uriBuilder.path("logs");
            _templateAndMatrixParameterValues = new HashMap<String, Object>();
        }

        public<T >T postJson(Object input, GenericType<T> returnType) {
            UriBuilder localUriBuilder = _uriBuilder.clone();
            WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
            Response response;
            response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
            if (response.getStatus()>= 400) {
                throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
            }
            return response.readEntity(returnType);
        }

        public<T >T postJson(Object input, Class<T> returnType) {
            UriBuilder localUriBuilder = _uriBuilder.clone();
            WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
            Response response;
            response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
            if (!Response.class.isAssignableFrom(returnType)) {
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
            }
            if (!Response.class.isAssignableFrom(returnType)) {
                return response.readEntity(returnType);
            } else {
                return returnType.cast(response);
            }
        }

    }

    public static class ObjectsBrowser {

        private Client _client;
        private UriBuilder _uriBuilder;
        private Map<String, Object> _templateAndMatrixParameterValues;

        private ObjectsBrowser(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
            _client = client;
            _uriBuilder = uriBuilder.clone();
            _templateAndMatrixParameterValues = map;
        }

        /**
         * Create new instance using existing Client instance, and a base URI and any parameters
         * 
         */
        public ObjectsBrowser(Client client, URI baseUri) {
            _client = client;
            _uriBuilder = UriBuilder.fromUri(baseUri);
            _uriBuilder = _uriBuilder.path("objectsBrowser");
            _templateAndMatrixParameterValues = new HashMap<String, Object>();
        }

        public<T >T getAs(GenericType<T> returnType) {
            UriBuilder localUriBuilder = _uriBuilder.clone();
            WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
            Response response;
            response = resourceBuilder.build("GET").invoke();
            if (response.getStatus()>= 400) {
                throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
            }
            return response.readEntity(returnType);
        }

        public<T >T getAs(Class<T> returnType) {
            UriBuilder localUriBuilder = _uriBuilder.clone();
            WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
            Response response;
            response = resourceBuilder.build("GET").invoke();
            if (!Response.class.isAssignableFrom(returnType)) {
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
            }
            if (!Response.class.isAssignableFrom(returnType)) {
                return response.readEntity(returnType);
            } else {
                return returnType.cast(response);
            }
        }

        public IP1921680160_FapiRest4_3 .ObjectsBrowser.ImagesResourceName imagesResourceName(String resourcename) {
            return new IP1921680160_FapiRest4_3 .ObjectsBrowser.ImagesResourceName(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), resourcename);
        }

        public IP1921680160_FapiRest4_3 .ObjectsBrowser.EntitiesIdInformation entitiesIdInformation() {
            return new IP1921680160_FapiRest4_3 .ObjectsBrowser.EntitiesIdInformation(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .ObjectsBrowser.ResourceName resourceName(String resourcename) {
            return new IP1921680160_FapiRest4_3 .ObjectsBrowser.ResourceName(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), resourcename);
        }

        public static class EntitiesIdInformation {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private EntitiesIdInformation(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public EntitiesIdInformation(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("entitiesIdInformation");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class ImagesResourceName {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private ImagesResourceName(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public ImagesResourceName(Client client, URI baseUri, String resourcename) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("images/{resourceName}");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("resourceName", resourcename);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public ImagesResourceName(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/objectsBrowser/images/{resourceName}");
                } else {
                    template.append("objectsBrowser/images/{resourceName}");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get resourceName
             * 
             */
            public String getResourcename() {
                return ((String) _templateAndMatrixParameterValues.get("resourceName"));
            }

            /**
             * Duplicate state and set resourceName
             * 
             */
            public IP1921680160_FapiRest4_3 .ObjectsBrowser.ImagesResourceName setResourcename(String resourcename) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("resourceName", resourcename);
                return new IP1921680160_FapiRest4_3 .ObjectsBrowser.ImagesResourceName(_client, copyUriBuilder, copyMap);
            }

            public<T >T getAs(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAs(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class ResourceName {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private ResourceName(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public ResourceName(Client client, URI baseUri, String resourcename) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{resourceName}/");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("resourceName", resourcename);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public ResourceName(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/objectsBrowser/{resourceName}/");
                } else {
                    template.append("objectsBrowser/{resourceName}/");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get resourceName
             * 
             */
            public String getResourcename() {
                return ((String) _templateAndMatrixParameterValues.get("resourceName"));
            }

            /**
             * Duplicate state and set resourceName
             * 
             */
            public IP1921680160_FapiRest4_3 .ObjectsBrowser.ResourceName setResourcename(String resourcename) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("resourceName", resourcename);
                return new IP1921680160_FapiRest4_3 .ObjectsBrowser.ResourceName(_client, copyUriBuilder, copyMap);
            }

            public<T >T getAs(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAs(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

    }

    public static class Phoenix_clusters {

        private Client _client;
        private UriBuilder _uriBuilder;
        private Map<String, Object> _templateAndMatrixParameterValues;

        private Phoenix_clusters(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
            _client = client;
            _uriBuilder = uriBuilder.clone();
            _templateAndMatrixParameterValues = map;
        }

        /**
         * Create new instance using existing Client instance, and a base URI and any parameters
         * 
         */
        public Phoenix_clusters(Client client, URI baseUri) {
            _client = client;
            _uriBuilder = UriBuilder.fromUri(baseUri);
            _uriBuilder = _uriBuilder.path("phoenix_clusters");
            _templateAndMatrixParameterValues = new HashMap<String, Object>();
        }

        public IP1921680160_FapiRest4_3 .Phoenix_clusters.ClusterIdState clusterIdState(String clusterid) {
            return new IP1921680160_FapiRest4_3 .Phoenix_clusters.ClusterIdState(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), clusterid);
        }

        public IP1921680160_FapiRest4_3 .Phoenix_clusters.State state() {
            return new IP1921680160_FapiRest4_3 .Phoenix_clusters.State(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public static class ClusterIdState {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private ClusterIdState(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public ClusterIdState(Client client, URI baseUri, String clusterid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{clusterId}/state");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("clusterId", clusterid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public ClusterIdState(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/phoenix_clusters/{clusterId}/state");
                } else {
                    template.append("phoenix_clusters/{clusterId}/state");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get clusterId
             * 
             */
            public String getClusterid() {
                return ((String) _templateAndMatrixParameterValues.get("clusterId"));
            }

            /**
             * Duplicate state and set clusterId
             * 
             */
            public IP1921680160_FapiRest4_3 .Phoenix_clusters.ClusterIdState setClusterid(String clusterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("clusterId", clusterid);
                return new IP1921680160_FapiRest4_3 .Phoenix_clusters.ClusterIdState(_client, copyUriBuilder, copyMap);
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class State {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private State(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public State(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("state");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

    }

    public static class RecoverpointWadl {

        private Client _client;
        private UriBuilder _uriBuilder;
        private Map<String, Object> _templateAndMatrixParameterValues;

        private RecoverpointWadl(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
            _client = client;
            _uriBuilder = uriBuilder.clone();
            _templateAndMatrixParameterValues = map;
        }

        /**
         * Create new instance using existing Client instance, and a base URI and any parameters
         * 
         */
        public RecoverpointWadl(Client client, URI baseUri) {
            _client = client;
            _uriBuilder = UriBuilder.fromUri(baseUri);
            _uriBuilder = _uriBuilder.path("recoverpoint.wadl");
            _templateAndMatrixParameterValues = new HashMap<String, Object>();
        }

        public<T >T getAsVndSunWadlXml(GenericType<T> returnType) {
            UriBuilder localUriBuilder = _uriBuilder.clone();
            WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/vnd.sun.wadl+xml");
            Response response;
            response = resourceBuilder.build("GET").invoke();
            if (response.getStatus()>= 400) {
                throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
            }
            return response.readEntity(returnType);
        }

        public<T >T getAsVndSunWadlXml(Class<T> returnType) {
            UriBuilder localUriBuilder = _uriBuilder.clone();
            WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/vnd.sun.wadl+xml");
            Response response;
            response = resourceBuilder.build("GET").invoke();
            if (!Response.class.isAssignableFrom(returnType)) {
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
            }
            if (!Response.class.isAssignableFrom(returnType)) {
                return response.readEntity(returnType);
            } else {
                return returnType.cast(response);
            }
        }

        public<T >T getAsXml(GenericType<T> returnType) {
            UriBuilder localUriBuilder = _uriBuilder.clone();
            WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/xml");
            Response response;
            response = resourceBuilder.build("GET").invoke();
            if (response.getStatus()>= 400) {
                throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
            }
            return response.readEntity(returnType);
        }

        public<T >T getAsXml(Class<T> returnType) {
            UriBuilder localUriBuilder = _uriBuilder.clone();
            WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/xml");
            Response response;
            response = resourceBuilder.build("GET").invoke();
            if (!Response.class.isAssignableFrom(returnType)) {
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
            }
            if (!Response.class.isAssignableFrom(returnType)) {
                return response.readEntity(returnType);
            } else {
                return returnType.cast(response);
            }
        }

    }

    public static class Reports {

        private Client _client;
        private UriBuilder _uriBuilder;
        private Map<String, Object> _templateAndMatrixParameterValues;

        private Reports(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
            _client = client;
            _uriBuilder = uriBuilder.clone();
            _templateAndMatrixParameterValues = map;
        }

        /**
         * Create new instance using existing Client instance, and a base URI and any parameters
         * 
         */
        public Reports(Client client, URI baseUri) {
            _client = client;
            _uriBuilder = UriBuilder.fromUri(baseUri);
            _uriBuilder = _uriBuilder.path("reports");
            _templateAndMatrixParameterValues = new HashMap<String, Object>();
        }

        public IP1921680160_FapiRest4_3 .Reports.All all() {
            return new IP1921680160_FapiRest4_3 .Reports.All(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .Reports.Statistics statistics() {
            return new IP1921680160_FapiRest4_3 .Reports.Statistics(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public static class All {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private All(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public All(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("all");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T postJson(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T postJson(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Statistics {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Statistics(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Statistics(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("statistics");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T postJson(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T postJson(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

    }

    public static class Repository_volumes {

        private Client _client;
        private UriBuilder _uriBuilder;
        private Map<String, Object> _templateAndMatrixParameterValues;

        private Repository_volumes(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
            _client = client;
            _uriBuilder = uriBuilder.clone();
            _templateAndMatrixParameterValues = map;
        }

        /**
         * Create new instance using existing Client instance, and a base URI and any parameters
         * 
         */
        public Repository_volumes(Client client, URI baseUri) {
            _client = client;
            _uriBuilder = UriBuilder.fromUri(baseUri);
            _uriBuilder = _uriBuilder.path("repository_volumes");
            _templateAndMatrixParameterValues = new HashMap<String, Object>();
        }

        public IP1921680160_FapiRest4_3 .Repository_volumes.State state() {
            return new IP1921680160_FapiRest4_3 .Repository_volumes.State(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public static class State {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private State(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public State(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("state");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

    }

    public static class Rpas {

        private Client _client;
        private UriBuilder _uriBuilder;
        private Map<String, Object> _templateAndMatrixParameterValues;

        private Rpas(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
            _client = client;
            _uriBuilder = uriBuilder.clone();
            _templateAndMatrixParameterValues = map;
        }

        /**
         * Create new instance using existing Client instance, and a base URI and any parameters
         * 
         */
        public Rpas(Client client, URI baseUri) {
            _client = client;
            _uriBuilder = UriBuilder.fromUri(baseUri);
            _uriBuilder = _uriBuilder.path("rpas");
            _templateAndMatrixParameterValues = new HashMap<String, Object>();
        }

        public IP1921680160_FapiRest4_3 .Rpas.Statistics statistics() {
            return new IP1921680160_FapiRest4_3 .Rpas.Statistics(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .Rpas.State state() {
            return new IP1921680160_FapiRest4_3 .Rpas.State(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public static class State {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private State(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public State(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("state");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Statistics {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Statistics(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Statistics(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("statistics");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

    }

    public static class Settings {

        private Client _client;
        private UriBuilder _uriBuilder;
        private Map<String, Object> _templateAndMatrixParameterValues;

        private Settings(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
            _client = client;
            _uriBuilder = uriBuilder.clone();
            _templateAndMatrixParameterValues = map;
        }

        /**
         * Create new instance using existing Client instance, and a base URI and any parameters
         * 
         */
        public Settings(Client client, URI baseUri) {
            _client = client;
            _uriBuilder = UriBuilder.fromUri(baseUri);
            _uriBuilder = _uriBuilder.path("settings");
            _templateAndMatrixParameterValues = new HashMap<String, Object>();
        }

        public<T >T getAsJson(GenericType<T> returnType) {
            UriBuilder localUriBuilder = _uriBuilder.clone();
            WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
            Response response;
            response = resourceBuilder.build("GET").invoke();
            if (response.getStatus()>= 400) {
                throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
            }
            return response.readEntity(returnType);
        }

        public<T >T getAsJson(Class<T> returnType) {
            UriBuilder localUriBuilder = _uriBuilder.clone();
            WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
            Response response;
            response = resourceBuilder.build("GET").invoke();
            if (!Response.class.isAssignableFrom(returnType)) {
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
            }
            if (!Response.class.isAssignableFrom(returnType)) {
                return response.readEntity(returnType);
            } else {
                return returnType.cast(response);
            }
        }

        public<T >T deleteAs(GenericType<T> returnType) {
            UriBuilder localUriBuilder = _uriBuilder.clone();
            WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
            Response response;
            response = resourceBuilder.build("DELETE").invoke();
            if (response.getStatus()>= 400) {
                throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
            }
            return response.readEntity(returnType);
        }

        public<T >T deleteAs(Class<T> returnType) {
            UriBuilder localUriBuilder = _uriBuilder.clone();
            WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
            Response response;
            response = resourceBuilder.build("DELETE").invoke();
            if (!Response.class.isAssignableFrom(returnType)) {
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
            }
            if (!Response.class.isAssignableFrom(returnType)) {
                return response.readEntity(returnType);
            } else {
                return returnType.cast(response);
            }
        }

        public IP1921680160_FapiRest4_3 .Settings.Management_settings management_settings() {
            return new IP1921680160_FapiRest4_3 .Settings.Management_settings(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .Settings.Context context() {
            return new IP1921680160_FapiRest4_3 .Settings.Context(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .Settings.Defaults defaults() {
            return new IP1921680160_FapiRest4_3 .Settings.Defaults(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public static class Context {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Context(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Context(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("context");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Defaults {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Defaults(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Defaults(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("defaults");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public IP1921680160_FapiRest4_3 .Settings.Defaults.Group_copy_policy group_copy_policy() {
                return new IP1921680160_FapiRest4_3 .Settings.Defaults.Group_copy_policy(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            }

            public IP1921680160_FapiRest4_3 .Settings.Defaults.Group_link_policyRemote group_link_policyRemote() {
                return new IP1921680160_FapiRest4_3 .Settings.Defaults.Group_link_policyRemote(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            }

            public IP1921680160_FapiRest4_3 .Settings.Defaults.User_event_logs_filters user_event_logs_filters() {
                return new IP1921680160_FapiRest4_3 .Settings.Defaults.User_event_logs_filters(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            }

            public IP1921680160_FapiRest4_3 .Settings.Defaults.Group_policy group_policy() {
                return new IP1921680160_FapiRest4_3 .Settings.Defaults.Group_policy(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            }

            public IP1921680160_FapiRest4_3 .Settings.Defaults.Group_link_policyLocal group_link_policyLocal() {
                return new IP1921680160_FapiRest4_3 .Settings.Defaults.Group_link_policyLocal(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            }

            public IP1921680160_FapiRest4_3 .Settings.Defaults.Users_names users_names() {
                return new IP1921680160_FapiRest4_3 .Settings.Defaults.Users_names(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            }

            public IP1921680160_FapiRest4_3 .Settings.Defaults.Roles_names roles_names() {
                return new IP1921680160_FapiRest4_3 .Settings.Defaults.Roles_names(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            }

            public IP1921680160_FapiRest4_3 .Settings.Defaults.System_global_policy system_global_policy() {
                return new IP1921680160_FapiRest4_3 .Settings.Defaults.System_global_policy(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            }

            public static class Group_copy_policy {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private Group_copy_policy(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public Group_copy_policy(Client client, URI baseUri) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("group_copy_policy");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                }

                public<T >T getAsJson(GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T getAsJson(Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class Group_link_policyLocal {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private Group_link_policyLocal(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public Group_link_policyLocal(Client client, URI baseUri) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("group_link_policy/local");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                }

                public<T >T getAsJson(GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T getAsJson(Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class Group_link_policyRemote {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private Group_link_policyRemote(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public Group_link_policyRemote(Client client, URI baseUri) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("group_link_policy/remote");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                }

                public<T >T getAsJson(GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T getAsJson(Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class Group_policy {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private Group_policy(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public Group_policy(Client client, URI baseUri) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("group_policy");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                }

                public<T >T getAsJson(GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T getAsJson(Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class Roles_names {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private Roles_names(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public Roles_names(Client client, URI baseUri) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("roles_names");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                }

                public<T >T getAsJson(GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T getAsJson(Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class System_global_policy {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private System_global_policy(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public System_global_policy(Client client, URI baseUri) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("system_global_policy");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                }

                public<T >T getAsJson(GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T getAsJson(Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class Users_names {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private Users_names(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public Users_names(Client client, URI baseUri) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("users_names");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                }

                public<T >T getAsJson(GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T getAsJson(Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

            public static class User_event_logs_filters {

                private Client _client;
                private UriBuilder _uriBuilder;
                private Map<String, Object> _templateAndMatrixParameterValues;

                private User_event_logs_filters(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                    _client = client;
                    _uriBuilder = uriBuilder.clone();
                    _templateAndMatrixParameterValues = map;
                }

                /**
                 * Create new instance using existing Client instance, and a base URI and any parameters
                 * 
                 */
                public User_event_logs_filters(Client client, URI baseUri) {
                    _client = client;
                    _uriBuilder = UriBuilder.fromUri(baseUri);
                    _uriBuilder = _uriBuilder.path("user_event_logs_filters");
                    _templateAndMatrixParameterValues = new HashMap<String, Object>();
                }

                public<T >T getAsJson(GenericType<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                    return response.readEntity(returnType);
                }

                public<T >T getAsJson(Class<T> returnType) {
                    UriBuilder localUriBuilder = _uriBuilder.clone();
                    WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                    javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                    Response response;
                    response = resourceBuilder.build("GET").invoke();
                    if (!Response.class.isAssignableFrom(returnType)) {
                        if (response.getStatus()>= 400) {
                            throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                        }
                    }
                    if (!Response.class.isAssignableFrom(returnType)) {
                        return response.readEntity(returnType);
                    } else {
                        return returnType.cast(response);
                    }
                }

            }

        }

        public static class Management_settings {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Management_settings(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Management_settings(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("management_settings");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

    }

    public static class Snmp {

        private Client _client;
        private UriBuilder _uriBuilder;
        private Map<String, Object> _templateAndMatrixParameterValues;

        private Snmp(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
            _client = client;
            _uriBuilder = uriBuilder.clone();
            _templateAndMatrixParameterValues = map;
        }

        /**
         * Create new instance using existing Client instance, and a base URI and any parameters
         * 
         */
        public Snmp(Client client, URI baseUri) {
            _client = client;
            _uriBuilder = UriBuilder.fromUri(baseUri);
            _uriBuilder = _uriBuilder.path("snmp");
            _templateAndMatrixParameterValues = new HashMap<String, Object>();
        }

        public IP1921680160_FapiRest4_3 .Snmp.Settings settings() {
            return new IP1921680160_FapiRest4_3 .Snmp.Settings(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .Snmp.Disable disable() {
            return new IP1921680160_FapiRest4_3 .Snmp.Disable(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .Snmp.Enable enable() {
            return new IP1921680160_FapiRest4_3 .Snmp.Enable(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public static class Disable {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Disable(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Disable(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("disable");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T putAs(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putAs(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Enable {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Enable(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Enable(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("enable");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T putAs(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putAs(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Settings {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Settings(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Settings(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("settings");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

            public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

    }

    public static class Splitters {

        private Client _client;
        private UriBuilder _uriBuilder;
        private Map<String, Object> _templateAndMatrixParameterValues;

        private Splitters(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
            _client = client;
            _uriBuilder = uriBuilder.clone();
            _templateAndMatrixParameterValues = map;
        }

        /**
         * Create new instance using existing Client instance, and a base URI and any parameters
         * 
         */
        public Splitters(Client client, URI baseUri) {
            _client = client;
            _uriBuilder = UriBuilder.fromUri(baseUri);
            _uriBuilder = _uriBuilder.path("splitters");
            _templateAndMatrixParameterValues = new HashMap<String, Object>();
        }

        public IP1921680160_FapiRest4_3 .Splitters.Volume_connectionsRescan volume_connectionsRescan() {
            return new IP1921680160_FapiRest4_3 .Splitters.Volume_connectionsRescan(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .Splitters.San_view san_view() {
            return new IP1921680160_FapiRest4_3 .Splitters.San_view(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .Splitters.Settings settings() {
            return new IP1921680160_FapiRest4_3 .Splitters.Settings(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .Splitters.State state() {
            return new IP1921680160_FapiRest4_3 .Splitters.State(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .Splitters.SpecificVolume_connectionsRescan specificVolume_connectionsRescan() {
            return new IP1921680160_FapiRest4_3 .Splitters.SpecificVolume_connectionsRescan(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .Splitters.Available available() {
            return new IP1921680160_FapiRest4_3 .Splitters.Available(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public static class Available {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Available(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Available(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("available");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class San_view {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private San_view(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public San_view(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("san_view");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Settings {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Settings(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Settings(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("settings");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class SpecificVolume_connectionsRescan {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private SpecificVolume_connectionsRescan(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public SpecificVolume_connectionsRescan(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("specific/volume_connections/rescan");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class State {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private State(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public State(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("state");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Volume_connectionsRescan {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Volume_connectionsRescan(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Volume_connectionsRescan(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("volume_connections/rescan");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T putAs(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putAs(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

    }

    public static class State {

        private Client _client;
        private UriBuilder _uriBuilder;
        private Map<String, Object> _templateAndMatrixParameterValues;

        private State(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
            _client = client;
            _uriBuilder = uriBuilder.clone();
            _templateAndMatrixParameterValues = map;
        }

        /**
         * Create new instance using existing Client instance, and a base URI and any parameters
         * 
         */
        public State(Client client, URI baseUri) {
            _client = client;
            _uriBuilder = UriBuilder.fromUri(baseUri);
            _uriBuilder = _uriBuilder.path("state");
            _templateAndMatrixParameterValues = new HashMap<String, Object>();
        }

        public<T >T getAsJson(GenericType<T> returnType) {
            UriBuilder localUriBuilder = _uriBuilder.clone();
            WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
            Response response;
            response = resourceBuilder.build("GET").invoke();
            if (response.getStatus()>= 400) {
                throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
            }
            return response.readEntity(returnType);
        }

        public<T >T getAsJson(Class<T> returnType) {
            UriBuilder localUriBuilder = _uriBuilder.clone();
            WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
            Response response;
            response = resourceBuilder.build("GET").invoke();
            if (!Response.class.isAssignableFrom(returnType)) {
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
            }
            if (!Response.class.isAssignableFrom(returnType)) {
                return response.readEntity(returnType);
            } else {
                return returnType.cast(response);
            }
        }

        public IP1921680160_FapiRest4_3 .State.Context context() {
            return new IP1921680160_FapiRest4_3 .State.Context(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public static class Context {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Context(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Context(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("context");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

    }

    public static class Statistics {

        private Client _client;
        private UriBuilder _uriBuilder;
        private Map<String, Object> _templateAndMatrixParameterValues;

        private Statistics(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
            _client = client;
            _uriBuilder = uriBuilder.clone();
            _templateAndMatrixParameterValues = map;
        }

        /**
         * Create new instance using existing Client instance, and a base URI and any parameters
         * 
         */
        public Statistics(Client client, URI baseUri) {
            _client = client;
            _uriBuilder = UriBuilder.fromUri(baseUri);
            _uriBuilder = _uriBuilder.path("statistics");
            _templateAndMatrixParameterValues = new HashMap<String, Object>();
        }

        public IP1921680160_FapiRest4_3 .Statistics.All_statistics_categories all_statistics_categories() {
            return new IP1921680160_FapiRest4_3 .Statistics.All_statistics_categories(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .Statistics.Export export() {
            return new IP1921680160_FapiRest4_3 .Statistics.Export(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .Statistics.Clear_long_term_statistics clear_long_term_statistics() {
            return new IP1921680160_FapiRest4_3 .Statistics.Clear_long_term_statistics(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .Statistics.Export_to_default_file export_to_default_file() {
            return new IP1921680160_FapiRest4_3 .Statistics.Export_to_default_file(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .Statistics.Long_termTime_frames long_termTime_frames() {
            return new IP1921680160_FapiRest4_3 .Statistics.Long_termTime_frames(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .Statistics.Export_consolidate_by_time_frame export_consolidate_by_time_frame() {
            return new IP1921680160_FapiRest4_3 .Statistics.Export_consolidate_by_time_frame(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .Statistics.Export_consolidate_by_time_frames export_consolidate_by_time_frames() {
            return new IP1921680160_FapiRest4_3 .Statistics.Export_consolidate_by_time_frames(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public static class All_statistics_categories {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private All_statistics_categories(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public All_statistics_categories(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("all_statistics_categories");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Clear_long_term_statistics {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Clear_long_term_statistics(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Clear_long_term_statistics(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("clear_long_term_statistics");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T putAs(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putAs(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Export {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Export(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Export(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("export");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T postJson(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T postJson(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Export_consolidate_by_time_frame {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Export_consolidate_by_time_frame(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Export_consolidate_by_time_frame(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("export_consolidate_by_time_frame");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T postJson(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T postJson(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Export_consolidate_by_time_frames {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Export_consolidate_by_time_frames(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Export_consolidate_by_time_frames(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("export_consolidate_by_time_frames");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T postJson(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T postJson(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Export_to_default_file {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Export_to_default_file(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Export_to_default_file(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("export_to_default_file");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T postJson(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T postJson(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Long_termTime_frames {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Long_termTime_frames(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Long_termTime_frames(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("long_term/time_frames");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

    }

    public static class System {

        private Client _client;
        private UriBuilder _uriBuilder;
        private Map<String, Object> _templateAndMatrixParameterValues;

        private System(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
            _client = client;
            _uriBuilder = uriBuilder.clone();
            _templateAndMatrixParameterValues = map;
        }

        /**
         * Create new instance using existing Client instance, and a base URI and any parameters
         * 
         */
        public System(Client client, URI baseUri) {
            _client = client;
            _uriBuilder = UriBuilder.fromUri(baseUri);
            _uriBuilder = _uriBuilder.path("system");
            _templateAndMatrixParameterValues = new HashMap<String, Object>();
        }

        public IP1921680160_FapiRest4_3 .System.Server_charset_name server_charset_name() {
            return new IP1921680160_FapiRest4_3 .System.Server_charset_name(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .System.Ssh_keys ssh_keys() {
            return new IP1921680160_FapiRest4_3 .System.Ssh_keys(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .System.Balance_load_recommendation balance_load_recommendation() {
            return new IP1921680160_FapiRest4_3 .System.Balance_load_recommendation(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .System.Statistics statistics() {
            return new IP1921680160_FapiRest4_3 .System.Statistics(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .System.System_alertsSettings system_alertsSettings() {
            return new IP1921680160_FapiRest4_3 .System.System_alertsSettings(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .System.System_report system_report() {
            return new IP1921680160_FapiRest4_3 .System.System_report(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .System.System_reportSettings system_reportSettings() {
            return new IP1921680160_FapiRest4_3 .System.System_reportSettings(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .System.Detect_bottlenecks detect_bottlenecks() {
            return new IP1921680160_FapiRest4_3 .System.Detect_bottlenecks(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .System.Local_cluster local_cluster() {
            return new IP1921680160_FapiRest4_3 .System.Local_cluster(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .System.Current_rpa current_rpa() {
            return new IP1921680160_FapiRest4_3 .System.Current_rpa(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .System.Version version() {
            return new IP1921680160_FapiRest4_3 .System.Version(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .System.Context context() {
            return new IP1921680160_FapiRest4_3 .System.Context(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .System.Connection_info connection_info() {
            return new IP1921680160_FapiRest4_3 .System.Connection_info(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .System.Disable_first_time_wizard disable_first_time_wizard() {
            return new IP1921680160_FapiRest4_3 .System.Disable_first_time_wizard(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .System.Call_homeRun call_homeRun() {
            return new IP1921680160_FapiRest4_3 .System.Call_homeRun(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .System.Call_home_events call_home_events() {
            return new IP1921680160_FapiRest4_3 .System.Call_home_events(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .System.Test_syr_connectivity test_syr_connectivity() {
            return new IP1921680160_FapiRest4_3 .System.Test_syr_connectivity(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .System.Security_level security_level() {
            return new IP1921680160_FapiRest4_3 .System.Security_level(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .System.Login_events login_events() {
            return new IP1921680160_FapiRest4_3 .System.Login_events(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .System.Monitored_parametersStatus monitored_parametersStatus() {
            return new IP1921680160_FapiRest4_3 .System.Monitored_parametersStatus(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .System.VersionState versionState() {
            return new IP1921680160_FapiRest4_3 .System.VersionState(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .System.SyslogSettings syslogSettings() {
            return new IP1921680160_FapiRest4_3 .System.SyslogSettings(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .System.Settings settings() {
            return new IP1921680160_FapiRest4_3 .System.Settings(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .System.Call_home call_home() {
            return new IP1921680160_FapiRest4_3 .System.Call_home(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .System.StatusContext statusContext() {
            return new IP1921680160_FapiRest4_3 .System.StatusContext(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .System.Status status() {
            return new IP1921680160_FapiRest4_3 .System.Status(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .System.Internal_config_params internal_config_params() {
            return new IP1921680160_FapiRest4_3 .System.Internal_config_params(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .System.Internal_config_params_conflicts internal_config_params_conflicts() {
            return new IP1921680160_FapiRest4_3 .System.Internal_config_params_conflicts(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .System.Balance_load_recommendationApply balance_load_recommendationApply() {
            return new IP1921680160_FapiRest4_3 .System.Balance_load_recommendationApply(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .System.Virtual_infrastructuresState virtual_infrastructuresState() {
            return new IP1921680160_FapiRest4_3 .System.Virtual_infrastructuresState(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .System.Recommended_rpa recommended_rpa() {
            return new IP1921680160_FapiRest4_3 .System.Recommended_rpa(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .System.System_alertsDisable system_alertsDisable() {
            return new IP1921680160_FapiRest4_3 .System.System_alertsDisable(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .System.System_alertsEnable system_alertsEnable() {
            return new IP1921680160_FapiRest4_3 .System.System_alertsEnable(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .System.System_reportDisable system_reportDisable() {
            return new IP1921680160_FapiRest4_3 .System.System_reportDisable(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .System.System_reportEnable system_reportEnable() {
            return new IP1921680160_FapiRest4_3 .System.System_reportEnable(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .System.Misc_settings misc_settings() {
            return new IP1921680160_FapiRest4_3 .System.Misc_settings(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .System.SyslogDisable syslogDisable() {
            return new IP1921680160_FapiRest4_3 .System.SyslogDisable(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .System.SyslogEnable syslogEnable() {
            return new IP1921680160_FapiRest4_3 .System.SyslogEnable(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .System.Event_logs_filters event_logs_filters() {
            return new IP1921680160_FapiRest4_3 .System.Event_logs_filters(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .System.Event_logs_filtersFilterId event_logs_filtersFilterId(String filterid) {
            return new IP1921680160_FapiRest4_3 .System.Event_logs_filtersFilterId(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), filterid);
        }

        public IP1921680160_FapiRest4_3 .System.Event_logs_filtersFilterIdRename event_logs_filtersFilterIdRename(String filterid) {
            return new IP1921680160_FapiRest4_3 .System.Event_logs_filtersFilterIdRename(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), filterid);
        }

        public IP1921680160_FapiRest4_3 .System.User_properties user_properties() {
            return new IP1921680160_FapiRest4_3 .System.User_properties(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .System.Call_homeSuppress call_homeSuppress() {
            return new IP1921680160_FapiRest4_3 .System.Call_homeSuppress(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .System.Volume_size volume_size() {
            return new IP1921680160_FapiRest4_3 .System.Volume_size(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .System.Suppress_auto_registration_warning suppress_auto_registration_warning() {
            return new IP1921680160_FapiRest4_3 .System.Suppress_auto_registration_warning(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .System.Contact_email contact_email() {
            return new IP1921680160_FapiRest4_3 .System.Contact_email(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .System.Virtual_infrastructuresVirtual_machinesVms_network_policies virtual_infrastructuresVirtual_machinesVms_network_policies() {
            return new IP1921680160_FapiRest4_3 .System.Virtual_infrastructuresVirtual_machinesVms_network_policies(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .System.Trial_version trial_version() {
            return new IP1921680160_FapiRest4_3 .System.Trial_version(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public static class Balance_load_recommendation {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Balance_load_recommendation(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Balance_load_recommendation(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("balance_load_recommendation");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

            public<T >T postJson(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T postJson(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Balance_load_recommendationApply {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Balance_load_recommendationApply(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Balance_load_recommendationApply(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("balance_load_recommendation/apply");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Call_home {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Call_home(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Call_home(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("call_home");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

            public<T >T postJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T postJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Call_homeRun {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Call_homeRun(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Call_homeRun(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("call_home/run");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T putAs(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putAs(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Call_homeSuppress {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Call_homeSuppress(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Call_homeSuppress(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("call_home/suppress");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Call_home_events {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Call_home_events(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Call_home_events(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("call_home_events");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T postJson(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T postJson(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Connection_info {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Connection_info(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Connection_info(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("connection_info");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Contact_email {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Contact_email(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Contact_email(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("contact_email");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Context {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Context(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Context(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("context");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Current_rpa {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Current_rpa(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Current_rpa(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("current_rpa");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Detect_bottlenecks {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Detect_bottlenecks(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Detect_bottlenecks(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("detect_bottlenecks");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T postJson(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T postJson(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Disable_first_time_wizard {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Disable_first_time_wizard(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Disable_first_time_wizard(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("disable_first_time_wizard");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T putAs(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putAs(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Event_logs_filters {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Event_logs_filters(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Event_logs_filters(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("event_logs_filters");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

            public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

            public<T >T postJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T postJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Event_logs_filtersFilterId {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Event_logs_filtersFilterId(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Event_logs_filtersFilterId(Client client, URI baseUri, String filterid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("event_logs_filters/{filterId}");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("filterId", filterid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public Event_logs_filtersFilterId(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/system/event_logs_filters/{filterId}");
                } else {
                    template.append("system/event_logs_filters/{filterId}");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get filterId
             * 
             */
            public String getFilterid() {
                return ((String) _templateAndMatrixParameterValues.get("filterId"));
            }

            /**
             * Duplicate state and set filterId
             * 
             */
            public IP1921680160_FapiRest4_3 .System.Event_logs_filtersFilterId setFilterid(String filterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("filterId", filterid);
                return new IP1921680160_FapiRest4_3 .System.Event_logs_filtersFilterId(_client, copyUriBuilder, copyMap);
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Event_logs_filtersFilterIdRename {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Event_logs_filtersFilterIdRename(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Event_logs_filtersFilterIdRename(Client client, URI baseUri, String filterid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("event_logs_filters/{filterId}/rename");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("filterId", filterid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public Event_logs_filtersFilterIdRename(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/system/event_logs_filters/{filterId}/rename");
                } else {
                    template.append("system/event_logs_filters/{filterId}/rename");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get filterId
             * 
             */
            public String getFilterid() {
                return ((String) _templateAndMatrixParameterValues.get("filterId"));
            }

            /**
             * Duplicate state and set filterId
             * 
             */
            public IP1921680160_FapiRest4_3 .System.Event_logs_filtersFilterIdRename setFilterid(String filterid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("filterId", filterid);
                return new IP1921680160_FapiRest4_3 .System.Event_logs_filtersFilterIdRename(_client, copyUriBuilder, copyMap);
            }

            public<T >T putAs(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putAs(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

            public<T >T putAs(String newname, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                if (newname == null) {
                }
                if (newname!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("newName", newname);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("newName", ((Object[]) null));
                }
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putAs(String newname, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                if (newname == null) {
                }
                if (newname!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("newName", newname);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("newName", ((Object[]) null));
                }
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Internal_config_params {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Internal_config_params(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Internal_config_params(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("internal_config_params");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Internal_config_params_conflicts {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Internal_config_params_conflicts(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Internal_config_params_conflicts(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("internal_config_params_conflicts");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Local_cluster {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Local_cluster(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Local_cluster(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("local_cluster");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Login_events {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Login_events(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Login_events(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("login_events");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T postJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T postJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Misc_settings {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Misc_settings(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Misc_settings(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("misc_settings");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

            public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Monitored_parametersStatus {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Monitored_parametersStatus(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Monitored_parametersStatus(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("monitored_parameters/status");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Recommended_rpa {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Recommended_rpa(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Recommended_rpa(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("recommended_rpa");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Security_level {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Security_level(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Security_level(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("security_level");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Server_charset_name {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Server_charset_name(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Server_charset_name(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("server_charset_name");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Settings {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Settings(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Settings(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("settings");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Ssh_keys {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Ssh_keys(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Ssh_keys(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("ssh_keys");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T deleteJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("DELETE", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T deleteJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("DELETE", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

            public<T >T postJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T postJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Statistics {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Statistics(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Statistics(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("statistics");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Status {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Status(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Status(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("status");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class StatusContext {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private StatusContext(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public StatusContext(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("status/context");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Suppress_auto_registration_warning {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Suppress_auto_registration_warning(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Suppress_auto_registration_warning(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("suppress_auto_registration_warning");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class SyslogDisable {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private SyslogDisable(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public SyslogDisable(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("syslog/disable");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T putAs(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putAs(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class SyslogEnable {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private SyslogEnable(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public SyslogEnable(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("syslog/enable");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T putAs(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putAs(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class SyslogSettings {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private SyslogSettings(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public SyslogSettings(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("syslog/settings");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

            public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class System_alertsDisable {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private System_alertsDisable(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public System_alertsDisable(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("system_alerts/disable");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T putAs(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putAs(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class System_alertsEnable {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private System_alertsEnable(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public System_alertsEnable(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("system_alerts/enable");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T putAs(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putAs(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class System_alertsSettings {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private System_alertsSettings(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public System_alertsSettings(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("system_alerts/settings");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

            public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class System_report {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private System_report(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public System_report(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("system_report");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class System_reportDisable {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private System_reportDisable(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public System_reportDisable(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("system_report/disable");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T putAs(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putAs(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class System_reportEnable {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private System_reportEnable(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public System_reportEnable(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("system_report/enable");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T putAs(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putAs(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class System_reportSettings {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private System_reportSettings(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public System_reportSettings(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("system_report/settings");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Test_syr_connectivity {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Test_syr_connectivity(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Test_syr_connectivity(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("test_syr_connectivity");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Trial_version {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Trial_version(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Trial_version(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("trial_version");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class User_properties {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private User_properties(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public User_properties(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("user_properties");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

            public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Version {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Version(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Version(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("version");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class VersionState {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private VersionState(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public VersionState(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("version/state");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Virtual_infrastructuresState {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Virtual_infrastructuresState(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Virtual_infrastructuresState(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("virtual_infrastructures/state");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Virtual_infrastructuresVirtual_machinesVms_network_policies {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Virtual_infrastructuresVirtual_machinesVms_network_policies(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Virtual_infrastructuresVirtual_machinesVms_network_policies(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("virtual_infrastructures/virtual_machines/vms_network_policies");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Volume_size {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Volume_size(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Volume_size(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("volume_size");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T postJson(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T postJson(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

    }

    public static class SystemConflicts {

        private Client _client;
        private UriBuilder _uriBuilder;
        private Map<String, Object> _templateAndMatrixParameterValues;

        private SystemConflicts(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
            _client = client;
            _uriBuilder = uriBuilder.clone();
            _templateAndMatrixParameterValues = map;
        }

        /**
         * Create new instance using existing Client instance, and a base URI and any parameters
         * 
         */
        public SystemConflicts(Client client, URI baseUri) {
            _client = client;
            _uriBuilder = UriBuilder.fromUri(baseUri);
            _uriBuilder = _uriBuilder.path("system/conflicts");
            _templateAndMatrixParameterValues = new HashMap<String, Object>();
        }

        public<T >T getAsJson(GenericType<T> returnType) {
            UriBuilder localUriBuilder = _uriBuilder.clone();
            WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
            Response response;
            response = resourceBuilder.build("GET").invoke();
            if (response.getStatus()>= 400) {
                throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
            }
            return response.readEntity(returnType);
        }

        public<T >T getAsJson(Class<T> returnType) {
            UriBuilder localUriBuilder = _uriBuilder.clone();
            WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
            Response response;
            response = resourceBuilder.build("GET").invoke();
            if (!Response.class.isAssignableFrom(returnType)) {
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
            }
            if (!Response.class.isAssignableFrom(returnType)) {
                return response.readEntity(returnType);
            } else {
                return returnType.cast(response);
            }
        }

        public IP1921680160_FapiRest4_3 .SystemConflicts.Are_there are_there() {
            return new IP1921680160_FapiRest4_3 .SystemConflicts.Are_there(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public static class Are_there {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Are_there(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Are_there(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("are_there");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

    }

    public static class Time {

        private Client _client;
        private UriBuilder _uriBuilder;
        private Map<String, Object> _templateAndMatrixParameterValues;

        private Time(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
            _client = client;
            _uriBuilder = uriBuilder.clone();
            _templateAndMatrixParameterValues = map;
        }

        /**
         * Create new instance using existing Client instance, and a base URI and any parameters
         * 
         */
        public Time(Client client, URI baseUri) {
            _client = client;
            _uriBuilder = UriBuilder.fromUri(baseUri);
            _uriBuilder = _uriBuilder.path("time");
            _templateAndMatrixParameterValues = new HashMap<String, Object>();
        }

        public IP1921680160_FapiRest4_3 .Time.Current_time current_time() {
            return new IP1921680160_FapiRest4_3 .Time.Current_time(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .Time.Settings settings() {
            return new IP1921680160_FapiRest4_3 .Time.Settings(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public static class Current_time {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Current_time(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Current_time(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("current_time");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Settings {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Settings(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Settings(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("settings");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

            public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

    }

    public static class Transactions {

        private Client _client;
        private UriBuilder _uriBuilder;
        private Map<String, Object> _templateAndMatrixParameterValues;

        private Transactions(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
            _client = client;
            _uriBuilder = uriBuilder.clone();
            _templateAndMatrixParameterValues = map;
        }

        /**
         * Create new instance using existing Client instance, and a base URI and any parameters
         * 
         */
        public Transactions(Client client, URI baseUri) {
            _client = client;
            _uriBuilder = UriBuilder.fromUri(baseUri);
            _uriBuilder = _uriBuilder.path("transactions");
            _templateAndMatrixParameterValues = new HashMap<String, Object>();
        }

        public IP1921680160_FapiRest4_3 .Transactions.TransactionIdStatus transactionIdStatus(String transactionid) {
            return new IP1921680160_FapiRest4_3 .Transactions.TransactionIdStatus(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), transactionid);
        }

        public IP1921680160_FapiRest4_3 .Transactions.TransactionIdResult transactionIdResult(String transactionid) {
            return new IP1921680160_FapiRest4_3 .Transactions.TransactionIdResult(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), transactionid);
        }

        public IP1921680160_FapiRest4_3 .Transactions.TransactionId transactionId(String transactionid) {
            return new IP1921680160_FapiRest4_3 .Transactions.TransactionId(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), transactionid);
        }

        public static class TransactionId {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private TransactionId(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public TransactionId(Client client, URI baseUri, String transactionid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{transactionId}");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("transactionId", transactionid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public TransactionId(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/transactions/{transactionId}");
                } else {
                    template.append("transactions/{transactionId}");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get transactionId
             * 
             */
            public String getTransactionid() {
                return ((String) _templateAndMatrixParameterValues.get("transactionId"));
            }

            /**
             * Duplicate state and set transactionId
             * 
             */
            public IP1921680160_FapiRest4_3 .Transactions.TransactionId setTransactionid(String transactionid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("transactionId", transactionid);
                return new IP1921680160_FapiRest4_3 .Transactions.TransactionId(_client, copyUriBuilder, copyMap);
            }

            public<T >T deleteAs(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("DELETE").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T deleteAs(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("DELETE").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class TransactionIdResult {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private TransactionIdResult(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public TransactionIdResult(Client client, URI baseUri, String transactionid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{transactionId}/result");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("transactionId", transactionid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public TransactionIdResult(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/transactions/{transactionId}/result");
                } else {
                    template.append("transactions/{transactionId}/result");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get transactionId
             * 
             */
            public String getTransactionid() {
                return ((String) _templateAndMatrixParameterValues.get("transactionId"));
            }

            /**
             * Duplicate state and set transactionId
             * 
             */
            public IP1921680160_FapiRest4_3 .Transactions.TransactionIdResult setTransactionid(String transactionid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("transactionId", transactionid);
                return new IP1921680160_FapiRest4_3 .Transactions.TransactionIdResult(_client, copyUriBuilder, copyMap);
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class TransactionIdStatus {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private TransactionIdStatus(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public TransactionIdStatus(Client client, URI baseUri, String transactionid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{transactionId}/status");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("transactionId", transactionid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public TransactionIdStatus(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/transactions/{transactionId}/status");
                } else {
                    template.append("transactions/{transactionId}/status");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get transactionId
             * 
             */
            public String getTransactionid() {
                return ((String) _templateAndMatrixParameterValues.get("transactionId"));
            }

            /**
             * Duplicate state and set transactionId
             * 
             */
            public IP1921680160_FapiRest4_3 .Transactions.TransactionIdStatus setTransactionid(String transactionid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("transactionId", transactionid);
                return new IP1921680160_FapiRest4_3 .Transactions.TransactionIdStatus(_client, copyUriBuilder, copyMap);
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

    }

    public static class Users {

        private Client _client;
        private UriBuilder _uriBuilder;
        private Map<String, Object> _templateAndMatrixParameterValues;

        private Users(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
            _client = client;
            _uriBuilder = uriBuilder.clone();
            _templateAndMatrixParameterValues = map;
        }

        /**
         * Create new instance using existing Client instance, and a base URI and any parameters
         * 
         */
        public Users(Client client, URI baseUri) {
            _client = client;
            _uriBuilder = UriBuilder.fromUri(baseUri);
            _uriBuilder = _uriBuilder.path("users");
            _templateAndMatrixParameterValues = new HashMap<String, Object>();
        }

        public IP1921680160_FapiRest4_3 .Users.Password password() {
            return new IP1921680160_FapiRest4_3 .Users.Password(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .Users.Snmp snmp() {
            return new IP1921680160_FapiRest4_3 .Users.Snmp(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .Users.RolesRoleName rolesRoleName(String rolename) {
            return new IP1921680160_FapiRest4_3 .Users.RolesRoleName(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), rolename);
        }

        public IP1921680160_FapiRest4_3 .Users.SnmpUserName snmpUserName(String username) {
            return new IP1921680160_FapiRest4_3 .Users.SnmpUserName(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), username);
        }

        public IP1921680160_FapiRest4_3 .Users.Rp_users rp_users() {
            return new IP1921680160_FapiRest4_3 .Users.Rp_users(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .Users.Rp_usersUserName rp_usersUserName(String username) {
            return new IP1921680160_FapiRest4_3 .Users.Rp_usersUserName(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), username);
        }

        public IP1921680160_FapiRest4_3 .Users.Current current() {
            return new IP1921680160_FapiRest4_3 .Users.Current(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .Users.Rp_usersOldUserName rp_usersOldUserName(String oldusername) {
            return new IP1921680160_FapiRest4_3 .Users.Rp_usersOldUserName(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), oldusername);
        }

        public IP1921680160_FapiRest4_3 .Users.Rp_usersAdd_users rp_usersAdd_users() {
            return new IP1921680160_FapiRest4_3 .Users.Rp_usersAdd_users(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .Users.Settings settings() {
            return new IP1921680160_FapiRest4_3 .Users.Settings(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .Users.CurrentEvent_logs_filter currentEvent_logs_filter() {
            return new IP1921680160_FapiRest4_3 .Users.CurrentEvent_logs_filter(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .Users.Roles roles() {
            return new IP1921680160_FapiRest4_3 .Users.Roles(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public static class Current {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Current(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Current(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("current");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class CurrentEvent_logs_filter {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private CurrentEvent_logs_filter(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public CurrentEvent_logs_filter(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("current/event_logs_filter");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Password {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Password(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Password(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("password");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Roles {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Roles(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Roles(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("roles");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T postJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T postJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class RolesRoleName {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private RolesRoleName(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public RolesRoleName(Client client, URI baseUri, String rolename) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("roles/{roleName}");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("roleName", rolename);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public RolesRoleName(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/users/roles/{roleName}");
                } else {
                    template.append("users/roles/{roleName}");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get roleName
             * 
             */
            public String getRolename() {
                return ((String) _templateAndMatrixParameterValues.get("roleName"));
            }

            /**
             * Duplicate state and set roleName
             * 
             */
            public IP1921680160_FapiRest4_3 .Users.RolesRoleName setRolename(String rolename) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("roleName", rolename);
                return new IP1921680160_FapiRest4_3 .Users.RolesRoleName(_client, copyUriBuilder, copyMap);
            }

            public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

            public<T >T deleteAs(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("DELETE").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T deleteAs(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("DELETE").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Rp_users {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Rp_users(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Rp_users(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("rp_users");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T postJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T postJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

            public<T >T deleteJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("DELETE", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T deleteJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("DELETE", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Rp_usersAdd_users {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Rp_usersAdd_users(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Rp_usersAdd_users(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("rp_users/add_users");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T postJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T postJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Rp_usersOldUserName {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Rp_usersOldUserName(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Rp_usersOldUserName(Client client, URI baseUri, String oldusername) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("rp_users/{oldUserName}");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("oldUserName", oldusername);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public Rp_usersOldUserName(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/users/rp_users/{oldUserName}");
                } else {
                    template.append("users/rp_users/{oldUserName}");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get oldUserName
             * 
             */
            public String getOldusername() {
                return ((String) _templateAndMatrixParameterValues.get("oldUserName"));
            }

            /**
             * Duplicate state and set oldUserName
             * 
             */
            public IP1921680160_FapiRest4_3 .Users.Rp_usersOldUserName setOldusername(String oldusername) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("oldUserName", oldusername);
                return new IP1921680160_FapiRest4_3 .Users.Rp_usersOldUserName(_client, copyUriBuilder, copyMap);
            }

            public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Rp_usersUserName {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Rp_usersUserName(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Rp_usersUserName(Client client, URI baseUri, String username) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("rp_users/{userName}");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("userName", username);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public Rp_usersUserName(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/users/rp_users/{userName}");
                } else {
                    template.append("users/rp_users/{userName}");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get userName
             * 
             */
            public String getUsername() {
                return ((String) _templateAndMatrixParameterValues.get("userName"));
            }

            /**
             * Duplicate state and set userName
             * 
             */
            public IP1921680160_FapiRest4_3 .Users.Rp_usersUserName setUsername(String username) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("userName", username);
                return new IP1921680160_FapiRest4_3 .Users.Rp_usersUserName(_client, copyUriBuilder, copyMap);
            }

            public<T >T deleteAs(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("DELETE").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T deleteAs(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("DELETE").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Settings {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Settings(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Settings(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("settings");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

            public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Snmp {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Snmp(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Snmp(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("snmp");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T postJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T postJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("POST", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class SnmpUserName {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private SnmpUserName(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public SnmpUserName(Client client, URI baseUri, String username) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("snmp/{userName}");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("userName", username);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public SnmpUserName(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/users/snmp/{userName}");
                } else {
                    template.append("users/snmp/{userName}");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get userName
             * 
             */
            public String getUsername() {
                return ((String) _templateAndMatrixParameterValues.get("userName"));
            }

            /**
             * Duplicate state and set userName
             * 
             */
            public IP1921680160_FapiRest4_3 .Users.SnmpUserName setUsername(String username) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("userName", username);
                return new IP1921680160_FapiRest4_3 .Users.SnmpUserName(_client, copyUriBuilder, copyMap);
            }

            public<T >T deleteAs(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("DELETE").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T deleteAs(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("DELETE").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

    }

    public static class Vcenter_servers {

        private Client _client;
        private UriBuilder _uriBuilder;
        private Map<String, Object> _templateAndMatrixParameterValues;

        private Vcenter_servers(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
            _client = client;
            _uriBuilder = uriBuilder.clone();
            _templateAndMatrixParameterValues = map;
        }

        /**
         * Create new instance using existing Client instance, and a base URI and any parameters
         * 
         */
        public Vcenter_servers(Client client, URI baseUri) {
            _client = client;
            _uriBuilder = UriBuilder.fromUri(baseUri);
            _uriBuilder = _uriBuilder.path("vcenter_servers");
            _templateAndMatrixParameterValues = new HashMap<String, Object>();
        }

        public<T >T getAsJson(GenericType<T> returnType) {
            UriBuilder localUriBuilder = _uriBuilder.clone();
            WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
            Response response;
            response = resourceBuilder.build("GET").invoke();
            if (response.getStatus()>= 400) {
                throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
            }
            return response.readEntity(returnType);
        }

        public<T >T getAsJson(Class<T> returnType) {
            UriBuilder localUriBuilder = _uriBuilder.clone();
            WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
            Response response;
            response = resourceBuilder.build("GET").invoke();
            if (!Response.class.isAssignableFrom(returnType)) {
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
            }
            if (!Response.class.isAssignableFrom(returnType)) {
                return response.readEntity(returnType);
            } else {
                return returnType.cast(response);
            }
        }

        public IP1921680160_FapiRest4_3 .Vcenter_servers.Available_plugin_versions available_plugin_versions() {
            return new IP1921680160_FapiRest4_3 .Vcenter_servers.Available_plugin_versions(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .Vcenter_servers.View view() {
            return new IP1921680160_FapiRest4_3 .Vcenter_servers.View(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .Vcenter_servers.Settings settings() {
            return new IP1921680160_FapiRest4_3 .Vcenter_servers.Settings(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .Vcenter_servers.State state() {
            return new IP1921680160_FapiRest4_3 .Vcenter_servers.State(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues));
        }

        public IP1921680160_FapiRest4_3 .Vcenter_servers.VirtualCenterUIDPlugin_version virtualCenterUIDPlugin_version(String virtualcenteruid) {
            return new IP1921680160_FapiRest4_3 .Vcenter_servers.VirtualCenterUIDPlugin_version(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), virtualcenteruid);
        }

        public static class Available_plugin_versions {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Available_plugin_versions(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Available_plugin_versions(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("available_plugin_versions");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class Settings {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private Settings(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public Settings(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("settings");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class State {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private State(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public State(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("state");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class View {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private View(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public View(Client client, URI baseUri) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("view");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

            public<T >T getAsJson(String shouldrescan, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                if (shouldrescan == null) {
                }
                if (shouldrescan!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("shouldRescan", shouldrescan);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("shouldRescan", ((Object[]) null));
                }
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(String shouldrescan, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                if (shouldrescan == null) {
                }
                if (shouldrescan!= null) {
                    localUriBuilder = localUriBuilder.replaceQueryParam("shouldRescan", shouldrescan);
                } else {
                    localUriBuilder = localUriBuilder.replaceQueryParam("shouldRescan", ((Object[]) null));
                }
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

        public static class VirtualCenterUIDPlugin_version {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private VirtualCenterUIDPlugin_version(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public VirtualCenterUIDPlugin_version(Client client, URI baseUri, String virtualcenteruid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{virtualCenterUID}/plugin_version");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("virtualCenterUID", virtualcenteruid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public VirtualCenterUIDPlugin_version(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/vcenter_servers/{virtualCenterUID}/plugin_version");
                } else {
                    template.append("vcenter_servers/{virtualCenterUID}/plugin_version");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get virtualCenterUID
             * 
             */
            public String getVirtualcenteruid() {
                return ((String) _templateAndMatrixParameterValues.get("virtualCenterUID"));
            }

            /**
             * Duplicate state and set virtualCenterUID
             * 
             */
            public IP1921680160_FapiRest4_3 .Vcenter_servers.VirtualCenterUIDPlugin_version setVirtualcenteruid(String virtualcenteruid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("virtualCenterUID", virtualcenteruid);
                return new IP1921680160_FapiRest4_3 .Vcenter_servers.VirtualCenterUIDPlugin_version(_client, copyUriBuilder, copyMap);
            }

            public<T >T putJsonAs(Object input, GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T putJsonAs(Object input, Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
                Response response;
                response = resourceBuilder.build("PUT", Entity.entity(input, "application/json")).invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

    }

    public static class Virtual_machines {

        private Client _client;
        private UriBuilder _uriBuilder;
        private Map<String, Object> _templateAndMatrixParameterValues;

        private Virtual_machines(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
            _client = client;
            _uriBuilder = uriBuilder.clone();
            _templateAndMatrixParameterValues = map;
        }

        /**
         * Create new instance using existing Client instance, and a base URI and any parameters
         * 
         */
        public Virtual_machines(Client client, URI baseUri) {
            _client = client;
            _uriBuilder = UriBuilder.fromUri(baseUri);
            _uriBuilder = _uriBuilder.path("virtual_machines");
            _templateAndMatrixParameterValues = new HashMap<String, Object>();
        }

        public IP1921680160_FapiRest4_3 .Virtual_machines.VmBiosUuidGroup vmBiosUuidGroup(String vmbiosuuid) {
            return new IP1921680160_FapiRest4_3 .Virtual_machines.VmBiosUuidGroup(_client, _uriBuilder.buildFromMap(_templateAndMatrixParameterValues), vmbiosuuid);
        }

        public static class VmBiosUuidGroup {

            private Client _client;
            private UriBuilder _uriBuilder;
            private Map<String, Object> _templateAndMatrixParameterValues;

            private VmBiosUuidGroup(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
                _client = client;
                _uriBuilder = uriBuilder.clone();
                _templateAndMatrixParameterValues = map;
            }

            /**
             * Create new instance using existing Client instance, and a base URI and any parameters
             * 
             */
            public VmBiosUuidGroup(Client client, URI baseUri, String vmbiosuuid) {
                _client = client;
                _uriBuilder = UriBuilder.fromUri(baseUri);
                _uriBuilder = _uriBuilder.path("{vmBiosUuid}/group");
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                _templateAndMatrixParameterValues.put("vmBiosUuid", vmbiosuuid);
            }

            /**
             * Create new instance using existing Client instance, and the URI from which the parameters will be extracted
             * 
             */
            public VmBiosUuidGroup(Client client, URI uri) {
                _client = client;
                StringBuilder template = new StringBuilder(BASE_URI.toString());
                if (template.charAt((template.length()- 1))!= '/') {
                    template.append("/virtual_machines/{vmBiosUuid}/group");
                } else {
                    template.append("virtual_machines/{vmBiosUuid}/group");
                }
                _uriBuilder = UriBuilder.fromPath(template.toString());
                _templateAndMatrixParameterValues = new HashMap<String, Object>();
                UriTemplate uriTemplate = new UriTemplate(template.toString());
                HashMap<String, String> parameters = new HashMap<String, String>();
                uriTemplate.match(uri.toString(), parameters);
                _templateAndMatrixParameterValues.putAll(parameters);
            }

            /**
             * Get vmBiosUuid
             * 
             */
            public String getVmbiosuuid() {
                return ((String) _templateAndMatrixParameterValues.get("vmBiosUuid"));
            }

            /**
             * Duplicate state and set vmBiosUuid
             * 
             */
            public IP1921680160_FapiRest4_3 .Virtual_machines.VmBiosUuidGroup setVmbiosuuid(String vmbiosuuid) {
                Map<String, Object> copyMap;
                copyMap = new HashMap<String, Object>(_templateAndMatrixParameterValues);
                UriBuilder copyUriBuilder = _uriBuilder.clone();
                copyMap.put("vmBiosUuid", vmbiosuuid);
                return new IP1921680160_FapiRest4_3 .Virtual_machines.VmBiosUuidGroup(_client, copyUriBuilder, copyMap);
            }

            public<T >T getAsJson(GenericType<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
                return response.readEntity(returnType);
            }

            public<T >T getAsJson(Class<T> returnType) {
                UriBuilder localUriBuilder = _uriBuilder.clone();
                WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
                javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/json");
                Response response;
                response = resourceBuilder.build("GET").invoke();
                if (!Response.class.isAssignableFrom(returnType)) {
                    if (response.getStatus()>= 400) {
                        throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                    }
                }
                if (!Response.class.isAssignableFrom(returnType)) {
                    return response.readEntity(returnType);
                } else {
                    return returnType.cast(response);
                }
            }

        }

    }

    public static class Wadl {

        private Client _client;
        private UriBuilder _uriBuilder;
        private Map<String, Object> _templateAndMatrixParameterValues;

        private Wadl(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
            _client = client;
            _uriBuilder = uriBuilder.clone();
            _templateAndMatrixParameterValues = map;
        }

        /**
         * Create new instance using existing Client instance, and a base URI and any parameters
         * 
         */
        public Wadl(Client client, URI baseUri) {
            _client = client;
            _uriBuilder = UriBuilder.fromUri(baseUri);
            _uriBuilder = _uriBuilder.path("wadl");
            _templateAndMatrixParameterValues = new HashMap<String, Object>();
        }

        public<T >T getAsVndSunWadlXml(GenericType<T> returnType) {
            UriBuilder localUriBuilder = _uriBuilder.clone();
            WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/vnd.sun.wadl+xml");
            Response response;
            response = resourceBuilder.build("GET").invoke();
            if (response.getStatus()>= 400) {
                throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
            }
            return response.readEntity(returnType);
        }

        public<T >T getAsVndSunWadlXml(Class<T> returnType) {
            UriBuilder localUriBuilder = _uriBuilder.clone();
            WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/vnd.sun.wadl+xml");
            Response response;
            response = resourceBuilder.build("GET").invoke();
            if (!Response.class.isAssignableFrom(returnType)) {
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
            }
            if (!Response.class.isAssignableFrom(returnType)) {
                return response.readEntity(returnType);
            } else {
                return returnType.cast(response);
            }
        }

        public<T >T getAsXml(GenericType<T> returnType) {
            UriBuilder localUriBuilder = _uriBuilder.clone();
            WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/xml");
            Response response;
            response = resourceBuilder.build("GET").invoke();
            if (response.getStatus()>= 400) {
                throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
            }
            return response.readEntity(returnType);
        }

        public<T >T getAsXml(Class<T> returnType) {
            UriBuilder localUriBuilder = _uriBuilder.clone();
            WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("application/xml");
            Response response;
            response = resourceBuilder.build("GET").invoke();
            if (!Response.class.isAssignableFrom(returnType)) {
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
            }
            if (!Response.class.isAssignableFrom(returnType)) {
                return response.readEntity(returnType);
            } else {
                return returnType.cast(response);
            }
        }

    }

    public static class WadlXsl {

        private Client _client;
        private UriBuilder _uriBuilder;
        private Map<String, Object> _templateAndMatrixParameterValues;

        private WadlXsl(Client client, UriBuilder uriBuilder, Map<String, Object> map) {
            _client = client;
            _uriBuilder = uriBuilder.clone();
            _templateAndMatrixParameterValues = map;
        }

        /**
         * Create new instance using existing Client instance, and a base URI and any parameters
         * 
         */
        public WadlXsl(Client client, URI baseUri) {
            _client = client;
            _uriBuilder = UriBuilder.fromUri(baseUri);
            _uriBuilder = _uriBuilder.path("wadl.xsl");
            _templateAndMatrixParameterValues = new HashMap<String, Object>();
        }

        public<T >T getAs(GenericType<T> returnType) {
            UriBuilder localUriBuilder = _uriBuilder.clone();
            WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
            Response response;
            response = resourceBuilder.build("GET").invoke();
            if (response.getStatus()>= 400) {
                throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
            }
            return response.readEntity(returnType);
        }

        public<T >T getAs(Class<T> returnType) {
            UriBuilder localUriBuilder = _uriBuilder.clone();
            WebTarget resource = _client.target(localUriBuilder.buildFromMap(_templateAndMatrixParameterValues));
            javax.ws.rs.client.Invocation.Builder resourceBuilder = resource.request("*/*");
            Response response;
            response = resourceBuilder.build("GET").invoke();
            if (!Response.class.isAssignableFrom(returnType)) {
                if (response.getStatus()>= 400) {
                    throw new IP1921680160_FapiRest4_3 .WebApplicationExceptionMessage(response);
                }
            }
            if (!Response.class.isAssignableFrom(returnType)) {
                return response.readEntity(returnType);
            } else {
                return returnType.cast(response);
            }
        }

    }


    /**
     * Workaround for JAX_RS_SPEC-312
     * 
     */
    private static class WebApplicationExceptionMessage
        extends WebApplicationException
    {


        private WebApplicationExceptionMessage(Response response) {
            super(response);
        }

        /**
         * Workaround for JAX_RS_SPEC-312
         * 
         */
        public String getMessage() {
            Response response = getResponse();
            Response.Status status = Response.Status.fromStatusCode(response.getStatus());
            if (status!= null) {
                return (response.getStatus()+(" "+ status.getReasonPhrase()));
            } else {
                return Integer.toString(response.getStatus());
            }
        }

        public String toString() {
            String s = "javax.ws.rs.WebApplicationException";
            String message = getLocalizedMessage();
            return (s +(": "+ message));
        }

    }

}
