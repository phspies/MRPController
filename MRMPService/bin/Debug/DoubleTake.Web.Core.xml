<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DoubleTake.Web.Core</name>
    </assembly>
    <members>
        <member name="T:DoubleTake.Argument">
            <summary>
            Provides argument validation methods.
            </summary>
        </member>
        <member name="M:DoubleTake.Argument.NotNull``1(``0,System.String)">
            <summary>
            Ensures that the specified argument value is not null.
            </summary>
            <typeparam name="T">The type of the parameter.</typeparam>
            <param name="value">The parameter value.</param>
            <param name="parameterName">Name of the parameter.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="value"/> was <see langword="null"/>.</exception>
        </member>
        <member name="M:DoubleTake.Argument.NotNullOrEmpty(System.String,System.String)">
            <summary>
            Ensures that the specified argument is not null or empty.
            </summary>
            <param name="value">The value.</param>
            <param name="parameterName">Name of the parameter.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="value"/> was <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="value"/> was an empty string.</exception>
        </member>
        <member name="M:DoubleTake.Argument.RootPath(System.Uri,System.String)">
            <summary>
            Ensures that the specified argument value represents a root path.
            </summary>
            <param name="uri">The URI to validate.</param>
            <param name="parameterName">Name of the parameter.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="uri"/> was null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="uri"/> must specify a root path.</exception>
        </member>
        <member name="T:DoubleTake.BidirectionalDictionary`2">
            <summary>
            Specialized dictionary that supports forward and reverse lookup.
            </summary>
            <typeparam name="TLeft">The type of the left.</typeparam>
            <typeparam name="TRight">The type of the right.</typeparam>
        </member>
        <member name="M:DoubleTake.BidirectionalDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:DoubleTake.BidirectionalDictionary`2"/> class.
            </summary>
            <param name="leftToRightComparer">The left to right comparer.</param>
            <param name="rightToLeftComparer">The right to left comparer.</param>
        </member>
        <member name="M:DoubleTake.BidirectionalDictionary`2.Add(`0,`1)">
            <summary>
            Adds the specified left.
            </summary>
            <param name="left">The left key/value.</param>
            <param name="right">The right key/value.</param>
            <exception cref="T:System.ArgumentException">
            $An entry for the left key ({left}) already exists.
            or
            $An entry for the right key ({right}) already exists.
            </exception>
        </member>
        <member name="M:DoubleTake.BidirectionalDictionary`2.TryGetLeftToRight(`0,`1@)">
            <summary>
            Tries to get a right value from the provided left key.
            </summary>
            <param name="left">The left key.</param>
            <param name="right">The right value.</param>
            <returns><see langword="true"/> if the left key was found; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DoubleTake.BidirectionalDictionary`2.TryGetRightToLeft(`1,`0@)">
            <summary>
            Tries to get a left value from the provided right key.
            </summary>
            <param name="right">The right key.</param>
            <param name="left">The left value.</param>
            <returns><see langword="true"/> if the right key was found; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:DoubleTake.EnumUtils">
            <summary>
            Utility methods for inspecting and manipulating enum types.
            </summary>
        </member>
        <member name="M:DoubleTake.EnumUtils.Format(System.Type,System.String)">
            <summary>
            Formats the specified enum text to be written to JSON.
            </summary>
            <param name="enumType">Type of the enum.</param>
            <param name="enumText">The enum text.</param>
            <returns>The formatted enum text.</returns>
        </member>
        <member name="M:DoubleTake.EnumUtils.Parse(System.Type,System.String,System.Boolean)">
            <summary>
            Parses the specified enum text converting resolved names to the actual enum names.
            </summary>
            <param name="enumType">Type of the enum.</param>
            <param name="enumText">The enum text.</param>
            <param name="isNullable">If set to <see langword="true"/>, null will be returned for a null or empty string. If set.</param>
            <returns>The parsed enum text.</returns>
        </member>
        <member name="T:DoubleTake.Json.Converters.EnumStringConverter">
            <summary>
            JSON converter for properly converting enums to strings and vice-versa.
            </summary>
        </member>
        <member name="M:DoubleTake.Json.Converters.EnumStringConverter.CanConvert(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:DoubleTake.Json.Converters.EnumStringConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:DoubleTake.Json.Converters.EnumStringConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc/>
        </member>
        <member name="T:DoubleTake.Json.Converters.IsoDateTimeConverter">
            <summary>
            JSON converter for ISO 8601 date/time and duration.
            </summary>
        </member>
        <member name="M:DoubleTake.Json.Converters.IsoDateTimeConverter.CanConvert(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:DoubleTake.Json.Converters.IsoDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:DoubleTake.Json.Converters.IsoDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc/>
        </member>
        <member name="T:DoubleTake.Json.JsonConfiguration">
            <summary>
            Provides default settings for serializing and deserializing JSON.
            </summary>
        </member>
        <member name="P:DoubleTake.Json.JsonConfiguration.DefaultSerializerSettings">
            <summary>
            Gets the default JSON serializer settings.
            </summary>
            <value>
            The default JSON serializer settings.
            </value>
        </member>
        <member name="M:DoubleTake.Json.JsonConfiguration.ApplyDefaultSettings(Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Applies the default JSON serializer settings to already constructed settings.
            </summary>
            <param name="settings">The settings.</param>
            <returns>The JSON serializer settings with default settings applied.</returns>
        </member>
        <member name="M:DoubleTake.Json.JsonConfiguration.CreateDefaultSerializer">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.JsonSerializer"/> with default settings.
            </summary>
            <returns>A <see cref="T:Newtonsoft.Json.JsonSerializer"/> with default settings.</returns>
        </member>
        <member name="T:DoubleTake.Json.Serialization.CamelCaseContractResolver">
            <summary>
            Resolves member mappings for a type, camel-casing property names.
            </summary>
        </member>
        <member name="M:DoubleTake.Json.Serialization.CamelCaseContractResolver.ResolvePropertyName(System.String)">
            <summary>
            Resolves the name of the property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>The property name camel-cased.</returns>
        </member>
        <member name="T:DoubleTake.ReflectionUtils">
            <summary>
            Utilities for type reflection.
            </summary>
        </member>
        <member name="M:DoubleTake.ReflectionUtils.IsFlagsEnum(System.Type)">
            <summary>
            Determines whether the provided type represents a Flags enum.
            </summary>
            <param name="type">The type to test.</param>
            <returns><see langword="true"/> if the type is an enum with the Flags attribute; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DoubleTake.ReflectionUtils.IsNullable(System.Type)">
            <summary>
            Determines whether provided type is nullable.
            </summary>
            <param name="type">Type of the object.</param>
            <returns><see langword="true"/> if the type is nullable; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:DoubleTake.StringUtils">
            <summary>
            String utility methods.
            </summary>
        </member>
        <member name="M:DoubleTake.StringUtils.ToCamelCase(System.String)">
            <summary>
            Makes the provided string camel-cased.
            </summary>
            <param name="s">The string to camel-case.</param>
            <returns>The provided string in camel-case.</returns>
        </member>
        <member name="T:DoubleTake.Web.Models.ErrorDetailsModel">
            <summary>
            Model for errors associated with a <see cref="T:DoubleTake.Web.Models.ErrorResponseModel"/>.
            </summary>
        </member>
        <member name="P:DoubleTake.Web.Models.ErrorDetailsModel.Message">
            <summary>
            Gets or sets the message for this error.
            </summary>
            <value>
            The message.
            </value>
        </member>
        <member name="P:DoubleTake.Web.Models.ErrorDetailsModel.Reason">
            <summary>
            Gets or sets the reason code for this error.
            </summary>
            <value>
            The reason code.
            </value>
            <remarks>
            This value is intended for programmatic use and identification of errors, not for display purposes.
            </remarks>
        </member>
        <member name="T:DoubleTake.Web.Models.ErrorResponseModel">
            <summary>
            Response model returned in HTTP request content when errors occur.
            </summary>
        </member>
        <member name="P:DoubleTake.Web.Models.ErrorResponseModel.Code">
            <summary>
            Gets or sets the HTTP status code that caused this error response.
            </summary>
            <value>
            The HTTP status code.
            </value>
        </member>
        <member name="P:DoubleTake.Web.Models.ErrorResponseModel.Errors">
            <summary>
            Gets or sets the errors that caused this error response.
            </summary>
            <value>
            The errors.
            </value>
        </member>
        <member name="P:DoubleTake.Web.Models.ErrorResponseModel.Message">
            <summary>
            Gets or sets the message for this error response.
            </summary>
            <value>
            The message.
            </value>
        </member>
    </members>
</doc>
