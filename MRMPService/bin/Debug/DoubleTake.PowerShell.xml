<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DoubleTake.PowerShell</name>
    </assembly>
    <members>
        <member name="T:DoubleTake.PowerShell.Commands.JobManagement.CheckPointConnectionCommand">
            <summary>
            This cmdlet creates a snapshot of the source replica data on the target. For this cmdlet, the -ServiceHost should be your target server.
            </summary>
            <example>
            A server object is created for the server beta using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectBeta. The job(s) are retrieved from DtServerObjectBeta, but only the job information where the source machine name is equivalent to the name stored in the variable DtServerObjectAlpha is retrieved. That information is then stored in the variable DtJobForAlpha. Then a snapshot of the replica data on the target is taken. The connections for the server object are then closed.
            <code>
            $DtServerObjectBeta = New-DtServer -Name beta -UserName domain\administrator -Password password
            $DtJobForAlpha = Get-DtJob -ServiceHost $DtServerObjectBeta | Where-Object {$_.Statistics.CoreConnectionDetails.SourceMachineName -eq $DtServerObjectAlpha}
            Checkpoint-DtConnection -ServiceHost $DtServerObjectBeta -JobId $DtJobForAlpha
            Disconnect-DtServer -ServiceHost $DtServerObjectBeta
            </code>
            </example>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.JobManagement.GetSnapshotCommand">
            <summary>
            This cmdlet returns the available Double-Take snapshots for the specified job. For this cmdlet, the -ServiceHost should be your target server.
            </summary>
            <example>
            A server object is created for the server beta using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectBeta. The job(s) are retrieved from DtServerObjectBeta, but only the job information where the source machine name is equivalent to the name stored in the variable DtServerObjectAlpha is retrieved. That information is then stored in the variable DtJobForAlpha. The snapshots available for the job are returned. The connections for the server object are then closed.
            <code>
            $DtServerObjectBeta = New-DtServer -Name beta -UserName domain\administrator -Password password
            $DtJobForAlpha = Get-DtJob -ServiceHost $DtServerObjectBeta | Where-Object {$_.Statistics.CoreConnectionDetails.SourceMachineName -eq $DtServerObjectAlpha} 
            Get-DtSnapshot -ServiceHost $DtServerObjectBeta -JobId $DtJobForAlpha.Id
            Disconnect-DtServer -ServiceHost $DtServerObjectBeta
            </code>
            </example>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.JobManagement.WaitConfirmJobOptionsCommand">
            <summary>
            This cmdlet waits for the job validation process triggered by Confirm-DtJobOptions to complete before processing any additional cmdlets. For this cmdlet, the -ServiceHost should be your target server.
            </summary>
            <example>
            A server object is created for the server beta using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectBeta. The job(s) are retrieved from DtServerObjectBeta, but only the job information where the source machine name is equivalent to the name stored in the variable DtServerObjectAlpha is retrieved. That information is then stored in the variable DtJobForAlpha. The job options used by the job are confirmed, and the validation result is stored in DtValidation. The script then waits until the validation is complete before continuing. The connections for the server object are then closed. 
            <code>
            $DtServerObjectBeta = New-DtServer -Name beta -UserName domain\administrator -Password password
            $DtJobForAlpha = Get-DtJob -ServiceHost $DtServerObjectBeta | Where-Object {$_.Statistics.CoreConnectionDetails.SourceMachineName -eq $DtServerObjectAlpha}
            $DtValidation = Confirm-DtJobOptions -ServiceHost $DtServerObjectBeta -JobId $DtJobForAlpha.Id -JobOptions $DtJob.Options
            Wait-DtConfirmJobOptions -ServiceHost $DtServerObjectBeta -Token $DtValidation
            Disconnect-DtServer -ServiceHost $DtServerObjectBeta
            </code>
            </example>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.JobManagement.InvokeAddSharesCommand">
            <summary>
            This cmdlet takes the drive share configuration that was gathered during Double-Take mirroring and replication and applies it to the target server. This process is independent of the failover process. For this cmdlet, the -ServiceHost should be your target server.
            </summary>
            <example>
            A server object is created for the server beta using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectBeta. All job information for all of the jobs on the server beta are stored in the variable DtJobInfo. This type of usage is common when the jobs were created in the past or if you did not store or do not know a job's ID. In this example, assume there is only one job on the server. Job id from the stored job information is stored in the variable JobId. The path to the location of the job file is stored in the variable PathToJobFile. The extension of the job file is stored in the variable JobFileExtension. The variables are appended, together with the word Job, to create the variable JobFile. For example, the JobFile variable might end up being C:\Program Files\Vision Solutions\Double-Take\Service\Data\Job87667a0d-4516-4182-ab8f-13f6fd15dd92.xml. Shares are then added on the server DtServerObjectBeta using the job configuration file stored in JobFile. The connections for the server object are then closed.
            <code>
            $DtServerObjectBeta = New-DtServer -Name beta -UserName domain\administrator -Password password
            $DtJobInfo = Get-DtJob -ServiceHost $DtServerObjectBeta
            $JobId = $DtJobInfo.Id
            $PathToJobFile = "C:\Program Files\Vision Solutions\Double-Take\Service\Data\"
            $JobFileExtension = ".xml"
            $JobFile = $PathToJobFile + "Job" + $JobId + $JobFileExtension
            Invoke-DtAddShares –ServiceHost $DtServerObjectBeta –JobXmlPath $JobFile
            Disconnect-DtServer –ServiceHost $DtServerObjectBeta
            </code>
            </example>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.JobManagement.InvokeAddSharesCommand.JobXmlPath">
            <summary>
            Specify the path and file name to the Double-Take .xml configuration file for the job that contains the protected shares. By default, this location is \Program Files\Vision Solutions\Double-Take\Service\Data. The file name will be JobGuid.xml where Guid is the unique identifier assigned to the job. You can find this ID by using Get-DtJob. 
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.JobManagement.InvokeAddSharesCommand.SharePathFilter">
            <summary>
            Creates shares from the specified path and any subdirectories of this path. 
            </summary>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.JobManagement.InvokeRemoveSharesCommand">
            <summary>
            This cmdlet takes the drive share configuration that was gathered during Double-Take mirroring and replication and removes it from the target server. This process is independent of the failback process. For this cmdlet, the -ServiceHost should be your target server.
            </summary>
            <example>
            A server object is created for the server beta using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectBeta. All job information for all of the jobs on the server beta are stored in the variable DtJobInfo. This type of usage is common when the jobs were created in the past or if you did not store or do not know a job's ID. In this example, assume there is only one job on the server. Job id from the stored job information is stored in the variable JobId. The path to the location of the job file is stored in the variable PathToJobFile. The extension of the job file is stored in the variable JobFileExtension. The variables are appended, together with the word Job, to create the variable JobFile. For example, the JobFile variable might end up being C:\Program Files\Vision Solutions\Double-Take\Service\Data\Job87667a0d-4516-4182-ab8f-13f6fd15dd92.xml. Shares are then removed on the server DtServerObjectBeta using the job configuration file stored in JobFile. The connections for the server object are then closed.
            <code>
            $DtServerObjectBeta = New-DtServer -Name beta -UserName domain\administrator -Password password
            $DtJobInfo = Get-DtJob -ServiceHost $DtServerObjectBeta
            $JobId = DtJobInfo.Id
            $PathToJobFile = "C:\Program Files\Vision Solutions\Double-Take\Service\Data\"
            $JobFileExtension = ".xml"
            $JobFile = $PathToJobFile + "Job" + $JobId + JobFileExtension
            Invoke-DtRemoveShares –ServiceHost $DtServerObjectBeta –JobXmlPath $JobFile
            Disconnect-DtServer – ServiceHost $DtServerObjectBeta
            </code>
            </example>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.JobManagement.InvokeRemoveSharesCommand.JobXmlPath">
            <summary>
            Specify the path and file name to the Double-Take .xml configuration file for the job that contains the protected shares. By default, this location is \Program Files\Vision Solutions\Double-Take\Service\Data. The file name will be JobGuid.xml where Guid is the unique identifier assigned to the job. You can find this ID by using Get-DtJob. 
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.JobManagement.InvokeRemoveSharesCommand.SharePathFilter">
            <summary>
            Removes shares from the specified path and any subdirectories of this path. 
            </summary>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.JobManagement.GetJobActionStatusCommand">
            <summary>
            This cmdlet returns the status of a job action that has been queued for job. The first syntax returns the status of all of the actions queued for the specified job. The second syntax returns the status for the job action object specified. For this cmdlet, the -ServiceHost should be your target server.
            </summary>
            <example>
            The job(s) are retrieved from DtServerObjectBeta, but only the job information where the source machine name is equivalent to the name stored in the variable DtServerObjectAlpha is retrieved. That information is then stored in the variable DtJobForAlpha. A server object is created for the server beta using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectBeta. Finally, the status of the job action is returned. The connections for the server object are then closed.
            <code>
            $DtServerObjectBeta = New-DtServer -Name beta -UserName domain\administrator -Password password
            $DtJobForAlpha = Get-DtJob -ServiceHost $DtServerObjectBeta | Where-Object {$_.Statistics.CoreConnectionDetails.SourceMachineName -eq $DtServerObjectAlpha}
            Get-DtJobActionStatus -ServiceHost $DtServerObjectBeta -JobId $DtJobForAlpha.Id
            Disconnect-DtServer -ServiceHost $DtServerObjectBeta
            </code>
            </example>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.JobManagement.GetJobActionStatusCommand.JobId">
            <summary>
            Specify the job GUID returned from the New-DtJob cmdlet or the Id within the job information returned from the Get-DtJob cmdlet. 
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.JobManagement.GetJobActionStatusCommand.Action">
            <summary>
            Specify a Double-Take job action object.
            </summary>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.JobManagement.GetUvraRecommendedFailoverOptionsCommand">
            <summary>
            This cmdlet returns the recommended failover options for the specified full server to ESX appliance job on the specified server. For this cmdlet, the -ServiceHost should be your target server.
            </summary>
            <example>
            A server object is created for the server alpha using the root and password credentials. It assigns the server object to the variable called DtServerObjectAlpha. A server object is created for the appliance beta using port 6325 and the root and password credentials. It assigns the server object to the variable called DtApplianceObject. The job (s) are retrieved from DtApplianceObject, but only the job information where the source machine name is equivalent to the name stored in the variable DtServerObjectAlpha is retrieved. That information is then stored in the variable DtJobForAlpha. Then the recommended failover options for the specified full server to ESX appliance job and server are returned. The connections for the server object are then closed.
            <code>
            $DtServerObjectAlpha= New-DtServer -Name alpha -UserName root -Password password
            $DtApplianceObject = New-DtUvraServer -Name beta -UserName root -Password password -Port 6325
            $DtJobForAlpha = Get-DtJob -ServiceHost $DtApplianceObject | Where-Object {$_.Statistics.CoreConnectionDetails.SourceMachineName -eq $DtServerObjectAlpha}
            Get-DtUvraRecommendedFailoverOptions -ServiceHost $DtApplianceObject -JobId $DtJobForAlpha.Id
            Disconnect-DtServer -ServiceHost $DtApplianceObject
            Disconnect-DtServer -ServiceHost $DtServerObjectAlpha
            </code>
            </example>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.JobManagement.GetUvraRecommendedRemoveOptionsCommand">
            <summary>
            This cmdlet returns the recommended removal options when deleting the specified full server to ESX appliance job. For this cmdlet, the -ServiceHost should be your target server.
            </summary>
            <example>
            A server object is created for the server alpha using the root and password credentials. It assigns the server object to the variable called DtServerObjectAlpha. A server object is created for the appliance beta using port 6325 and the root and password credentials. It assigns the server object to the variable called DtApplianceObject. The job (s) are retrieved from DtApplianceObject, but only the job information where the source machine name is equivalent to the name stored in the variable DtServerObjectAlpha is retrieved. That information is then stored in the variable DtJobForAlpha. Then the recommended remove options for the specified full server to ESX appliance job and server are returned. The connections for the server object are then closed.
            <code>
            $DtServerObjectAlpha= New-DtServer -Name alpha -UserName root -Password password
            $DtApplianceObject = New-DtUvraServer -Name beta -UserName root -Password password -Port 6325
            $DtJobForAlpha = Get-DtJob -ServiceHost $DtApplianceObject | Where-Object {$_.Statistics.CoreConnectionDetails.SourceMachineName -eq $DtServerObjectAlpha}
            Get-DtUvraRecommendedRemoveOptions -ServiceHost $DtApplianceObject -JobId $DtJobForAlpha.Id
            Disconnect-DtServer -ServiceHost $DtApplianceObject
            Disconnect-DtServer -ServiceHost $DtServerObjectAlpha
            </code>
            </example>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.JobManagement.GetRepairJobOptionsStatusCommand">
            <summary>
            This cmdlet returns the details and status of the repair performed by the Repair-DtJobOptions cmdlet. For this cmdlet, the -ServiceHost should be your target server.
            </summary>
            <example>
            A server object is created for the server beta using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectBeta. The job(s) are retrieved from DtServerObjectBeta, but only the job information where the source machine name is equivalent to the name stored in the variable DtServerObjectAlpha is retrieved. That information is then stored in the variable DtJobForAlpha. The job options used by the job are confirmed, and the validation result is stored in DtValidation. The details of the validation are stored in the variable DtStatus. Those items that can automatically be fixed are corrected. If the job options were modified in order to fix an issues, the updated job options are now contained in the variable $DtRepair. The details and status of the repair are stored in the variable DtRepairStatus. The connections for the server object are then closed.
            <code>
            $DtServerObjectBeta = New-DtServer -Name beta -UserName domain\administrator -Password password
            $DtJobForAlpha = Get-DtJob -ServiceHost $DtServerObjectBeta | Where-Object {$_.Statistics.CoreConnectionDetails.SourceMachineName -eq $DtServerObjectAlpha}
            $DtValidation = Confirm-DtJobOptions -ServiceHost $DtServerObjectBeta -JobId $DtJobForAlpha.Id -JobOptions $DtJob.Options 
            $DtStatus = Get-DtVerificationStatus -ServiceHost $DtServerObjectBeta -Token $DtValidation
            $DtRepair = Repair-DtJobOptions -ServiceHost $DtTarget -JobId $DtJob.Id -JobOptions $DtJob.Options -Step $DtStatus.Steps
            $DtRepairStatus = Get-DtRepairJobOptionsStatus -ServiceHost $DtServerObjectBeta -Token $DtRepair
            Disconnect-DtServer -ServiceHost $DtServerObjectBeta
            </code>
            </example>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.JobManagement.GetRepairJobOptionsStatusCommand.Token">
            <summary>
            Specify the repair action object returned from the Repair-DtJobOptions cmdlet. 
            </summary>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.JobManagement.RepairJobOptionsCommand">
            <summary>
            This cmdlet attempts to fix job option errors and warnings. For those errors and warnings that Double-Take cannot correct automatically, you will need to modify the job options manually, modify the source or target configuration, or perhaps select a different target. Use the first syntax for existing jobs and the second syntax for new jobs. For this cmdlet, the -ServiceHost should be your target server.
            </summary>
            <example>
            A server object is created for the server beta using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectBeta. The job(s) are retrieved from DtServerObjectBeta, but only the job information where the source machine name is equivalent to the name stored in the variable DtServerObjectAlpha is retrieved. That information is then stored in the variable DtJobForAlpha. The job options used by the job are confirmed, and the validation result is stored in DtValidation. The details of the validation are stored in the variable DtStatus. Those items that can automatically be fixed are corrected. If the job options were modified in order to fix an issues, the updated job options are now contained in the variable $DtRepair. The updated job options are then applied to the job. The connections for the server object are then closed.
            <code>
            $DtServerObjectBeta = New-DtServer -Name beta -UserName domain\administrator -Password password
            $DtJobForAlpha = Get-DtJob -ServiceHost $DtServerObjectBeta | Where-Object {$_.Statistics.CoreConnectionDetails.SourceMachineName -eq $DtServerObjectAlpha}
            $DtValidation = Confirm-DtJobOptions -ServiceHost $DtServerObjectBeta -JobId $DtJobForAlpha.Id -JobOptions $DtJob.Options
            $DtStatus = Get-DtVerificationStatus -ServiceHost $DtServerObjectBeta -Token $DtValidation
            $DtRepair = Repair-DtJobOptions -ServiceHost $DtTarget -JobId $DtJob.Id -JobOptions $DtJob.Options -Step $DtStatus.Steps
            Edit-DtJob -ServiceHost $DtServerObjectBeta -JobId $DtJobForAlpha.Id -JobOptions $DtRepair.Options
            Disconnect-DtServer -ServiceHost $DtServerObjectBeta
            </code>
            </example>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.JobManagement.RepairJobOptionsCommand.JobId">
            <summary>
            Specify the job GUID returned from the New-DtJob cmdlet or the Id within the job information returned from the Get-DtJob cmdlet. 
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.JobManagement.RepairJobOptionsCommand.CreateOptions">
            <summary>
            Specify the create options available in DoubleTake.Jobs.Contract.CreateOptions. Use the Windows PowerShell New-Object cmdlet to create this object.
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.JobManagement.RepairJobOptionsCommand.Source">
            <summary>
            Specify the server object returned from the New-DtServer cmdlet. 
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.JobManagement.RepairJobOptionsCommand.JobType">
            <summary>
            Specify the type of job from the following list.
            ClusterAwareDTHV - Cluster-aware agentless Hyper-V job
            ClusterAwareExchange - Cluster-aware Exchange job
            ClusterAwareFilesAndFolders - Cluster-aware files and folders job
            ClusterAwareHV2V - Cluster-aware virtual to Hyper-V job
            ClusterAwareMultiSelectDthv - Cluster-aware agentless Hyper-V job
            ClusterAwareSql - Cluster-aware SQL job
            DataOnlyImageProtection - DR data protection job
            DataOnlyImageRecovery - DR data recovery job
            Diagnostics - Throughput Diagnostic Utility job
            DTHV - Agentless Hyper-V job
            Exchange - Exchange job
            FilesAndFolders - Files and folders job
            FullServerFailover - Full server job
            FullServerImageProtection - DR full server protection job
            FullServerImageRecovery - DR full server recovery job
            Legacy - GeoCluster jobs
            LinuxFullServerFailover - Full server for Linux job
            Lvra - Full server to ESX appliance job
            MoveDataOnlyMigration - Data migration job
            MoveServerMigration - Full server migration job
            MultiSelectDTHV - Agentless Hyper-V job
            OrphanedConnection - Old, orphaned connection (if Double-Take was uninstalled and then reinstalled on a target server or possibly after failover, depending on the state of your servers before failover occurred)
            SQL - SQL job
            UnmanagedConnection - Double-Take versions 5.2.x and earlier
            UVRA - Double-Take version 7.0.1 or earler full server to ESX appliance job
            V2V - V to ESX or V to Hyper-V job
            VRA - Full server to ESX or full server to Hyper-V job
            VraMove - Full server to ESX migration or full server to Hyper-V migration job
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.JobManagement.RepairJobOptionsCommand.JobOptions">
            <summary>
            Specify the JobOptions returned from the Get-DtRecommendedJobOptions cmdlet. 
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.JobManagement.RepairJobOptionsCommand.Step">
            <summary>
            Specify the verification steps returned by the Get-DtVerificationStatus cmdlet. 
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.JobManagement.RepairJobOptionsCommand.OtherServers">
            <summary>
            Specify the server object returned from the New-DtServer cmdlet. Specify multiple server objects in an array using the format @($server1, $server2).
            </summary>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.JobManagement.ResumeJobCommand">
            <summary>
            This cmdlet resumes a paused job. All jobs from the same source to the same IP address on the target will be resumed. For this cmdlet, the -ServiceHost should be your target server.
            </summary>
            <example>
            A server object is created for the server beta using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectBeta. The job(s) are retrieved from DtServerObjectBeta, but only the job information where the source machine name is equivalent to the name stored in the variable DtServerObjectAlpha is retrieved. That information is then stored in the variable DtJobForAlpha. The job is then resumed. The connections for the server object are then closed.
            <code>
            $DtServerObjectBeta = New-DtServer -Name beta -UserName domain\administrator -Password password
            $DtJobForAlpha = Get-DtJob -ServiceHost $DtServerObjectBeta | Where-Object {$_.Statistics.CoreConnectionDetails.SourceMachineName -eq $DtServerObjectAlpha} 
            Resume-DtJob -ServiceHost $DtServerObjectBeta -JobId $DtJobForAlpha.Id
            Disconnect-DtServer -ServiceHost $DtServerObjectBeta
            </code>
            </example>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.JobManagement.SetJobCredentialsCommand">
            <summary>
            Updates the credentials for the source, appliance, and VMware host servers used in the specified job.
            </summary>
            <example>
            You will be prompted for credentials for the domain\administrator account and they will be stored in DtCredentials. Then a server object is created for the servers alpha and beta using the stored credentials. The objects are stored in DtServerObjectAlpha and DtServerObjectBeta, respectively. The job(s) are retrieved from DtServerObjectBeta, but only the job information where the source machine name is equivalent to the name stored in the variable DtServerObjectAlpha is retrieved. That information is then stored in the variable DtJobForAlpha. Finally, the credentials are updated for the job using the stored credentials. The connections for the server object are then closed.
            <code>
            $DtCredentials = Get-Credential domain\administrator
            $DtServerObjectAlpha = New-DtServer -Name alpha -Credential $DtCredentials
            $DtServerObjectBeta = New-DtServer -Name beta -Credential $DtCredentials
            $DtJobForAlpha = Get-DtJob -ServiceHost $DtServerObjectBeta | Where-Object {$_.Statistics.CoreConnectionDetails.SourceMachineName -eq $DtServerObjectAlpha}
            Set-DtJobCredentials -ServiceHost $DtServerObjectBeta -JobId $DtJobForAlpha.Id -Source $DtCredentials -Target $DtCredentials
            Disconnect-DtServer -ServiceHost $DtServerObjectAlpha
            Disconnect-DtServer -ServiceHost $DtServerObjectBeta
            </code>
            </example>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.JobManagement.SetJobCredentialsCommand.Source">
            <summary>
            Specify the credential object returned from the Windows PowerShell Get-Credential cmdlet. This password will not be visible because Windows stores an encrypted password. 
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.JobManagement.SetJobCredentialsCommand.Target">
            <summary>
            Specify the credential object returned from the Windows PowerShell Get-Credential cmdlet. This password will not be visible because Windows stores an encrypted password. 
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.JobManagement.SetJobCredentialsCommand.OtherServers">
            <summary>
            Specify the server object returned from the New-DtServer or New-DtUvraServer cmdlet. Specify the server object in an array using the format @($server).
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.JobManagement.WaitActivityCommandBase.Token">
            <summary>
            Specify the confirm action object returned from the Confirm-DtJobOption cmdlet. 
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.JobManagement.WaitActivityCommandBase.Any">
            <summary>
            Only wait for the first validation to finish before continuing. 
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.JobManagement.WaitActivityCommandBase.Timeout">
            <summary>
            Specify the length of time, in seconds, to wait for the process to complete. For example, 120 would wait two minutes and then the next cmdlet would processed. If you set the timeout to zero (0), there is no timeout delay and the next cmdlet is immediately processed. If you do not specify a timeout parameter, the timeout will default to forever.
            </summary>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.JobManagement.SaveJobDiagnosticsCommand">
            <summary>
            Saves a diagnostics file (also known as DTInfo) to the \Service\Data directory of your Double-Take installation on the specified server. This cmdlet is not applicable to Exchange jobs, SQL jobs, full server to ESX appliance jobs, or agentless Hyper-V jobs. For this cmdlet, the -ServiceHost should be your target server.
            </summary>
            <example>
            A server object is created for the server beta using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectBeta. The job(s) are retrieved from DtServerObjectBeta, but only the job information where the source machine name is equivalent to the name stored in the variable DtServerObjectAlpha is retrieved. That information is then stored in the variable DtJobForAlpha. The diagnostics files is then saved on the server. The connections for the server object are then closed.
            <code>
            $DtServerObjectBeta = New-DtServer -Name beta -UserName domain\administrator -Password password
            $DtJobForAlpha = Get-DtJob -ServiceHost $DtServerObjectBeta | Where-Object {$_.Statistics.CoreConnectionDetails.SourceMachineName -eq $DtServerObjectAlpha} 
            Save-DtJobDiagnostics -Servicehost $DtServerObjectBeta -JobId $DtJobForAlpha.Id 
            Disconnect-DtServer -ServiceHost $DtServerObjectBeta
            </code>
            </example>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.JobManagement.SaveJobDiagnosticsCommand.JobId">
            <summary>
            Specify the job GUID returned from the New-DtJob cmdlet or the Id within the job information returned from the Get-DtJob cmdlet. 
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.JobManagement.SaveJobDiagnosticsCommand.JobInfo">
            <summary>
            Specify the job information returned from the Get-DtJob cmdlet. The job information can be piped from the Get-DtJob cmdlet and used in this cmdlet. 
            </summary>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.JobManagement.GetVerificationStatusCommand">
            <summary>
            This cmdlet returns the details and status of the validation performed by the Confirm-DtJobOptions cmdlet. Do not confuse this process with the verification process that confirms if the data between the source and target are synchronized. For this cmdlet, the -ServiceHost should be your target server.
            </summary>
            <example>
            A server object is created for the server beta using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectBeta. The job(s) are retrieved from DtServerObjectBeta, but only the job information where the source machine name is equivalent to the name stored in the variable DtServerObjectAlpha is retrieved. That information is then stored in the variable DtJobForAlpha. The job options used by the job are confirmed, and the validation result is stored in DtValidation. The details of the validation are stored in the variable DtStatus. The connections for the server object are then closed.
            <code>
            $DtServerObjectBeta = New-DtServer -Name beta -UserName domain\administrator -Password password
            $DtJobForAlpha = Get-DtJob -ServiceHost $DtServerObjectBeta | Where-Object {$_.Statistics.CoreConnectionDetails.SourceMachineName -eq $DtServerObjectAlpha}
            $DtValidation = Confirm-DtJobOptions -ServiceHost $DtServerObjectBeta -JobId $DtJobForAlpha.Id -JobOptions $DtJob.Options
            $DtStatus = Get-DtVerificationStatus -ServiceHost $DtServerObjectBeta -Token $DtValidation
            Disconnect-DtServer -ServiceHost $DtServerObjectBeta
            </code>
            </example>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.JobManagement.GetVerificationStatusCommand.Token">
            <summary>
            Specify the confirm action object returned from the Confirm-DtJobOption cmdlet. 
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.JobManagement.JobCommandBase.JobId">
            <summary>
            Specify the job GUID returned from the New-DtJob cmdlet or the Id within the job information returned from the Get-DtJob cmdlet. 
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.JobManagement.JobCommandBase.JobInfo">
            <summary>
            Specify the job information returned from the Get-DtJob cmdlet. The job information can be piped from the Get-DtJob cmdlet. 
            </summary>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.JobManagement.NewFilesAndFoldersJobCommand">
            <summary>
            This cmdlet creates a files and folders job on the specified server. For this cmdlet, the -ServiceHost should be your target server.
            </summary>
            <example>
            A server object is created for the server alpha using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectAlpha. A server object is created for the server beta using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectBeta. The script then creates a workload on the server for a files and folders job, returning a global unique ID for the workload, and assigns that ID to the variable DtWorkloadGuid. The workload definition for the workload type and the server is then stored in the DtWorkload variable. The recommended job options for the servers and the workload type are then stored in the variable DtJobOptions. A new files and folders job is created using the servers and the job options. The connections for the server object are then closed.
            <code>
            $DtServerObjectAlpha= New-DtServer -Name alpha -UserName domain\administrator -Password password
            $DtServerObjectBeta = New-DtServer -Name beta -UserName domain\administrator -Password password
            $DtWorkloadGuid = New-DtWorkload -ServiceHost $DtServerObjectAlpha -WorkloadTypeName FilesAndFolders
            $DtWorkload = Get-DtWorkload -ServiceHost $DtServerObjectAlpha -WorkloadId $DtWorkloadGuid
            $DtJobOptions = Get-DtRecommendedJobOptions -ServiceHost $DtServerObjectBeta -Source $DtServerObjectAlpha -JobType FilesAndFolders -Workload $DtWorkload
            New-DtFilesAndFoldersJob -ServiceHost $DtServerObjectBeta -Source $DtServerObjectAlpha -Path "C:\Data" -TargetPath "C:\Alpha\C" -Name "Alpha to Beta" -JobOptions $DtJobOptions.JobOptions
            Disconnect-DtServer -ServiceHost $DtServerObjectAlpha
            Disconnect-DtServer -ServiceHost $DtServerObjectBeta
            </code>
            </example>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.JobManagement.NewFilesAndFoldersJobCommand.Source">
            <summary>
            Specify the server object returned from the New-DtServer cmdlet. 
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.JobManagement.NewFilesAndFoldersJobCommand.Path">
            <summary>
            Specify the path on the source that contains the data that you want to protect.
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.JobManagement.NewFilesAndFoldersJobCommand.TargetPath">
            <summary>
            Specify the path on the target where you want to store the replica data from the source. By default, a one-to-one mapping will be used on the target, which means the replica source data will be stored in the same directory structure on the target.
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.JobManagement.NewFilesAndFoldersJobCommand.Name">
            <summary>
            Specify the name of the job.
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.JobManagement.NewFilesAndFoldersJobCommand.JobOptions">
            <summary>
            Specify the JobOptions returned from the Get-DtRecommendedJobOptions cmdlet. 
            </summary>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.JobManagement.EditJobCommand">
            <summary>
            This cmdlet allows you to edit an existing job that is stopped or running, using a JobOptions object that has been modified with your edited job settings. For this cmdlet, the -ServiceHost should be your target server.
            </summary>
            <example>
            A server object is created for the server beta using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectBeta. The job(s) are retrieved from DtServerObjectBeta, but only the job information where the source machine name is equivalent to the name stored in the variable DtServerObjectAlpha is retrieved. That information is then stored in the variable DtJobForAlpha. A job option is changed. In this case, the total time before failover is triggered is set to 10 minutes. Finally, the job options are used to edit the specified job. The connections for the server object are then closed.
            <code>
            $DtServerObjectBeta = New-DtServer -Name beta -UserName domain\administrator -Password password 
            $DtJobForAlpha = Get-DtJob -ServiceHost $DtServerObjectBeta | Where-Object {$_.Statistics.CoreConnectionDetails.SourceMachineName -eq $DtServerObjectAlpha}
            $DtJobForAlpha.Options.CoreMonitorOptions.TotalTimeAllowed="00:10:00"
            Edit-DtJob -ServiceHost $DtServerObjectBeta -JobId $DtJobForAlpha.Id -JobOptions $DtJobForAlpha.Options
            Disconnect-DtServer -ServiceHost $DtServerObjectBeta
            </code>
            </example>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.JobManagement.EditJobCommand.JobOptions">
            <summary>
            Specify the JobOptions returned from the Get-DtRecommendedJobOptions cmdlet. 
            </summary>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.JobManagement.StartJobFailbackCommand">
            <summary>
            This cmdlet starts failback for the specified job using the specified failback options. For this cmdlet, the -ServiceHost should be your target server.
            </summary>
            <example>
            A server object is created for the server beta using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectBeta. The job(s) are retrieved from DtServerObjectBeta, but only the job information where the source machine name is equivalent to the name stored in the variable DtServerObjectAlpha is retrieved. That information is then stored in the variable DtJobForAlpha. The failback options are stored in DtFailbackOptions. Failback is then started using the failback options. The connections for the server object are then closed.
            <code>
            $DtServerObjectBeta = New-DtServer -Name beta -UserName domain\administrator -Password password
            $DtJobForAlpha = Get-DtJob -ServiceHost $DtServerObjectBeta | Where-Object {$_.Statistics.CoreConnectionDetails.SourceMachineName -eq $DtServerObjectAlpha}
            $DtFailbackOptions = Get-DtRecommendedFailbackOptions -ServiceHost $DtServerObjectBeta -JobId $DtJobForAlpha.Id
            Start-DtJobFailback -ServiceHost $DtServerObjectBeta -JobId $DtJobForAlpha.Id -FailbackOptions $DtFailbackOptions
            Disconnect-DtServer -ServiceHost $DtServerObjectBeta
            </code>
            </example>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.JobManagement.StartJobFailbackCommand.FailbackOptions">
            <summary>
            Specify the failback options returned from the Get-DtRecommendedFailbackOptions cmdlet. 
            </summary>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.JobManagement.StartJobFailoverCommand">
            <summary>
            This cmdlet starts failover for the specified job using the specified failover options. For this cmdlet, the -ServiceHost should be your target server.
            </summary>
            <example>
            A server object is created for the server beta using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectBeta. The job(s) are retrieved from DtServerObjectBeta, but only the job information where the source machine name is equivalent to the name stored in the variable DtServerObjectAlpha is retrieved. That information is then stored in the variable DtJobForAlpha. The failover options are stored in DtFailoverOptions, and then the PerformTestFailover option is set to true. Failover is then started using the failover options. The connections for the server object are then closed.
            <code>
            $DtServerObjectBeta = New-DtServer -Name beta -UserName domain\administrator -Password password
            $DtJobForAlpha = Get-DtJob -ServiceHost $DtServerObjectBeta | Where-Object {$_.Statistics.CoreConnectionDetails.SourceMachineName -eq $DtServerObjectAlpha}
            $DtFailoverOptions = Get-DtRecommendedFailoverOptions -ServiceHost $DtServerObjectBeta -JobId $DtJobForAlpha.Id
            $DtFailoverOptions.FailoverOptions.PerformTestFailover = $true
            Start-DtJobFailover -ServiceHost $DtServerObjectBeta -JobId $DtJobForAlpha.Id -FailoverOptions $DtFailoverOptions.FailoverOptions
            Disconnect-DtServer -ServiceHost $DtServerObjectBeta
            </code>
            </example>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.JobManagement.StartJobFailoverCommand.FailoverOptions">
            <summary>
            Specify the failover options returned from the Get-DtRecommendedFailoverOptions cmdlet. 
            </summary>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.JobManagement.GetQualificationResultsCommand">
            <summary>
            This cmdlet returns the qualification results for the specified job type. You may want to use these results for job options when editing a job. For this cmdlet, the -ServiceHost should be your target server.
            </summary>
            <example>
            A server object is created for the server beta using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectBeta. The job(s) are retrieved from DtServerObjectBeta, but only the job information where the source machine name is equivalent to the name stored in the variable DtServerObjectAlpha is retrieved. That information is then stored in the variable DtJobForAlpha. The qualification results for the job are then returned. The connections for the server object are then closed.
            <code>
            $DtServerObjectBeta = New-DtServer -Name beta -UserName domain\administrator -Password password
            $DtJobForAlpha = Get-DtJob -ServiceHost $DtServerObjectBeta | Where-Object {$_.Statistics.CoreConnectionDetails.SourceMachineName -eq $DtServerObjectAlpha}
            Get-DtQualificationResults -ServiceHost $DtServerObjectBeta -JobId $DtJobForAlpha.Id
            Disconnect-DtServer -ServiceHost $DtServerObjectBeta
            </code>
            </example>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.JobManagement.GetRecommendedFailbackOptionsCommand">
            <summary>
            This cmdlet returns the recommended failback options for the specified job on the specified server. For this cmdlet, the -ServiceHost should be your target server.
            </summary>
            <example>
            A server object is created for the server beta using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectBeta. The job(s) are retrieved from DtServerObjectBeta, but only the job information where the source machine name is equivalent to the name stored in the variable DtServerObjectAlpha is retrieved. That information is then stored in the variable DtJobForAlpha. Then the recommended failback options for the specified job and server are returned. The connections for the server object are then closed.
            <code>
            $DtServerObjectBeta = New-DtServer -Name beta -UserName domain\administrator -Password password
            $DtJobForAlpha = Get-DtJob -ServiceHost $DtServerObjectBeta | Where-Object {$_.Statistics.CoreConnectionDetails.SourceMachineName -eq $DtServerObjectAlpha}
            Get-DtRecommendedFailbackOptions -ServiceHost $DtServerObjectBeta -JobId $DtJobForAlpha.Id
            Disconnect-DtServer -ServiceHost $DtServerObjectBeta
            </code>
            </example>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.JobManagement.GetRecommendedFailoverOptionsCommand">
            <summary>
            This cmdlet returns the recommended failover options for the specified job on the specified server. For this cmdlet, the -ServiceHost should be your target server.
            </summary>
            <example>
            A server object is created for the server beta using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectBeta. The job(s) are retrieved from DtServerObjectBeta, but only the job information where the source machine name is equivalent to the name stored in the variable DtServerObjectAlpha is retrieved. That information is then stored in the variable DtJobForAlpha. Then the recommended failover options for the specified job and server are returned. The connections for the server object are then closed.
            <code>
            $DtServerObjectBeta = New-DtServer -Name beta -UserName domain\administrator -Password password
            $DtJobForAlpha = Get-DtJob -ServiceHost $DtServerObjectBeta | Where-Object {$_.Statistics.CoreConnectionDetails.SourceMachineName -eq $DtServerObjectAlpha}
            Get-DtRecommendedFailoverOptions -ServiceHost $DtServerObjectBeta -JobId $DtJobForAlpha.Id
            Disconnect-DtServer -ServiceHost $DtServerObjectBeta
            </code>
            </example>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.JobManagement.GetRecommendedJobOptionsCommand">
            <summary>
            This cmdlet returns the recommended job options for the specified job type. For this cmdlet, the -ServiceHost should be your target server.
            </summary>
            <example>
            A server object is created for the server alpha using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectAlpha. A server object is created for the server beta using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectBeta. The script then creates a workload on the server for a files and folders job, returning a global unique ID for the workload, and assigns that ID to the variable DtWorkloadGuid. The workload definition for the workload type and the server is then stored in the DtWorkload variable. The recommended job options for the servers and the workload type are then stored in the variable DtJobOptions. The connections for the server object are then closed.
            <code>
            $DtServerObjectAlpha= New-DtServer -Name alpha -UserName domain\administrator -Password password
            $DtServerObjectBeta = New-DtServer -Name beta -UserName domain\administrator -Password password
            $DtWorkloadGuid = New-DtWorkload -ServiceHost $DtServerObjectAlpha -WorkloadTypeName FilesAndFolders
            $DtWorkload = Get-DtWorkload -ServiceHost $DtServerObjectAlpha -WorkloadId $DtWorkloadGuid
            $DtJobOptions = Get-DtRecommendedJobOptions -ServiceHost $DtServerObjectBeta -Source $DtServerObjectAlpha -JobType FilesAndFolders -Workload $DtWorkload
            Disconnect-DtServer -ServiceHost $DtServerObjectAlpha
            Disconnect-DtServer -ServiceHost $DtServerObjectBeta
            </code>
            </example>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.JobManagement.GetRecommendedJobOptionsCommand.Source">
            <summary>
            Specify the server object returned from the New-DtServer cmdlet. 
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.JobManagement.GetRecommendedJobOptionsCommand.JobType">
            <summary>
            Specify the type of job from the following list.
            ClusterAwareDTHV - Cluster-aware agentless Hyper-V job
            ClusterAwareExchange - Cluster-aware Exchange job
            ClusterAwareFilesAndFolders - Cluster-aware files and folders job
            ClusterAwareHV2V - Cluster-aware virtual to Hyper-V job
            ClusterAwareMultiSelectDthv - Cluster-aware agentless Hyper-V job
            ClusterAwareSql - Cluster-aware SQL job
            DataOnlyImageProtection - DR data protection job
            DataOnlyImageRecovery - DR data recovery job
            Diagnostics - Throughput Diagnostic Utility job
            DTHV - Agentless Hyper-V job
            Exchange - Exchange job
            FilesAndFolders - Files and folders job
            FullServerFailover - Full server job
            FullServerImageProtection - DR full server protection job
            FullServerImageRecovery - DR full server recovery job
            Legacy - GeoCluster jobs
            LinuxFullServerFailover - Full server for Linux job
            Lvra - Full server to ESX appliance job
            MoveDataOnlyMigration - Data migration job
            MoveServerMigration - Full server migration job
            MultiSelectDTHV - Agentless Hyper-V job
            OrphanedConnection - Old, orphaned connection (if Double-Take was uninstalled and then reinstalled on a target server or possibly after failover, depending on the state of your servers before failover occurred)
            SQL - SQL job
            UnmanagedConnection - Double-Take versions 5.2.x and earlier
            UVRA - Double-Take version 7.0.1 or earler full server to ESX appliance job
            V2V - V to ESX or V to Hyper-V job
            VRA - Full server to ESX or full server to Hyper-V job
            VraMove - Full server to ESX migration or full server to Hyper-V migration job
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.JobManagement.GetRecommendedJobOptionsCommand.Workload">
            <summary>
            Specify the workload object returned from the Get-DtWorkload cmdlet. 
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.JobManagement.GetRecommendedJobOptionsCommand.OtherServers">
            <summary>
            Specify the server object returned from the New-DtServer cmdlet. Specify multiple server objects in an array using the format @($server1, $server2).
            </summary>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.JobManagement.GetRecommendedRestoreOptionsCommand">
            <summary>
            Returns the recommended restoration options for the specified job on the specified server. For this cmdlet, the -ServiceHost should be your target server.
            </summary>
            <example>
            A server object is created for the server alpha using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectAlpha. A server object is created for the server beta using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectBeta. The job(s) are retrieved from DtServerObjectBeta, but only the job information where the source machine name is equivalent to the name stored in the variable DtServerObjectAlpha is retrieved. That information is then stored in the variable DtJobForAlpha. Then the recommended restore options for the specified job and server are returned. The connections for the server object are then closed.
            <code>
            $DtServerObjectAlpha= New-DtServer -Name alpha -UserName domain\administrator -Password password
            $DtServerObjectBeta = New-DtServer -Name beta -UserName domain\administrator -Password password
            $DtJobForAlpha = Get-DtJob -ServiceHost $DtServerObjectBeta | Where-Object {$_.Statistics.CoreConnectionDetails.SourceMachineName -eq $DtServerObjectAlpha}
            Get-DtRecommendedRestoreOptions -ServiceHost $DtServerObjectBeta -JobId $DtJobForAlpha.Id -RestoreTarget $DtServerObjectAlpha
            Disconnect-DtServer -ServiceHost $DtServerObjectAlpha
            Disconnect-DtServer -ServiceHost $DtServerObjectBeta
            </code>
            </example>
            <example>
            If you want to clear the restore required flag, save your recommended restore options to a variable and then set ClearRestoreRequired to true.
            <code>
            $DtRecommendedRestoreOptions = Get-DtRecommendedRestoreOptions -ServiceHost
            $DtServerObjectBeta -JobId $DtJobForAlpha.Id -RestoreTarget $DtServerObjectAlpha -RequestCanClearRestoreRequired
            $DtRestoreOptions = $DtRecommendedRestoreOptions.RestoreOptions
            $DtRestoreOptions.ClearRestoreRequired = $true
            </code>
            </example>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.JobManagement.GetRecommendedRestoreOptionsCommand.RestoreTarget">
            <summary>
            Specify the server you wan to restore to. If you do not specify a server, the original source server will be used.
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.JobManagement.GetRecommendedRestoreOptionsCommand.RequestCanClearRestoreRequired">
            <summary>
            Sets RecommendedRestoreOptions.CanClearRestoreRequired on the RecommendedRestoreOptions object based on whether it is supported by the current job state. You still need to set ClearRestoreRequired on RestoreOptions to clear the restore required state of a job.
            </summary>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.JobManagement.GetJobCommand">
            <summary>
            Returns job information and status for the specified job on the specified server. To change the options of an existing job, use Edit-DtJob. For this cmdlet, the -ServiceHost should be your target server.
            </summary>
            <example>
            A server object is created for the server alpha using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectAlpha. A server object is created for the server beta using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectBeta. The script then creates a workload on the server for a files and folders job, returning a global unique ID for the workload, and assigns that ID to the variable DtWorkloadGuid. The workload definition for the workload type and the server is then stored in the DtWorkload variable. The recommended job options for the servers and the workload type are then stored in the variable DtJobOptions. A new files and folders job is created using the servers and the job options. The job ID is stored in the variable DtFnFJobGuid. Finally, the job information for the job is stored in the variable DtJobInfo. The connections for the server object are then closed.
            <code>
            $DtServerObjectAlpha= New-DtServer -Name alpha -UserName domain\administrator -Password password
            $DtServerObjectBeta = New-DtServer -Name beta -UserName domain\administrator -Password password
            $DtWorkloadGuid = New-DtWorkload -ServiceHost $DtServerObjectAlpha -WorkloadTypeName FilesAndFolders
            $DtWorkload = Get-DtWorkload -ServiceHost $DtServerObjectAlpha -WorkloadId $DtWorkloadGuid
            $DtJobOptions = Get-DtRecommendedJobOptions -ServiceHost $DtServerObjectBeta -Source $DtServerObjectAlpha -JobType FilesAndFolders -Workload $DtWorkload
            $DtFnFJobGuid = New-DtJob -ServiceHost $DtServerObjectBeta -Source $DtServerObjectAlpha -JobType FilesAndFolders -JobOptions $DtJobOptions.JobOptions
            $DtJobInfo = Get-DtJob -ServiceHost $DtServerObjectBeta -JobId $DtFnFJobGuid
            Disconnect-DtServer -ServiceHost $DtServerObjectAlpha
            Disconnect-DtServer -ServiceHost $DtServerObjectBeta
            </code>
            </example>
            <example>
            A server object is created for the server beta using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectBeta. All job information for all of the jobs on the server beta are stored in the variable DtJobInfo. This type of usage is common when the jobs were created in the past or if you did not store or do not know a job's ID. The connections for the server object are then closed.
            <code>
            $DtServerObjectBeta = New-DtServer -Name beta -UserName domain\administrator -Password password
            $DtJobInfo = Get-DtJob -ServiceHost $DtServerObjectBeta
            Disconnect-DtServer -ServiceHost $DtServerObjectBeta
            </code>
            </example>
            <example>
            A server object is created for the server beta using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectBeta. The job(s) are retrieved from DtServerObjectBeta, but only the job information where the source machine name is equivalent to the name stored in the variable DtServerObjectAlpha is retrieved. That information is then stored in the variable DtJobForAlpha. This usage is common for servers that have more than one job, but you only want job information for one specific job. The connections for the server object are then closed.
            <code>
            $DtServerObjectBeta = New-DtServer -Name beta -UserName domain\administrator -Password password
            $DtJobForAlpha = Get-DtJob -ServiceHost $DtServerObjectBeta | Where-Object {$_.Statistics.CoreConnectionDetails.SourceMachineName -eq $DtServerObjectAlpha}
            Disconnect-DtServer -ServiceHost $DtServerObjectBeta
            </code>
            </example>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.JobManagement.GetJobCommand.JobId">
            <summary>
            Specify the job GUID returned from the New-DtJob cmdlet. Specify multiple GUID objects in an array using the format @($JobGuid1, $JobGuid2).
            </summary>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.JobManagement.SuspendJobCommand">
            <summary>
            This cmdlet paused a job. All jobs from the same source to the same IP address on the target will be paused. For this cmdlet, the -ServiceHost should be your target server.
            </summary>
            <example>
            A server object is created for the server beta using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectBeta. The job(s) are retrieved from DtServerObjectBeta, but only the job information where the source machine name is equivalent to the name stored in the variable DtServerObjectAlpha is retrieved. That information is then stored in the variable DtJobForAlpha. The job is then suspended. The connections for the server object are then closed.
            <code>
            $DtServerObjectBeta = New-DtServer -Name beta -UserName domain\administrator -Password password
            $DtJobForAlpha = Get-DtJob -ServiceHost $DtServerObjectBeta | Where-Object {$_.Statistics.CoreConnectionDetails.SourceMachineName -eq $DtServerObjectAlpha} 
            Suspend-DtJob -ServiceHost $DtServerObjectBeta -JobId $DtJobForAlpha.Id
            Disconnect-DtServer -ServiceHost $DtServerObjectBeta
            </code>
            </example>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.JobManagement.RemoveJobCommand">
            <summary>
            This cmdlet deletes the specified job from the specified server. A running job will be stopped before it is deleted. For this cmdlet, the -ServiceHost should be your target server.
            </summary>
            <example>
            A server object is created for the server beta using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectBeta. The job(s) are retrieved from DtServerObjectBeta, but only the job information where the source machine name is equivalent to the name stored in the variable DtServerObjectAlpha is retrieved. That information is then stored in the variable DtJobForAlpha. The delete options are stored in DtDeleteOptions, then the specific delete option DiscardTargetQueue is set to true. Finally the job is removed using the delete options. The connections for the server object are then closed.
            <code>
            $DtServerObjectBeta = New-DtServer -Name beta -UserName domain\administrator -Password password
            $DtJobForAlpha = Get-DtJob -ServiceHost $DtServerObjectBeta | Where-Object {$_.Statistics.CoreConnectionDetails.SourceMachineName -eq $DtServerObjectAlpha}
            $DtDeleteOptions = New-Object DoubleTake.Jobs.Contract.DeleteOptions 
            $DtDeleteOptions.DiscardTargetQueue = $true
            Remove-DtJob -ServiceHost $DtServerObjectBeta -JobId $DtJobForAlpha.Id -DeleteOptions $DtDeleteOptions
            Disconnect-DtServer -ServiceHost $DtServerObjectBeta
            </code>
            </example>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.JobManagement.RemoveJobCommand.DeleteOptions">
            <summary>
            Specify the delete options available in DoubleTake.Jobs.Contract.DeleteOptions. Use the Windows PowerShell New-Object cmdlet to create this object.
            </summary>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.JobManagement.NewJobCommand">
            <summary>
            This cmdlet creates the specified job type on the specified server. For this cmdlet, the -ServiceHost should be your target server.
            </summary>
            <example>
            A server object is created for the server alpha using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectAlpha. A server object is created for the server beta using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectBeta. The script then creates a workload on the server for a files and folders job, returning a global unique ID for the workload, and assigns that ID to the variable DtWorkloadGuid. The workload definition for the workload type and the server is then stored in the DtWorkload variable. The recommended job options for the servers and the workload type are then stored in the variable DtJobOptions. A new files and folders job is created using the servers and the job options. The job ID is stored in the variable DtFnFJobGuid. The connections for the server object are then closed.
            <code>
            $DtServerObjectAlpha= New-DtServer -Name alpha -UserName domain\administrator -Password password
            $DtServerObjectBeta = New-DtServer -Name beta -UserName domain\administrator -Password password
            $DtWorkloadGuid = New-DtWorkload -ServiceHost $DtServerObjectAlpha -WorkloadTypeName FilesAndFolders
            $DtWorkload = Get-DtWorkload -ServiceHost $DtServerObjectAlpha -WorkloadId $DtWorkloadGuid
            $DtJobOptions = Get-DtRecommendedJobOptions -ServiceHost $DtServerObjectBeta -Source $DtServerObjectAlpha -JobType FilesAndFolders -Workload $DtWorkload
            $DtFnFJobGuid = New-DtJob -ServiceHost $DtServerObjectBeta -Source $DtServerObjectAlpha -JobType FilesAndFolders -JobOptions $DtJobOptions.JobOptions
            Disconnect-DtServer -ServiceHost $DtServerObjectAlpha 
            Disconnect-DtServer -ServiceHost $DtServerObjectBeta
            </code>
            </example>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.JobManagement.NewJobCommand.Source">
            <summary>
            Specify the server object returned from the New-DtServer cmdlet. 
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.JobManagement.NewJobCommand.JobType">
            <summary>
            Specify the type of job from the following list.
            ClusterAwareDTHV - Cluster-aware agentless Hyper-V job
            ClusterAwareExchange - Cluster-aware Exchange job
            ClusterAwareFilesAndFolders - Cluster-aware files and folders job
            ClusterAwareHV2V - Cluster-aware virtual to Hyper-V job
            ClusterAwareMultiSelectDthv - Cluster-aware agentless Hyper-V job
            ClusterAwareSql - Cluster-aware SQL job
            DataOnlyImageProtection - DR data protection job
            DataOnlyImageRecovery - DR data recovery job
            Diagnostics - Throughput Diagnostic Utility job
            DTHV - Agentless Hyper-V job
            Exchange - Exchange job
            FilesAndFolders - Files and folders job
            FullServerFailover - Full server job
            FullServerImageProtection - DR full server protection job
            FullServerImageRecovery - DR full server recovery job
            Legacy - GeoCluster jobs
            LinuxFullServerFailover - Full server for Linux job
            Lvra - Full server to ESX appliance job
            MoveDataOnlyMigration - Data migration job
            MoveServerMigration - Full server migration job
            MultiSelectDTHV - Agentless Hyper-V job
            OrphanedConnection - Old, orphaned connection (if Double-Take was uninstalled and then reinstalled on a target server or possibly after failover, depending on the state of your servers before failover occurred)
            SQL - SQL job
            UnmanagedConnection - Double-Take versions 5.2.x and earlier
            UVRA - Double-Take version 7.0.1 or earler full server to ESX appliance job
            V2V - V to ESX or V to Hyper-V job
            VRA - Full server to ESX or full server to Hyper-V job
            VraMove - Full server to ESX migration or full server to Hyper-V migration job
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.JobManagement.NewJobCommand.JobOptions">
            <summary>
            Specify the JobOptions returned from the Get-DtRecommendedJobOptions cmdlet. 
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.JobManagement.NewJobCommand.OtherServers">
            <summary>
            Specify the server object returned from the New-DtServer cmdlet. Specify multiple server objects in an array using the format @($server1, $server2).
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.JobManagement.NewJobCommand.CreateOptions">
            <summary>
            Specify the create options available in DoubleTake.Jobs.Contract.CreateOptions. Use the Windows PowerShell New-Object cmdlet to create this object.
            </summary>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.JobManagement.StartJobRestoreCommand">
            <summary>
            This cmdlet starts the restoration process for the specified job using the specified restoration options. For this cmdlet, the -ServiceHost should be your target server.
            </summary>
            <example>
            A server object is created for the server alpha using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectAlpha. A server object is created for the server beta using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectBeta. The job(s) are retrieved from DtServerObjectBeta, but only the job information where the source machine name is equivalent to the name stored in the variable DtServerObjectAlpha is retrieved. That information is then stored in the variable DtJobForAlpha. The restoration options are stored in DtRestoreOptions, and then the ProcessOrphans option is set to true. Restoration is then started using the restoration options. The connections for the server object are then closed.
            <code>
            $DtServerObjectAlpha= New-DtServer -Name alpha -UserName domain\administrator -Password password
            $DtServerObjectBeta = New-DtServer -Name beta -UserName domain\administrator -Password password
            $DtJobForAlpha = Get-DtJob -ServiceHost $DtServerObjectBeta | Where-Object {$_.Statistics.CoreConnectionDetails.SourceMachineName -eq $DtServerObjectAlpha}
            $DtRestoreOptions = Get-DtRecommendedRestoreOptions -ServiceHost $DtServerObjectBeta -JobId $DtJobForAlpha.Id -RestoreTarget $DtServerObjectAlpha
            $DtRestoreOptions.RestoreOptions.RestoreParameters.ProcessOrphans = $true
            Start-DtJobRestore -ServiceHost $DtServerObjectBeta -JobId $DtJobForAlpha.Id -RestoreOptions $DtRestoreOptions
            Disconnect-DtServer -ServiceHost $DtServerObjectAlpha
            Disconnect-DtServer -ServiceHost $DtServerObjectBeta
            </code>
            </example>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.JobManagement.StartJobRestoreCommand.RestoreOptions">
            <summary>
            Specify the restoration options returned from the Get-DtRecommendedRestoreOptions cmdlet. 
            </summary>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.JobManagement.StartJobReverseCommand">
            <summary>
            This cmdlet starts the reverse process for the specified job. For this cmdlet, the -ServiceHost should be your target server.
            </summary>
            <example>
            A server object is created for the server beta using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectBeta. The job(s) are retrieved from DtServerObjectBeta, but only the job information where the source machine name is equivalent to the name stored in the variable DtServerObjectAlpha is retrieved. That information is then stored in the variable DtJobForAlpha. The job is then reversed. The connections for the server object are then closed.
            <code>
            $DtServerObjectBeta = New-DtServer -Name beta -UserName domain\administrator -Password password
            $DtJobForAlpha = Get-DtJob -ServiceHost $DtServerObjectBeta | Where-Object {$_.Statistics.CoreConnectionDetails.SourceMachineName -eq $DtServerObjectAlpha} 
            Start-DtJobReverse -ServiceHost $DtServerObjectBeta -JobId $DtJobForAlpha.Id
            Disconnect-DtServer -ServiceHost $DtServerObjectBeta
            </code>
            </example>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.JobManagement.StartJobCommand">
            <summary>
            This cmdlet starts the specified job. For this cmdlet, the -ServiceHost should be your target server.
            </summary>
            <example>
            A server object is created for the server beta using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectBeta. The job(s) are retrieved from DtServerObjectBeta, but only the job information where the source machine name is equivalent to the name stored in the variable DtServerObjectAlpha is retrieved. That information is then stored in the variable DtJobForAlpha. The job is then started. The connections for the server object are then closed.
            <code>
            $DtServerObjectBeta = New-DtServer -Name beta -UserName domain\administrator -Password password
            $DtJobForAlpha = Get-DtJob -ServiceHost $DtServerObjectBeta | Where-Object {$_.Statistics.CoreConnectionDetails.SourceMachineName -eq $DtServerObjectAlpha} 
            Start-DtJob -ServiceHost $DtServerObjectBeta -JobId $DtJobForAlpha.Id
            Disconnect-DtServer -ServiceHost $DtServerObjectBeta
            </code>
            </example>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.JobManagement.StopJobCommand">
            <summary>
            This cmdlet stops the specified job. For this cmdlet, the -ServiceHost should be your target server.
            </summary>
            <example>
            A server object is created for the server beta using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectBeta. The job(s) are retrieved from DtServerObjectBeta, but only the job information where the source machine name is equivalent to the name stored in the variable DtServerObjectAlpha is retrieved. That information is then stored in the variable DtJobForAlpha. The job is then stopped. The connections for the server object are then closed.
            <code>
            $DtServerObjectBeta = New-DtServer -Name beta -UserName domain\administrator -Password password
            $DtJobForAlpha = Get-DtJob -ServiceHost $DtServerObjectBeta | Where-Object {$_.Statistics.CoreConnectionDetails.SourceMachineName -eq $DtServerObjectAlpha} 
            Stop-DtJob -ServiceHost $DtServerObjectBeta -JobId $DtJobForAlpha.Id
            Disconnect-DtServer -ServiceHost $DtServerObjectBeta
            </code>
            </example>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.JobManagement.UndoFailoverUnifiedJobCommand">
            <summary>
            This cmdlet starts the undo failover process for the specified job. For this cmdlet, the -ServiceHost should be your target server.
            </summary>
            <example>
            A server object is created for the server beta using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectBeta. The job(s) are retrieved from DtServerObjectBeta, but only the job information where the source machine name is equivalent to the name stored in the variable DtServerObjectAlpha is retrieved. That information is then stored in the variable DtJobForAlpha. The undo failover process is then started. The connections for the server object are then closed.
            <code>
            $DtServerObjectBeta = New-DtServer -Name beta -UserName domain\administrator -Password password
            $DtJobForAlpha = Get-DtJob -ServiceHost $DtServerObjectBeta | Where-Object {$_.Statistics.CoreConnectionDetails.SourceMachineName -eq $DtServerObjectAlpha} 
            Undo-DtJobFailover -ServiceHost $DtServerObjectBeta -JobId $DtJobForAlpha.Id
            Disconnect-DtServer -ServiceHost $DtServerObjectBeta
            </code>
            </example>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.JobManagement.ConfirmJobOptionsCommand">
            <summary>
            This cmdlet starts the job validation process, confirming the job options returned from the Get-DtRecommendedJobOptions cmdlet are compatible with the source and target servers you are using. View the details of the validation by using Get-DtVerificationStatus. Do not confuse this process with the verification process that confirms if the data between the source and target are synchronized. For this cmdlet, the -ServiceHost should be your target server.
            </summary>
            <example>
            A server object is created for the server beta using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectBeta. The job(s) are retrieved from DtServerObjectBeta, but only the job information where the source machine name is equivalent to the name stored in the variable DtServerObjectAlpha is retrieved. That information is then stored in the variable DtJobForAlpha. The job options used by the job are confirmed, and the validation result is stored in DtValidation. The connections for the server object are then closed.
            <code>
            $DtServerObjectBeta = New-DtServer -Name beta -UserName domain\administrator -Password password
            $DtJobForAlpha = Get-DtJob -ServiceHost $DtServerObjectBeta | Where-Object {$_.Statistics.CoreConnectionDetails.SourceMachineName -eq $DtServerObjectAlpha}
            $DtValidation = Confirm-DtJobOptions -ServiceHost $DtServerObjectBeta -JobId $DtJobForAlpha.Id -JobOptions $DtJob.Options
            Disconnect-DtServer -ServiceHost $DtServerObjectBeta
            </code>
            </example>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.JobManagement.ConfirmJobOptionsCommand.JobId">
            <summary>
            Specify the job GUID returned from the New-DtJob cmdlet or the Id within the job information returned from the Get-DtJob cmdlet. 
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.JobManagement.ConfirmJobOptionsCommand.Source">
            <summary>
            Specify the server object returned from the New-DtServer cmdlet. 
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.JobManagement.ConfirmJobOptionsCommand.JobType">
            <summary>
            Specify the type of job from the following list.
            ClusterAwareDTHV - Cluster-aware agentless Hyper-V job
            ClusterAwareExchange - Cluster-aware Exchange job
            ClusterAwareFilesAndFolders - Cluster-aware files and folders job 
            ClusterAwareHV2V - Cluster-aware virtual to Hyper-V job
            ClusterAwareMultiSelectDthv - Cluster-aware agentless Hyper-V job
            ClusterAwareSql - Cluster-aware SQL job
            DataOnlyImageProtection - DR data protection job
            DataOnlyImageRecovery - DR data recovery job
            Diagnostics - Throughput Diagnostic Utility job
            DTHV - Agentless Hyper-V job
            Exchange - Exchange job
            FilesAndFolders - Files and folders job
            FullServerFailover - Full server job
            FullServerImageProtection - DR full server protection job
            FullServerImageRecovery - DR full server recovery job
            Legacy - GeoCluster jobs
            LinuxFullServerFailover - Full server for Linux job
            Lvra - Full server to ESX appliance job
            MoveDataOnlyMigration - Data migration job
            MoveServerMigration - Full server migration job
            MultiSelectDTHV - Agentless Hyper-V job
            OrphanedConnection - Old, orphaned connection (if Double-Take was uninstalled and then reinstalled on a target server or possibly after failover, depending on the state of your servers before failover occurred)
            SQL - SQL job
            UnmanagedConnection - Double-Take versions 5.2.x and earlier 
            UVRA - Double-Take version 7.0.1 or earler full server to ESX appliance job
            V2V - V to ESX or V to Hyper-V job
            VRA - Full server to ESX or full server to Hyper-V job
            VraMove - Full server to ESX migration or full server to Hyper-V migration job
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.JobManagement.ConfirmJobOptionsCommand.JobOptions">
            <summary>
            Specify the JobOptions returned from the Get-DtRecommendedJobOptions cmdlet. 
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.JobManagement.ConfirmJobOptionsCommand.OtherServers">
            <summary>
            Specify the server object returned from the New-DtServer cmdlet. Specify multiple server objects in an array using the format @($server1, $server2).
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.JobManagement.ConfirmJobOptionsCommand.CreateOptions">
            <summary>
            Specify the create options available in DoubleTake.Jobs.Contract.CreateOptions. Use the Windows PowerShell New-Object cmdlet to create this object.
            </summary>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.Licensing.GetOnlineActivationRequestCommand">
            <summary>
            This cmdlet returns server information, unique to a specific, single server that is required to activate a Double-Take license. The server must already have an activation code on the server in order to get the server information.  For this cmdlet, the -ServiceHost could be your source or target server.
            </summary>
            <example>
            A server object is created for the server alpha using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectAlpha. The server information for the online activation process is returned. The connections for the server object are then closed.
            <code>
            $DtServerObjectAlpha= New-DtServer -Name alpha -UserName domain\administrator -Password password
            Get-DtOnlineActivationRequest -ServiceHost $DtServerObjectAlpha
            Disconnect-DtServer -ServiceHost $DtServerObjectAlpha
            </code>
            </example>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.Licensing.RequestOnlineDeactivationCommand">
            <summary>
            This cmdlet deactivates the Double-Take license over the Internet for the specified server. For this cmdlet, the -ServiceHost should be your target server.
            </summary>
            <example>
            A server object is created for the server alpha using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectAlpha. The license for that server is deactivated. The connections for the server object are then closed.
            <code>
            $DtServerObjectAlpha= New-DtServer -Name alpha -UserName domain\administrator -Password password
            Request-DtOnlineDectivation -ServerName $DtServerObjectAlpha
            Disconnect-DtServer -ServiceHost $DtServerObjectAlpha
            </code>
            </example>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.Licensing.RequestOnlineDeactivationCommand.ServiceHost">
            <summary>
            Specify the server object returned from the New-DtServer cmdlet. 
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.Licensing.RequestOnlineDeactivationCommand.EmailAddress">
            <summary>
            Specify a valid email address.
            </summary>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.Licensing.RequestOnlineActivationCommand">
            <summary>
            This cmdlet activates the Double-Take license over the Internet using the server information returned by the Get-DtOnlineActivationRequest cmdlet. For this cmdlet, the -ServiceHost should be your target server.
            </summary>
            <example>
            server object is created for the server alpha using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectAlpha. The server information for the online activation process is returned. The license is activated online. The connections for the server object are then closed. 
            <code>
            $DtServerObjectAlpha= New-DtServer -Name alpha -UserName domain\administrator -Password password
            Get-DtOnlineActivationRequest -ServiceHost $DtServerObjectAlpha
            Request-DtOnlineActivation -Code 1234-5678-9012-3456-7890-1234 -ServerName $DtServerObjectAlpha -ServerInformation thnvkg9anmtjr5y27qgzhrmvqqbhyr5f7152pecq
            Disconnect-DtServer -ServiceHost $DtServerObjectAlpha
            </code>
            </example>
            <example>
            A server object is created for the server alpha using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectAlpha. The server information for the online activation process is returned. The output from the Get-DtOnlineActivationRequest cmdlet is piped directly to Request-DtOnlineActivation, which activates the license online, and then that output (from Request-DtOnlineActivation) is piped directory to Set-DtActivationCode to set the activation key on the server.The connections for the server object are then closed.
            <code>
            $DtServerObjectAlpha= New-DtServer -Name alpha -UserName domain\administrator -Password password
            Get-DtOnlineActivationRequest -ServiceHost $DtServerObjectAlpha | Request-DtOnlineActivation | Set-DtActivationCode
            Disconnect-DtServer -ServiceHost $DtServerObjectAlpha
            </code>
            </example>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.Licensing.RequestOnlineActivationCommand.Code">
            <summary>
            Specify the 24-character, alpha-numeric license key which applies the appropriate Double-Take license to your Double-Take server. Specify multiple codes in an array using the format @(code1, code2). You can also use the code that is returned by the Get-DtOnlineActivationRequest cmdlet.
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.Licensing.RequestOnlineActivationCommand.ServerName">
            <summary>
            Specify the name of the server or use the server name returned by the Get-DtOnlineActivationRequest cmdlet.
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.Licensing.RequestOnlineActivationCommand.ServerInformation">
            <summary>
            Specify the server information returned by the Get-DtOnlineActivationRequest cmdlet.
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.Licensing.RequestOnlineActivationCommand.ServiceHost">
            <summary>
            Specify the server object returned from the New-DtServer cmdlet. 
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.Licensing.RequestOnlineActivationCommand.EmailAddress">
            <summary>
            Specify a valid email address.
            </summary>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.DisconnectServerCommand">
            <summary>
            This cmdlet closes all WCF (Windows Communication Foundation) connections that have been opened during use of the server object. For this cmdlet, the -ServiceHost could be your source or target server.
            </summary>
            <example>
            A server object is created for the server alpha using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectAlpha. The connections for the server object are then closed.
            <code>
            $DtServerObjectAlpha = New-DtServer -Name alpha -UserName domain\administrator -Password password
            Disconnect-DtServer -ServiceHost $DtServerObjectAlpha
            </code>
            </example>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.CommandBase.ServiceHost">
            <summary>
            Specify the server object returned from the New-DtServer cmdlet. 
            </summary>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.NewUvraServerCommand">
            <summary>
            This cmdlet creates a server object with specific credentials associated with it. This cmdlet is specific to the full server to ESX appliance job type. The server object may be one of the following types of servers: Double-Take server, virtual recovery appliance, or VMware host. The object is used to communicate with the Double-Take Management Service.
            </summary>
            <example>
            A server object is created for the server alpha using port 6325 and the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObject. The connections for the server object are then closed.
            <code>
            $DtServerObjectAlpha= New-DtUvraServer -Name alpha -UserName domain\administrator -Password password -Port 6325
            Disconnect-DtServer -ServiceHost $DtServerObjectAlpha
            </code>
            </example>
            <example>
            User credentials are stored in a variable called $DtCredential. The script will prompt you to supply the username and password and the credentials will be encrypted. Then the stored credentials are used to create a new server object for the server alpha using port 6325. It assigns the server object to the variable called DtServerObject. The connections for the server object are then closed.
            <code>
            $DtCredentialEncrypted = Get-Credential
            $DtServerObjectAlpha = New-DtUvraServer -Name alpha -Credential $DtCredential -Port 6325
            Disconnect-DtServer -ServiceHost $DtServerObjectAlpha
            </code>
            </example>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.NewUvraServerCommand.Port">
            <summary>
            Specify the port for the XML web service protocol. By default, that is 443. Use 6325 for Double-Take servers and appliances, unless you changed the default Double-Take port. Do not specify a port for VMware hosts.
            </summary>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.Service.ImportServerCommand">
            <summary>
            This cmdlet applies the server information from a server data file generated from the Save-DtConsoleServerData cmdlet. The server information from the file will be applied to the user profile of the user that is currently logged into the machine. If you have multiple administrators sharing the same Double-Take Console installation, each administrator will need to be logged in to apply console server data to their user profile. You must close the Double-Take Console to apply the server data file.
            </summary>
            <example>
            The Double-Take Console server data from the file DtAdmin1_ServerData.xml is applied to the user profile for the user that is currently logged in.
            <code>
            Merge-DtConsoleServerData -ImportFilePath "C:\DtAdmin1_ServerData.xml"
            </code>
            </example>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.Service.ImportServerCommand.ImportFilePath">
            <summary>
            Specify the path and file name of the .xml console data file that was generated from the Save-DtConsoleServerData cmdlet.
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.Service.ImportServerCommand.Replace">
            <summary>
            Remove the servers from the console that are not present in the import file.
            </summary>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.Service.GetImagesCommand">
            <summary>
            This cmdlet returns DR image information for the specified server. For this cmdlet, the -ServiceHost should be your repository server.
            </summary>
            <example>
            A server object is created for the server beta using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectBeta. The available image information for the server is returned.
            <code>
            $DtServerObjectBeta = New-DtServer -Name beta -UserName domain\administrator -Password password
            Get-DtImages -ServiceHost $DtServerObjectBeta
            </code>
            </example>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.Service.GetImagesCommand.ImageIds">
            <summary>
            Specify an image GUID or a comma-separated list of GUIDs. If you have an existing job, you can find the image GUID in JobOptions.ImageProtectionOptions returned from the Get-DtJob cmdlet. If you do not have an existing job, you will need to use this cmdlet to gather all of the image GUIDs available on a repository server and then specify an image GUID or list of image GUIDs from the previous Get-DtImages call.
            </summary>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.Service.ExportServerCommand">
            <summary>
            This cmdlet saves the server information from the Double-Take Console for the user that is currently logged into the machine. If you have multiple administrators sharing the same Double-Take Console installation, each administrator will need to be logged in to save their console server data.
            </summary>
            <example>
            The Double-Take Console server data for the user currently logged in will be saved at the root of the C: drive to the file DtAdmin1_ServerData.xml.
            <code>
            Save-DtConsoleServerData -FilePath "C:\DtAdmin1_ServerData.xml"
            </code>
            </example>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.Service.ExportServerCommand.FilePath">
            <summary>
            Specify the path and file name with an .xml fie extension to store the server data from the Double-Take Console.
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.Service.CredentialsCommandBase.Credential">
            <summary>
            Specify the credential object returned from the Windows PowerShell Get-Credential cmdlet. This password will not be visible because Windows stores an encrypted password. 
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.Service.CredentialsCommandBase.UserName">
            <summary>
            Specify a user name. If you are using a domain, specify domain\user name.
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.Service.CredentialsCommandBase.Password">
            <summary>
            Specify the password associated with the user you have entered. This password will be visible in plain text. 
            </summary>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.Service.GetAccessLevelCommand">
            <summary>
            This cmdlet returns the Double-Take security access level for the credentials stored in the specified server object. For this cmdlet, the -ServiceHost could be your source or target server.
            </summary>
            <example>
            A server object is created for the server alpha using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectAlpha. Then the Double-Take security access level for that server is returned. The connections for the server object are then closed.
            <code>
            $DtServerObjectAlpha= New-DtServer -Name alpha -UserName domain\administrator -Password password 
            Get-DtAccessLevel -ServiceHost $DtServerObjectAlpha 
            Disconnect-DtServer -ServiceHost $DtServerObjectAlpha
            </code>
            </example>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.Service.GetActivationStatusCommand">
            <summary>
            This cmdlet returns the Double-Take license key validation information for the specified server. If you do not provide the code parameters, the license keys currently in use will be returned. Specifying the codes will return what the license status would be if the keys were applied using Set-DtActivationCode. For this cmdlet, the -ServiceHost could be your source or target server.
            </summary>
            <example>
            A server object is created for the server alpha using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectAlpha. Then the validation information for the Double-Take license key assigned to the server is returned. The connections for the server object are then closed.
            <code>
            $DtServerObjectAlpha= New-DtServer -Name alpha -UserName domain\administrator -Password password
            Get-DtActivationStatus -ServiceHost $DtServerObjectAlpha 
            Disconnect-DtServer -ServiceHost $DtServerObjectAlpha
            </code>
            </example>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.Service.GetActivationStatusCommand.Code">
            <summary>
            Specify the 24-character, alpha-numeric license key which applies the appropriate Double-Take license to your Double-Take server. Specify multiple keys in an array using the format @(code1, code2).
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.Service.GetActivationStatusCommand.AdditionalCode">
            <summary>
            Specify any additional licenese keys, such as activation keys. Specify multiple keys in an array using the format @(code1, code2).
            </summary>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.Service.GetDiagnosticsCommand">
            <summary>
            This cmdlet collects configuration data for use when reporting problems to technical support. Because the diagnostics are gathering several pieces of information, potentially across the network to the machine where you are running the cmdlet, it may take several minutes to complete the information gathering and sending the resulting zip file to the cmdlet machine. For this cmdlet, the -ServiceHost could be your source or target server.
            </summary>
            <example>
            A server object is created for the server alpha using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectAlpha. Then diagnostics are collected for the server and stored at the root of the C: drive in the file called AlphaDiagnostics.zip. The connections for the server object are then closed.
            <code>
            $DtServerObjectAlpha= New-DtServer -Name alpha -UserName domain\administrator -Password password
            Get-DtDiagnostics -ServiceHost $DtServerObjectAlpha "C:\AlphaDiagnostics.zip" 
            Disconnect-DtServer -ServiceHost $DtServerObjectAlpha
            </code>
            </example>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.Service.GetDiagnosticsCommand.OutputDirectory">
            <summary>
            Specify the full location and file name with a .zip extension, on the machine where you are running the Get-DtDiagnostics cmdlet, to store the resulting zip file containing the diagnostics information.
            </summary>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.Service.GetPathBlockingCommand">
            <summary>
            This cmdlet returns the paths that are blocked on the specified target server. For this cmdlet, the -ServiceHost should be your target server.
            </summary>
            <example>
            A server object is created for the server alpha using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectAlpha. Then the paths that are blocked on the server are returned. The connections for the server object are then closed.
            <code>
            $DtServerObjectAlpha= New-DtServer -Name alpha -UserName domain\administrator -Password password
            Get-DtPathBlocking -ServiceHost $DtServerObjectAlpha
            Disconnect-DtServer -ServiceHost $DtServerObjectAlpha
            </code>
            </example>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.Service.GetProductInfoCommand">
            <summary>
            This cmdlet returns Double-Take product information for the specified server. For this cmdlet, the -ServiceHost could be your source or target server.
            </summary>
            <example>
            A server object is created for the server alpha using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectAlpha. Then the Double-Take product information for the server is returned. The connections for the server object are then closed.
            <code>
            $DtServerObjectAlpha= New-DtServer -Name alpha -UserName domain\administrator -Password password 
            Get-DtProductInfo -ServiceHost $DtServerObjectAlpha
            Disconnect-DtServer -ServiceHost $DtServerObjectAlpha
            </code>
            </example>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.Service.GetOptionCommand">
            <summary>
            This cmdlet returns the value of the specific job or server option from the specified server. For this cmdlet, the -ServiceHost could be your source or target server.
            </summary>
            <example>
            A server object is created for the server alpha using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectAlpha. Then the value of the server option called MirrorChunkSize is returned from the server. The connections for the server object are then closed.
            <code>
            $DtServerObjectAlpha= New-DtServer -Name alpha -UserName domain\administrator -Password password
            Get-DtOption -ServiceHost $DtServerObjectAlpha -Name MirrorChunkSize
            Disconnect-DtServer -ServiceHost $DtServerObjectAlpha
            </code>
            </example>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.Service.GetOptionCommand.Name">
            <summary>
            Specify the name of the job or server option. Specify multiple strings in an array using the format @(string1, string2).
            </summary>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.Service.GetPhysicalItemCommand">
            <summary>
            This cmdlet returns file system information for the specified server. A physical item can be used to specify a specific file, folder, or volume to return file system information for. For this cmdlet, the -ServiceHost could be your source or target server.
            </summary>
            <example>
            A server object is created for the server alpha using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectAlpha. Then the volumes on the server are stored in the variable DtVolumes. Finally, the files and folders at the root of the first volume in DtVolumes is stored in the variable DtVolume1Root. The connections for the server object are then closed.
            <code>
            $DtServerObjectAlpha= New-DtServer -Name alpha -UserName domain\administrator -Password password
            $DtVolumes = Get-DtPhysicalItem -ServiceHost $DtServerObjectAlpha
            $DtVolume1Root = Get-DtPhysicalItem -ServiceHost $DtServerObjectAlpha -Ref $DtVolumes[0] 
            Disconnect-DtServer -ServiceHost $DtServerObjectAlpha
            </code>
            </example>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.Service.GetPhysicalItemCommand.Ref">
            <summary>
            Specify an object returned from a previous Get-DtPhysicalItem call.
            </summary>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.Service.GetScriptCredentialsCommand">
            <summary>
            This cmdlet returns the credentials that Double-Take is currently using to run scripts on the specified server. For this cmdlet, the -ServiceHost could be your source or target server.
            </summary>
            <example>
            A server object is created for the server alpha using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectAlpha. Then the credentials that Double-Take is using to run scripts on this server are returned. The connections for the server object are then closed.
            <code>
            $DtServerObjectAlpha= New-DtServer -Name alpha -UserName domain\administrator -Password password
            Get-DtScriptCredentials -ServiceHost $DtServerObjectAlpha
            Disconnect-DtServer -ServiceHost $DtServerObjectAlpha
            </code>
            </example>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.Service.GetServerInfoCommand">
            <summary>
            This cmdlet returns server configuration information for the specified server. For this cmdlet, the -ServiceHost could be your source or target server.
            </summary>
            <example>
            A server object is created for the server alpha using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectAlpha. Then server configuration information for the server is returned. The connections for the server object are then closed.
            <code>
            $DtServerObjectAlpha= New-DtServer -Name alpha -UserName domain\administrator -Password password
            Get-DtServerInfo -ServiceHost $DtServerObjectAlpha
            Disconnect-DtServer -ServiceHost $DtServerObjectAlpha
            </code>
            </example>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.Service.InstallDoubleTakeCommand">
            <summary>
            This cmdlet installs Double-Take on the specified server. One syntax allows you to install Double-Take immediately, and the other syntax allows you to schedule the installation.
            </summary>
            <example>
            A server object is created for the server alpha using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectAlpha. Then Double-Take is installed to the server using the activation code 1234567890abcdefghij1234, using the setup.exe installation file stored locally at C:\Program Files\Vision Solutions\Double-Take\x64. The connections for the server object are then closed.
            <code>
            $DtServerObjectAlpha= New-DtServer -Name alpha -UserName domain\administrator -Password password 
            Install-DoubleTake -RemoteServer $DtServerObjectAlpha -ActivationCode 1234567890abcdefghij1234 -x64PackageFolder "C:\Program Files\Vision Solutions\Double-Take\x64" 
            Disconnect-DtServer -ServiceHost $DtServerObjectAlpha
            </code>
            </example>
            <example>
            A server object is created for the server alpha using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectAlpha. Then Double-Take is installed to the server using the activation code 1234567890abcdefghij1234, using the .rpm or .deb installation files stored locally at C:\Program Files\Vision Solutions\Double-Take\Linux. The connections for the server object are then closed.
            <code>
            $DtServerObjectAlpha= New-DtServer -Name alpha -UserName domain\administrator -Password password
            Install-DoubleTake -RemoteServer $DtServerObjectAlpha -ActivationCode 1234567890abcdefghij1234 -LinuxPackageFolder "C:\Program Files\Vision Solutions\Double-Take\Linux"
            Disconnect-DtServer -ServiceHost $DtServerObjectAlpha
            </code>
            </example>
            <example>
            A server object is created for the server alpha using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectAlpha. Then Double-Take is installed to the server using the activation code 1234567890abcdefghij1234, using the .rpm or .deb installation files stored on a deployed Double-Take Linux appliance at \\DTAppliance\installers. The connections for the server object are then closed.
            <code>
            $DtServerObjectAlpha= New-DtServer -Name alpha -UserName domain\administrator -Password password
            Install-DoubleTake -RemoteServer $DtServerObjectAlpha -ActivationCode 1234567890abcdefghij1234 -LinuxPackageFolder "\\DTAppliance\installers" 
            Disconnect-DtServer -ServiceHost $DtServerObjectAlpha
            </code>
            </example>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.Service.InstallDoubleTakeCommand.ActivationCode">
            <summary>
            Specify your 24-character, alpha-numeric license key which applies the appropriate Double-Take license to your Double-Take server. Specify multiple keys in an array using the format @(code1, code2). You can also specify the keyword None and provide a license key later.
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.Service.InstallDoubleTakeCommand.DiskQueueFolder">
            <summary>
            Specify the location where you want to store the Double-Take disk queue on each server. The default is \Program Files\Vision Solutions\Double-Take. 
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.Service.InstallDoubleTakeCommand.DiskQueueLimit">
            <summary>
            Specify a fixed amount of disk space, in MB, in the specified DiskQueueFolder that can be used for Double-Take disk queuing. When the disk space limit is reached, Double-Take will automatically begin the auto-disconnect process. By default, an unlimited amount of disk queuing will be allowed.
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.Service.InstallDoubleTakeCommand.DotNetPackagePath">
            <summary>
            If your servers are running Windows 2008 or earlier and do not have Microsoft .NET version 3.5.1, specify the location of the setup file (on the local machine) that will be used to install it. The setup file is available on the Double-Take CD in the \NetFx\v3.5SP1\Full directory or from the Microsoft web site. 
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.Service.InstallDoubleTakeCommand.InstallationFolder">
            <summary>
            Specify the location where you want to install Double-Take on the server. The default is \Program Files\Vision Solutions\Double-Take.
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.Service.InstallDoubleTakeCommand.MaxMemoryUsage">
            <summary>
            Specify the maximum amount of memory, in MB, that can be used for Double-Take processing. The default will depend on your operating system and hardware. 
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.Service.InstallDoubleTakeCommand.MinFreeDiskSpace">
            <summary>
            This is the minimum amount of disk space in the specified DiskQueueFolder that must be available at all times. This amount should be less than the amount of physical disk space minus the disk size specified for DiskQueueLimit. The default is 50 MB.
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.Service.InstallDoubleTakeCommand.NoReboot">
            <summary>
            Specify if you do not want the server to reboot after the installation, even if a reboot is required.
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.Service.InstallDoubleTakeCommand.PackageBaseFolder">
            <summary>
            Specifies the locations of the setup files (on the local machine or a UNC path) that will be used to install on both 32-bit and 64-bit servers. By default, these are in the i386\ and \x64 subdirectories where you installed Double-Take.
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.Service.InstallDoubleTakeCommand.Schedule">
            <summary>
            Specify a date and time to complete the installation. Specify the date in mm/dd/yyyy format. Specify the time in hh:mm:ss format with AM or PM. You can specify a time zone offset, for example, -04:00. If you do not specify a time zone offset, the time zone of the machine you are running from will be used. If you do not specify a time, 12:00:00 AM will be used.
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.Service.InstallDoubleTakeCommand.SimultaneousFilePushLimit">
            <summary>
            Specify the number of files that can simultaneously be pushed to the machine you are installing on. The default is 5.
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.Service.InstallDoubleTakeCommand.TempFolder">
            <summary>
            Specify a temporary location (on the server where you are installing Double-Take) where the installation files will be copied and run. The default is \Temp. You need approximately 130 MB of space in the specified location.
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.Service.InstallDoubleTakeCommand.X64PackageFolder">
            <summary>
            Specify the location of the setup file (on the local machine or a UNC path) that will be used to install on 64-bit Windows servers. By default, this is in the \x64 subdirectory where you installed Double-Take. 
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.Service.InstallDoubleTakeCommand.X86PackageFolder">
            <summary>
            Specify the location of the setup file (on the local machine or a UNC path) that will be used to install on 32-bit Windows servers. By default, this is in the \i386 subdirectory where you installed Double-Take.
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.Service.InstallDoubleTakeCommand.LinuxPackageFolder">
            <summary>
            Specify the location of the .rpm or .deb installation files (on the local machine or a UNC path) that will be used to install on Linux servers.
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.Service.PushInstallCommandBase.RemoteServer">
            <summary>
            Specify the server object returned from the New-DtServer cmdlet. 
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.Service.PushInstallCommandBase.AsJob">
            <summary>
            Specify if you want the installation to occur asynchronously in the background, returning the PowerShell command immediately. You can get the status of each installation using the Windows PowerShell Get-Job command. Without this parameter, each push installation specified will be executed synchronously and the current activity of the current installation will be displayed.
            </summary>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.Service.SetActivationCodeCommand">
            <summary>
            This cmdlet sets the Double-Take activation code on the specified server. It also returns the Double-Take activation code validation information from the Get-DtActivationStatus cmdlet. For this cmdlet, the -ServiceHost could be your source or target server.
            </summary>
            <example>
            A server object is created for the server alpha using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectAlpha. Then the activation code 1234567890abcdefghij1234 is applied to the server. The server returns the activation code information. The connections for the server object are then closed.
            <code>
            $DtServerObjectAlpha= New-DtServer -Name alpha -UserName domain\administrator -Password password
            Set-DtActivationCode -ServiceHost $DtServerObjectAlpha -Code 1234567890abcdefghij1234
            Disconnect-DtServer -ServiceHost $DtServerObjectAlpha
            </code>
            </example>
            <example>
            A server object is created for the server alpha using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectAlpha. The server information for the online activation process is returned. The output from the Get-DtOnlineActivationRequest cmdlet is piped directly to Request-DtOnlineActivation, which activates the license online, and then that output (from Request-DtOnlineActivation) is piped directory to Set-DtActivationCode to set the activation key on the server.The connections for the server object are then closed.
            <code>
            $DtServerObjectAlpha= New-DtServer -Name alpha -UserName domain\administrator -Password password
            Get-DtOnlineActivationRequest -ServiceHost $DtServerObjectAlpha | Request-DtOnlineActivation | Set-DtActivationCode
            Disconnect-DtServer -ServiceHost $DtServerObjectAlpha
            </code>
            </example>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.Service.SetActivationCodeCommand.Code">
            <summary>
            Specify the 24-character, alpha-numeric license key which applies the appropriate Double-Take license to your Double-Take server. Specify multiple keys in an array using the format @(code1, code2).
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.Service.SetActivationCodeCommand.AdditionalCode">
            <summary>
            Specify any additional license keys. Specify multiple keys in an array using the format @(code1, code2).
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.Service.SetActivationCodeCommand.ActivationKey">
            <summary>
            Specify the 24-character, alpha-numeric activation key which activates your Double-Take license.
            </summary>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.Service.SetPathBlockingCommand">
            <summary>
            This cmdlet blocks writing to the replica source data located on the target, keeping the data from being changed outside of Double-Take processing. For this cmdlet, the -ServiceHost should be your target server.
            </summary>
            <example>
            A server object is created for the server alpha using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectAlpha. Then it sets the target paths associated with the replica data from the specified source IP address to blocked. The connections for the server object are then closed.
            <code>
            $DtServerObjectAlpha= New-DtServer -Name alpha -UserName domain\administrator -Password password 
            Set-DtPathBlocking -ServiceHost $DtServerObjectAlpha -SourceAddress "112.42.74.29:6320" -Mode Blocked 
            Disconnect-DtServer -ServiceHost $DtServerObjectAlpha
            </code>
            </example>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.Service.SetPathBlockingCommand.SourceAddress">
            <summary>
            Specify the IP address of the source, including the port, for example, 123.123.123.123:6320.
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.Service.SetPathBlockingCommand.Mode">
            <summary>
            Specify Blocked or Unblocked.
            </summary>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.Service.SetOptionCommand">
            <summary>
            This cmdlet sets the value of the Double-Take server or job option for the specified server. For this cmdlet, the -ServiceHost could be your source or target server.
            </summary>
            <example>
            A server object is created for the server alpha using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectAlpha. Then the server settings MaxChecksumBlocks and MirrorChunkSize are set to 64 and 131072, respectively, on the server. The connections for the server object are then closed.
            <code>
            $DtServerObjectAlpha= New-DtServer -Name alpha -UserName domain\administrator -Password password
            Set-DtOption -ServiceHost $DtServerObjectAlpha -Setting @{MaxChecksumBlocks=64; MirrorChunkSize=131072}
            Disconnect-DtServer -ServiceHost $DtServerObjectAlpha
            </code>
            </example>
            <example>
            A server object is created for the server alpha using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectAlpha. Then it sets the MirrorChunkSize server setting to 64. The connections for the server object are then closed.
            <code>
            $DtServerObjectAlpha= New-DtServer -Name alpha -UserName domain\administrator -Password password
            Set-DtOption -Servicehost $DtServerObjectAlpha -Name MirrorChunkSize -IntValue 64
            Disconnect-DtServer -ServiceHost $DtServerObjectAlpha
            </code>
            </example>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.Service.SetOptionCommand.Setting">
            <summary>
            Specify a hash table using the format @{option1=value1; option2=value2}. 
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.Service.SetOptionCommand.Name">
            <summary>
            Specify the name of the job or server option. 
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.Service.SetOptionCommand.IntValue">
            <summary>
            Specify an integer value for the server or job option. 
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.Service.SetOptionCommand.StringValue">
            <summary>
            Specify a single string (text) value for the server or job option
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.Service.SetOptionCommand.MultiStringValue">
            <summary>
            Specify multiple string (text) values for the server or job option in an array using the format @(string1, string2).
            </summary>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.Service.SetScriptCredentialsCommand">
            <summary>
            This cmdlet sets the credentials for Double-Take to use when running scripts on the specified server. For this cmdlet, the -ServiceHost could be your source or target server.
            </summary>
            <example>
            A server object is created for the server alpha using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectAlpha. Then you will be prompted for credentials for the domain\administrator account and those credentials will be stored in the variable DtCredentials. Finally, the credentials used for Double-Take scripts on the server will be set to the stored credentials. The connections for the server object are then closed.
            <code>
            $DtServerObjectAlpha= New-DtServer -Name alpha -UserName domain\administrator -Password password
            $DtCredentials = Get-Credential domain\administrator
            Set-DtScriptCredentials -ServiceHost $DtServerObjectAlpha -Credential $DtCredentials
            Disconnect-DtServer -ServiceHost $DtServerObjectAlpha
            </code>
            </example>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.Service.TestActiveDirectoryCredentialsCommand">
            <summary>
            This cmdlet tests if the specified credentials have privileges to update Active Directory on the specified server's domain. For this cmdlet, the -ServiceHost could be your source or target server.
            </summary>
            <example>
            A server object is created for the server alpha using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectAlpha. Then you will be prompted for credentials for the domain\administrator account and those credentials will be stored in the variable DtCredentials. Finally, the stored credentials will be tested to see if they can update Active Directory on the server's domain. The connections for the server object are then closed.
            <code>
            $DtServerObjectAlpha= New-DtServer -Name alpha -UserName domain\administrator -Password password
            $DtCredentials = Get-Credential domain\administrator
            Test-DtActiveDirectoryCredentials -ServiceHost $DtServerObjectAlpha -Credential $DtCredentials
            Disconnect-DtServer -ServiceHost $DtServerObjectAlpha
            </code>
            </example>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.Service.TestActiveDirectoryCredentialsCommand.ComputerDomain">
            <summary>
            Specify a domain name.
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.Service.TestActiveDirectoryCredentialsCommand.ComputerName">
            <summary>
            Specify a computer name.
            </summary>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.Service.TestScriptCommand">
            <summary>
            This cmdlet tests the specified script on the specified server using the credentials from Set-DtScriptCredentials. If necessary, manually undo any changes that you do not want after testing the script. For this cmdlet, the -ServiceHost could be your source or target server.
            </summary>
            <example>
            A server object is created for the server alpha using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectAlpha. Then the script called ScriptName (located in C:\PathDir) is run, using the arguments arg1 and arg2. The script will display on screen. The connections for the server object are then closed.
            <code>
            $DtServerObjectAlpha= New-DtServer -Name alpha -UserName domain\administrator -Password password
            Test-DtScript -ServiceHost $DtServerObjectAlpha -Path "C:\PathDir\ScriptName" -Arguments "arg1 arg2" -InteractionMode Interact
            Disconnect-DtServer -ServiceHost $DtServerObjectAlpha
            </code>
            </example>
            <example>
            A server object is created for the server alpha using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectAlpha. Then PowerShell is launched and the arguments passed to PowerShell are the PowerShell script myscript.ps1 (located in C:\my scripts) and the arguments ars1 and arg2. The PowerShell execution policy is set to RemoteSigned so the PowerShell script will execute. The script is set to run silently in the background. The connections for the server object are then closed.
            <code>
            $DtServerObjectAlpha= New-DtServer -Name alpha -UserName domain\administrator -Password password
            Test-DtScript -ServiceHost $DtServerObjectAlpha -Path "C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe" -Arguments "-File ""C:\my scripts\myscript.ps1"" ""-Arg1 arg1 -Arg2 arg2"" -ExecutionPolicy RemoteSigned" -InteractionMode None
            Disconnect-DtServer -ServiceHost $DtServerObjectAlpha
            </code>
            </example>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.Service.TestScriptCommand.Path">
            <summary>
            Specify the full path and script name.
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.Service.TestScriptCommand.Arguments">
            <summary>
            Specify any arguments that need to be passed to the script.
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.Service.TestScriptCommand.InteractionMode">
            <summary>
            Specify if the script processing will be displayed on the screen, by using the value Interact, or if the script will execute silently in the background, by using the value None.
            </summary>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.Service.TestScriptCredentialsCommand">
            <summary>
            This cmdlet tests the specified credentials on the specified server to confirm if they have administrative rights. For this cmdlet, the -ServiceHost could be your source or target server.
            </summary>
            <example>
            A server object is created for the server alpha using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectAlpha. Then you will be prompted for credentials for the domain\administrator account and those credentials will be stored in the variable DtCredentials. Finally, the credentials will be tested to confirm if they have administrative rights on the server. The connections for the server object are then closed.
            <code>
            $DtServerObjectAlpha= New-DtServer -Name alpha -UserName domain\administrator -Password password
            $DtCredentials = Get-Credential domain\administrator
            Test-DtScriptCredentials -ServiceHost $DtServerObjectAlpha -Credential $DtCredentials
            Disconnect-DtServer -ServiceHost $DtServerObjectAlpha
            </code>
            </example>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.Service.UninstallDoubleTakeCommand">
            <summary>
            This cmdlet uninstalls Double-Take on the specified server.
            </summary>
            <example>
            A server object is created for the server alpha using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectAlpha. Then Double-Take is uninstalled from the server. The connections for the server object are then closed.
            <code>
            $DtServerObjectAlpha= New-DtServer -Name alpha -UserName domain\administrator -Password password
            Uninstall-Doubletake -RemoteServer $DtServerObjectAlpha
            Disconnect-DtServer -ServiceHost $DtServerObjectAlpha
            </code>
            </example>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.Service.GetEmailNotificationOptionsCommand">
            <summary>
            This cmdlet returns the current e-mail notification settings for the specified server. For this cmdlet, the -ServiceHost could be your source or target server.
            </summary>
            <example>
            A server object is created for the server alpha using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectAlpha. Then the current e-mail notification settings for that server are returned. The connections for the server object are then closed.
            <code>
            $DtServerObjectAlpha= New-DtServer -Name alpha -UserName domain\administrator -Password password
            Get-DtEmailNotificationOptions -ServiceHost $DtServerObjectAlpha
            Disconnect-DtServer -ServiceHost $DtServerObjectAlpha
            </code>
            </example>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.Service.GetEventLogEntryCommand">
            <summary>
            This cmdlet returns a list of Double-Take event log entries for the specified server. For this cmdlet, the -ServiceHost could be your source or target server.
            </summary>
            <example>
            A server object is created for the server alpha using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectAlpha. Then the Double-Take event entries are displayed, in groups of 25. The connections for the server object are then closed.
            <code>
            $DtServerObjectAlpha= New-DtServer -Name alpha -UserName domain\administrator -Password password
            Get-DtEventLogEntry -ServiceHost $DtServerObjectAlpha -ChunkSize 25
            Disconnect-DtServer -ServiceHost $DtServerObjectAlpha
            </code>
            </example>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.Service.GetEventLogEntryCommand.LastIndex">
            <summary>
            Specify an index entry. The next index entry after the number you specify will be the starting point for the log entries returned. For example, if you specify 144 then the first log entry retrieved will be index 145.
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.Service.GetEventLogEntryCommand.ChunkSize">
            <summary>
            Specify the number of entries that will be returned at one time. The default number of entries is 1024.
            </summary>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.Service.GetLogMessageCommand">
            <summary>
            This cmdlet returns messages from the Double-Take log file and the Double-Take Management Service log file. For this cmdlet, the -ServiceHost could be your source or target server.
            </summary>
            <example>
            A server object is created for the server alpha using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectAlpha. Then the Double-Take Management Service log messages after 5:19pm on November 24, 2015 are displayed in groups of 25. The connections for the server object are then closed.
            <code>
            $DtServerObjectAlpha= New-DtServer -Name alpha -UserName domain\administrator -Password password
            Get-DtLogMessage -ServiceHost $DtServerObjectAlpha -source MS -LastTimeStamp "11/24/2015 05:19:00 PM" -ChunkSize 25
            Disconnect-DtServer -ServiceHost $DtServerObjectAlpha
            </code>
            </example>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.Service.GetLogMessageCommand.Source">
            <summary>
            Specify source of the log message. If no source is specified, both Double-Take Management Service messages and Double-Take service messages will be returned. To have only Double-Take Management Service messages displayed, specify MS for the string value. To have only Double-Take service messages displayed, specify EN for the string value.
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.Service.GetLogMessageCommand.LastSequenceNumber">
            <summary>
            Specify a sequence number to be the starting point to retrieve the log messages.
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.Service.GetLogMessageCommand.LastTimestamp">
            <summary>
            Specify a date and time stamp to be the starting point to retrieve the log messages. Specify the date in mm/dd/yyyy format. Specify the time in hh:mm:ss format with AM or PM. You can specify a time zone offset, for example, -04:00. If you do not specify a time zone offset, the time zone of the machine you are running from will be used. If you do not specify a time, 12:00:00 AM will be used.
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.Service.GetLogMessageCommand.ChunkSize">
            <summary>
            Specify the number of entries that will be returned at one time. The default number of entries is 1024.
            </summary>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.Service.RestartReplicationServiceCommand">
            <summary>
            This cmdlet stops and restarts the Double-Take service on the specified server. This cmdlet does not impact the Double-Take Management Service. For this cmdlet, the -ServiceHost could be your source or target server.
            </summary>
            <example>
            A server object is created for the server alpha using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectAlpha. Then the Double-Take service on the server is stopped and restarted. The connections for the server object are then closed.
            <code>
            $DtServerObjectAlpha= New-DtServer -Name alpha -UserName domain\administrator -Password password
            Restart-DtReplicationService -ServiceHost $DtServerObjectAlpha
            Disconnect-DtServer -ServiceHost $DtServerObjectAlpha
            </code>
            </example>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.Service.StopReplicationServiceCommand">
            <summary>
            This cmdlet stops the Double-Take service on the specified server. For this cmdlet, the -ServiceHost could be your source or target server.
            </summary>
            <example>
            A server object is created for the server alpha using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectAlpha. Then the Double-Take service is stopped on the server. The connections for the server object are then closed.
            <code>
            $DtServerObjectAlpha= New-DtServer -Name alpha -UserName domain\administrator -Password password 
            Stop-DtReplicationService -ServiceHost $DtServerObjectAlpha
            Disconnect-DtServer -ServiceHost $DtServerObjectAlpha
            </code>
            </example>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.Service.SetEmailNotificationOptionsCommand">
            <summary>
            This cmdlet sets the Double-Take e-mail notification configuration for the specified server. For this cmdlet, the -ServiceHost could be your source or target server.
            </summary>
            <example>
            A server object is created for the server alpha using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectAlpha. Then the default Double-Take e-mail notification options are stored in the variable DtEmailOptions. Two of the options are then changed. The Enabled option is set to true which turns on the e-mail notification feature. The SMTP server is also configured for mail.company.com. Finally those changes for the email notification options are set on the server. The connections for the server object are then closed.
            <code>
            $DtServerObjectAlpha= New-DtServer -Name alpha -UserName domain\administrator -Password password
            $DtEmailOptions = Get-DtEmailNotificationOptions -ServiceHost $DtServerObject
            $DtEmailOptions.Enabled = $true
            $DtEmailOptions.SmtpServer = "mail.company.com"
            Set-DtEmailNotificationOptions -ServiceHost $DtServerObjectAlpha -Options $DtEmailOptions
            Disconnect-DtServer -ServiceHost $DtServerObjectAlpha
            </code>
            </example>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.Service.SetEmailNotificationOptionsCommand.Options">
            <summary>
            Specify the object returned from the Get-DtEmailNotificationOptions cmdlet. 
            </summary>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.Service.TestEmailNotificationCommand">
            <summary>
            Tests the e-mail options configured with Set-DtEmailNotificationOptions by attempting to send an e-mail to the specified recipient. For this cmdlet, the -ServiceHost could be your source or target server. 
            </summary>
            <example>
            A server object is created for the server alpha using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectAlpha. Then the default Double-Take e-mail notification options are stored in the variable DtEmailOptions. Two of the options are then changed. The Enabled option is set to true which turns on the e-mail notification feature. The SMTP server is also configured for mail.company.com. Those changes for the email notification options are set on the server. Finally a test message is sent to the administrator@mail.company.com addresses with the specified message text using the configured e-mail notification options. The connections for the server object are then closed.
            <code>
            $DtServerObjectAlpha= New-DtServer -Name alpha -UserName domain\administrator -Password password
            $DtEmailOptions = Get-DtEmailNotificationOptions -ServiceHost $DtServerObject
            $DtEmailOptions.Enabled = $true
            $DtEmailOptions.SmtpServer = "mail.company.com"
            Set-DtEmailNotificationOptions -ServiceHost $DtServerObjectAlpha -Options $DtEmailOptions
            Test-DtEmailNotification -ServiceHost $DtServerObjectAlpha -Options $DtEmailOptions -To "administrator@mail.company.com" -Body "This is a test Double-Take message."
            Disconnect-DtServer -ServiceHost $DtServerObjectAlpha
            </code>
            </example>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.Service.TestEmailNotificationCommand.Options">
            <summary>
            Specify the object returned from the Get-DtEmailNotificationOptions cmdlet.
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.Service.TestEmailNotificationCommand.To">
            <summary>
            Specify the e-mail address that the test Double-Take e-mail message should be sent to. Multiple addresses can be separated by a comma.
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.Service.TestEmailNotificationCommand.Body">
            <summary>
            Specify the text of the test Double-Take email message.
            </summary>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.Formatting">
            <summary>
            TODO: Update summary.
            </summary>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.EngineControl.InvokeQueueTaskCommand">
            <summary>
            This cmdlet queues tasks inline with replication data. Keep the following in mind when using this cmdlet. 
            For this cmdlet, the -ServiceHost should be your target server.
            Any combination of one or more execution points can be used with the same Invoke-DtQueueTask cmdlet.
            All script processing messages, including errors, can be viewed in the Double-Take log and the Windows Event log.
            If your source is in a restore required state (after a failover), any task placed on the queue will be executed immediately. Use caution when submitting tasks while in this state so that the target does not get inadvertently updated.
            If a task is submitted after replication is stopped, the task will be executed immediately. 
            A task may be discarded if all jobs to a target are manually stopped, if replication is stopped to a target, or if an auto-disconnect occurs. 
            If you disable task command processing while tasks are in queue, those tasks will not be executed. 
            The user submitting the task command must be a member of the Double-Take Admin security group on both the source and target and the Double-Take service must have proper privileges to access the files or run the commands specified in the task.
            </summary>
            <example>
            A server object is created for the server beta using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectBeta. The job(s) are retrieved from DtServerObjectBeta, but only the job information where the source machine name is equivalent to the name stored in the variable DtServerObjectAlpha is retrieved. That information is then stored in the variable DtJobForAlpha. The script called ScriptName, located in C:\PathDir, along with two arguments, is stored in the variable DtScript. The script to launch PowerShell and run the script called Script.ps1, located in C:\PathDir, along with two arguments and the ExecutionPolicy parameter, is stored in the variable DtPsScript. Finally, the script stored in DtScript is executed when the target receives and queues the task and the script stored in DtPsScript is executed when the target processes the task from the queue. The connections for the server object are then closed.
            <code>
            $DtServerObjectBeta = New-DtServer -Name beta -UserName domain\administrator -Password password
            $DtJobForAlpha = Get-DtJob -ServiceHost $DtServerObjectBeta | Where-Object {$_.Statistics.CoreConnectionDetails.SourceMachineName -eq $DtServerObjectAlpha}
            $DtScript = New-DtTaskParameters -ScriptPath "C:\PathDir\ScriptName" -Arguments "arg1 arg2"
            $DtPsScript = New-DtTaskParameters -ScriptPath "C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe" -Arguments "-File ""C:\PathDir\Script.ps1"" ""-Arg1 argument1_info -Arg2 argument2_info"" -ExecutionPolicy RemoteSigned"
            Invoke-DtQueueTask -ServiceHost $DtServerObjectBeta -JobId $DtJobForAlpha.Id -OnReceive $DtScript -OnExecute $DtPsScript
            Disconnect-DtServer -ServiceHost $DtServerObjectBeta
            </code>
            </example>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.EngineControl.InvokeQueueTaskCommand.OnQueue">
            <summary>
            Execute the specified task on the source machine as soon as the source receives and queues the task. During heavy replication, there may be a delay while the task is queued inline with the replication operations. Define the task parameters by using New-DtTaskParameters.
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.EngineControl.InvokeQueueTaskCommand.OnTransmit">
            <summary>
            Execute the specified task on the source machine just before the source transmits the task to the target. Define the task parameters by using New-DtTaskParameters.
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.EngineControl.InvokeQueueTaskCommand.OnReceive">
            <summary>
            Execute the specified task on the target machine as soon as the target receives and queues the task. Define the task parameters by using New-DtTaskParameters.
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.EngineControl.InvokeQueueTaskCommand.OnExecute">
            <summary>
            Execute the specified task on the target when the target processes the task from the queue. Since the task is not executed until it is processed, if the target is paused, the task will be held in queue. Define the task parameters by using New-DtTaskParameters.
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.EngineControl.InvokeQueueTaskCommand.InteractWithDesktop">
            <summary>
            Tasks interact with the desktop and, therefore, display on screen and run in the foreground. If you do not use this option, tasks do not interact with the desktop and will be run in the background.
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.EngineControl.InvokeQueueTaskCommand.Timeout">
            <summary>
            Specify the length of time, in timespan format, to wait for tasks to complete. For example, 0.01:30:00 would wait for one hour and thirty minutes. If you set the timespan to zero (0.00:00:00), there is no timeout delay and the next operation is immediately processed. If you do not specify a timeout parameter, the timeout will default to forever.
            </summary>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.EngineControl.NewTaskParametersCommand">
            <summary>
            Creates a parameter set to be used with the Invoke-DtQueueTask cmdlet. 
            </summary>
            <example>
            The script called ScriptName, located in C:\PathDir, along with two arguments, is stored in the variable DtScript.
            <code>
            $DtScript = New-DtTaskParameters -ScriptPath "C:\PathDir\ScriptName" -Arguments "arg1 arg2"
            </code>
            </example>
            <example>
            The script to launch PowerShell and run the script called Script.ps1, located in C:\PathDir, along with two arguments and the ExecutionPolicy parameter, is stored in the variable DtPsScript.
            <code>
            $DtPsScript = New-DtTaskParameters -ScriptPath "C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe" -Arguments "-File ""C:\PathDir\Script.ps1"" ""-Arg1 argument1_info -Arg2 argument2_info"" -ExecutionPolicy RemoteSigned"
            </code>
            </example>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.EngineControl.NewTaskParametersCommand.ScriptPath">
            <summary>
            Specify the full path and script name.
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.EngineControl.NewTaskParametersCommand.Arguments">
            <summary>
            Specify any arguments that need to be passed to the script.
            </summary>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.EngineControl.StartOrphansProcessingCommand">
            <summary>
            This cmdlet starts orphan files processing on the specified job. For this cmdlet, the -ServiceHost should be your target server.
            </summary>
            <example>
            A server object is created for the server beta using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectBeta. The job(s) are retrieved from DtServerObjectBeta, but only the job information where the source machine name is equivalent to the name stored in the variable DtServerObjectAlpha is retrieved. That information is then stored in the variable DtJobForAlpha. Orphan file processing is then started for the job. The connections for the server object are then closed.
            <code>
            $DtServerObjectBeta = New-DtServer -Name beta -UserName domain\administrator -Password password
            $DtJobForAlpha = Get-DtJob -ServiceHost $DtServerObjectBeta | Where-Object {$_.Statistics.CoreConnectionDetails.SourceMachineName -eq $DtServerObjectAlpha}
            Start-DtOrphansProcessing -ServiceHost $DtServerObjectBeta -JobId $DtJobForAlpha.Id
            Disconnect-DtServer -ServiceHost $DtServerObjectBeta
            </code>
            </example>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.EngineControl.StartVerifyCommand">
            <summary>
            This cmdlet starts the Double-Take verification process to check that the replica source data on the target is identical to the actual data on the source. For this cmdlet, the -ServiceHost should be your target server.
            </summary>
            <example>
            A server object is created for the server beta using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectBeta. The job(s) are retrieved from DtServerObjectBeta, but only the job information where the source machine name is equivalent to the name stored in the variable DtServerObjectAlpha is retrieved. That information is then stored in the variable DtJobForAlpha. Verification is then started for the job. The connections for the server object are then closed.
            <code>
            $DtServerObjectBeta = New-DtServer -Name beta -UserName domain\administrator -Password password
            $DtJobForAlpha = Get-DtJob -ServiceHost $DtServerObjectBeta | Where-Object {$_.Statistics.CoreConnectionDetails.SourceMachineName -eq $DtServerObjectAlpha}
            Start-DtVerify -ServiceHost $DtServerObjectBeta -JobId $DtJobForAlpha.Id -Synchronize -Newer -Checksum -ProcessOrphans 
            Disconnect-DtServer -ServiceHost $DtServerObjectBeta
            </code>
            </example>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.EngineControl.StartVerifyCommand.Synchronize">
            <summary>
            Mirrors to the target any protected files that are different on the source. Without this option, the verification process will only verify the data and generate a verification log file, but it does not remirror any files that are different on the source and target.
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.EngineControl.StartVerifyCommand.Newer">
            <summary>
            If you are mirroring files to the target during the verification process with the synchronize option, this option will only mirror files that are newer on the source than on the target. If you are using a database application, do not use this option unless you know for certain that you need it. With database applications, it is critical that all files, not just some of the file that might be newer, get mirrored.
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.EngineControl.StartVerifyCommand.Checksum">
            <summary>
            If you are mirroring files to the target during the verification process with the synchronize option, this option will have the verification process perform a block checksum comparison to determine which blocks are different.
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.EngineControl.StartVerifyCommand.ProcessOrphans">
            <summary>
            If you are mirroring files to the target during the verification process with the synchronize option, this option will delete orphaned files on the target.
            </summary>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.EngineControl.WaitMirrorCompleteCommand">
            <summary>
            This cmdlet waits for the mirroring process to complete before processing any additional cmdlets. For this cmdlet, the -ServiceHost should be your target server.
            </summary>
            <example>
            A  server object is created for the server beta using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectBeta. The job(s) are retrieved from DtServerObjectBeta, but only the job information where the source machine name is equivalent to the name stored in the variable DtServerObjectAlpha is retrieved. That information is then stored in the variable DtJobForAlpha. The mirror options are stored in DtMirrorChecksum. The ComparisonCriteria value is changed to checksum and the Options are set to Synchronize and CalculateDifferences. Then the mirror is started for the job using the stored mirroring options. The script will wait for mirroring to complete before continuing. The script will check ever five minutes to see if mirroring is complete. The connections for the server object are then closed.
            <code>
            $DtServerObjectBeta = New-DtServer -Name beta -UserName domain\administrator -Password password
            $DtJobForAlpha = Get-DtJob -ServiceHost $DtServerObjectBeta | Where-Object {$_.Statistics.CoreConnectionDetails.SourceMachineName -eq $DtServerObjectAlpha}
            $DtMirrorChecksum = New-Object DoubleTake.Core.Contract.Connection.MirrorParameters
            $DtMirrorChecksum.ComparisonCriteria = "Checksum"
            $DtMirrorChecksum.Options = "Synchronize,CalculateDifferences"
            Start-DtMirror -ServiceHost $DtServerObjectBeta -JobId $DtJobForAlpha.Id -MirrorParameters $DtMirrorChecksum
            Wait-DtMirrorComplete -ServiceHost $DtServerObjectBeta -JobId $DtJobForAlpha.Id -PollingInterval "00:05:00"
            Disconnect-DtServer -ServiceHost $DtServerObjectBeta
            </code>
            </example>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.EngineControl.WaitMirrorCompleteCommand.PollingInterval">
            <summary>
            Specify the amount of time, in hh:mm:ss, to wait before checking to see if the mirror has completed.
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.EngineControl.EngineConnectionControlCommandBase.ConnectionId">
            <summary>
            Specify the connection ID returned from the Get-DtConnectionIds cmdlet. 
            </summary>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.EngineControl.GetBandwidthLimitCommand">
            <summary>
            This cmdlet returns the bandwidth limiting configuration for the specified job. For this cmdlet, the -ServiceHost should be your target server.
            </summary>
            <example>
            A server object is created for the server beta using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectBeta. The job(s) are retrieved from DtServerObjectBeta, but only the job information where the source machine name is equivalent to the name stored in the variable DtServerObjectAlpha is retrieved. That information is then stored in the variable DtJobForAlpha. The bandwidth limiting configuration is then returned. The connections for the server object are then closed.
            <code>
            $DtServerObjectBeta = New-DtServer -Name beta -UserName domain\administrator -Password password
            $DtJobForAlpha = Get-DtJob -ServiceHost $DtServerObjectBeta | Where-Object {$_.Statistics.CoreConnectionDetails.SourceMachineName -eq $DtServerObjectAlpha}
            Get-DtBandwidthLimit -ServiceHost $DtServerObjectBeta -JobId $DtJobForAlpha.Id
            Disconnect-DtServer -ServiceHost $DtServerObjectBeta
            </code>
            </example>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.EngineControl.GetConnectionIdsCommand">
            <summary>
            This cmdlet returns the connection ID associated with the specified job. For this cmdlet, the -ServiceHost should be your target server.
            </summary>
            <example>
            A server object is created for the server beta using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectBeta. The job(s) are retrieved from DtServerObjectBeta, but only the job information where the source machine name is equivalent to the name stored in the variable DtServerObjectAlpha is retrieved. That information is then stored in the variable DtJobForAlpha. The connection ID for the job is then stored in DtConIdForAlpha. The connections for the server object are then closed.
            <code>
            $DtServerObjectBeta = New-DtServer -Name beta -UserName domain\administrator -Password password
            $DtJobForAlpha = Get-DtJob -ServiceHost $DtServerObjectBeta | Where-Object {$_.Statistics.CoreConnectionDetails.SourceMachineName -eq $DtServerObjectAlpha}
            $DtConIdForAlpha = Get-DtConnectionIds -ServiceHost $DtServerObjectBeta -JobId $DtJobForAlpha.Id
            Disconnect-DtServer -ServiceHost $DtServerObjectBeta
            </code>
            </example>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.EngineControl.GetConnectionIdsCommand.JobId">
            <summary>
            Specify the job GUID returned from the New-DtJob cmdlet or the Id within the job information returned from the Get-DtJob cmdlet. 
            </summary>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.EngineControl.RemoveSnapshotCommand">
            <summary>
            This cmdlet removes a Double-Take snapshot from the specified server. For this cmdlet, the -ServiceHost should be your target server.
            </summary>
            <example>
            A  server object is created for the server beta using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectBeta. The job(s) are retrieved from DtServerObjectBeta, but only the job information where the source machine name is equivalent to the name stored in the variable DtServerObjectAlpha is retrieved. That information is then stored in the variable DtJobForAlpha. The snapshots available for the job are stored in DtSnaps and then the first snapshot is stored in FirstSnap. That first snapshot is then deleted. The connections for the server object are then closed.
            <code>
            $DtServerObjectBeta = New-DtServer -Name beta -UserName domain\administrator -Password password
            $DtJobForAlpha = Get-DtJob -ServiceHost $DtServerObjectBeta | Where-Object {$_.Statistics.CoreConnectionDetails.SourceMachineName -eq $DtServerObjectAlpha}
            $DtSnaps = Get-DtSnapshot -ServiceHost $DtServerObjectBeta -JobId $DtJobForAlpha.Id
            $FirstSnap=$DtSnaps | Select-Object -First 1
            Remove-DtSnapshot -ServiceHost $DtServerObjectBeta -SnapshotId $FirstSnap.Id
            Disconnect-DtServer -ServiceHost $DtServerObjectBeta
            </code>
            </example>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.EngineControl.RemoveSnapshotCommand.JobId">
            <summary>
            Specify the job GUID returned from the New-DtJob cmdlet or the Id within the job information returned from the Get-DtJob cmdlet. 
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.EngineControl.RemoveSnapshotCommand.ConnectionId">
            <summary>
            Specify the connection ID returned from the Get-DtConnectionIds cmdlet. 
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.EngineControl.RemoveSnapshotCommand.Snapshot">
            <summary>
            Specify the snapshot entry object returned from the Get-DtSnapshot cmdlet. 
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.EngineControl.RemoveSnapshotCommand.SnapshotId">
            <summary>
            Specify the snapshot GUID returned from the Get-DtSnapshot cmdlet. 
            </summary>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.EngineControl.SetBandwidthLimitCommand">
            <summary>
            This cmdlet sets bandwidth limiting for the specified job. For this cmdlet, the -ServiceHost should be your target server.
            </summary>
            <example>
            A server object is created for the server beta using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectBeta. The job(s) are retrieved from DtServerObjectBeta, but only the job information where the source machine name is equivalent to the name stored in the variable DtServerObjectAlpha is retrieved. That information is then stored in the variable DtJobForAlpha. The bandwidth limiting configuration is then stored in DtFixedBandwidth. The Mode is then changed to fixed and the Limit is set to 100,000 bytes/second. Finally, the bandwidth settings are applied to the job. The connections for the server object are then closed.
            <code>
            $DtServerObjectBeta = New-DtServer -Name beta -UserName domain\administrator -Password password
            $DtJobForAlpha = Get-DtJob -ServiceHost $DtServerObjectBeta | Where-Object {$_.Statistics.CoreConnectionDetails.SourceMachineName -eq $DtServerObjectAlpha}
            $DtFixedBandwidth = Get-DtBandwidthLimit -ServiceHost $DtServerObjectBeta -JobId $DtJobForAlpha.Id
            $DtFixedBandwidth.Mode = "Fixed"
            $DtFixedBandwidth.Limit = 100000
            Set-DtBandwidthLimit -ServiceHost $DtServerObjectBeta -JobId $DtJobForAlpha.Id -BandwidthLimit $DtFixedBandwidth
            Disconnect-DtServer -ServiceHost $DtServerObjectBeta
            </code>
            </example>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.EngineControl.SetBandwidthLimitCommand.BandwidthLimit">
            <summary>
            Specify the bandwidth limit configuration from Get-BandwidthLimit. 
            </summary>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.EngineControl.ResumeMirrorCommand">
            <summary>
            This cmdlet resumes a paused mirror. For this cmdlet, the -ServiceHost should be your target server.
            </summary>
            <example>
            A server object is created for the server beta using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectBeta. The job(s) are retrieved from DtServerObjectBeta, but only the job information where the source machine name is equivalent to the name stored in the variable DtServerObjectAlpha is retrieved. That information is then stored in the variable DtJobForAlpha. The mirror for the job is then resumed. The connections for the server object are then closed.
            <code>
            $DtServerObjectBeta = New-DtServer -Name beta -UserName domain\administrator -Password password
            $DtJobForAlpha = Get-DtJob -ServiceHost $DtServerObjectBeta | Where-Object {$_.Statistics.CoreConnectionDetails.SourceMachineName -eq $DtServerObjectAlpha} 
            Resume-DtMirror -ServiceHost $DtServerObjectBeta -JobId $DtJobForAlpha.Id 
            Disconnect-DtServer -ServiceHost $DtServerObjectBeta
            </code>
            </example>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.EngineControl.ResumeTargetCommand">
            <summary>
            This cmdlet resumes Double-Take processing on the target. For this cmdlet, the -ServiceHost should be your target server.
            </summary>
            <example>
            A server object is created for the server beta using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectBeta. Double-Take processing on that server is then resumed. The connections for the server object are then closed.
            <code>
            $DtServerObjectBeta = New-DtServer -Name beta -UserName domain\administrator -Password password
            Resume-DtTarget -ServiceHost $DtServerObjectBeta -All
            Disconnect-DtServer -ServiceHost $DtServerObjectBeta
            </code>
            </example>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.EngineControl.ResumeTargetCommand.ServiceHost">
            <summary>
            Specify the server object returned from the New-DtServer cmdlet.
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.EngineControl.ResumeTargetCommand.All">
            <summary>
            Execute the cmdlet on all jobs that are present. 
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.EngineControl.ResumeTargetCommand.JobId">
            <summary>
            Specify the job GUID returned from the New-DtJob cmdlet or the Id within the job information returned from the Get-DtJob cmdlet. 
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.EngineControl.ResumeTargetCommand.JobInfo">
            <summary>
            Specify the job information returned from the Get-DtJob cmdlet. The job information can be piped from the Get-DtJob cmdlet. 
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.EngineControl.ResumeTargetCommand.ConnectionId">
            <summary>
            Specify the connection ID returned from the Get-DtConnectionIds cmdlet. 
            </summary>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.EngineControl.StartMirrorCommand">
            <summary>
            This cmdlet starts mirroring on the specified job. For this cmdlet, the -ServiceHost should be your target server.
            </summary>
            <example>
            A server object is created for the server beta using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectBeta. The job(s) are retrieved from DtServerObjectBeta, but only the job information where the source machine name is equivalent to the name stored in the variable DtServerObjectAlpha is retrieved. That information is then stored in the variable DtJobForAlpha. The mirror options are stored in DtMirrorChecksum. The ComparisonCriteria value is changed to checksum and the Options are set to Synchronize and CalculateDifferences. Then the mirror is started for the job using the stored mirroring options. The connections for the server object are then closed.
            <code>
            $DtServerObjectBeta = New-DtServer -Name beta -UserName domain\administrator -Password password
            $DtJobForAlpha = Get-DtJob -ServiceHost $DtServerObjectBeta | Where-Object {$_.Statistics.CoreConnectionDetails.SourceMachineName -eq $DtServerObjectAlpha}
            $DtMirrorChecksum = New-Object DoubleTake.Core.Contract.Connection.MirrorParameters
            $DtMirrorChecksum.ComparisonCriteria = "Checksum"
            $DtMirrorChecksum.Options = "Synchronize,CalculateDifferences"
            Start-DtMirror -ServiceHost $DtServerObjectBeta -JobId $DtJobForAlpha.Id -MirrorParameters $DtMirrorChecksum
            Disconnect-DtServer -ServiceHost $DtServerObjectBeta
            </code>
            </example>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.EngineControl.StartMirrorCommand.MirrorParameters">
            <summary>
            Specify the mirror options available in DoubleTake.Core.Contract.Connection.MirrorParameters. Use the Windows PowerShell New-Object cmdlet to create this object.
            </summary>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.EngineControl.StopMirrorCommand">
            <summary>
            This cmdlet stops mirroring on the specified job. For this cmdlet, the -ServiceHost should be your target server.
            </summary>
            <example>
            A server object is created for the server beta using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectBeta. The job(s) are retrieved from DtServerObjectBeta, but only the job information where the source machine name is equivalent to the name stored in the variable DtServerObjectAlpha is retrieved. That information is then stored in the variable DtJobForAlpha. The mirror is then stopped for the job. The connections for the server object are then closed.
            <code>
            $DtServerObjectBeta = New-DtServer -Name beta -UserName domain\administrator -Password password
            $DtJobForAlpha = Get-DtJob -ServiceHost $DtServerObjectBeta | Where-Object {$_.Statistics.CoreConnectionDetails.SourceMachineName -eq $DtServerObjectAlpha} 
            Stop-DtMirror -ServiceHost $DtServerObjectBeta -JobId $DtJobForAlpha.Id
            Disconnect-DtServer -ServiceHost $DtServerObjectBeta
            </code>
            </example>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.EngineControl.StopReplicationCommand">
            <summary>
            This cmdlet stops replication on the specified job. For this cmdlet, the -ServiceHost should be your target server
            </summary>
            <example>
            A server object is created for the server beta using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectBeta. The job(s) are retrieved from DtServerObjectBeta, but only the job information where the source machine name is equivalent to the name stored in the variable DtServerObjectAlpha is retrieved. That information is then stored in the variable DtJobForAlpha. Replication is then stopped for the job. The connections for the server object are then closed.
            <code>
            $DtServerObjectBeta = New-DtServer -Name beta -UserName domain\administrator -Password password
            $DtJobForAlpha = Get-DtJob -ServiceHost $DtServerObjectBeta | Where-Object {$_.Statistics.CoreConnectionDetails.SourceMachineName -eq $DtServerObjectAlpha} 
            Stop-DtReplication -ServiceHost $DtServerObjectBeta -JobId $DtJobForAlpha.Id
            Disconnect-DtServer -ServiceHost $DtServerObjectBeta
            </code>
            </example>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.EngineControl.SuspendMirrorCommand">
            <summary>
            This cmdlet pauses mirroring. For this cmdlet, the -ServiceHost should be your target server.
            </summary>
            <example>
            A server object is created for the server beta using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectBeta. The job(s) are retrieved from DtServerObjectBeta, but only the job information where the source machine name is equivalent to the name stored in the variable DtServerObjectAlpha is retrieved. That information is then stored in the variable DtJobForAlpha. The mirror for the job is then paused. The connections for the server object are then closed.
            <code>
            $DtServerObjectBeta = New-DtServer -Name beta -UserName domain\administrator -Password password
            $DtJobForAlpha = Get-DtJob -ServiceHost $DtServerObjectBeta | Where-Object {$_.Statistics.CoreConnectionDetails.SourceMachineName -eq $DtServerObjectAlpha} 
            Suspend-DtMirror -ServiceHost $DtServerObjectBeta -JobId $DtJobForAlpha.Id 
            Disconnect-DtServer -ServiceHost $DtServerObjectBeta
            </code>
            </example>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.EngineControl.StartReplicationCommand">
            <summary>
            This cmdlet starts replication on the specified job. For this cmdlet, the -ServiceHost should be your target server.
            </summary>
            <example>
            A server object is created for the server beta using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectBeta. The job(s) are retrieved from DtServerObjectBeta, but only the job information where the source machine name is equivalent to the name stored in the variable DtServerObjectAlpha is retrieved. That information is then stored in the variable DtJobForAlpha. Replication is then started for the job. The connections for the server object are then closed.
            <code>
            $DtServerObjectBeta = New-DtServer -Name beta -UserName domain\administrator -Password password
            $DtJobForAlpha = Get-DtJob -ServiceHost $DtServerObjectBeta | Where-Object {$_.Statistics.CoreConnectionDetails.SourceMachineName -eq $DtServerObjectAlpha} 
            Start-DtReplication -ServiceHost $DtServerObjectBeta -JobId $DtJobForAlpha.Id
            Disconnect-DtServer -ServiceHost $DtServerObjectBeta
            </code>
            </example>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.EngineControl.SuspendTargetCommand">
            <summary>
            This cmdlet pauses Double-Take processing on the target. Incoming Double-Take data from the source will be queued on the target. All active jobs to the target will complete the operations already in progress. Any new operations will be queued on the target until the target is resumed. The data will not be committed until the target is resumed. Pausing the target only pauses Double-Take processing, not the entire server. For this cmdlet, the -ServiceHost should be your target server.
            </summary>
            <example>
            A server object is created for the server beta using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectBeta. The job(s) are retrieved from DtServerObjectBeta, but only the job information where the source machine name is equivalent to the name stored in the variable DtServerObjectAlpha is retrieved. That information is then stored in the variable DtJobForAlpha. Double-Take processing for the job is then paused. The connections for the server object are then closed.
            <code>
            $DtServerObjectBeta = New-DtServer -Name beta -UserName domain\administrator -Password password
            $DtJobForAlpha = Get-DtJob -ServiceHost $DtServerObjectBeta | Where-Object {$_.Statistics.CoreConnectionDetails.SourceMachineName -eq $DtServerObjectAlpha} 
            Suspend-DtTarget -ServiceHost $DtServerObjectBeta -JobId $DtJobForAlpha.Id
            Disconnect-DtServer -ServiceHost $DtServerObjectBeta
            </code>
            </example>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.EngineControl.SuspendTargetCommand.ServiceHost">
            <summary>
            Specify the server object returned from the New-DtServer cmdlet. 
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.EngineControl.SuspendTargetCommand.All">
            <summary>
            Execute the cmdlet on all jobs that are present. 
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.EngineControl.SuspendTargetCommand.JobId">
            <summary>
            Specify the job GUID returned from the New-DtJob cmdlet or the Id within the job information returned from the Get-DtJob cmdlet. 
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.EngineControl.SuspendTargetCommand.JobInfo">
            <summary>
            Specify the job information returned from the Get-DtJob cmdlet. The job information can be piped from the Get-DtJob cmdlet and used in this cmdlet. 
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.EngineControl.SuspendTargetCommand.ConnectionId">
            <summary>
            Specify the connection ID returned from the Get-DtConnectionIds cmdlet. 
            </summary>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.EngineControl.UpdateSharesCommand">
            <summary>
            This cmdlet updates source share information on the target for the specified job. For this cmdlet, the -ServiceHost should be your target server.
            </summary>
            <example>
            A server object is created for the server beta using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectBeta. The job(s) are retrieved from DtServerObjectBeta, but only the job information where the source machine name is equivalent to the name stored in the variable DtServerObjectAlpha is retrieved. That information is then stored in the variable DtJobForAlpha. Shares are then updated on the target for the job. The connections for the server object are then closed.
            <code>
            $DtServerObjectBeta = New-DtServer -Name beta -UserName domain\administrator -Password password 
            $DtJobForAlpha = Get-DtJob -ServiceHost $DtServerObjectBeta | Where-Object {$_.Statistics.CoreConnectionDetails.SourceMachineName -eq $DtServerObjectAlpha} 
            Update-DtShares -ServiceHost $DtServerObjectBeta -JobId $DtJobForAlpha.Id 
            Disconnect-DtServer -ServiceHost $DtServerObjectBeta
            </code>
            </example>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.NewUriCommand">
            <summary>
            This cmdlet creates a URI (uniform resource identifier) that is used to specify job credentials.
            </summary>
            <example>
            A URI is created for http://server:6320.
            <code>
            New-DtUri -Literal "http://server:6320"
            </code>
            </example>
            <example>
            A URI is created for foo://username:password@domain.com:6320/location/index?type=volume&amp;directory=C#location.
            <code>
            New-DtUri -Literal &quot;foo://username:password@domain.com:6320/location/index?type=volume&amp;directory=C#location&quot;
            </code>
            </example>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.NewUriCommand.Literal">
            <summary>
            Specify the entire URI string.
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.NewUriCommand.NetworkId">
            <summary>
            Specify the name or IP address of the server.
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.NewUriCommand.Credential">
            <summary>
            Specify the credential object returned from the Windows PowerShell Get-Credential cmdlet. This password will not be visible because Windows stores an encrypted password. 
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.NewUriCommand.Port">
            <summary>
            Specify the communications port.
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.NewUriCommand.Scheme">
            <summary>
            Specify the scheme name.
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.NewUriCommand.Query">
            <summary>
            Specify any additional identification information.
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.NewUriCommand.Fragment">
            <summary>
            Specify any identifying information that provides direction to a secondary resource.
            </summary>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.NewServerCommand">
            <summary>
            This cmdlet creates a server object with specific credentials associated with it. This may be any type of server in your organization, for example a Double-Take server, a DNS server, an application server, and so on. This object is used to communicate with the Double-Take Management Service. You should close the connections to this server object when you are finished using it by using Disconnect-DtServer.
            </summary>
            <example>
            A server object is created for the server alpha using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectAlpha. The connections for the server object are then closed.
            <code>
            $DtServerObjectAlpha= New-DtServer -Name alpha -UserName domain\administrator -Password password
            Disconnect-DtServer -ServiceHost $DtServerObjectAlpha
            </code>
            </example>
            <example>
            User credentials are stored in a variable called $DtCredential. The script will prompt you to supply the username and password and the credentials will be encrypted. Then the stored credentials are used to create a new server object for the server alpha. It assigns the server object to the variable called DtServerObject. The connections for the server object are then closed.
            <code>
            $DtCredentialEncrypted = Get-Credential
            $DtServerObjectAlpha = New-DtServer -Name alpha -Credential $DtCredential
            Disconnect-DtServer -ServiceHost $DtServerObjectAlpha
            </code>
            </example>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.NewServerCommand.Name">
            <summary>
            Specify the name or IP address of the server, cluster, or cluster node.
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.NewServerCommand.UserName">
            <summary>
            Specify a user name. If you are using a domain, specify domain\user name.
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.NewServerCommand.Password">
            <summary>
            Specify the password associated with the user you have entered. This password will be visible in plain text.
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.NewServerCommand.Credential">
            <summary>
            Specify the credential object returned from the Windows PowerShell Get-Credential cmdlet. This password will not be visible because Windows stores an encrypted password. 
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.NewServerCommand.Role">
            <summary>
            Specify one of the following roles for the server object you are creating. These servers are used when you specify the -OtherServers parameter in other cmdlets.
            TargetVimServer - This is the ESX server or vCenter that will host the replica virtual machine after failover. If you are using vCenter, specify your vCenter. Only specify an ESX host if you are using ESX standalone. 
            ReverseVimServer - This is the ESX server or vCenter server that will host the replica virtual after reverse and failover. If you are using vCenter, specify your vCenter. Only specify an ESX host if you are using ESX standalone. 
            ReverseHelperRole - This is the target where data will be replicated after a reverse.
            </summary>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.SetServerCommand">
            <summary>
            This cmdlet changes the credentials associated with the server object that has already been created using the New-DtServer cmdlet.
            </summary>
            <example>
            User credentials are stored in a variable called $DtCredential. The script will prompt you to supply the username and password and the credentials will be encrypted. Then the stored credentials are used to update the current credentials on the server alpha.
            <code>
            $DtCredentialEncrypted = Get-Credential
            Set-DtServerCredential -Input alpha -Credential $DtCredential
            </code>
            </example>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.SetServerCommand.Input">
            <summary>
            Specify the name or IP address of the server, cluster, or cluster node, or specify the server object returned from the New-DtServer cmdlet. 
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.SetServerCommand.Credential">
            <summary>
            Specify the credential object returned from the Windows PowerShell Get-Credential cmdlet. This password will not be visible because Windows stores an encrypted password. 
            </summary>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.WorkloadManagement.AddPhysicalRuleCommand">
            <summary>
            This cmdlet adds a physical rule to the specified workload on the specified server. For this cmdlet, the -ServiceHost should be your source server.
            </summary>
            <example>
            A server object is created for the server alpha using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectAlpha. The script then creates a workload on the server for a files and folders job, returning a global unique ID for the workload, and assigns that ID to the variable DtWorkloadGuid. A new object is created from Double-Take.Common.Contract.PhysicalRule to store the physical path C:\DirName in the variable DtPhysicalPath. Finally, the physical rule is added to the workload on the server. The connections for the server object are then closed. 
            <code>
            $DtServerObjectAlpha= New-DtServer -Name alpha -UserName domain\administrator -Password password
            $DtWorkloadGuid = New-DtWorkload -ServiceHost $DtServerObjectAlpha -WorkloadTypeName FilesAndFolders
            $DtPhysicalPath = New-Object DoubleTake.Common.Contract.PhysicalRule -Property @{Path="C:\DirName"}
            Add-DtPhysicalRule -ServiceHost $DtServerObjectAlpha -WorkloadId $DtWorkloadGuid -Rule $DtPhysicalPath
            Disconnect-DtServer -ServiceHost $DtServerObjectAlpha
            </code>
            </example>
            <example>
            A server object is created for the server alpha using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectAlpha. The script then creates a workload on the server for a files and folders job, returning a global unique ID for the workload, and assigns that ID to the variable DtWorkloadGuid. A physical rule is then created for the path C:\DirName. The connections for the server object are then closed.
            <code>
            $DtServerObjectAlpha= New-DtServer -Name alpha -UserName domain\administrator -Password password
            $DtWorkloadGuid = New-DtWorkload -ServiceHost $DtServerObjectAlpha -WorkloadTypeName FilesAndFolders
            Add-DtPhysicalRule -ServiceHost $DtServerObjectAlpha -WorkloadId $DtWorkloadGuid -Path "C:\DirName"
            Disconnect-DtServer -ServiceHost $DtServerObjectAlpha
            </code>
            </example>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.WorkloadManagement.AddPhysicalRuleCommand.Exclude">
            <summary>
            Exclude the specified path from mirroring and replication. If you do not specify this option, the path will be included for mirroring and replication.
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.WorkloadManagement.AddPhysicalRuleCommand.NonRecursive">
            <summary>
            Apply the rule to the subdirectories of the specified path. If you do not specify this option, the subdirectories of the specified path will not be included/excluded.
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.WorkloadManagement.AddPhysicalRuleCommand.Path">
            <summary>
            Specify the path on the source that contains the data that you want to protect.
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.WorkloadManagement.AddPhysicalRuleCommand.Rule">
            <summary>
            Use the Windows PowerShell New-Object cmdlet to create a physical rule object from DoubleTake.Common.Contract.PhysicalRule.
            </summary>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.WorkloadManagement.AddUvraPhysicalRuleCommand">
            <summary>
            This cmdlet adds a physical rule to the specified full server to ESX appliance workload on the specified server. For this cmdlet, the -ServiceHost should be your source server, and it should be the object returned from New-DtUvraServer, not New-DtServer.
            </summary>
            <example>
            Three server objects are created for the source, the appliance, and the ESX server hosting the appliance, assigning the server objects to the DtServerObjectAlpha, DtApplianceObject, and DtApplianceHost variables, respectively. Then proxy and host information is retrieved for those server objects, storing the information in DtProxyInfo and DtVmHostInfo, respectively. That information is then used to retrieve the recommended job options. A rule for the path C:\Documents and Settings is added to the recommended job options. The connections for the server object are then closed.
            <code>
            $DtServerObjectAlpha= New-DtUvraServer -Name alpha -UserName domain\administrator -Password password -Port 6325
            $DtApplianceObject = New-DtUvraServer -Name beta -UserName root -Password password -Port 6325
            $DtApplianceHost = New-DtUvraServer -Name gamma -UserName root -Password password
            $DtWorkloadGuid = New-DtWorkload -ServiceHost $DtServerObjectAlpha -WorkloadTypeName Lvra
            $DtWorkload = Get-DtWorkload -ServiceHost $DtServerObjectAlpha -WorkloadId $DtWorkloadGuid
            $DtRecommendedJobOptions = Get-DtRecommendedJobOptions -ServiceHost $DtApplianceObject -Source $DtServerObjectAlpha -JobType Lvra -Workload $DtWorkload
            Add-DtUvraPhysicalRule -ServiceHost $DtApplianceObject -Workload
            $DtRecommendedJobOptions.JobOptions.Workload -Path "/home" 
            Disconnect-DtServer -ServiceHost $DtServerObjectAlpha 
            Disconnect-DtServer -ServiceHost $DtApplianceObject
            Disconnect-DtServer -ServiceHost $DtApplianceHost
            </code>
            </example>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.WorkloadManagement.AddUvraPhysicalRuleCommand.Workload">
            <summary>
            Specify the workload object returned from the Get-DtWorkload cmdlet. 
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.WorkloadManagement.AddUvraPhysicalRuleCommand.Path">
            <summary>
            Specify the path on the source that contains the data that you want to protect.
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.WorkloadManagement.AddUvraPhysicalRuleCommand.Recurse">
            <summary>
            Apply the rule to the subdirectories of the specified path. If you do not specify this option, the subdirectories of the specified path will not be included/excluded. 
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.WorkloadManagement.AddUvraPhysicalRuleCommand.Exclude">
            <summary>
            Exclude the specified path from mirroring and replication. If you do not specify this option, the path will be included for mirroring and replication. 
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.WorkloadManagement.AddUvraPhysicalRuleCommand.Rule">
            <summary>
            Use the Windows PowerShell New-Object cmdlet to create a physical rule object from DoubleTake.Common.Contract.PhysicalRule.
            </summary>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.WorkloadManagement.GetRecommendedPathTransformCommand">
            <summary>
            This cmdlet returns the recommended mapping between the location of the data on the source and the location of the replica data on the target for the specific type of workload. For this cmdlet, the -ServiceHost should be your source server.
            </summary>
            <example>
            A server object is created for the server alpha using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectAlpha. The script then creates a workload on the server for a full sever job, returning a global unique ID for the workload, and assigns that ID to the variable DtWorkloadGuid. The recommended mapping of the data on the source and the replica data on the target is then returned. The connections for the server object are then closed.
            <code>
            $DtServerObjectAlpha= New-DtServer -Name alpha -UserName domain\administrator -Password password
            $DtWorkloadGuid = New-DtWorkload -ServiceHost $DtServerObjectAlpha-WorkloadTypeName FullServerFailover
            Get-DtRecommendedPathTransform -ServiceHost $DtServerObjectAlpha -WorkloadId $DtWorkloadGuid
            Disconnect-DtServer -ServiceHost $DtServerObjectAlpha
            </code>
            </example>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.WorkloadManagement.GetRecommendedPathTransformCommand.BasePath">
            <summary>
            Specify the location on the target where the replica of the source data will be stored. By default, the replica source data will be stored in the same directory structure on the target, in a one-to-one configuration.
            </summary>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.WorkloadManagement.GetLogicalItemCommand">
            <summary>
            This cmdlet returns the logical items associated with the specified workload. For this cmdlet, the -ServiceHost should be your source server.
            </summary>
            <example>
            A server object is created for the server alpha using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectAlpha. The script then creates a workload on the server for a full sever job, returning a global unique ID for the workload, and assigns that ID to the variable DtWorkloadGuid. The logical items associated with the workload type and the server are then stored in the variable DtLogicalItems. The connections for the server object are then closed.
            <code>
            $DtServerObjectAlpha= New-DtServer -Name alpha -UserName domain\administrator -Password password 
            $DtWorkloadGuid = New-DtWorkload -ServiceHost $DtServerObjectAlpha-WorkloadTypeName FullServerFailover 
            $DtLogicalItems = Get-DtLogicalItem -ServiceHost $DtServerObjectAlpha -WorkloadId $DtWorkloadGUID 
            Disconnect-DtServer -ServiceHost $DtServerObjectAlpha
            </code>
            </example>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.WorkloadManagement.GetLogicalItemCommand.RefItem">
            <summary>
            Specify an object returned from a previous Get-DtLogicalItem call.
            </summary>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.WorkloadManagement.GetPhysicalItemCommand">
            <summary>
            This cmdlet returns the physical items available for the specified workload on the specified server. For this cmdlet, the -ServiceHost should be your source server.
            </summary>
            <example>
            A server object is created for the server alpha using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectAlpha. The script then creates a workload on the server for a files and folders job, returning a global unique ID for the workload, and assigns that ID to the variable DtWorkloadGuid. Finally, the physical items available for the workload on the server are returned. The connections for the server object are then closed.
            <code>
            $DtServerObjectAlpha= New-DtServer -Name alpha -UserName domain\administrator -Password password
            $DtWorkloadGuid = New-DtWorkload -ServiceHost $DtServerObjectAlpha -WorkloadTypeName FilesAndFolders
            Get-DtWorkloadPhysicalItem -ServiceHost $DtServerObjectAlpha -WorkloadId $DtWorkloadGuid 
            Disconnect-DtServer -ServiceHost $DtServerObjectAlpha
            </code>
            </example>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.WorkloadManagement.GetPhysicalItemCommand.RefItem">
            <summary>
            Specify an object returned from a previous Get-DtWorkloadPhysicalItem call.
            </summary>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.WorkloadManagement.GetWorkloadCommand">
            <summary>
            This cmdlet returns an object that represents the workload definition, including the workload type name, any physical rules, and any logical rules. This object is used in job cmdlets. For this cmdlet, the -ServiceHost should be your source server.
            </summary>
            <example>
            A server object is created for the server alpha using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectAlpha. The script then creates a workload on the server for a full sever job, returning a global unique ID for the workload, and assigns that ID to the variable DtWorkloadGuid. The workload definition for the workload type and the server is then stored in the DtWorkload variable. The connections for the server object are then closed.
            <code>
            $DtServerObjectAlpha= New-DtServer -Name alpha -UserName domain\administrator -Password password
            $DtWorkloadGuid = New-DtWorkload -ServiceHost $DtServerObjectAlpha-WorkloadTypeName FullServerFailover
            $DtWorkload = Get-DtWorkload -ServiceHost $DtServerObjectAlpha -WorkloadId $DtWorkloadGuid
            Disconnect-DtServer -ServiceHost $DtServerObjectAlpha
            </code>
            </example>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.WorkloadManagement.NewWorkloadCommand">
            <summary>
            This cmdlet creates a Double-Take workload on the specified server. For this cmdlet, the -ServiceHost should be your source server. 
            </summary>
            <example>
            A server object is created for the server alpha using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectAlpha. The script then creates a workload on the server for a files and folders job, returning a global unique ID for the workload, and assigns that ID to the variable DtWorkloadGuid. The connections for the server object are then closed. 
            <code>
            $DtServerObjectAlpha= New-DtServer -Name alpha -UserName domain\administrator -Password password 
            $DtWorkloadGuid = New-DtWorkload -ServiceHost $DtServerObjectAlpha -WorkloadTypeName FilesAndFolders 
            Disconnect-DtServer -ServiceHost $DtServerObjectAlpha
            </code>
            </example>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.WorkloadManagement.NewWorkloadCommand.WorkloadTypeName">
            <summary>
            Specify a supported workload type from the Get-DtWorkloadType cmdlet. 
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.WorkloadManagement.NewWorkloadCommand.Workload">
            <summary>
            Specify the workload object returned from the Get-DtWorkload cmdlet. 
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.WorkloadManagement.NewWorkloadCommand.ImageId">
            <summary>
            Specify the image GUID returned from the Get-DtImages cmdlet. 
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.WorkloadManagement.NewWorkloadCommand.SnapshotId">
            <summary>
            Specify the snapshot GUID returned from the Get-DtSnapshot cmdlet. 
            </summary>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.WorkloadManagement.RemovePhysicalRuleCommand">
            <summary>
            This cmdlet removes a physical rule from the specified workload on the specified server. For this cmdlet, the -ServiceHost should be your source server.
            </summary>
            <example>
            A server object is created for the server alpha using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectAlpha. The script then creates a workload on the server for a files and folders job, returning a global unique ID for the workload, and assigns that ID to the variable DtWorkloadGuid. A new object is created from Double-Take.Common.Contract.PhysicalRule to store the physical path C:\DirName in the variable DtPhysicalPath. Finally, the physical rule is removed from the workload on the server. The connections for the server object are then closed.
            <code>
            $DtServerObjectAlpha= New-DtServer -Name alpha -UserName domain\administrator -Password password
            $DtWorkloadGuid = New-DtWorkload -ServiceHost $DtServerObjectAlpha -WorkloadTypeName FilesAndFolders
            $DtPhysicalPath = New-Object DoubleTake.Common.Contract.PhysicalRule -Property @{Path="C:\DirName"}
            Remove-DtPhysicalRule -ServiceHost $DtServerObjectAlpha -WorkloadId $DtWorkloadGuid -Rule $DtPhysicalPath
            Disconnect-DtServer -ServiceHost $DtServerObjectAlpha
            </code>
            </example>
            <example>
            A server object is created for the server alpha using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectAlpha. The script then creates a workload on the server for a files and folders job, returning a global unique ID for the workload, and assigns that ID to the variable DtWorkloadGuid. The workload information for the workload is then stored in DtWorkloadInfo. The physical rule within DtWorkloadInfo called C:\DirNameToRemove is then stored in DtRemoveRule. Finally, the physical rule DtRemoveRule is removed from the workload on the server. The connections for the server object are then closed.
            <code>
            $DtServerObjectAlpha= New-DtServer -Name alpha -UserName domain\administrator -Password password 
            $DtWorkloadGuid = New-DtWorkload -ServiceHost $DtServerObjectAlpha -WorkloadTypeName FilesAndFolders
            $DtWorkloadInfo=Get-DtWorkload -ServiceHost $DtServerObjectAlpha -WorkloadId $DtWorkloadGuid 
            $DtRemoveRule = $DtWorkloadInfo.PhysicalRules | Where-Object {$_.Path -eq "C:\DirNameToRemove"} 
            Remove-DtPhysicalRule -ServiceHost $DtServerObjectAlpha -WorkloadId $DtWorkloadGuid -Rule $DtRemoveRule 
            Disconnect-DtServer -ServiceHost $DtServerObjectAlpha
            </code>
            </example>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.WorkloadManagement.RemovePhysicalRuleCommand.Rule">
            <summary>
            Use the Windows PowerShell New-Object cmdlet to create a physical rule object from DoubleTake.Common.Contract.PhysicalRule.
            </summary>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.WorkloadManagement.GetWorkloadTypeCommand">
            <summary>
            This cmdlet returns the types of workloads that are supported on the specified server. The supported workload types are based on the Double-Take activation code(s) on the server, the applications on the server, the server configuration (like standalone or cluster), and so on. For this cmdlet, the -ServiceHost should be your source server.
            </summary>
            <example>
            A server object is created for the server alpha using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectAlpha. Then it returns the workload types that are supported on the server. The connections for the server object are then closed.
            <code>
            $DtServerObjectAlpha= New-DtServer -Name alpha -UserName domain\administrator -Password password 
            Get-DtWorkloadType -ServiceHost $DtServerObjectAlpha 
            Disconnect-DtServer -ServiceHost $DtServerObjectAlpha
            </code>
            </example>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.WorkloadManagement.CloseWorkloadCommand">
            <summary>
            This cmdlet closes the workload creation process on the specified server and removes all resources associated with the workload creation process. For this cmdlet, the -ServiceHost should be your source server.
            </summary>
            <example>
            A server object is created for the server alpha using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectAlpha. The script then creates a workload on the server for a files and folders job, returning a global unique ID for the workload, and assigns that ID to the variable DtWorkloadGuid. The workload is then closed on the server. The connections for the server object are then closed.
            <code>
            $DtServerObjectAlpha= New-DtServer -Name alpha -UserName domain\administrator -Password password
            $DtWorkloadGuid = New-DtWorkload -ServiceHost $DtServerObjectAlpha -WorkloadTypeName FilesAndFolders 
            Close-DtWorkload -ServiceHost $DtServerObjectAlpha -WorkloadId $DtWorkloadGuid
            Disconnect-DtServer -ServiceHost $DtServerObjectAlpha
            </code>
            </example>
        </member>
        <member name="T:DoubleTake.PowerShell.Commands.WorkloadManagement.SetLogicalItemSelectionCommand">
            <summary>
            This cmdlet adds or removes a logical items for the specified workload for the specified server. Adding or removing logical items will add or remove physical rules depending on the workload type. For this cmdlet, the -ServiceHost should be your source server.
            </summary>
            <example>
            A server object is created for the server alpha using the domain\administrator and password credentials. It assigns the server object to the variable called DtServerObjectAlpha. The script then creates a workload on the server for a files and folders job, returning a global unique ID for the workload, and assigns that ID to the variable DtWorkloadGuid. The logical items associated with the workload type and the server are then stored in the variable DtLogicalItems. Finally, the first logical item in DtLogicalItems is added to the workload. The connections for the server object are then closed.
            <code>
            $DtServerObjectAlpha= New-DtServer -Name alpha -UserName domain\administrator -Password password 
            $DtWorkloadGuid = New-DtWorkload -ServiceHost $DtServerObjectAlpha -WorkloadTypeName FilesAndFolders 
            $DtLogicalItems = Get-DtLogicalItem -ServiceHost $DtServerObjectAlpha -WorkloadId $DtWorkloadGUID 
            Set-DtLogicalItemSelection -ServiceHost $DtServerObjectAlpha -WorkloadId $DtWorkloadGuid -LogicalPath $DtLogicalItem[0].Path 
            Disconnect-DtServer -ServiceHost $DtServerObjectAlpha
            </code>
            </example>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.WorkloadManagement.SetLogicalItemSelectionCommand.LogicalPath">
            <summary>
            Specify the path of an item returned from Get-DtLogicalItem. 
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.WorkloadManagement.SetLogicalItemSelectionCommand.Unselect">
            <summary>
            Specify this option if you want to remove the logical item.
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Commands.WorkloadManagement.WorkloadCommandBase.WorkloadId">
            <summary>
            Specify the workload GUID returned from the New-DtWorkload cmdlet using the workload type name parameter.
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Server.HostName">
            <summary>
            This value is the name of the server.
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Server.Role">
            <summary>
            This value is an optional role defined for the server.
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Server.Port">
            <summary>
            This value is the port number used to access the server.
            </summary>
        </member>
        <member name="P:DoubleTake.PowerShell.Server.Credentials">
            <summary>
            This value represents the credentials used to access the server.
            </summary>
        </member>
    </members>
</doc>
