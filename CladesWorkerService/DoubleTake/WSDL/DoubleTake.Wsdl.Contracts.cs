//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Runtime.Serialization.ContractNamespaceAttribute("DoubleTake.Jobs.Contract.DTHV", ClrNamespace="DoubleTake.Jobs.Contract.DTHV")]
[assembly: System.Runtime.Serialization.ContractNamespaceAttribute("DoubleTake.Jobs.Contract.Diagnostics", ClrNamespace="DoubleTake.Jobs.Contract.Diagnostics")]
[assembly: System.Runtime.Serialization.ContractNamespaceAttribute("DoubleTake.Jobs.Contract.FullServer", ClrNamespace="DoubleTake.Jobs.Contract.FullServer")]
[assembly: System.Runtime.Serialization.ContractNamespaceAttribute("DoubleTake.Jobs.Contract.ImageBased", ClrNamespace="DoubleTake.Jobs.Contract.ImageBased")]
[assembly: System.Runtime.Serialization.ContractNamespaceAttribute("DoubleTake.Jobs.Contract.UVRA", ClrNamespace="DoubleTake.Jobs.Contract.UVRA")]
[assembly: System.Runtime.Serialization.ContractNamespaceAttribute("DoubleTake.Jobs.Contract.VRA", ClrNamespace="DoubleTake.Jobs.Contract.VRA")]
[assembly: System.Runtime.Serialization.ContractNamespaceAttribute("DoubleTake.Jobs.Contract.VcdVapp", ClrNamespace="DoubleTake.Jobs.Contract.VcdVapp")]
[assembly: System.Runtime.Serialization.ContractNamespaceAttribute("DoubleTake.Jobs.Contract", ClrNamespace="DoubleTake.Jobs.Contract1")]
[assembly: System.Runtime.Serialization.ContractNamespaceAttribute("http://www.doubletake.com/Jobs/Contract", ClrNamespace="www.doubletake.com.Jobs.Contract")]
[assembly: System.Runtime.Serialization.ContractNamespaceAttribute("DoubleTake.Common.Install", ClrNamespace="DoubleTake.Common.Install")]
[assembly: System.Runtime.Serialization.ContractNamespaceAttribute("DoubleTake.Common.Tasks", ClrNamespace="DoubleTake.Common.Tasks")]
[assembly: System.Runtime.Serialization.ContractNamespaceAttribute("DoubleTake.Core.Contract", ClrNamespace="DoubleTake.Core.Contract1")]
[assembly: System.Runtime.Serialization.ContractNamespaceAttribute("http://www.doubletake.com/Common/Contract", ClrNamespace="www.doubletake.com.Common.Contract")]

namespace DoubleTake.Jobs.Contract
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="JobInfo", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Jobs.Contract")]
    public partial class JobInfo : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string CreatorUserNameField;
        
        private DoubleTake.Jobs.Contract.Feature[] FeaturesField;
        
        private System.Guid IdField;
        
        private DoubleTake.Jobs.Contract.JobPersistedState JobPersistedStateField;
        
        private string JobTypeField;
        
        private bool ManagedField;
        
        private DoubleTake.Jobs.Contract.JobOptions OptionsField;
        
        private System.Collections.Generic.Dictionary<string, System.Uri> OtherHostUrisField;
        
        private string[] OtherServerNetworkIdsField;
        
        private System.Uri SourceHostUriField;
        
        private int SourceManagementPortField;
        
        private string SourceNetworkIdField;
        
        private string SourceUniqueIdField;
        
        private DoubleTake.Jobs.Contract.JobStatistics StatisticsField;
        
        private DoubleTake.Jobs.Contract.JobStatus StatusField;
        
        private System.Uri TargetHostUriField;
        
        private int TargetManagementPortField;
        
        private string TargetNetworkIdField;
        
        private string TargetUniqueIdField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatorUserName
        {
            get
            {
                return this.CreatorUserNameField;
            }
            set
            {
                this.CreatorUserNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.Feature[] Features
        {
            get
            {
                return this.FeaturesField;
            }
            set
            {
                this.FeaturesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.JobPersistedState JobPersistedState
        {
            get
            {
                return this.JobPersistedStateField;
            }
            set
            {
                this.JobPersistedStateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string JobType
        {
            get
            {
                return this.JobTypeField;
            }
            set
            {
                this.JobTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Managed
        {
            get
            {
                return this.ManagedField;
            }
            set
            {
                this.ManagedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.JobOptions Options
        {
            get
            {
                return this.OptionsField;
            }
            set
            {
                this.OptionsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<string, System.Uri> OtherHostUris
        {
            get
            {
                return this.OtherHostUrisField;
            }
            set
            {
                this.OtherHostUrisField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] OtherServerNetworkIds
        {
            get
            {
                return this.OtherServerNetworkIdsField;
            }
            set
            {
                this.OtherServerNetworkIdsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Uri SourceHostUri
        {
            get
            {
                return this.SourceHostUriField;
            }
            set
            {
                this.SourceHostUriField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SourceManagementPort
        {
            get
            {
                return this.SourceManagementPortField;
            }
            set
            {
                this.SourceManagementPortField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceNetworkId
        {
            get
            {
                return this.SourceNetworkIdField;
            }
            set
            {
                this.SourceNetworkIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceUniqueId
        {
            get
            {
                return this.SourceUniqueIdField;
            }
            set
            {
                this.SourceUniqueIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.JobStatistics Statistics
        {
            get
            {
                return this.StatisticsField;
            }
            set
            {
                this.StatisticsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.JobStatus Status
        {
            get
            {
                return this.StatusField;
            }
            set
            {
                this.StatusField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Uri TargetHostUri
        {
            get
            {
                return this.TargetHostUriField;
            }
            set
            {
                this.TargetHostUriField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TargetManagementPort
        {
            get
            {
                return this.TargetManagementPortField;
            }
            set
            {
                this.TargetManagementPortField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetNetworkId
        {
            get
            {
                return this.TargetNetworkIdField;
            }
            set
            {
                this.TargetNetworkIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetUniqueId
        {
            get
            {
                return this.TargetUniqueIdField;
            }
            set
            {
                this.TargetUniqueIdField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="JobPersistedState", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Jobs.Contract")]
    public partial class JobPersistedState : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Jobs.Contract.Applications.ApplicationsPersistedState ApplicationsPersistedStateField;
        
        private DoubleTake.Jobs.Contract.ClusterPersistedState ClusterPersistedStateField;
        
        private DoubleTake.Jobs.Contract.DTHV.DTHVPersistedState DTHVPersistedStateField;
        
        private DoubleTake.Jobs.Contract.Diagnostics.DiagnosticsPersistedState DiagnosticsPersistedStateField;
        
        private DoubleTake.Jobs.Contract.Virtualization.DTAVPersistedState DtavPersistedStateField;
        
        private DoubleTake.Jobs.Contract.FailoverPersistedState FailoverPersistedStateField;
        
        private DoubleTake.Jobs.Contract.FilesAndFolders.FilesAndFoldersPersistedState FilesAndFoldersPersistedStateField;
        
        private DoubleTake.Jobs.Contract.FullServer.FullServerPersistedState FullServerPersistedStateField;
        
        private DoubleTake.Jobs.Contract.ImageBased.ImageProtectionPersistedState ImageProtectionPersistedStateField;
        
        private DoubleTake.Jobs.Contract.ImageBased.ImageRecoveryPersistedState ImageRecoveryPersistedStateField;
        
        private string PersistencePathField;
        
        private DoubleTake.Jobs.Contract.UVRA.UVRAPersistedState UVRAPersistedStateField;
        
        private DoubleTake.Jobs.Contract.VRA.VRAPersistedState VRAPersistedStateField;
        
        private DoubleTake.Jobs.Contract.VcdVapp.VcdVappPersistedState VcdVappPersistedStateField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.Applications.ApplicationsPersistedState ApplicationsPersistedState
        {
            get
            {
                return this.ApplicationsPersistedStateField;
            }
            set
            {
                this.ApplicationsPersistedStateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.ClusterPersistedState ClusterPersistedState
        {
            get
            {
                return this.ClusterPersistedStateField;
            }
            set
            {
                this.ClusterPersistedStateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.DTHV.DTHVPersistedState DTHVPersistedState
        {
            get
            {
                return this.DTHVPersistedStateField;
            }
            set
            {
                this.DTHVPersistedStateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.Diagnostics.DiagnosticsPersistedState DiagnosticsPersistedState
        {
            get
            {
                return this.DiagnosticsPersistedStateField;
            }
            set
            {
                this.DiagnosticsPersistedStateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.Virtualization.DTAVPersistedState DtavPersistedState
        {
            get
            {
                return this.DtavPersistedStateField;
            }
            set
            {
                this.DtavPersistedStateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.FailoverPersistedState FailoverPersistedState
        {
            get
            {
                return this.FailoverPersistedStateField;
            }
            set
            {
                this.FailoverPersistedStateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.FilesAndFolders.FilesAndFoldersPersistedState FilesAndFoldersPersistedState
        {
            get
            {
                return this.FilesAndFoldersPersistedStateField;
            }
            set
            {
                this.FilesAndFoldersPersistedStateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.FullServer.FullServerPersistedState FullServerPersistedState
        {
            get
            {
                return this.FullServerPersistedStateField;
            }
            set
            {
                this.FullServerPersistedStateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.ImageBased.ImageProtectionPersistedState ImageProtectionPersistedState
        {
            get
            {
                return this.ImageProtectionPersistedStateField;
            }
            set
            {
                this.ImageProtectionPersistedStateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.ImageBased.ImageRecoveryPersistedState ImageRecoveryPersistedState
        {
            get
            {
                return this.ImageRecoveryPersistedStateField;
            }
            set
            {
                this.ImageRecoveryPersistedStateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PersistencePath
        {
            get
            {
                return this.PersistencePathField;
            }
            set
            {
                this.PersistencePathField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.UVRA.UVRAPersistedState UVRAPersistedState
        {
            get
            {
                return this.UVRAPersistedStateField;
            }
            set
            {
                this.UVRAPersistedStateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.VRA.VRAPersistedState VRAPersistedState
        {
            get
            {
                return this.VRAPersistedStateField;
            }
            set
            {
                this.VRAPersistedStateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.VcdVapp.VcdVappPersistedState VcdVappPersistedState
        {
            get
            {
                return this.VcdVappPersistedStateField;
            }
            set
            {
                this.VcdVappPersistedStateField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="JobOptions", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Jobs.Contract")]
    public partial class JobOptions : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Jobs.Contract.ApplicationOptions ApplicationOptionsField;
        
        private DoubleTake.Jobs.Contract.Scheduling.BandwidthOptions BandwidthOptionsField;
        
        private DoubleTake.Jobs.Contract.ClusterOptions ClusterOptionsField;
        
        private DoubleTake.Jobs.Contract.CoreConnectionOptions CoreConnectionOptionsField;
        
        private DoubleTake.Jobs.Contract.CoreMonitorOptions CoreMonitorOptionsField;
        
        private DoubleTake.Jobs.Contract.DTHVOptions DTHVOptionsField;
        
        private DoubleTake.Jobs.Contract.DNSOptions DnsOptionsField;
        
        private DoubleTake.Jobs.Contract.DTAVOptions DtavOptionsField;
        
        private System.Nullable<bool> FailoverMonitoringEnabledField;
        
        private DoubleTake.Jobs.Contract.FullServerFailoverOptions FullServerFailoverOptionsField;
        
        private DoubleTake.Jobs.Contract.ImageProtectionOptions ImageProtectionOptionsField;
        
        private DoubleTake.Jobs.Contract.ImageRecoveryOptions ImageRecoveryOptionsField;
        
        private DoubleTake.Jobs.Contract.MonitoringOptions MonitoringOptionsField;
        
        private string NameField;
        
        private DoubleTake.Jobs.Contract.SimpleFailoverMonitorOptions SimpleFailoverMonitorOptionsField;
        
        private DoubleTake.Jobs.Contract.SystemStateOptions SystemStateOptionsField;
        
        private DoubleTake.Jobs.Contract.TargetServicesOptions TargetServicesOptionsField;
        
        private DoubleTake.Jobs.Contract.UnmanagedConnectionOptions UnmanagedConnectionOptionsField;
        
        private DoubleTake.Jobs.Contract.VRAOptions VRAOptionsField;
        
        private DoubleTake.Jobs.Contract.VcdVappOptions VcdVappOptionsField;
        
        private DoubleTake.Common.Contract.Workload WorkloadField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.ApplicationOptions ApplicationOptions
        {
            get
            {
                return this.ApplicationOptionsField;
            }
            set
            {
                this.ApplicationOptionsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.Scheduling.BandwidthOptions BandwidthOptions
        {
            get
            {
                return this.BandwidthOptionsField;
            }
            set
            {
                this.BandwidthOptionsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.ClusterOptions ClusterOptions
        {
            get
            {
                return this.ClusterOptionsField;
            }
            set
            {
                this.ClusterOptionsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.CoreConnectionOptions CoreConnectionOptions
        {
            get
            {
                return this.CoreConnectionOptionsField;
            }
            set
            {
                this.CoreConnectionOptionsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.CoreMonitorOptions CoreMonitorOptions
        {
            get
            {
                return this.CoreMonitorOptionsField;
            }
            set
            {
                this.CoreMonitorOptionsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.DTHVOptions DTHVOptions
        {
            get
            {
                return this.DTHVOptionsField;
            }
            set
            {
                this.DTHVOptionsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.DNSOptions DnsOptions
        {
            get
            {
                return this.DnsOptionsField;
            }
            set
            {
                this.DnsOptionsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.DTAVOptions DtavOptions
        {
            get
            {
                return this.DtavOptionsField;
            }
            set
            {
                this.DtavOptionsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> FailoverMonitoringEnabled
        {
            get
            {
                return this.FailoverMonitoringEnabledField;
            }
            set
            {
                this.FailoverMonitoringEnabledField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.FullServerFailoverOptions FullServerFailoverOptions
        {
            get
            {
                return this.FullServerFailoverOptionsField;
            }
            set
            {
                this.FullServerFailoverOptionsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.ImageProtectionOptions ImageProtectionOptions
        {
            get
            {
                return this.ImageProtectionOptionsField;
            }
            set
            {
                this.ImageProtectionOptionsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.ImageRecoveryOptions ImageRecoveryOptions
        {
            get
            {
                return this.ImageRecoveryOptionsField;
            }
            set
            {
                this.ImageRecoveryOptionsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.MonitoringOptions MonitoringOptions
        {
            get
            {
                return this.MonitoringOptionsField;
            }
            set
            {
                this.MonitoringOptionsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.SimpleFailoverMonitorOptions SimpleFailoverMonitorOptions
        {
            get
            {
                return this.SimpleFailoverMonitorOptionsField;
            }
            set
            {
                this.SimpleFailoverMonitorOptionsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.SystemStateOptions SystemStateOptions
        {
            get
            {
                return this.SystemStateOptionsField;
            }
            set
            {
                this.SystemStateOptionsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.TargetServicesOptions TargetServicesOptions
        {
            get
            {
                return this.TargetServicesOptionsField;
            }
            set
            {
                this.TargetServicesOptionsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.UnmanagedConnectionOptions UnmanagedConnectionOptions
        {
            get
            {
                return this.UnmanagedConnectionOptionsField;
            }
            set
            {
                this.UnmanagedConnectionOptionsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.VRAOptions VRAOptions
        {
            get
            {
                return this.VRAOptionsField;
            }
            set
            {
                this.VRAOptionsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.VcdVappOptions VcdVappOptions
        {
            get
            {
                return this.VcdVappOptionsField;
            }
            set
            {
                this.VcdVappOptionsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Common.Contract.Workload Workload
        {
            get
            {
                return this.WorkloadField;
            }
            set
            {
                this.WorkloadField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="JobStatistics", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Jobs.Contract")]
    public partial class JobStatistics : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Jobs.Contract.CoreConnectionDetails CoreConnectionDetailsField;
        
        private DoubleTake.Jobs.Contract.CoreMonitorDetails CoreMonitorDetailsField;
        
        private DoubleTake.Jobs.Contract.FullServer.FullServerJobDetails FullServerJobDetailsField;
        
        private DoubleTake.Jobs.Contract.ImageBased.ImageProtectionJobDetails ImageProtectionJobDetailsField;
        
        private DoubleTake.Jobs.Contract.ImageBased.ImageRecoveryJobDetails ImageRecoveryJobDetailsField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.CoreConnectionDetails CoreConnectionDetails
        {
            get
            {
                return this.CoreConnectionDetailsField;
            }
            set
            {
                this.CoreConnectionDetailsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.CoreMonitorDetails CoreMonitorDetails
        {
            get
            {
                return this.CoreMonitorDetailsField;
            }
            set
            {
                this.CoreMonitorDetailsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.FullServer.FullServerJobDetails FullServerJobDetails
        {
            get
            {
                return this.FullServerJobDetailsField;
            }
            set
            {
                this.FullServerJobDetailsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.ImageBased.ImageProtectionJobDetails ImageProtectionJobDetails
        {
            get
            {
                return this.ImageProtectionJobDetailsField;
            }
            set
            {
                this.ImageProtectionJobDetailsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.ImageBased.ImageRecoveryJobDetails ImageRecoveryJobDetails
        {
            get
            {
                return this.ImageRecoveryJobDetailsField;
            }
            set
            {
                this.ImageRecoveryJobDetailsField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="JobStatus", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Jobs.Contract")]
    public partial class JobStatus : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Jobs.Contract.JobAction[] ActionsField;
        
        private bool CanCreateImageRecoveryField;
        
        private bool CanDeleteField;
        
        private bool CanEditField;
        
        private bool CanFailbackField;
        
        private bool CanFailoverField;
        
        private bool CanPauseField;
        
        private bool CanRestoreField;
        
        private bool CanReverseField;
        
        private bool CanStartField;
        
        private bool CanStopField;
        
        private bool CanUndoFailoverField;
        
        private www.doubletake.com.Jobs.Contract.EngineControlStatus[] EngineControlStatusesField;
        
        private DoubleTake.Jobs.Contract.ExtendedLowLevelState[] ExtendedLowLevelStatesField;
        
        private DoubleTake.Jobs.Contract.Health HealthField;
        
        private string HighLevelStateField;
        
        private bool IsInErrorField;
        
        private string LowLevelStateField;
        
        private int PermillageCompleteField;
        
        private string TargetStateField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.JobAction[] Actions
        {
            get
            {
                return this.ActionsField;
            }
            set
            {
                this.ActionsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanCreateImageRecovery
        {
            get
            {
                return this.CanCreateImageRecoveryField;
            }
            set
            {
                this.CanCreateImageRecoveryField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanDelete
        {
            get
            {
                return this.CanDeleteField;
            }
            set
            {
                this.CanDeleteField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanEdit
        {
            get
            {
                return this.CanEditField;
            }
            set
            {
                this.CanEditField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanFailback
        {
            get
            {
                return this.CanFailbackField;
            }
            set
            {
                this.CanFailbackField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanFailover
        {
            get
            {
                return this.CanFailoverField;
            }
            set
            {
                this.CanFailoverField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanPause
        {
            get
            {
                return this.CanPauseField;
            }
            set
            {
                this.CanPauseField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanRestore
        {
            get
            {
                return this.CanRestoreField;
            }
            set
            {
                this.CanRestoreField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanReverse
        {
            get
            {
                return this.CanReverseField;
            }
            set
            {
                this.CanReverseField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanStart
        {
            get
            {
                return this.CanStartField;
            }
            set
            {
                this.CanStartField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanStop
        {
            get
            {
                return this.CanStopField;
            }
            set
            {
                this.CanStopField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanUndoFailover
        {
            get
            {
                return this.CanUndoFailoverField;
            }
            set
            {
                this.CanUndoFailoverField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public www.doubletake.com.Jobs.Contract.EngineControlStatus[] EngineControlStatuses
        {
            get
            {
                return this.EngineControlStatusesField;
            }
            set
            {
                this.EngineControlStatusesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.ExtendedLowLevelState[] ExtendedLowLevelStates
        {
            get
            {
                return this.ExtendedLowLevelStatesField;
            }
            set
            {
                this.ExtendedLowLevelStatesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.Health Health
        {
            get
            {
                return this.HealthField;
            }
            set
            {
                this.HealthField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HighLevelState
        {
            get
            {
                return this.HighLevelStateField;
            }
            set
            {
                this.HighLevelStateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsInError
        {
            get
            {
                return this.IsInErrorField;
            }
            set
            {
                this.IsInErrorField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LowLevelState
        {
            get
            {
                return this.LowLevelStateField;
            }
            set
            {
                this.LowLevelStateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PermillageComplete
        {
            get
            {
                return this.PermillageCompleteField;
            }
            set
            {
                this.PermillageCompleteField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetState
        {
            get
            {
                return this.TargetStateField;
            }
            set
            {
                this.TargetStateField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Feature", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Jobs.Contract")]
    public partial class Feature : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.Uri EndpointField;
        
        private string TagField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Uri Endpoint
        {
            get
            {
                return this.EndpointField;
            }
            set
            {
                this.EndpointField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Tag
        {
            get
            {
                return this.TagField;
            }
            set
            {
                this.TagField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ClusterPersistedState", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Jobs.Contract")]
    public partial class ClusterPersistedState : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string[] PossibleSourceClusterOwningNodesField;
        
        private string[] PossibleTargetClusterOwningNodesField;
        
        private string[] SourceClusterNodesField;
        
        private DoubleTake.Jobs.Contract.ResourceAndPassiveNodes[] SourceResourcesAndPassiveNodesField;
        
        private System.Guid TargetClusterMonitorIdField;
        
        private DoubleTake.Jobs.Contract.ResourceAndPassiveNodes[] TargetResourcesAndPassiveNodesField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] PossibleSourceClusterOwningNodes
        {
            get
            {
                return this.PossibleSourceClusterOwningNodesField;
            }
            set
            {
                this.PossibleSourceClusterOwningNodesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] PossibleTargetClusterOwningNodes
        {
            get
            {
                return this.PossibleTargetClusterOwningNodesField;
            }
            set
            {
                this.PossibleTargetClusterOwningNodesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] SourceClusterNodes
        {
            get
            {
                return this.SourceClusterNodesField;
            }
            set
            {
                this.SourceClusterNodesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.ResourceAndPassiveNodes[] SourceResourcesAndPassiveNodes
        {
            get
            {
                return this.SourceResourcesAndPassiveNodesField;
            }
            set
            {
                this.SourceResourcesAndPassiveNodesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid TargetClusterMonitorId
        {
            get
            {
                return this.TargetClusterMonitorIdField;
            }
            set
            {
                this.TargetClusterMonitorIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.ResourceAndPassiveNodes[] TargetResourcesAndPassiveNodes
        {
            get
            {
                return this.TargetResourcesAndPassiveNodesField;
            }
            set
            {
                this.TargetResourcesAndPassiveNodesField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FailoverPersistedState", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Jobs.Contract")]
    public partial class FailoverPersistedState : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Jobs.Contract.AddressPersistedState[] FailedOverAddressesField;
        
        private DoubleTake.Monitoring.Contract.Share[] FailedOverSharesField;
        
        private DoubleTake.Monitoring.Contract.Share[] LastKnownSourceSharesField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.AddressPersistedState[] FailedOverAddresses
        {
            get
            {
                return this.FailedOverAddressesField;
            }
            set
            {
                this.FailedOverAddressesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Monitoring.Contract.Share[] FailedOverShares
        {
            get
            {
                return this.FailedOverSharesField;
            }
            set
            {
                this.FailedOverSharesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Monitoring.Contract.Share[] LastKnownSourceShares
        {
            get
            {
                return this.LastKnownSourceSharesField;
            }
            set
            {
                this.LastKnownSourceSharesField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CoreConnectionPersistedState", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Jobs.Contract")]
    public partial class CoreConnectionPersistedState : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private int EngineConnectionIdField;
        
        private System.Guid IdField;
        
        private bool InitialMirrorCompleteField;
        
        private string SourceAddressField;
        
        private int SourceEnginePortField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EngineConnectionId
        {
            get
            {
                return this.EngineConnectionIdField;
            }
            set
            {
                this.EngineConnectionIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool InitialMirrorComplete
        {
            get
            {
                return this.InitialMirrorCompleteField;
            }
            set
            {
                this.InitialMirrorCompleteField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceAddress
        {
            get
            {
                return this.SourceAddressField;
            }
            set
            {
                this.SourceAddressField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SourceEnginePort
        {
            get
            {
                return this.SourceEnginePortField;
            }
            set
            {
                this.SourceEnginePortField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ResourceAndPassiveNodes", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Jobs.Contract")]
    public partial class ResourceAndPassiveNodes : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string[] passiveNodesField;
        
        private string resourceField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] passiveNodes
        {
            get
            {
                return this.passiveNodesField;
            }
            set
            {
                this.passiveNodesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string resource
        {
            get
            {
                return this.resourceField;
            }
            set
            {
                this.resourceField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DeleteOptions", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Jobs.Contract")]
    public partial class DeleteOptions : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private bool DeleteOnClusterResourceOfflineField;
        
        private bool DeleteReplicaField;
        
        private bool DiscardTargetQueueField;
        
        private DoubleTake.Core.Contract.ImageDeleteInfo ImageOptionsField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool DeleteOnClusterResourceOffline
        {
            get
            {
                return this.DeleteOnClusterResourceOfflineField;
            }
            set
            {
                this.DeleteOnClusterResourceOfflineField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool DeleteReplica
        {
            get
            {
                return this.DeleteReplicaField;
            }
            set
            {
                this.DeleteReplicaField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool DiscardTargetQueue
        {
            get
            {
                return this.DiscardTargetQueueField;
            }
            set
            {
                this.DiscardTargetQueueField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.ImageDeleteInfo ImageOptions
        {
            get
            {
                return this.ImageOptionsField;
            }
            set
            {
                this.ImageOptionsField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CoreMonitorPersistedState", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Jobs.Contract")]
    public partial class CoreMonitorPersistedState : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.Guid IdField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FailoverOptions", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Jobs.Contract")]
    public partial class FailoverOptions : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Core.Contract.Monitor.FailoverDataAction FailoverDataActionField;
        
        private DoubleTake.Jobs.Contract.FailoverMode FailoverModeField;
        
        private DoubleTake.Jobs.Contract.FailoverType FailoverTypeField;
        
        private bool PerformTestFailoverField;
        
        private System.Guid SnapshotIdField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Monitor.FailoverDataAction FailoverDataAction
        {
            get
            {
                return this.FailoverDataActionField;
            }
            set
            {
                this.FailoverDataActionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.FailoverMode FailoverMode
        {
            get
            {
                return this.FailoverModeField;
            }
            set
            {
                this.FailoverModeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.FailoverType FailoverType
        {
            get
            {
                return this.FailoverTypeField;
            }
            set
            {
                this.FailoverTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool PerformTestFailover
        {
            get
            {
                return this.PerformTestFailoverField;
            }
            set
            {
                this.PerformTestFailoverField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid SnapshotId
        {
            get
            {
                return this.SnapshotIdField;
            }
            set
            {
                this.SnapshotIdField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FailoverMode", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Jobs.Contract")]
    public enum FailoverMode : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Live = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Test = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Snapshot = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FailoverType", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Jobs.Contract")]
    public enum FailoverType : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Manual = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Automatic = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExtendedLowLevelState", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Jobs.Contract")]
    public partial class ExtendedLowLevelState : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Jobs.Contract.Health HealthField;
        
        private string MessageIdField;
        
        private string[] MessageIdFormatParametersField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.Health Health
        {
            get
            {
                return this.HealthField;
            }
            set
            {
                this.HealthField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MessageId
        {
            get
            {
                return this.MessageIdField;
            }
            set
            {
                this.MessageIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] MessageIdFormatParameters
        {
            get
            {
                return this.MessageIdFormatParametersField;
            }
            set
            {
                this.MessageIdFormatParametersField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Health", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Jobs.Contract")]
    public enum Health : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Ok = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Warning = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Error = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AddressPersistedState", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Jobs.Contract")]
    public partial class AddressPersistedState : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private int NteContextField;
        
        private string SourceAddresssField;
        
        private string TargetNicField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NteContext
        {
            get
            {
                return this.NteContextField;
            }
            set
            {
                this.NteContextField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceAddresss
        {
            get
            {
                return this.SourceAddresssField;
            }
            set
            {
                this.SourceAddresssField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetNic
        {
            get
            {
                return this.TargetNicField;
            }
            set
            {
                this.TargetNicField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ApplicationOptions", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Jobs.Contract")]
    public partial class ApplicationOptions : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string[] AagInstancesField;
        
        private string DagTargetPublicFolderDataPathField;
        
        private DoubleTake.Jobs.Contract.DnsRecordLockOptions[] DnsRecordLocksField;
        
        private DoubleTake.Core.Contract.Credentials ExchangeCredentialsField;
        
        private bool IsAagField;
        
        private bool IsDagField;
        
        private string MonitorScriptField;
        
        private int MonitoredServiceRepeatCountField;
        
        private DoubleTake.Jobs.Contract.ServiceInformation[] MonitoredServicesField;
        
        private bool RestartServiceField;
        
        private string SourceDomainField;
        
        private string SourceNameField;
        
        private string TargetDomainField;
        
        private string TargetNameField;
        
        private string TestPostFailoverScriptField;
        
        private string TestPostFailoverScriptArgumentsField;
        
        private string TestPreFailbackScriptField;
        
        private string TestPreFailbackScriptArgumentsField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] AagInstances
        {
            get
            {
                return this.AagInstancesField;
            }
            set
            {
                this.AagInstancesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DagTargetPublicFolderDataPath
        {
            get
            {
                return this.DagTargetPublicFolderDataPathField;
            }
            set
            {
                this.DagTargetPublicFolderDataPathField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.DnsRecordLockOptions[] DnsRecordLocks
        {
            get
            {
                return this.DnsRecordLocksField;
            }
            set
            {
                this.DnsRecordLocksField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Credentials ExchangeCredentials
        {
            get
            {
                return this.ExchangeCredentialsField;
            }
            set
            {
                this.ExchangeCredentialsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsAag
        {
            get
            {
                return this.IsAagField;
            }
            set
            {
                this.IsAagField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDag
        {
            get
            {
                return this.IsDagField;
            }
            set
            {
                this.IsDagField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MonitorScript
        {
            get
            {
                return this.MonitorScriptField;
            }
            set
            {
                this.MonitorScriptField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MonitoredServiceRepeatCount
        {
            get
            {
                return this.MonitoredServiceRepeatCountField;
            }
            set
            {
                this.MonitoredServiceRepeatCountField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.ServiceInformation[] MonitoredServices
        {
            get
            {
                return this.MonitoredServicesField;
            }
            set
            {
                this.MonitoredServicesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool RestartService
        {
            get
            {
                return this.RestartServiceField;
            }
            set
            {
                this.RestartServiceField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceDomain
        {
            get
            {
                return this.SourceDomainField;
            }
            set
            {
                this.SourceDomainField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceName
        {
            get
            {
                return this.SourceNameField;
            }
            set
            {
                this.SourceNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetDomain
        {
            get
            {
                return this.TargetDomainField;
            }
            set
            {
                this.TargetDomainField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetName
        {
            get
            {
                return this.TargetNameField;
            }
            set
            {
                this.TargetNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TestPostFailoverScript
        {
            get
            {
                return this.TestPostFailoverScriptField;
            }
            set
            {
                this.TestPostFailoverScriptField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TestPostFailoverScriptArguments
        {
            get
            {
                return this.TestPostFailoverScriptArgumentsField;
            }
            set
            {
                this.TestPostFailoverScriptArgumentsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TestPreFailbackScript
        {
            get
            {
                return this.TestPreFailbackScriptField;
            }
            set
            {
                this.TestPreFailbackScriptField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TestPreFailbackScriptArguments
        {
            get
            {
                return this.TestPreFailbackScriptArgumentsField;
            }
            set
            {
                this.TestPreFailbackScriptArgumentsField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ClusterOptions", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Jobs.Contract")]
    public partial class ClusterOptions : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string[] DependOnResourcesField;
        
        private bool InitializeOnTargetNodeMoveField;
        
        private string OriginalSourceClusterIdField;
        
        private string SourceClusterNameField;
        
        private string SourceGroupNameField;
        
        private bool SourceIsClusterField;
        
        private string TargetClusterNameField;
        
        private string TargetClusterResourceNamePrefixField;
        
        private string TargetClusterStoragePathField;
        
        private string TargetGroupNameField;
        
        private bool TargetIsClusterField;
        
        private string[] TargetVirtualServersField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] DependOnResources
        {
            get
            {
                return this.DependOnResourcesField;
            }
            set
            {
                this.DependOnResourcesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool InitializeOnTargetNodeMove
        {
            get
            {
                return this.InitializeOnTargetNodeMoveField;
            }
            set
            {
                this.InitializeOnTargetNodeMoveField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OriginalSourceClusterId
        {
            get
            {
                return this.OriginalSourceClusterIdField;
            }
            set
            {
                this.OriginalSourceClusterIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceClusterName
        {
            get
            {
                return this.SourceClusterNameField;
            }
            set
            {
                this.SourceClusterNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceGroupName
        {
            get
            {
                return this.SourceGroupNameField;
            }
            set
            {
                this.SourceGroupNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool SourceIsCluster
        {
            get
            {
                return this.SourceIsClusterField;
            }
            set
            {
                this.SourceIsClusterField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetClusterName
        {
            get
            {
                return this.TargetClusterNameField;
            }
            set
            {
                this.TargetClusterNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetClusterResourceNamePrefix
        {
            get
            {
                return this.TargetClusterResourceNamePrefixField;
            }
            set
            {
                this.TargetClusterResourceNamePrefixField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetClusterStoragePath
        {
            get
            {
                return this.TargetClusterStoragePathField;
            }
            set
            {
                this.TargetClusterStoragePathField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetGroupName
        {
            get
            {
                return this.TargetGroupNameField;
            }
            set
            {
                this.TargetGroupNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool TargetIsCluster
        {
            get
            {
                return this.TargetIsClusterField;
            }
            set
            {
                this.TargetIsClusterField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] TargetVirtualServers
        {
            get
            {
                return this.TargetVirtualServersField;
            }
            set
            {
                this.TargetVirtualServersField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CoreConnectionOptions", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Jobs.Contract")]
    public partial class CoreConnectionOptions : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Core.Contract.Connection.ConnectionStartParameters ConnectionStartParametersField;
        
        private DoubleTake.Core.Contract.PathTransformation[] PathTransformationsField;
        
        private string TargetAddressField;
        
        private int TargetEnginePortField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Connection.ConnectionStartParameters ConnectionStartParameters
        {
            get
            {
                return this.ConnectionStartParametersField;
            }
            set
            {
                this.ConnectionStartParametersField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.PathTransformation[] PathTransformations
        {
            get
            {
                return this.PathTransformationsField;
            }
            set
            {
                this.PathTransformationsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetAddress
        {
            get
            {
                return this.TargetAddressField;
            }
            set
            {
                this.TargetAddressField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TargetEnginePort
        {
            get
            {
                return this.TargetEnginePortField;
            }
            set
            {
                this.TargetEnginePortField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CoreMonitorOptions", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Jobs.Contract")]
    public partial class CoreMonitorOptions : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Core.Contract.Monitor.MonitorConfiguration MonitorConfigurationField;
        
        private System.Nullable<bool> ShouldPerformLanFailoverField;
        
        private string SourceDomainField;
        
        private string SourceServerField;
        
        private string TargetDomainField;
        
        private string TargetServerField;
        
        private System.TimeSpan TotalTimeAllowedField;
        
        private bool UseTotalTimeAllowedField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Monitor.MonitorConfiguration MonitorConfiguration
        {
            get
            {
                return this.MonitorConfigurationField;
            }
            set
            {
                this.MonitorConfigurationField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> ShouldPerformLanFailover
        {
            get
            {
                return this.ShouldPerformLanFailoverField;
            }
            set
            {
                this.ShouldPerformLanFailoverField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceDomain
        {
            get
            {
                return this.SourceDomainField;
            }
            set
            {
                this.SourceDomainField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceServer
        {
            get
            {
                return this.SourceServerField;
            }
            set
            {
                this.SourceServerField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetDomain
        {
            get
            {
                return this.TargetDomainField;
            }
            set
            {
                this.TargetDomainField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetServer
        {
            get
            {
                return this.TargetServerField;
            }
            set
            {
                this.TargetServerField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan TotalTimeAllowed
        {
            get
            {
                return this.TotalTimeAllowedField;
            }
            set
            {
                this.TotalTimeAllowedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool UseTotalTimeAllowed
        {
            get
            {
                return this.UseTotalTimeAllowedField;
            }
            set
            {
                this.UseTotalTimeAllowedField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DTHVOptions", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Jobs.Contract")]
    public partial class DTHVOptions : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private bool IsWANFailoverEnabledField;
        
        private DoubleTake.Virtualization.Contract.VMInfo OriginalSourceVMField;
        
        private DoubleTake.Virtualization.Contract.VirtualNetworkInterfaceInfo[] ReplicaVMNetworkInterfaceInfoField;
        
        private DoubleTake.Virtualization.Contract.DTHV.VHDMapping[] ReverseVHDMappingsField;
        
        private DoubleTake.Virtualization.Contract.VRA.V2VVirtualMachine[] SelectedVirtualMachinesField;
        
        private DoubleTake.Core.Contract.OperatingSystemVersion SourceOsVersionField;
        
        private string SourceServerNameField;
        
        private DoubleTake.Virtualization.Contract.VMInfo SourceVMField;
        
        private DoubleTake.Virtualization.Contract.VirtualNetworkInterfaceInfo[] SourceVMNetworkInterfaceInfoField;
        
        private DoubleTake.Core.Contract.OperatingSystemVersion TargetOsVersionField;
        
        private string TargetServerNameField;
        
        private DoubleTake.Virtualization.Contract.VMInfo TargetVMField;
        
        private long TotalSourceVHDSizeBytesField;
        
        private DoubleTake.Virtualization.Contract.DTHV.VLanMapping[] VLanMappingField;
        
        private DoubleTake.Virtualization.Contract.VirtualSwitchMapping[] VirtualSwitchMappingField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsWANFailoverEnabled
        {
            get
            {
                return this.IsWANFailoverEnabledField;
            }
            set
            {
                this.IsWANFailoverEnabledField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Virtualization.Contract.VMInfo OriginalSourceVM
        {
            get
            {
                return this.OriginalSourceVMField;
            }
            set
            {
                this.OriginalSourceVMField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Virtualization.Contract.VirtualNetworkInterfaceInfo[] ReplicaVMNetworkInterfaceInfo
        {
            get
            {
                return this.ReplicaVMNetworkInterfaceInfoField;
            }
            set
            {
                this.ReplicaVMNetworkInterfaceInfoField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Virtualization.Contract.DTHV.VHDMapping[] ReverseVHDMappings
        {
            get
            {
                return this.ReverseVHDMappingsField;
            }
            set
            {
                this.ReverseVHDMappingsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Virtualization.Contract.VRA.V2VVirtualMachine[] SelectedVirtualMachines
        {
            get
            {
                return this.SelectedVirtualMachinesField;
            }
            set
            {
                this.SelectedVirtualMachinesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.OperatingSystemVersion SourceOsVersion
        {
            get
            {
                return this.SourceOsVersionField;
            }
            set
            {
                this.SourceOsVersionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceServerName
        {
            get
            {
                return this.SourceServerNameField;
            }
            set
            {
                this.SourceServerNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Virtualization.Contract.VMInfo SourceVM
        {
            get
            {
                return this.SourceVMField;
            }
            set
            {
                this.SourceVMField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Virtualization.Contract.VirtualNetworkInterfaceInfo[] SourceVMNetworkInterfaceInfo
        {
            get
            {
                return this.SourceVMNetworkInterfaceInfoField;
            }
            set
            {
                this.SourceVMNetworkInterfaceInfoField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.OperatingSystemVersion TargetOsVersion
        {
            get
            {
                return this.TargetOsVersionField;
            }
            set
            {
                this.TargetOsVersionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetServerName
        {
            get
            {
                return this.TargetServerNameField;
            }
            set
            {
                this.TargetServerNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Virtualization.Contract.VMInfo TargetVM
        {
            get
            {
                return this.TargetVMField;
            }
            set
            {
                this.TargetVMField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long TotalSourceVHDSizeBytes
        {
            get
            {
                return this.TotalSourceVHDSizeBytesField;
            }
            set
            {
                this.TotalSourceVHDSizeBytesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Virtualization.Contract.DTHV.VLanMapping[] VLanMapping
        {
            get
            {
                return this.VLanMappingField;
            }
            set
            {
                this.VLanMappingField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Virtualization.Contract.VirtualSwitchMapping[] VirtualSwitchMapping
        {
            get
            {
                return this.VirtualSwitchMappingField;
            }
            set
            {
                this.VirtualSwitchMappingField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DNSOptions", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Jobs.Contract")]
    public partial class DNSOptions : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string[] AdditionalDnsField;
        
        private System.Nullable<bool> AllIPAddressesNeedMappingField;
        
        private string[] AlternateTrusteesField;
        
        private DoubleTake.Jobs.Contract.DnsDomainDetails[] DomainsField;
        
        private bool EnabledField;
        
        private DoubleTake.Core.Contract.Credentials SourceCredentialsField;
        
        private bool SourceServerInWorkgroupField;
        
        private string SourceServerNameField;
        
        private string TargetServerNameField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] AdditionalDns
        {
            get
            {
                return this.AdditionalDnsField;
            }
            set
            {
                this.AdditionalDnsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> AllIPAddressesNeedMapping
        {
            get
            {
                return this.AllIPAddressesNeedMappingField;
            }
            set
            {
                this.AllIPAddressesNeedMappingField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] AlternateTrustees
        {
            get
            {
                return this.AlternateTrusteesField;
            }
            set
            {
                this.AlternateTrusteesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.DnsDomainDetails[] Domains
        {
            get
            {
                return this.DomainsField;
            }
            set
            {
                this.DomainsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Enabled
        {
            get
            {
                return this.EnabledField;
            }
            set
            {
                this.EnabledField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Credentials SourceCredentials
        {
            get
            {
                return this.SourceCredentialsField;
            }
            set
            {
                this.SourceCredentialsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool SourceServerInWorkgroup
        {
            get
            {
                return this.SourceServerInWorkgroupField;
            }
            set
            {
                this.SourceServerInWorkgroupField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceServerName
        {
            get
            {
                return this.SourceServerNameField;
            }
            set
            {
                this.SourceServerNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetServerName
        {
            get
            {
                return this.TargetServerNameField;
            }
            set
            {
                this.TargetServerNameField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DTAVOptions", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Jobs.Contract")]
    public partial class DTAVOptions : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string DiskFormatField;
        
        private bool DoDiskDataEncryptionField;
        
        private string GuestOSField;
        
        private bool IsSnapshotQuiescenceEnabledField;
        
        private bool IsWANFailoverEnabledField;
        
        private DoubleTake.Core.Contract.Monitor.FailoverScriptConfiguration LinuxScriptOptionsField;
        
        private bool PowerOnReplicaOnFailoverField;
        
        private DoubleTake.Virtualization.Contract.VirtualNetworkInterfaceInfo[] ReplicaVMNetworkInterfaceInfoField;
        
        private int ReplicationIntervalSecondsField;
        
        private string SourceClusterNameField;
        
        private string SourceDatastoreUrlField;
        
        private string SourceReplicationApplianceField;
        
        private DoubleTake.Virtualization.Contract.VirtualNetworkInterfaceInfo[] SourceVMNetworkInterfaceInfoField;
        
        private string SourceVimField;
        
        private string SourceVmDisplayNameField;
        
        private string SourceVmGuidField;
        
        private string SourceVmHostIdField;
        
        private string TargetClusterNameField;
        
        private string TargetDatastoreNameField;
        
        private string TargetDatastoreUrlField;
        
        private string TargetEsxHostIdField;
        
        private string TargetEsxServerField;
        
        private string TargetPathField;
        
        private string TargetReplicationApplianceField;
        
        private string TargetResourcePoolField;
        
        private string TargetVimField;
        
        private string TargetVmDisplayNameField;
        
        private long TargetVmMemoryField;
        
        private int TargetVmNumCPUField;
        
        private DoubleTake.Virtualization.Contract.VirtualSwitchMapping[] VirtualSwitchMappingsField;
        
        private string VmUserNameField;
        
        private DoubleTake.Virtualization.Contract.DTAV.VmdkDatastoreMapping[] VmdkDatastoreMappingsField;
        
        private DoubleTake.Core.Contract.Monitor.FailoverScriptConfiguration WindowsScriptOptionsField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DiskFormat
        {
            get
            {
                return this.DiskFormatField;
            }
            set
            {
                this.DiskFormatField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool DoDiskDataEncryption
        {
            get
            {
                return this.DoDiskDataEncryptionField;
            }
            set
            {
                this.DoDiskDataEncryptionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GuestOS
        {
            get
            {
                return this.GuestOSField;
            }
            set
            {
                this.GuestOSField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSnapshotQuiescenceEnabled
        {
            get
            {
                return this.IsSnapshotQuiescenceEnabledField;
            }
            set
            {
                this.IsSnapshotQuiescenceEnabledField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsWANFailoverEnabled
        {
            get
            {
                return this.IsWANFailoverEnabledField;
            }
            set
            {
                this.IsWANFailoverEnabledField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Monitor.FailoverScriptConfiguration LinuxScriptOptions
        {
            get
            {
                return this.LinuxScriptOptionsField;
            }
            set
            {
                this.LinuxScriptOptionsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool PowerOnReplicaOnFailover
        {
            get
            {
                return this.PowerOnReplicaOnFailoverField;
            }
            set
            {
                this.PowerOnReplicaOnFailoverField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Virtualization.Contract.VirtualNetworkInterfaceInfo[] ReplicaVMNetworkInterfaceInfo
        {
            get
            {
                return this.ReplicaVMNetworkInterfaceInfoField;
            }
            set
            {
                this.ReplicaVMNetworkInterfaceInfoField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ReplicationIntervalSeconds
        {
            get
            {
                return this.ReplicationIntervalSecondsField;
            }
            set
            {
                this.ReplicationIntervalSecondsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceClusterName
        {
            get
            {
                return this.SourceClusterNameField;
            }
            set
            {
                this.SourceClusterNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceDatastoreUrl
        {
            get
            {
                return this.SourceDatastoreUrlField;
            }
            set
            {
                this.SourceDatastoreUrlField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceReplicationAppliance
        {
            get
            {
                return this.SourceReplicationApplianceField;
            }
            set
            {
                this.SourceReplicationApplianceField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Virtualization.Contract.VirtualNetworkInterfaceInfo[] SourceVMNetworkInterfaceInfo
        {
            get
            {
                return this.SourceVMNetworkInterfaceInfoField;
            }
            set
            {
                this.SourceVMNetworkInterfaceInfoField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceVim
        {
            get
            {
                return this.SourceVimField;
            }
            set
            {
                this.SourceVimField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceVmDisplayName
        {
            get
            {
                return this.SourceVmDisplayNameField;
            }
            set
            {
                this.SourceVmDisplayNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceVmGuid
        {
            get
            {
                return this.SourceVmGuidField;
            }
            set
            {
                this.SourceVmGuidField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceVmHostId
        {
            get
            {
                return this.SourceVmHostIdField;
            }
            set
            {
                this.SourceVmHostIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetClusterName
        {
            get
            {
                return this.TargetClusterNameField;
            }
            set
            {
                this.TargetClusterNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetDatastoreName
        {
            get
            {
                return this.TargetDatastoreNameField;
            }
            set
            {
                this.TargetDatastoreNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetDatastoreUrl
        {
            get
            {
                return this.TargetDatastoreUrlField;
            }
            set
            {
                this.TargetDatastoreUrlField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetEsxHostId
        {
            get
            {
                return this.TargetEsxHostIdField;
            }
            set
            {
                this.TargetEsxHostIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetEsxServer
        {
            get
            {
                return this.TargetEsxServerField;
            }
            set
            {
                this.TargetEsxServerField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetPath
        {
            get
            {
                return this.TargetPathField;
            }
            set
            {
                this.TargetPathField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetReplicationAppliance
        {
            get
            {
                return this.TargetReplicationApplianceField;
            }
            set
            {
                this.TargetReplicationApplianceField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetResourcePool
        {
            get
            {
                return this.TargetResourcePoolField;
            }
            set
            {
                this.TargetResourcePoolField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetVim
        {
            get
            {
                return this.TargetVimField;
            }
            set
            {
                this.TargetVimField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetVmDisplayName
        {
            get
            {
                return this.TargetVmDisplayNameField;
            }
            set
            {
                this.TargetVmDisplayNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long TargetVmMemory
        {
            get
            {
                return this.TargetVmMemoryField;
            }
            set
            {
                this.TargetVmMemoryField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TargetVmNumCPU
        {
            get
            {
                return this.TargetVmNumCPUField;
            }
            set
            {
                this.TargetVmNumCPUField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Virtualization.Contract.VirtualSwitchMapping[] VirtualSwitchMappings
        {
            get
            {
                return this.VirtualSwitchMappingsField;
            }
            set
            {
                this.VirtualSwitchMappingsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VmUserName
        {
            get
            {
                return this.VmUserNameField;
            }
            set
            {
                this.VmUserNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Virtualization.Contract.DTAV.VmdkDatastoreMapping[] VmdkDatastoreMappings
        {
            get
            {
                return this.VmdkDatastoreMappingsField;
            }
            set
            {
                this.VmdkDatastoreMappingsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Monitor.FailoverScriptConfiguration WindowsScriptOptions
        {
            get
            {
                return this.WindowsScriptOptionsField;
            }
            set
            {
                this.WindowsScriptOptionsField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FullServerFailoverOptions", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Jobs.Contract")]
    public partial class FullServerFailoverOptions : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string[] AdditionalStagingFoldersField;
        
        private bool CreateBackupConnectionField;
        
        private bool RemoveOrphansField;
        
        private bool ShutdownSourceServerField;
        
        private bool SourceChecksumAllField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] AdditionalStagingFolders
        {
            get
            {
                return this.AdditionalStagingFoldersField;
            }
            set
            {
                this.AdditionalStagingFoldersField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CreateBackupConnection
        {
            get
            {
                return this.CreateBackupConnectionField;
            }
            set
            {
                this.CreateBackupConnectionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool RemoveOrphans
        {
            get
            {
                return this.RemoveOrphansField;
            }
            set
            {
                this.RemoveOrphansField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ShutdownSourceServer
        {
            get
            {
                return this.ShutdownSourceServerField;
            }
            set
            {
                this.ShutdownSourceServerField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool SourceChecksumAll
        {
            get
            {
                return this.SourceChecksumAllField;
            }
            set
            {
                this.SourceChecksumAllField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ImageProtectionOptions", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Jobs.Contract")]
    public partial class ImageProtectionOptions : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.Guid ImageIdField;
        
        private string ImageNameField;
        
        private DoubleTake.Core.Contract.ImageVhdInfo[] VhdInfoField;
        
        private string[] VhdsToDeleteOnRemoveField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ImageId
        {
            get
            {
                return this.ImageIdField;
            }
            set
            {
                this.ImageIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImageName
        {
            get
            {
                return this.ImageNameField;
            }
            set
            {
                this.ImageNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.ImageVhdInfo[] VhdInfo
        {
            get
            {
                return this.VhdInfoField;
            }
            set
            {
                this.VhdInfoField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] VhdsToDeleteOnRemove
        {
            get
            {
                return this.VhdsToDeleteOnRemoveField;
            }
            set
            {
                this.VhdsToDeleteOnRemoveField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ImageRecoveryOptions", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Jobs.Contract")]
    public partial class ImageRecoveryOptions : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string[] AdditionalStagingFoldersField;
        
        private System.Guid ImageIdField;
        
        private string ImageRecoveryDataLocationField;
        
        private bool ShutdownSourceServerField;
        
        private System.Guid SnapshotSetIdField;
        
        private bool UserInitiatedCutoverField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] AdditionalStagingFolders
        {
            get
            {
                return this.AdditionalStagingFoldersField;
            }
            set
            {
                this.AdditionalStagingFoldersField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ImageId
        {
            get
            {
                return this.ImageIdField;
            }
            set
            {
                this.ImageIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImageRecoveryDataLocation
        {
            get
            {
                return this.ImageRecoveryDataLocationField;
            }
            set
            {
                this.ImageRecoveryDataLocationField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ShutdownSourceServer
        {
            get
            {
                return this.ShutdownSourceServerField;
            }
            set
            {
                this.ShutdownSourceServerField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid SnapshotSetId
        {
            get
            {
                return this.SnapshotSetIdField;
            }
            set
            {
                this.SnapshotSetIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool UserInitiatedCutover
        {
            get
            {
                return this.UserInitiatedCutoverField;
            }
            set
            {
                this.UserInitiatedCutoverField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MonitoringOptions", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Jobs.Contract")]
    public partial class MonitoringOptions : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private bool ServiceMonitoringEnabledField;
        
        private DoubleTake.Jobs.Contract.ServiceMonitoringOptions ServiceMonitoringOptionsField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ServiceMonitoringEnabled
        {
            get
            {
                return this.ServiceMonitoringEnabledField;
            }
            set
            {
                this.ServiceMonitoringEnabledField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.ServiceMonitoringOptions ServiceMonitoringOptions
        {
            get
            {
                return this.ServiceMonitoringOptionsField;
            }
            set
            {
                this.ServiceMonitoringOptionsField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SimpleFailoverMonitorOptions", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Jobs.Contract")]
    public partial class SimpleFailoverMonitorOptions : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private bool IsUserInterventionRequiredField;
        
        private short MaxPingAttemptsField;
        
        private System.TimeSpan PingIntervalField;
        
        private System.TimeSpan TimeAllowedField;
        
        private bool UseTimeAllowedField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsUserInterventionRequired
        {
            get
            {
                return this.IsUserInterventionRequiredField;
            }
            set
            {
                this.IsUserInterventionRequiredField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short MaxPingAttempts
        {
            get
            {
                return this.MaxPingAttemptsField;
            }
            set
            {
                this.MaxPingAttemptsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan PingInterval
        {
            get
            {
                return this.PingIntervalField;
            }
            set
            {
                this.PingIntervalField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan TimeAllowed
        {
            get
            {
                return this.TimeAllowedField;
            }
            set
            {
                this.TimeAllowedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool UseTimeAllowed
        {
            get
            {
                return this.UseTimeAllowedField;
            }
            set
            {
                this.UseTimeAllowedField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SystemStateOptions", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Jobs.Contract")]
    public partial class SystemStateOptions : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string AlternateVolumeMappingField;
        
        private bool AlternateVolumeStagingField;
        
        private bool ClearMonitorField;
        
        private bool IsWanFailoverField;
        
        private bool KeepTargetActivationCodeField;
        
        private DoubleTake.Core.Contract.Options.FullServerNicMappings[] NicMappingsField;
        
        private DoubleTake.Core.Contract.Options.TargetServicesToStop[] ServicesToStopOptionsField;
        
        private bool ShouldApplyDiskSignaturesField;
        
        private string SourceReservedAddressField;
        
        private string StagingFolderField;
        
        private string TargetReservedAddressField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AlternateVolumeMapping
        {
            get
            {
                return this.AlternateVolumeMappingField;
            }
            set
            {
                this.AlternateVolumeMappingField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AlternateVolumeStaging
        {
            get
            {
                return this.AlternateVolumeStagingField;
            }
            set
            {
                this.AlternateVolumeStagingField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ClearMonitor
        {
            get
            {
                return this.ClearMonitorField;
            }
            set
            {
                this.ClearMonitorField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsWanFailover
        {
            get
            {
                return this.IsWanFailoverField;
            }
            set
            {
                this.IsWanFailoverField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool KeepTargetActivationCode
        {
            get
            {
                return this.KeepTargetActivationCodeField;
            }
            set
            {
                this.KeepTargetActivationCodeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Options.FullServerNicMappings[] NicMappings
        {
            get
            {
                return this.NicMappingsField;
            }
            set
            {
                this.NicMappingsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Options.TargetServicesToStop[] ServicesToStopOptions
        {
            get
            {
                return this.ServicesToStopOptionsField;
            }
            set
            {
                this.ServicesToStopOptionsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ShouldApplyDiskSignatures
        {
            get
            {
                return this.ShouldApplyDiskSignaturesField;
            }
            set
            {
                this.ShouldApplyDiskSignaturesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceReservedAddress
        {
            get
            {
                return this.SourceReservedAddressField;
            }
            set
            {
                this.SourceReservedAddressField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StagingFolder
        {
            get
            {
                return this.StagingFolderField;
            }
            set
            {
                this.StagingFolderField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetReservedAddress
        {
            get
            {
                return this.TargetReservedAddressField;
            }
            set
            {
                this.TargetReservedAddressField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TargetServicesOptions", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Jobs.Contract")]
    public partial class TargetServicesOptions : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Jobs.Contract.ServiceInformation[] FailoverServicesField;
        
        private bool StartAndStopServicesField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.ServiceInformation[] FailoverServices
        {
            get
            {
                return this.FailoverServicesField;
            }
            set
            {
                this.FailoverServicesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool StartAndStopServices
        {
            get
            {
                return this.StartAndStopServicesField;
            }
            set
            {
                this.StartAndStopServicesField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UnmanagedConnectionOptions", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Jobs.Contract")]
    public partial class UnmanagedConnectionOptions : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Core.Contract.Connection.TargetStateInfo TargetStateInfoField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Connection.TargetStateInfo TargetStateInfo
        {
            get
            {
                return this.TargetStateInfoField;
            }
            set
            {
                this.TargetStateInfoField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VRAOptions", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Jobs.Contract")]
    public partial class VRAOptions : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string HypervisorField;
        
        private bool IsSourceHostClusterField;
        
        private bool IsWANFailoverEnabledField;
        
        private DoubleTake.Core.Contract.UVRA.LvmOptions LvmOptionsField;
        
        private DoubleTake.Virtualization.Contract.VMInfo ReplicaApplianceInfoField;
        
        private string ReplicaESXHostNameField;
        
        private DoubleTake.Virtualization.Contract.VirtualNetworkInterfaceInfo[] ReplicaNetworkInterfaceInfoField;
        
        private DoubleTake.Virtualization.Contract.VRA.ReplicaVMInfo ReplicaVMInfoField;
        
        private int ReverseCountField;
        
        private string ReverseRouteField;
        
        private DoubleTake.Virtualization.Contract.VMInfo SourceApplianceInfoField;
        
        private string SourceESXHostNameField;
        
        private DoubleTake.Virtualization.Contract.VirtualNetworkInterfaceInfo[] SourceNetworkInterfaceInfoField;
        
        private string SourceProductLicenseField;
        
        private DoubleTake.Virtualization.Contract.VMInfo SourceVmInfoField;
        
        private DoubleTake.Virtualization.Contract.VirtualSwitchMapping[] VirtualSwitchMappingField;
        
        private DoubleTake.Virtualization.Contract.VRA.VolumeOptions[] VolumesField;
        
        private DoubleTake.Virtualization.Contract.VRA.VRAWorkloadCustomizationOptions WorkloadCustomizationOptionsField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Hypervisor
        {
            get
            {
                return this.HypervisorField;
            }
            set
            {
                this.HypervisorField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSourceHostCluster
        {
            get
            {
                return this.IsSourceHostClusterField;
            }
            set
            {
                this.IsSourceHostClusterField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsWANFailoverEnabled
        {
            get
            {
                return this.IsWANFailoverEnabledField;
            }
            set
            {
                this.IsWANFailoverEnabledField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.UVRA.LvmOptions LvmOptions
        {
            get
            {
                return this.LvmOptionsField;
            }
            set
            {
                this.LvmOptionsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Virtualization.Contract.VMInfo ReplicaApplianceInfo
        {
            get
            {
                return this.ReplicaApplianceInfoField;
            }
            set
            {
                this.ReplicaApplianceInfoField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReplicaESXHostName
        {
            get
            {
                return this.ReplicaESXHostNameField;
            }
            set
            {
                this.ReplicaESXHostNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Virtualization.Contract.VirtualNetworkInterfaceInfo[] ReplicaNetworkInterfaceInfo
        {
            get
            {
                return this.ReplicaNetworkInterfaceInfoField;
            }
            set
            {
                this.ReplicaNetworkInterfaceInfoField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Virtualization.Contract.VRA.ReplicaVMInfo ReplicaVMInfo
        {
            get
            {
                return this.ReplicaVMInfoField;
            }
            set
            {
                this.ReplicaVMInfoField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ReverseCount
        {
            get
            {
                return this.ReverseCountField;
            }
            set
            {
                this.ReverseCountField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReverseRoute
        {
            get
            {
                return this.ReverseRouteField;
            }
            set
            {
                this.ReverseRouteField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Virtualization.Contract.VMInfo SourceApplianceInfo
        {
            get
            {
                return this.SourceApplianceInfoField;
            }
            set
            {
                this.SourceApplianceInfoField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceESXHostName
        {
            get
            {
                return this.SourceESXHostNameField;
            }
            set
            {
                this.SourceESXHostNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Virtualization.Contract.VirtualNetworkInterfaceInfo[] SourceNetworkInterfaceInfo
        {
            get
            {
                return this.SourceNetworkInterfaceInfoField;
            }
            set
            {
                this.SourceNetworkInterfaceInfoField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceProductLicense
        {
            get
            {
                return this.SourceProductLicenseField;
            }
            set
            {
                this.SourceProductLicenseField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Virtualization.Contract.VMInfo SourceVmInfo
        {
            get
            {
                return this.SourceVmInfoField;
            }
            set
            {
                this.SourceVmInfoField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Virtualization.Contract.VirtualSwitchMapping[] VirtualSwitchMapping
        {
            get
            {
                return this.VirtualSwitchMappingField;
            }
            set
            {
                this.VirtualSwitchMappingField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Virtualization.Contract.VRA.VolumeOptions[] Volumes
        {
            get
            {
                return this.VolumesField;
            }
            set
            {
                this.VolumesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Virtualization.Contract.VRA.VRAWorkloadCustomizationOptions WorkloadCustomizationOptions
        {
            get
            {
                return this.WorkloadCustomizationOptionsField;
            }
            set
            {
                this.WorkloadCustomizationOptionsField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VcdVappOptions", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Jobs.Contract")]
    public partial class VcdVappOptions : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private bool DoDiskDataEncryptionField;
        
        private bool IsSnapshotQuiescenceEnabledField;
        
        private int ReplicationIntervalSecondsField;
        
        private string SourceOrgNameField;
        
        private string SourceVappDisplayNameField;
        
        private string SourceVappGuidField;
        
        private string TargetOrgNameField;
        
        private string TargetOrgVdcNameField;
        
        private string TargetVappDisplayNameField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool DoDiskDataEncryption
        {
            get
            {
                return this.DoDiskDataEncryptionField;
            }
            set
            {
                this.DoDiskDataEncryptionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSnapshotQuiescenceEnabled
        {
            get
            {
                return this.IsSnapshotQuiescenceEnabledField;
            }
            set
            {
                this.IsSnapshotQuiescenceEnabledField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ReplicationIntervalSeconds
        {
            get
            {
                return this.ReplicationIntervalSecondsField;
            }
            set
            {
                this.ReplicationIntervalSecondsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceOrgName
        {
            get
            {
                return this.SourceOrgNameField;
            }
            set
            {
                this.SourceOrgNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceVappDisplayName
        {
            get
            {
                return this.SourceVappDisplayNameField;
            }
            set
            {
                this.SourceVappDisplayNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceVappGuid
        {
            get
            {
                return this.SourceVappGuidField;
            }
            set
            {
                this.SourceVappGuidField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetOrgName
        {
            get
            {
                return this.TargetOrgNameField;
            }
            set
            {
                this.TargetOrgNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetOrgVdcName
        {
            get
            {
                return this.TargetOrgVdcNameField;
            }
            set
            {
                this.TargetOrgVdcNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetVappDisplayName
        {
            get
            {
                return this.TargetVappDisplayNameField;
            }
            set
            {
                this.TargetVappDisplayNameField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DnsRecordLockOptions", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Jobs.Contract")]
    public partial class DnsRecordLockOptions : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string[] AdditionalDnsField;
        
        private string[] AddressesField;
        
        private string DnsServerField;
        
        private string ServerField;
        
        private string[] TrusteesField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] AdditionalDns
        {
            get
            {
                return this.AdditionalDnsField;
            }
            set
            {
                this.AdditionalDnsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] Addresses
        {
            get
            {
                return this.AddressesField;
            }
            set
            {
                this.AddressesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DnsServer
        {
            get
            {
                return this.DnsServerField;
            }
            set
            {
                this.DnsServerField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Server
        {
            get
            {
                return this.ServerField;
            }
            set
            {
                this.ServerField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] Trustees
        {
            get
            {
                return this.TrusteesField;
            }
            set
            {
                this.TrusteesField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceInformation", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Jobs.Contract")]
    public partial class ServiceInformation : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string DisplayNameField;
        
        private string NameField;
        
        private bool SelectedField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DisplayName
        {
            get
            {
                return this.DisplayNameField;
            }
            set
            {
                this.DisplayNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Selected
        {
            get
            {
                return this.SelectedField;
            }
            set
            {
                this.SelectedField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VerificationStatus", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Jobs.Contract")]
    public enum VerificationStatus : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InProgress = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Success = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Warning = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Error = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DnsDomainDetails", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Jobs.Contract")]
    public partial class DnsDomainDetails : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Core.Contract.Credentials CredentialsField;
        
        private DoubleTake.Core.Contract.Options.DnsServerDetail[] DnsServersField;
        
        private string DomainNameField;
        
        private DoubleTake.Core.Contract.Options.IPAddressMap[] IPAddressMappingsField;
        
        private bool ShouldUpdateTtlField;
        
        private int TtlValueField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Credentials Credentials
        {
            get
            {
                return this.CredentialsField;
            }
            set
            {
                this.CredentialsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Options.DnsServerDetail[] DnsServers
        {
            get
            {
                return this.DnsServersField;
            }
            set
            {
                this.DnsServersField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DomainName
        {
            get
            {
                return this.DomainNameField;
            }
            set
            {
                this.DomainNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Options.IPAddressMap[] IPAddressMappings
        {
            get
            {
                return this.IPAddressMappingsField;
            }
            set
            {
                this.IPAddressMappingsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ShouldUpdateTtl
        {
            get
            {
                return this.ShouldUpdateTtlField;
            }
            set
            {
                this.ShouldUpdateTtlField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TtlValue
        {
            get
            {
                return this.TtlValueField;
            }
            set
            {
                this.TtlValueField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceMonitoringOptions", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Jobs.Contract")]
    public partial class ServiceMonitoringOptions : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private int RepeatCountField;
        
        private DoubleTake.Jobs.Contract.ServiceInformation[] ServicesField;
        
        private bool StartServiceField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RepeatCount
        {
            get
            {
                return this.RepeatCountField;
            }
            set
            {
                this.RepeatCountField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.ServiceInformation[] Services
        {
            get
            {
                return this.ServicesField;
            }
            set
            {
                this.ServicesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool StartService
        {
            get
            {
                return this.StartServiceField;
            }
            set
            {
                this.StartServiceField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CoreConnectionDetails", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Jobs.Contract")]
    public partial class CoreConnectionDetails : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private int BandwidthCollarField;
        
        private bool CompressionEnabledField;
        
        private int CompressionLevelField;
        
        private int ConnectionIdField;
        
        private long DiskQueueBytesField;
        
        private bool EncryptedField;
        
        private bool InitialMirrorCompleteField;
        
        private System.Guid ManagedConnectionIdField;
        
        private long MirrorBytesRemainingField;
        
        private long MirrorBytesSentField;
        
        private long MirrorBytesSkippedField;
        
        private long MirrorBytesTransmittedField;
        
        private long MirrorOpsQueuedField;
        
        private short MirrorPermillageField;
        
        private DoubleTake.Core.Contract.Connection.MirrorState MirrorStateField;
        
        private bool PeerMemoryLowField;
        
        private long ReplicationBytesQueuedField;
        
        private long ReplicationBytesSentField;
        
        private long ReplicationBytesTransmittedField;
        
        private long ReplicationOpsQueuedField;
        
        private bool ReplicationSetCalcInProgressField;
        
        private DoubleTake.Core.Contract.Connection.ReplicationState ReplicationStateField;
        
        private bool RestoringField;
        
        private System.Nullable<DoubleTake.Core.Contract.AccessLevel> SourceAccessLevelField;
        
        private bool SourceAvailableField;
        
        private DoubleTake.Core.Contract.Connection.ClusterResourceState SourceClusterResourceStateField;
        
        private string SourceEndpointField;
        
        private bool SourceEngineAvailableField;
        
        private string SourceMachineNameField;
        
        private string SourceUniqueIdField;
        
        private System.DateTimeOffset StartTimeField;
        
        private System.Nullable<DoubleTake.Core.Contract.AccessLevel> TargetAccessLevelField;
        
        private bool TargetAvailableField;
        
        private bool TargetEngineAvailableField;
        
        private bool TargetLoadedField;
        
        private string TargetMachineNameField;
        
        private long TargetQueueBytesField;
        
        private string TargetRouteField;
        
        private DoubleTake.Core.Contract.Connection.TargetStates TargetStateField;
        
        private string TargetUniqueIdField;
        
        private long TotalBytesSentField;
        
        private long TotalBytesTransmittedField;
        
        private long TotalOpsQueuedField;
        
        private DoubleTake.Core.Contract.Connection.TransmissionMode TransmissionModeField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BandwidthCollar
        {
            get
            {
                return this.BandwidthCollarField;
            }
            set
            {
                this.BandwidthCollarField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CompressionEnabled
        {
            get
            {
                return this.CompressionEnabledField;
            }
            set
            {
                this.CompressionEnabledField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CompressionLevel
        {
            get
            {
                return this.CompressionLevelField;
            }
            set
            {
                this.CompressionLevelField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ConnectionId
        {
            get
            {
                return this.ConnectionIdField;
            }
            set
            {
                this.ConnectionIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long DiskQueueBytes
        {
            get
            {
                return this.DiskQueueBytesField;
            }
            set
            {
                this.DiskQueueBytesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Encrypted
        {
            get
            {
                return this.EncryptedField;
            }
            set
            {
                this.EncryptedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool InitialMirrorComplete
        {
            get
            {
                return this.InitialMirrorCompleteField;
            }
            set
            {
                this.InitialMirrorCompleteField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ManagedConnectionId
        {
            get
            {
                return this.ManagedConnectionIdField;
            }
            set
            {
                this.ManagedConnectionIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long MirrorBytesRemaining
        {
            get
            {
                return this.MirrorBytesRemainingField;
            }
            set
            {
                this.MirrorBytesRemainingField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long MirrorBytesSent
        {
            get
            {
                return this.MirrorBytesSentField;
            }
            set
            {
                this.MirrorBytesSentField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long MirrorBytesSkipped
        {
            get
            {
                return this.MirrorBytesSkippedField;
            }
            set
            {
                this.MirrorBytesSkippedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long MirrorBytesTransmitted
        {
            get
            {
                return this.MirrorBytesTransmittedField;
            }
            set
            {
                this.MirrorBytesTransmittedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long MirrorOpsQueued
        {
            get
            {
                return this.MirrorOpsQueuedField;
            }
            set
            {
                this.MirrorOpsQueuedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short MirrorPermillage
        {
            get
            {
                return this.MirrorPermillageField;
            }
            set
            {
                this.MirrorPermillageField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Connection.MirrorState MirrorState
        {
            get
            {
                return this.MirrorStateField;
            }
            set
            {
                this.MirrorStateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool PeerMemoryLow
        {
            get
            {
                return this.PeerMemoryLowField;
            }
            set
            {
                this.PeerMemoryLowField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long ReplicationBytesQueued
        {
            get
            {
                return this.ReplicationBytesQueuedField;
            }
            set
            {
                this.ReplicationBytesQueuedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long ReplicationBytesSent
        {
            get
            {
                return this.ReplicationBytesSentField;
            }
            set
            {
                this.ReplicationBytesSentField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long ReplicationBytesTransmitted
        {
            get
            {
                return this.ReplicationBytesTransmittedField;
            }
            set
            {
                this.ReplicationBytesTransmittedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long ReplicationOpsQueued
        {
            get
            {
                return this.ReplicationOpsQueuedField;
            }
            set
            {
                this.ReplicationOpsQueuedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ReplicationSetCalcInProgress
        {
            get
            {
                return this.ReplicationSetCalcInProgressField;
            }
            set
            {
                this.ReplicationSetCalcInProgressField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Connection.ReplicationState ReplicationState
        {
            get
            {
                return this.ReplicationStateField;
            }
            set
            {
                this.ReplicationStateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Restoring
        {
            get
            {
                return this.RestoringField;
            }
            set
            {
                this.RestoringField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<DoubleTake.Core.Contract.AccessLevel> SourceAccessLevel
        {
            get
            {
                return this.SourceAccessLevelField;
            }
            set
            {
                this.SourceAccessLevelField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool SourceAvailable
        {
            get
            {
                return this.SourceAvailableField;
            }
            set
            {
                this.SourceAvailableField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Connection.ClusterResourceState SourceClusterResourceState
        {
            get
            {
                return this.SourceClusterResourceStateField;
            }
            set
            {
                this.SourceClusterResourceStateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceEndpoint
        {
            get
            {
                return this.SourceEndpointField;
            }
            set
            {
                this.SourceEndpointField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool SourceEngineAvailable
        {
            get
            {
                return this.SourceEngineAvailableField;
            }
            set
            {
                this.SourceEngineAvailableField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceMachineName
        {
            get
            {
                return this.SourceMachineNameField;
            }
            set
            {
                this.SourceMachineNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceUniqueId
        {
            get
            {
                return this.SourceUniqueIdField;
            }
            set
            {
                this.SourceUniqueIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTimeOffset StartTime
        {
            get
            {
                return this.StartTimeField;
            }
            set
            {
                this.StartTimeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<DoubleTake.Core.Contract.AccessLevel> TargetAccessLevel
        {
            get
            {
                return this.TargetAccessLevelField;
            }
            set
            {
                this.TargetAccessLevelField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool TargetAvailable
        {
            get
            {
                return this.TargetAvailableField;
            }
            set
            {
                this.TargetAvailableField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool TargetEngineAvailable
        {
            get
            {
                return this.TargetEngineAvailableField;
            }
            set
            {
                this.TargetEngineAvailableField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool TargetLoaded
        {
            get
            {
                return this.TargetLoadedField;
            }
            set
            {
                this.TargetLoadedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetMachineName
        {
            get
            {
                return this.TargetMachineNameField;
            }
            set
            {
                this.TargetMachineNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long TargetQueueBytes
        {
            get
            {
                return this.TargetQueueBytesField;
            }
            set
            {
                this.TargetQueueBytesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetRoute
        {
            get
            {
                return this.TargetRouteField;
            }
            set
            {
                this.TargetRouteField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Connection.TargetStates TargetState
        {
            get
            {
                return this.TargetStateField;
            }
            set
            {
                this.TargetStateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetUniqueId
        {
            get
            {
                return this.TargetUniqueIdField;
            }
            set
            {
                this.TargetUniqueIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long TotalBytesSent
        {
            get
            {
                return this.TotalBytesSentField;
            }
            set
            {
                this.TotalBytesSentField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long TotalBytesTransmitted
        {
            get
            {
                return this.TotalBytesTransmittedField;
            }
            set
            {
                this.TotalBytesTransmittedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long TotalOpsQueued
        {
            get
            {
                return this.TotalOpsQueuedField;
            }
            set
            {
                this.TotalOpsQueuedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Connection.TransmissionMode TransmissionMode
        {
            get
            {
                return this.TransmissionModeField;
            }
            set
            {
                this.TransmissionModeField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CoreMonitorDetails", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Jobs.Contract")]
    public partial class CoreMonitorDetails : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Core.Contract.Monitor.HighAvailabilityState HighAvailabilityStateField;
        
        private System.Guid MonitorIdField;
        
        private string MonitorNameField;
        
        private DoubleTake.Core.Contract.Monitor.MonitoredAddressStatus[] MonitoredAddressStatusesField;
        
        private DoubleTake.Core.Contract.Monitor.RestoreStates RestoreStatesField;
        
        private bool TargetAvailableField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Monitor.HighAvailabilityState HighAvailabilityState
        {
            get
            {
                return this.HighAvailabilityStateField;
            }
            set
            {
                this.HighAvailabilityStateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid MonitorId
        {
            get
            {
                return this.MonitorIdField;
            }
            set
            {
                this.MonitorIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MonitorName
        {
            get
            {
                return this.MonitorNameField;
            }
            set
            {
                this.MonitorNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Monitor.MonitoredAddressStatus[] MonitoredAddressStatuses
        {
            get
            {
                return this.MonitoredAddressStatusesField;
            }
            set
            {
                this.MonitoredAddressStatusesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Monitor.RestoreStates RestoreStates
        {
            get
            {
                return this.RestoreStatesField;
            }
            set
            {
                this.RestoreStatesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool TargetAvailable
        {
            get
            {
                return this.TargetAvailableField;
            }
            set
            {
                this.TargetAvailableField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="JobAction", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Jobs.Contract")]
    public partial class JobAction : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.TimeSpan DurationField;
        
        private int ErrorCodeField;
        
        private string ExceptionMessageField;
        
        private System.Guid IdField;
        
        private string[] MessageFormatParametersField;
        
        private string MessageIdField;
        
        private string RequestingUserNameField;
        
        private DoubleTake.Jobs.Contract.ActionStatus StatusField;
        
        private System.DateTimeOffset TimestampField;
        
        private string[] TitleFormatParametersField;
        
        private string TitleIdField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan Duration
        {
            get
            {
                return this.DurationField;
            }
            set
            {
                this.DurationField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ErrorCode
        {
            get
            {
                return this.ErrorCodeField;
            }
            set
            {
                this.ErrorCodeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExceptionMessage
        {
            get
            {
                return this.ExceptionMessageField;
            }
            set
            {
                this.ExceptionMessageField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] MessageFormatParameters
        {
            get
            {
                return this.MessageFormatParametersField;
            }
            set
            {
                this.MessageFormatParametersField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MessageId
        {
            get
            {
                return this.MessageIdField;
            }
            set
            {
                this.MessageIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RequestingUserName
        {
            get
            {
                return this.RequestingUserNameField;
            }
            set
            {
                this.RequestingUserNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.ActionStatus Status
        {
            get
            {
                return this.StatusField;
            }
            set
            {
                this.StatusField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTimeOffset Timestamp
        {
            get
            {
                return this.TimestampField;
            }
            set
            {
                this.TimestampField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] TitleFormatParameters
        {
            get
            {
                return this.TitleFormatParametersField;
            }
            set
            {
                this.TitleFormatParametersField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TitleId
        {
            get
            {
                return this.TitleIdField;
            }
            set
            {
                this.TitleIdField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActionStatus", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Jobs.Contract")]
    public enum ActionStatus : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Pending = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Running = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Completed = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Cancelled = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Faulted = 4,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="JobCredentials", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Jobs.Contract")]
    public partial class JobCredentials : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Communication.ServiceConnectionParameters[] OtherConnectionParametersField;
        
        private System.Collections.Generic.Dictionary<string, System.Uri> OtherHostUrisField;
        
        private DoubleTake.Communication.ServiceConnectionParameters SourceConnectionParametersField;
        
        private string SourceHardwareIdField;
        
        private System.Uri SourceHostUriField;
        
        private DoubleTake.Communication.ServiceConnectionParameters TargetConnectionParametersField;
        
        private string TargetHardwareIdField;
        
        private System.Uri TargetHostUriField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Communication.ServiceConnectionParameters[] OtherConnectionParameters
        {
            get
            {
                return this.OtherConnectionParametersField;
            }
            set
            {
                this.OtherConnectionParametersField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<string, System.Uri> OtherHostUris
        {
            get
            {
                return this.OtherHostUrisField;
            }
            set
            {
                this.OtherHostUrisField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Communication.ServiceConnectionParameters SourceConnectionParameters
        {
            get
            {
                return this.SourceConnectionParametersField;
            }
            set
            {
                this.SourceConnectionParametersField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceHardwareId
        {
            get
            {
                return this.SourceHardwareIdField;
            }
            set
            {
                this.SourceHardwareIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Uri SourceHostUri
        {
            get
            {
                return this.SourceHostUriField;
            }
            set
            {
                this.SourceHostUriField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Communication.ServiceConnectionParameters TargetConnectionParameters
        {
            get
            {
                return this.TargetConnectionParametersField;
            }
            set
            {
                this.TargetConnectionParametersField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetHardwareId
        {
            get
            {
                return this.TargetHardwareIdField;
            }
            set
            {
                this.TargetHardwareIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Uri TargetHostUri
        {
            get
            {
                return this.TargetHostUriField;
            }
            set
            {
                this.TargetHostUriField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EngineConnectionInfo", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Jobs.Contract")]
    public partial class EngineConnectionInfo : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private int EngineConnectionIdField;
        
        private System.Guid IdField;
        
        private string ReplicationSetNameField;
        
        private string TargetRouteField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EngineConnectionId
        {
            get
            {
                return this.EngineConnectionIdField;
            }
            set
            {
                this.EngineConnectionIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReplicationSetName
        {
            get
            {
                return this.ReplicationSetNameField;
            }
            set
            {
                this.ReplicationSetNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetRoute
        {
            get
            {
                return this.TargetRouteField;
            }
            set
            {
                this.TargetRouteField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CreateOptions", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Jobs.Contract")]
    public partial class CreateOptions : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Jobs.Contract.JobCredentials JobCredentialsField;
        
        private DoubleTake.Jobs.Contract.JobOptions JobOptionsField;
        
        private string JobTypeField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.JobCredentials JobCredentials
        {
            get
            {
                return this.JobCredentialsField;
            }
            set
            {
                this.JobCredentialsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.JobOptions JobOptions
        {
            get
            {
                return this.JobOptionsField;
            }
            set
            {
                this.JobOptionsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string JobType
        {
            get
            {
                return this.JobTypeField;
            }
            set
            {
                this.JobTypeField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="JobQualificationResults", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Jobs.Contract")]
    public partial class JobQualificationResults : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Jobs.Contract.ClusterFilesAndFoldersQualificationResults ClusterFilesAndFoldersQualificationResultsField;
        
        private DoubleTake.Jobs.Contract.CoreQualificationResults CoreQualificationResultsField;
        
        private DoubleTake.Jobs.Contract.DTHVQualificationResults DTHVQualificationResultsField;
        
        private DoubleTake.Jobs.Contract.DTAVQualificationResults DtavQualificationResultsField;
        
        private bool SourceBehindNatField;
        
        private System.Uri SourceHostUriField;
        
        private bool SupportsFrameworkMonitoringField;
        
        private bool SuppressFailoverMonitorOptionsField;
        
        private DoubleTake.Jobs.Contract.VRAQualificationResults VRAQualificationResultsField;
        
        private DoubleTake.Jobs.Contract.VcdVappOptions VcdVappQualificationResultsField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.ClusterFilesAndFoldersQualificationResults ClusterFilesAndFoldersQualificationResults
        {
            get
            {
                return this.ClusterFilesAndFoldersQualificationResultsField;
            }
            set
            {
                this.ClusterFilesAndFoldersQualificationResultsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.CoreQualificationResults CoreQualificationResults
        {
            get
            {
                return this.CoreQualificationResultsField;
            }
            set
            {
                this.CoreQualificationResultsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.DTHVQualificationResults DTHVQualificationResults
        {
            get
            {
                return this.DTHVQualificationResultsField;
            }
            set
            {
                this.DTHVQualificationResultsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.DTAVQualificationResults DtavQualificationResults
        {
            get
            {
                return this.DtavQualificationResultsField;
            }
            set
            {
                this.DtavQualificationResultsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool SourceBehindNat
        {
            get
            {
                return this.SourceBehindNatField;
            }
            set
            {
                this.SourceBehindNatField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Uri SourceHostUri
        {
            get
            {
                return this.SourceHostUriField;
            }
            set
            {
                this.SourceHostUriField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool SupportsFrameworkMonitoring
        {
            get
            {
                return this.SupportsFrameworkMonitoringField;
            }
            set
            {
                this.SupportsFrameworkMonitoringField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool SuppressFailoverMonitorOptions
        {
            get
            {
                return this.SuppressFailoverMonitorOptionsField;
            }
            set
            {
                this.SuppressFailoverMonitorOptionsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.VRAQualificationResults VRAQualificationResults
        {
            get
            {
                return this.VRAQualificationResultsField;
            }
            set
            {
                this.VRAQualificationResultsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.VcdVappOptions VcdVappQualificationResults
        {
            get
            {
                return this.VcdVappQualificationResultsField;
            }
            set
            {
                this.VcdVappQualificationResultsField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ClusterFilesAndFoldersQualificationResults", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Jobs.Contract")]
    public partial class ClusterFilesAndFoldersQualificationResults : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Jobs.Contract.TargetFileServerQualificationResults[] TargetFileServerQualificationResultsField;
        
        private bool TargetGroupDiskOfflineField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.TargetFileServerQualificationResults[] TargetFileServerQualificationResults
        {
            get
            {
                return this.TargetFileServerQualificationResultsField;
            }
            set
            {
                this.TargetFileServerQualificationResultsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool TargetGroupDiskOffline
        {
            get
            {
                return this.TargetGroupDiskOfflineField;
            }
            set
            {
                this.TargetGroupDiskOfflineField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TargetFileServerQualificationResults", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Jobs.Contract")]
    public partial class TargetFileServerQualificationResults : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Core.Contract.UnicastIPAddressInfo[] ClusterResourceGroupIPAddressesField;
        
        private string ClusterResourceGroupNameField;
        
        private string CurrentOwnerNodeNameField;
        
        private long DiskSizeField;
        
        private string DriveLetterField;
        
        private long FreeSpaceField;
        
        private bool IsVolumeCSVField;
        
        private bool RecommendedGroupField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.UnicastIPAddressInfo[] ClusterResourceGroupIPAddresses
        {
            get
            {
                return this.ClusterResourceGroupIPAddressesField;
            }
            set
            {
                this.ClusterResourceGroupIPAddressesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ClusterResourceGroupName
        {
            get
            {
                return this.ClusterResourceGroupNameField;
            }
            set
            {
                this.ClusterResourceGroupNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CurrentOwnerNodeName
        {
            get
            {
                return this.CurrentOwnerNodeNameField;
            }
            set
            {
                this.CurrentOwnerNodeNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long DiskSize
        {
            get
            {
                return this.DiskSizeField;
            }
            set
            {
                this.DiskSizeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DriveLetter
        {
            get
            {
                return this.DriveLetterField;
            }
            set
            {
                this.DriveLetterField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long FreeSpace
        {
            get
            {
                return this.FreeSpaceField;
            }
            set
            {
                this.FreeSpaceField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsVolumeCSV
        {
            get
            {
                return this.IsVolumeCSVField;
            }
            set
            {
                this.IsVolumeCSVField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool RecommendedGroup
        {
            get
            {
                return this.RecommendedGroupField;
            }
            set
            {
                this.RecommendedGroupField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CoreQualificationResults", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Jobs.Contract")]
    public partial class CoreQualificationResults : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Core.Contract.Connection.CompressionLevel[] CompressionLevelsField;
        
        private string DefaultAllToOneBasePathField;
        
        private int SourceEnginePortField;
        
        private DoubleTake.Core.Contract.UnicastIPAddressInfo[] SourceIPAddressesField;
        
        private string SourceMachineNameField;
        
        private string SourceNetworkIdField;
        
        private DoubleTake.Core.Contract.NetworkInterfaceInfo[] SourceNetworkInterfacesField;
        
        private DoubleTake.Core.Contract.Volume[] SourceVolumesField;
        
        private int TargetEnginePortField;
        
        private DoubleTake.Core.Contract.UnicastIPAddressInfo[] TargetIPAddressesField;
        
        private string TargetMachineNameField;
        
        private DoubleTake.Core.Contract.NetworkInterfaceInfo[] TargetNetworkInterfacesField;
        
        private DoubleTake.Core.Contract.ProductInfo TargetProductInfoField;
        
        private DoubleTake.Core.Contract.Volume[] TargetVolumesField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Connection.CompressionLevel[] CompressionLevels
        {
            get
            {
                return this.CompressionLevelsField;
            }
            set
            {
                this.CompressionLevelsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DefaultAllToOneBasePath
        {
            get
            {
                return this.DefaultAllToOneBasePathField;
            }
            set
            {
                this.DefaultAllToOneBasePathField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SourceEnginePort
        {
            get
            {
                return this.SourceEnginePortField;
            }
            set
            {
                this.SourceEnginePortField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.UnicastIPAddressInfo[] SourceIPAddresses
        {
            get
            {
                return this.SourceIPAddressesField;
            }
            set
            {
                this.SourceIPAddressesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceMachineName
        {
            get
            {
                return this.SourceMachineNameField;
            }
            set
            {
                this.SourceMachineNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceNetworkId
        {
            get
            {
                return this.SourceNetworkIdField;
            }
            set
            {
                this.SourceNetworkIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.NetworkInterfaceInfo[] SourceNetworkInterfaces
        {
            get
            {
                return this.SourceNetworkInterfacesField;
            }
            set
            {
                this.SourceNetworkInterfacesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Volume[] SourceVolumes
        {
            get
            {
                return this.SourceVolumesField;
            }
            set
            {
                this.SourceVolumesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TargetEnginePort
        {
            get
            {
                return this.TargetEnginePortField;
            }
            set
            {
                this.TargetEnginePortField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.UnicastIPAddressInfo[] TargetIPAddresses
        {
            get
            {
                return this.TargetIPAddressesField;
            }
            set
            {
                this.TargetIPAddressesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetMachineName
        {
            get
            {
                return this.TargetMachineNameField;
            }
            set
            {
                this.TargetMachineNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.NetworkInterfaceInfo[] TargetNetworkInterfaces
        {
            get
            {
                return this.TargetNetworkInterfacesField;
            }
            set
            {
                this.TargetNetworkInterfacesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.ProductInfo TargetProductInfo
        {
            get
            {
                return this.TargetProductInfoField;
            }
            set
            {
                this.TargetProductInfoField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Volume[] TargetVolumes
        {
            get
            {
                return this.TargetVolumesField;
            }
            set
            {
                this.TargetVolumesField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DTHVQualificationResults", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Jobs.Contract")]
    public partial class DTHVQualificationResults : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Virtualization.Contract.VMQualificationResults SourceVMField;
        
        private DoubleTake.Virtualization.Contract.VirtualSwitchInfo[] SourceVirtualSwitchesField;
        
        private DoubleTake.Virtualization.Contract.ServerQualificationResults TargetHostField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Virtualization.Contract.VMQualificationResults SourceVM
        {
            get
            {
                return this.SourceVMField;
            }
            set
            {
                this.SourceVMField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Virtualization.Contract.VirtualSwitchInfo[] SourceVirtualSwitches
        {
            get
            {
                return this.SourceVirtualSwitchesField;
            }
            set
            {
                this.SourceVirtualSwitchesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Virtualization.Contract.ServerQualificationResults TargetHost
        {
            get
            {
                return this.TargetHostField;
            }
            set
            {
                this.TargetHostField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DTAVQualificationResults", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Jobs.Contract")]
    public partial class DTAVQualificationResults : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string[] SourceCandidateReplicaitonAppliancesField;
        
        private DoubleTake.Virtualization.Contract.DTAV.DtavVmQualificationResults[] SourceSelectedVirtualMachinesField;
        
        private DoubleTake.Virtualization.Contract.VirtualSwitchInfo[] SourceVirtualSwitchesField;
        
        private string[] TargetCandidateEsxServersField;
        
        private string[] TargetCandidateReplicaitonAppliancesField;
        
        private DoubleTake.Virtualization.Contract.ServerQualificationResults TargetHostField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] SourceCandidateReplicaitonAppliances
        {
            get
            {
                return this.SourceCandidateReplicaitonAppliancesField;
            }
            set
            {
                this.SourceCandidateReplicaitonAppliancesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Virtualization.Contract.DTAV.DtavVmQualificationResults[] SourceSelectedVirtualMachines
        {
            get
            {
                return this.SourceSelectedVirtualMachinesField;
            }
            set
            {
                this.SourceSelectedVirtualMachinesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Virtualization.Contract.VirtualSwitchInfo[] SourceVirtualSwitches
        {
            get
            {
                return this.SourceVirtualSwitchesField;
            }
            set
            {
                this.SourceVirtualSwitchesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] TargetCandidateEsxServers
        {
            get
            {
                return this.TargetCandidateEsxServersField;
            }
            set
            {
                this.TargetCandidateEsxServersField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] TargetCandidateReplicaitonAppliances
        {
            get
            {
                return this.TargetCandidateReplicaitonAppliancesField;
            }
            set
            {
                this.TargetCandidateReplicaitonAppliancesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Virtualization.Contract.ServerQualificationResults TargetHost
        {
            get
            {
                return this.TargetHostField;
            }
            set
            {
                this.TargetHostField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VRAQualificationResults", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Jobs.Contract")]
    public partial class VRAQualificationResults : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string[] PreexistingDisksFileNameField;
        
        private long SourceServerMemorySizeField;
        
        private int SourceServerProcessorCountField;
        
        private DoubleTake.Virtualization.Contract.ServerQualificationResults TargetHostField;
        
        private DoubleTake.Jobs.Contract.V2VQualificationResults V2VQualificationResultsField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] PreexistingDisksFileName
        {
            get
            {
                return this.PreexistingDisksFileNameField;
            }
            set
            {
                this.PreexistingDisksFileNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long SourceServerMemorySize
        {
            get
            {
                return this.SourceServerMemorySizeField;
            }
            set
            {
                this.SourceServerMemorySizeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SourceServerProcessorCount
        {
            get
            {
                return this.SourceServerProcessorCountField;
            }
            set
            {
                this.SourceServerProcessorCountField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Virtualization.Contract.ServerQualificationResults TargetHost
        {
            get
            {
                return this.TargetHostField;
            }
            set
            {
                this.TargetHostField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.V2VQualificationResults V2VQualificationResults
        {
            get
            {
                return this.V2VQualificationResultsField;
            }
            set
            {
                this.V2VQualificationResultsField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="V2VQualificationResults", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Jobs.Contract")]
    public partial class V2VQualificationResults : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string[] ReverseNetworkRoutesField;
        
        private DoubleTake.Virtualization.Contract.VRA.ActivationCodeInfo SourceActivationCodeInfoField;
        
        private int SourceEnginePortField;
        
        private DoubleTake.Virtualization.Contract.VMInfo[] SourceHostAllVirtualMachinesField;
        
        private DoubleTake.Virtualization.Contract.VirtualSwitchInfo[] SourceHostVirtualSwitchesField;
        
        private DoubleTake.Virtualization.Contract.VRA.V2VVirtualMachine[] SourceHyperVHostSelectedVirtualMachinesField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] ReverseNetworkRoutes
        {
            get
            {
                return this.ReverseNetworkRoutesField;
            }
            set
            {
                this.ReverseNetworkRoutesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Virtualization.Contract.VRA.ActivationCodeInfo SourceActivationCodeInfo
        {
            get
            {
                return this.SourceActivationCodeInfoField;
            }
            set
            {
                this.SourceActivationCodeInfoField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SourceEnginePort
        {
            get
            {
                return this.SourceEnginePortField;
            }
            set
            {
                this.SourceEnginePortField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Virtualization.Contract.VMInfo[] SourceHostAllVirtualMachines
        {
            get
            {
                return this.SourceHostAllVirtualMachinesField;
            }
            set
            {
                this.SourceHostAllVirtualMachinesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Virtualization.Contract.VirtualSwitchInfo[] SourceHostVirtualSwitches
        {
            get
            {
                return this.SourceHostVirtualSwitchesField;
            }
            set
            {
                this.SourceHostVirtualSwitchesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Virtualization.Contract.VRA.V2VVirtualMachine[] SourceHyperVHostSelectedVirtualMachines
        {
            get
            {
                return this.SourceHyperVHostSelectedVirtualMachinesField;
            }
            set
            {
                this.SourceHyperVHostSelectedVirtualMachinesField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RecommendedJobOptions", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Jobs.Contract")]
    public partial class RecommendedJobOptions : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Jobs.Contract.JobOptions JobOptionsField;
        
        private DoubleTake.Jobs.Contract.JobQualificationResults JobQualificationResultsField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.JobOptions JobOptions
        {
            get
            {
                return this.JobOptionsField;
            }
            set
            {
                this.JobOptionsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.JobQualificationResults JobQualificationResults
        {
            get
            {
                return this.JobQualificationResultsField;
            }
            set
            {
                this.JobQualificationResultsField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RecommendedFailoverOptions", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Jobs.Contract")]
    public partial class RecommendedFailoverOptions : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Jobs.Contract.FailoverOptions FailoverOptionsField;
        
        private bool IsTestFailoverSupportedField;
        
        private DoubleTake.Core.Contract.Connection.SnapshotEntry[] SnapshotsField;
        
        private bool WarnUserOfInconsistentProtectionDataField;
        
        private bool WarningTextTestFailoverField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.FailoverOptions FailoverOptions
        {
            get
            {
                return this.FailoverOptionsField;
            }
            set
            {
                this.FailoverOptionsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsTestFailoverSupported
        {
            get
            {
                return this.IsTestFailoverSupportedField;
            }
            set
            {
                this.IsTestFailoverSupportedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Connection.SnapshotEntry[] Snapshots
        {
            get
            {
                return this.SnapshotsField;
            }
            set
            {
                this.SnapshotsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool WarnUserOfInconsistentProtectionData
        {
            get
            {
                return this.WarnUserOfInconsistentProtectionDataField;
            }
            set
            {
                this.WarnUserOfInconsistentProtectionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool WarningTextTestFailover
        {
            get
            {
                return this.WarningTextTestFailoverField;
            }
            set
            {
                this.WarningTextTestFailoverField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FailbackOptions", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Jobs.Contract")]
    public partial class FailbackOptions : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Jobs.Contract.CoreMonitorOptions NewMonitorOptionsField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.CoreMonitorOptions NewMonitorOptions
        {
            get
            {
                return this.NewMonitorOptionsField;
            }
            set
            {
                this.NewMonitorOptionsField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RecommendedFailbackOptions", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Jobs.Contract")]
    public partial class RecommendedFailbackOptions : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Jobs.Contract.FailbackOptions FailbackOptionsField;
        
        private bool IsSourceNewField;
        
        private DoubleTake.Jobs.Contract.RestoreStatus RestoreStatusField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.FailbackOptions FailbackOptions
        {
            get
            {
                return this.FailbackOptionsField;
            }
            set
            {
                this.FailbackOptionsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSourceNew
        {
            get
            {
                return this.IsSourceNewField;
            }
            set
            {
                this.IsSourceNewField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.RestoreStatus RestoreStatus
        {
            get
            {
                return this.RestoreStatusField;
            }
            set
            {
                this.RestoreStatusField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RestoreStatus", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Jobs.Contract")]
    public enum RestoreStatus : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NotStarted = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Restoring = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Restored = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RestoreOptions", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Jobs.Contract")]
    public partial class RestoreOptions : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private bool ClearRestoreRequiredField;
        
        private DoubleTake.Communication.ServiceConnectionParameters NewSourceField;
        
        private DoubleTake.Core.Contract.Connection.RestoreParameters RestoreParametersField;
        
        private System.Uri RestoreTargetHostUriField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ClearRestoreRequired
        {
            get
            {
                return this.ClearRestoreRequiredField;
            }
            set
            {
                this.ClearRestoreRequiredField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Communication.ServiceConnectionParameters NewSource
        {
            get
            {
                return this.NewSourceField;
            }
            set
            {
                this.NewSourceField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Connection.RestoreParameters RestoreParameters
        {
            get
            {
                return this.RestoreParametersField;
            }
            set
            {
                this.RestoreParametersField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Uri RestoreTargetHostUri
        {
            get
            {
                return this.RestoreTargetHostUriField;
            }
            set
            {
                this.RestoreTargetHostUriField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RecommendedRestoreOptions", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Jobs.Contract")]
    public partial class RecommendedRestoreOptions : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private bool CanClearRestoreRequiredField;
        
        private string[] PossibleSourceAddressesField;
        
        private DoubleTake.Jobs.Contract.RestoreOptions RestoreOptionsField;
        
        private bool SameSourceOnlyField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanClearRestoreRequired
        {
            get
            {
                return this.CanClearRestoreRequiredField;
            }
            set
            {
                this.CanClearRestoreRequiredField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] PossibleSourceAddresses
        {
            get
            {
                return this.PossibleSourceAddressesField;
            }
            set
            {
                this.PossibleSourceAddressesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.RestoreOptions RestoreOptions
        {
            get
            {
                return this.RestoreOptionsField;
            }
            set
            {
                this.RestoreOptionsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool SameSourceOnly
        {
            get
            {
                return this.SameSourceOnlyField;
            }
            set
            {
                this.SameSourceOnlyField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SourceQualificationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Jobs.Contract")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Alternate.TupleOfstringstring[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Alternate.TupleOfstringstring))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.ComponentModel.ObservableObject))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.CommonFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.CollectorInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.CollectorConfigurationInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.PropertyBag))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.NameValuePair[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.NameValuePair))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.PushInstallationOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.PushInstallToken))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.PushInstallStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.InstallStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.ServiceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.ServiceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.ServicesStartMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.Workload))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.WorkloadType[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.WorkloadType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.WorkloadSupportSummary))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.Workload[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.LogicalItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.LogicalItem[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.ChangedItems))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.DashboardEngineOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.EmailNotificationOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.SmtpConnectionSecurity))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.InvalidEmailAddressFormatFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.ExceptionDetail))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Install.InstallStep))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.IO.AceFlags))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.IO.AceType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Tasks.ActivityToken))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Tasks.ActivityStatusEntry))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Tasks.ActivityCompletionStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Tasks.ActivityStatusEntry[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Communication.ServiceConnectionParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Communication.ServiceConnectionParameters[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotCreationReason))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TargetStates))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.MirrorParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.MirrorComparisonCriteria))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.MirrorOperationOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthLimit))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthScheduleMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotEntry[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotEntry))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotQuality))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotAge))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.MirrorState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ReplicationState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ClusterResourceState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TransmissionMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.QueueTaskParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TaskParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.Weekdays))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthSpecification[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthSpecification))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthSpecificationType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionStartParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.CompressionLevel))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ArchiveSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ScheduleItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ArchiveCriteria))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthScheduleEntry))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthScheduleEntry[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.OrphansSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TransmissionSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TimeWindow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.VerifySchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ScriptPoint[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ScriptPoint))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ScriptExecutionMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ScriptPointType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TargetStateInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.CompressionLevel[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.RestoreParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ArchiveRestoreOption))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.RestoreOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionConfiguration))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionStatistics))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.QueueState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ControlOperation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TargetStateInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionQualificationResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionQualificationFailures))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobCredentials))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobSourceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobSourceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverDataAction))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorConfiguration))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.ActiveDirectoryFailoverOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitoredAddressConfiguration[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitoredAddressConfiguration))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.PingMethods))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverIPAddressesOption))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverItems))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverProcessingOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverReplaceActions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.SSMRecoveryType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverScriptConfiguration))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverTrigger))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.HighAvailabilityState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitoredAddressStatus[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitoredAddressStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.RestoreStates))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.ReMonitorAction))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorQualificationResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorableAddressInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorableAddressInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorConfiguration[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailbackOption))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TargetServiceStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.DnsServerDetail[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.DnsServerDetail))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.IPAddressMap[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.IPAddressMap))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.FullServerNicMappings[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.FullServerNicMappings))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TargetServicesToStop[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TargetServicesToStop))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TestDnsResult[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TestDnsResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TestDnsDetails[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TestDnsDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotActivityStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.Snapshot))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotCreateOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotBuildingBlockType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotCreationResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.Snapshot[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotListOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotRevertOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotDeleteOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotMountOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.LvmOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.VolumeGroup[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.VolumeGroup))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.LogicalVolume[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.LogicalVolume))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.PhysicalVolume[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.PhysicalVolume))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.AccessLevel))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CollectedServer[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CollectedServer))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Credentials))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CollectedServerStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CredentialsType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CollectorDatabaseStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ControlledServerInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ControlledServerInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ProductInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ActivationStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ActivationCode[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ActivationCode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ActivationAttribute[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ActivationAttribute))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.LicenseType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ProductVersion))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ServerInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Volume))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ProtectableItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.FileSystemAttributes))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.SaturationLevel))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.FileItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.FileSystemItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.DirectoryItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.NetworkInterfaceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.NetworkInterfaceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UnicastIPAddressInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UnicastIPAddressInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.OperatingSystemInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.OperatingSystemArchitecture))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.OperatingSystemProductType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.OperatingSystemVersion))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Volume[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ControlledServerInfoSimple[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ControlledServerInfoSimple))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CoreFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.DesktopInteractionMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageDeleteInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.VhdDeleteActionType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.MachineInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PathTransformation[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PathTransformation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageVhdInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageVhdInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.EngineJobType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ReplicationSetUsageType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PhysicalRule[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PhysicalRule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.InclusionMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.RecursionMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ProtectableItem[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageEditedProperties))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageDeleteInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ShutdownOption))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PathBlockingEntry[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PathBlockingEntry))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PathBlockingMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CloudBillingInformation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ClusterAddressInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ClusterHostOwnershipModel))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CoreClusterInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.FullServerJobType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.SystemStateVerificationResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.SystemStateVerificationStep[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.SystemStateVerificationStep))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.SystemStateCutoverStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ReplicationSetInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.WinServiceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.WinServiceStartMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Property[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Property))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.NamedSetting[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.NamedSetting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.MultiStringSetting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.StringSetting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.IntegerSetting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.BooleanSetting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.LogMessage[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.LogMessage))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.EmailNotificationSettings))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.EmailNotificationCategories))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.EmailNotificationTestParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.DnsDomainDetailsPrototype[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.DnsDomainDetailsPrototype))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract1.ClusteredResourceState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract1.RebootAction))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract1.DnsLockInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.ClusterGroupInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.ClusterGroupInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.ClusterResourceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.ClusterResourceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.ClusteredVirtualMachinesInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.ClusteredVirtualMachinesInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.VirtualMachine[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.VirtualMachine))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.StorageInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.StorageInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.VirtualMachineResourceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Diagnostics.Contract.DtInfoCollectionStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Diagnostics.Contract.DtInfoCollectionProgress))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Discovery.Contract.DynamicServiceEndpoint[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Discovery.Contract.DynamicServiceEndpoint))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Dtmu.Contract.UsageData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Dtmu.Contract.JobUsageData[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Dtmu.Contract.JobUsageData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Dtmu.Contract.DtmuJobStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Dtmu.Contract.DtmuActivationStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Applications.ApplicationsPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Applications.SqlDatabasePersistedInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Applications.SqlDatabasePersistedInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Diagnostics.DiagnosticsPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DTHV.DTHVPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FilesAndFolders.FilesAndFoldersPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FullServer.FullServerPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FullServer.FullServerJobDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ImageBased.ImageProtectionPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ImageBased.ImageRecoveryPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ImageBased.ImageProtectionJobDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ImageBased.ImageRecoveryJobDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Scheduling.BandwidthOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Scheduling.BandwidthEntry[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Scheduling.BandwidthEntry))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.UVRA.UVRAPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.VcdVapp.VcdVappPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Virtualization.DTAVPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.VRA.VRAPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreConnectionDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.EngineConnectionInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.EngineConnectionInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Feature[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Feature))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreConnectionPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ClusterPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ResourceAndPassiveNodes[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ResourceAndPassiveNodes))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DeleteOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreMonitorPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FailoverOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FailoverMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FailoverType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Health))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ExtendedLowLevelState[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ExtendedLowLevelState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FailoverPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.AddressPersistedState[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.AddressPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ApplicationOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DnsRecordLockOptions[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DnsRecordLockOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ServiceInformation[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ServiceInformation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ClusterOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreConnectionOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreMonitorOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DTHVOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DNSOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DnsDomainDetails[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DnsDomainDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DTAVOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FullServerFailoverOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ImageProtectionOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ImageRecoveryOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.MonitoringOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ServiceMonitoringOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.SimpleFailoverMonitorOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.SystemStateOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.TargetServicesOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.UnmanagedConnectionOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.VRAOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.VcdVappOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobStatistics))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreMonitorDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobAction[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobAction))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ActionStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CreateOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobCredentials))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ClusterFilesAndFoldersQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.TargetFileServerQualificationResults[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.TargetFileServerQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DTHVQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DTAVQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.VRAQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.V2VQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.RecommendedJobOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.VerificationStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.RecommendedFailoverOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FailbackOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.RecommendedFailbackOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.RestoreStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.RestoreOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.RecommendedRestoreOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract1.CutoverDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract1.VerificationStep[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract1.VerificationStep))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract1.VerificationTaskStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract1.FixJobOptionsTaskStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.Share[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.Share))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.Ace[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.Ace))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorActivity))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorAction))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ActionInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.QueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.CompositeQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.QueryResult[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.HeartbeatPingQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.IcmpPingQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.PerformanceCounterQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ServiceStatusQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ScriptQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VmHealthQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VmConfigQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VirtualSwitchConfigQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.DtscStatusQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ShareQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.CompositeActionInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorAction[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.LogActionInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ScriptActionInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ServiceOperationActionInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ServiceOperation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorQuery))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.QueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.CompositeQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.CompositeQueryOperation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorQuery[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.IcmpPingQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.HeartbeatPingQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.PerformanceCounterQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ComparisonOperation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ScriptQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ServiceStatusQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VmHealthQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VmConfigQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VirtualSwitchConfigQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.DtscStatusQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.DTTargetResourceQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ShareQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.TriggerMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ValidationFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.PropertyFault[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.PropertyFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ActivityResultNode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.CompositeActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ScriptActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ServiceOperationActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.SimpleMonitorInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.SimpleMonitorInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.VmdkDatastoreMapping[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.VmdkDatastoreMapping))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVmdkInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVmQualificationResults[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVmQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVimServer[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVimServer))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavReplicationAppliance[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavReplicationAppliance))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.AddVimServerAndRAFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DTAVRequestFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavHostAndCluster[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavHostAndCluster))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVmInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVmInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVmdkInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavGuestInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavGuestInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.LicenseData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.GracePeriodReason))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVimInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.EmailNotificationInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.EmailNotificationInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTHV.VHDMapping[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTHV.VHDMapping))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTHV.VLanMapping[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTHV.VLanMapping))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTHV.VMSystemState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VcdVapp.PITSnapshotRecord[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VcdVapp.PITSnapshotRecord))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VcdVapp.VmdkInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VcdVapp.VmdkInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VolumeOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VRAInternalVirtualNetworkInterfaceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VRAInternalVirtualNetworkInterfaceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.UVRAVolumePersistedState[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.UVRAVolumePersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VRAVolumePersistedState[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VRAVolumePersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.V2VVirtualMachine[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.V2VVirtualMachine))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VolumeOptions[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.ReplicaVMInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VRAWorkloadCustomizationOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.ActivationCodeInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.ESXInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.JobState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.ErrorInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.ErrorInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualNetworkInterfaceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualizationConnectionInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VMInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualNetworkInterfaceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.SwitchPortInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualSwitchMapping[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualSwitchMapping))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualSwitchInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VMQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.NetworkAdapterInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.NetworkAdapterInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VHDInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VHDInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualSwitchInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.ServerQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VolumeQualificationResults[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VolumeQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VMInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.LicenseQuantity))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VimDatastoreItem[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VimDatastoreItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DtServiceException_Fault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.HyperVmNotFoundException_Fault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(string[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(bool[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(short[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(int[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(long[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(float[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(double[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.DateTime[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.TimeSpan[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Guid[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Uri[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(byte[][]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, System.Guid>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, System.Uri>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, DoubleTake.Core.Contract.Credentials>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ushort[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.DtProduct[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.DtProduct))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.SplaManagementFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.SplaManagementFaultCode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.UsageReport))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.JobInventory[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.JobInventory))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.JobStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.ActivationStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.LicenseResponse))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.Fault[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.Fault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.IO.DriveType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Net.Sockets.AddressFamily))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Net.NetworkCredential))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Net.IPAddress[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Net.IPAddress))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Security.SecureString))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.DateTimeOffset))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.DateTimeOffset[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(www.doubletake.com.Common.Contract.LogMessage[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(www.doubletake.com.Common.Contract.LogMessage))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(www.doubletake.com.Common.Contract.EventLogEntryData2[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(www.doubletake.com.Common.Contract.EventLogEntryData2))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(www.doubletake.com.Jobs.Contract.EngineControlStatus[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(www.doubletake.com.Jobs.Contract.EngineControlStatus))]
    public partial class SourceQualificationFault : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string DiscoveredSourceNameField;
        
        private object InnerFaultField;
        
        private string MessageField;
        
        private string[] MessageFormatParametersField;
        
        private string MessageKeyField;
        
        private string NameField;
        
        private System.Uri SourceHostUriField;
        
        private string StackTraceField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DiscoveredSourceName
        {
            get
            {
                return this.DiscoveredSourceNameField;
            }
            set
            {
                this.DiscoveredSourceNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object InnerFault
        {
            get
            {
                return this.InnerFaultField;
            }
            set
            {
                this.InnerFaultField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message
        {
            get
            {
                return this.MessageField;
            }
            set
            {
                this.MessageField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] MessageFormatParameters
        {
            get
            {
                return this.MessageFormatParametersField;
            }
            set
            {
                this.MessageFormatParametersField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MessageKey
        {
            get
            {
                return this.MessageKeyField;
            }
            set
            {
                this.MessageKeyField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Uri SourceHostUri
        {
            get
            {
                return this.SourceHostUriField;
            }
            set
            {
                this.SourceHostUriField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StackTrace
        {
            get
            {
                return this.StackTraceField;
            }
            set
            {
                this.StackTraceField = value;
            }
        }
    }
}
namespace DoubleTake.Jobs.Contract.Applications
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ApplicationsPersistedState", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Jobs.Contract.Applications")]
    public partial class ApplicationsPersistedState : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Jobs.Contract.CoreConnectionPersistedState EngineConnectionPersistedStateField;
        
        private System.Guid EngineMonitorIdField;
        
        private System.Guid MonitorIdField;
        
        private string PFTreeDNField;
        
        private string RestoreEndpointField;
        
        private string SourceEndpointField;
        
        private string SourceNameField;
        
        private string SourcePlaceholderField;
        
        private DoubleTake.Jobs.Contract.Applications.SqlDatabasePersistedInfo[] SqlDatabasesToAttachField;
        
        private string StateField;
        
        private System.Guid TestFailoverSnapshotIdField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.CoreConnectionPersistedState EngineConnectionPersistedState
        {
            get
            {
                return this.EngineConnectionPersistedStateField;
            }
            set
            {
                this.EngineConnectionPersistedStateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid EngineMonitorId
        {
            get
            {
                return this.EngineMonitorIdField;
            }
            set
            {
                this.EngineMonitorIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid MonitorId
        {
            get
            {
                return this.MonitorIdField;
            }
            set
            {
                this.MonitorIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PFTreeDN
        {
            get
            {
                return this.PFTreeDNField;
            }
            set
            {
                this.PFTreeDNField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RestoreEndpoint
        {
            get
            {
                return this.RestoreEndpointField;
            }
            set
            {
                this.RestoreEndpointField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceEndpoint
        {
            get
            {
                return this.SourceEndpointField;
            }
            set
            {
                this.SourceEndpointField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceName
        {
            get
            {
                return this.SourceNameField;
            }
            set
            {
                this.SourceNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourcePlaceholder
        {
            get
            {
                return this.SourcePlaceholderField;
            }
            set
            {
                this.SourcePlaceholderField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.Applications.SqlDatabasePersistedInfo[] SqlDatabasesToAttach
        {
            get
            {
                return this.SqlDatabasesToAttachField;
            }
            set
            {
                this.SqlDatabasesToAttachField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State
        {
            get
            {
                return this.StateField;
            }
            set
            {
                this.StateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid TestFailoverSnapshotId
        {
            get
            {
                return this.TestFailoverSnapshotIdField;
            }
            set
            {
                this.TestFailoverSnapshotIdField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SqlDatabasePersistedInfo", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Jobs.Contract.Applications")]
    public partial class SqlDatabasePersistedInfo : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string[] filesField;
        
        private string nameField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] files
        {
            get
            {
                return this.filesField;
            }
            set
            {
                this.filesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }
    }
}
namespace DoubleTake.Jobs.Contract.DTHV
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DTHVPersistedState", Namespace="DoubleTake.Jobs.Contract.DTHV")]
    public partial class DTHVPersistedState : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Jobs.Contract.DeleteOptions DeleteOptionsField;
        
        private DoubleTake.Jobs.Contract.CoreMonitorPersistedState FailoverMonitorPersistedStateField;
        
        private DoubleTake.Jobs.Contract.FailoverOptions FailoverOptionsField;
        
        private bool PowerSourceVmField;
        
        private DoubleTake.Jobs.Contract.CoreConnectionPersistedState ProtectionConnectionPersistedStateField;
        
        private System.Nullable<DoubleTake.Core.Contract.Connection.TargetStates> ProtectionTargetStateField;
        
        private DoubleTake.Jobs.Contract.CoreConnectionPersistedState RevertConnectionPersistedStateField;
        
        private string SourceEndpointField;
        
        private DoubleTake.Virtualization.Contract.JobState StateField;
        
        private string TargetRouteField;
        
        private string TargetVMGuidField;
        
        private string TargetVmCfgResourceNameField;
        
        private string TargetVmResourceNameField;
        
        private DoubleTake.Jobs.Contract.CoreMonitorPersistedState VMConfigMonitorPersistedStateField;
        
        private DoubleTake.Virtualization.Contract.DTHV.VHDMapping[] VhdMappingField;
        
        private DoubleTake.Jobs.Contract.CoreMonitorPersistedState VirtualSwitchMonitorPersistedStateField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.DeleteOptions DeleteOptions
        {
            get
            {
                return this.DeleteOptionsField;
            }
            set
            {
                this.DeleteOptionsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.CoreMonitorPersistedState FailoverMonitorPersistedState
        {
            get
            {
                return this.FailoverMonitorPersistedStateField;
            }
            set
            {
                this.FailoverMonitorPersistedStateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.FailoverOptions FailoverOptions
        {
            get
            {
                return this.FailoverOptionsField;
            }
            set
            {
                this.FailoverOptionsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool PowerSourceVm
        {
            get
            {
                return this.PowerSourceVmField;
            }
            set
            {
                this.PowerSourceVmField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.CoreConnectionPersistedState ProtectionConnectionPersistedState
        {
            get
            {
                return this.ProtectionConnectionPersistedStateField;
            }
            set
            {
                this.ProtectionConnectionPersistedStateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<DoubleTake.Core.Contract.Connection.TargetStates> ProtectionTargetState
        {
            get
            {
                return this.ProtectionTargetStateField;
            }
            set
            {
                this.ProtectionTargetStateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.CoreConnectionPersistedState RevertConnectionPersistedState
        {
            get
            {
                return this.RevertConnectionPersistedStateField;
            }
            set
            {
                this.RevertConnectionPersistedStateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceEndpoint
        {
            get
            {
                return this.SourceEndpointField;
            }
            set
            {
                this.SourceEndpointField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Virtualization.Contract.JobState State
        {
            get
            {
                return this.StateField;
            }
            set
            {
                this.StateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetRoute
        {
            get
            {
                return this.TargetRouteField;
            }
            set
            {
                this.TargetRouteField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetVMGuid
        {
            get
            {
                return this.TargetVMGuidField;
            }
            set
            {
                this.TargetVMGuidField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetVmCfgResourceName
        {
            get
            {
                return this.TargetVmCfgResourceNameField;
            }
            set
            {
                this.TargetVmCfgResourceNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetVmResourceName
        {
            get
            {
                return this.TargetVmResourceNameField;
            }
            set
            {
                this.TargetVmResourceNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.CoreMonitorPersistedState VMConfigMonitorPersistedState
        {
            get
            {
                return this.VMConfigMonitorPersistedStateField;
            }
            set
            {
                this.VMConfigMonitorPersistedStateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Virtualization.Contract.DTHV.VHDMapping[] VhdMapping
        {
            get
            {
                return this.VhdMappingField;
            }
            set
            {
                this.VhdMappingField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.CoreMonitorPersistedState VirtualSwitchMonitorPersistedState
        {
            get
            {
                return this.VirtualSwitchMonitorPersistedStateField;
            }
            set
            {
                this.VirtualSwitchMonitorPersistedStateField = value;
            }
        }
    }
}
namespace DoubleTake.Jobs.Contract.Diagnostics
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DiagnosticsPersistedState", Namespace="DoubleTake.Jobs.Contract.Diagnostics")]
    public partial class DiagnosticsPersistedState : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Jobs.Contract.CoreConnectionPersistedState DiagnosticsConnectionPersistedStateField;
        
        private string StateField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.CoreConnectionPersistedState DiagnosticsConnectionPersistedState
        {
            get
            {
                return this.DiagnosticsConnectionPersistedStateField;
            }
            set
            {
                this.DiagnosticsConnectionPersistedStateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State
        {
            get
            {
                return this.StateField;
            }
            set
            {
                this.StateField = value;
            }
        }
    }
}
namespace DoubleTake.Jobs.Contract.Virtualization
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DTAVPersistedState", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Jobs.Contract.Virtualization")]
    public partial class DTAVPersistedState : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.DateTimeOffset JobCreationDateField;
        
        private DoubleTake.Virtualization.Contract.JobState JobStateField;
        
        private DoubleTake.Core.Contract.ProductVersion JobVersionField;
        
        private string LicenseDataField;
        
        private bool LicensedField;
        
        private DoubleTake.Virtualization.Contract.VcdVapp.PITSnapshotRecord[] SavedSnapshotsField;
        
        private string SnapshotNameField;
        
        private string TargetVmGuidField;
        
        private DoubleTake.Virtualization.Contract.VcdVapp.VmdkInfo[] VmdkdInfoListField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTimeOffset JobCreationDate
        {
            get
            {
                return this.JobCreationDateField;
            }
            set
            {
                this.JobCreationDateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Virtualization.Contract.JobState JobState
        {
            get
            {
                return this.JobStateField;
            }
            set
            {
                this.JobStateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.ProductVersion JobVersion
        {
            get
            {
                return this.JobVersionField;
            }
            set
            {
                this.JobVersionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LicenseData
        {
            get
            {
                return this.LicenseDataField;
            }
            set
            {
                this.LicenseDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Licensed
        {
            get
            {
                return this.LicensedField;
            }
            set
            {
                this.LicensedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Virtualization.Contract.VcdVapp.PITSnapshotRecord[] SavedSnapshots
        {
            get
            {
                return this.SavedSnapshotsField;
            }
            set
            {
                this.SavedSnapshotsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SnapshotName
        {
            get
            {
                return this.SnapshotNameField;
            }
            set
            {
                this.SnapshotNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetVmGuid
        {
            get
            {
                return this.TargetVmGuidField;
            }
            set
            {
                this.TargetVmGuidField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Virtualization.Contract.VcdVapp.VmdkInfo[] VmdkdInfoList
        {
            get
            {
                return this.VmdkdInfoListField;
            }
            set
            {
                this.VmdkdInfoListField = value;
            }
        }
    }
}
namespace DoubleTake.Jobs.Contract.FilesAndFolders
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FilesAndFoldersPersistedState", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Jobs.Contract.FilesAndFolders")]
    public partial class FilesAndFoldersPersistedState : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string FailedSubStateField;
        
        private DoubleTake.Jobs.Contract.CoreConnectionPersistedState MainConnectionPersistedStateField;
        
        private System.Guid MonitorIdField;
        
        private DoubleTake.Jobs.Contract.CoreMonitorPersistedState MonitorPersistedStateField;
        
        private string OriginalSourceAddressField;
        
        private System.Uri OriginalSourceHostUriField;
        
        private string OriginalSourceMachineNameField;
        
        private int OriginalSourceManagementPortField;
        
        private string OriginalSourceNetworkIdField;
        
        private string OriginalSourceUniqueIdField;
        
        private System.Uri RestoreTargetHostUriField;
        
        private int RestoreTargetManagementPortField;
        
        private string RestoreTargetNetworkIdField;
        
        private string RestoreTargetUniqueIdField;
        
        private string StateField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FailedSubState
        {
            get
            {
                return this.FailedSubStateField;
            }
            set
            {
                this.FailedSubStateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.CoreConnectionPersistedState MainConnectionPersistedState
        {
            get
            {
                return this.MainConnectionPersistedStateField;
            }
            set
            {
                this.MainConnectionPersistedStateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid MonitorId
        {
            get
            {
                return this.MonitorIdField;
            }
            set
            {
                this.MonitorIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.CoreMonitorPersistedState MonitorPersistedState
        {
            get
            {
                return this.MonitorPersistedStateField;
            }
            set
            {
                this.MonitorPersistedStateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OriginalSourceAddress
        {
            get
            {
                return this.OriginalSourceAddressField;
            }
            set
            {
                this.OriginalSourceAddressField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Uri OriginalSourceHostUri
        {
            get
            {
                return this.OriginalSourceHostUriField;
            }
            set
            {
                this.OriginalSourceHostUriField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OriginalSourceMachineName
        {
            get
            {
                return this.OriginalSourceMachineNameField;
            }
            set
            {
                this.OriginalSourceMachineNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OriginalSourceManagementPort
        {
            get
            {
                return this.OriginalSourceManagementPortField;
            }
            set
            {
                this.OriginalSourceManagementPortField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OriginalSourceNetworkId
        {
            get
            {
                return this.OriginalSourceNetworkIdField;
            }
            set
            {
                this.OriginalSourceNetworkIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OriginalSourceUniqueId
        {
            get
            {
                return this.OriginalSourceUniqueIdField;
            }
            set
            {
                this.OriginalSourceUniqueIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Uri RestoreTargetHostUri
        {
            get
            {
                return this.RestoreTargetHostUriField;
            }
            set
            {
                this.RestoreTargetHostUriField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RestoreTargetManagementPort
        {
            get
            {
                return this.RestoreTargetManagementPortField;
            }
            set
            {
                this.RestoreTargetManagementPortField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RestoreTargetNetworkId
        {
            get
            {
                return this.RestoreTargetNetworkIdField;
            }
            set
            {
                this.RestoreTargetNetworkIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RestoreTargetUniqueId
        {
            get
            {
                return this.RestoreTargetUniqueIdField;
            }
            set
            {
                this.RestoreTargetUniqueIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State
        {
            get
            {
                return this.StateField;
            }
            set
            {
                this.StateField = value;
            }
        }
    }
}
namespace DoubleTake.Jobs.Contract.FullServer
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FullServerPersistedState", Namespace="DoubleTake.Jobs.Contract.FullServer")]
    public partial class FullServerPersistedState : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Jobs.Contract.CoreConnectionPersistedState BackupConnectionPersistedStateField;
        
        private System.Nullable<DoubleTake.Core.Contract.Connection.TargetStates> BackupTargetStateField;
        
        private DoubleTake.Jobs.Contract.FailoverOptions FailoverOptionsField;
        
        private DoubleTake.Jobs.Contract.CoreMonitorPersistedState MonitorPersistedStateField;
        
        private DoubleTake.Jobs.Contract.CoreConnectionPersistedState ProtectionConnectionPersistedStateField;
        
        private System.Nullable<DoubleTake.Core.Contract.Connection.TargetStates> ProtectionTargetStateField;
        
        private DoubleTake.Jobs.Contract.CoreConnectionPersistedState RecoveryConnectionPersistedStateField;
        
        private System.Nullable<DoubleTake.Core.Contract.Connection.TargetStates> RecoveryTargetStateField;
        
        private string StateField;
        
        private DoubleTake.Jobs.Contract.CoreConnectionPersistedState SystemVolumeRevertPersistedStateField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.CoreConnectionPersistedState BackupConnectionPersistedState
        {
            get
            {
                return this.BackupConnectionPersistedStateField;
            }
            set
            {
                this.BackupConnectionPersistedStateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<DoubleTake.Core.Contract.Connection.TargetStates> BackupTargetState
        {
            get
            {
                return this.BackupTargetStateField;
            }
            set
            {
                this.BackupTargetStateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.FailoverOptions FailoverOptions
        {
            get
            {
                return this.FailoverOptionsField;
            }
            set
            {
                this.FailoverOptionsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.CoreMonitorPersistedState MonitorPersistedState
        {
            get
            {
                return this.MonitorPersistedStateField;
            }
            set
            {
                this.MonitorPersistedStateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.CoreConnectionPersistedState ProtectionConnectionPersistedState
        {
            get
            {
                return this.ProtectionConnectionPersistedStateField;
            }
            set
            {
                this.ProtectionConnectionPersistedStateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<DoubleTake.Core.Contract.Connection.TargetStates> ProtectionTargetState
        {
            get
            {
                return this.ProtectionTargetStateField;
            }
            set
            {
                this.ProtectionTargetStateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.CoreConnectionPersistedState RecoveryConnectionPersistedState
        {
            get
            {
                return this.RecoveryConnectionPersistedStateField;
            }
            set
            {
                this.RecoveryConnectionPersistedStateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<DoubleTake.Core.Contract.Connection.TargetStates> RecoveryTargetState
        {
            get
            {
                return this.RecoveryTargetStateField;
            }
            set
            {
                this.RecoveryTargetStateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State
        {
            get
            {
                return this.StateField;
            }
            set
            {
                this.StateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.CoreConnectionPersistedState SystemVolumeRevertPersistedState
        {
            get
            {
                return this.SystemVolumeRevertPersistedStateField;
            }
            set
            {
                this.SystemVolumeRevertPersistedStateField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FullServerJobDetails", Namespace="DoubleTake.Jobs.Contract.FullServer")]
    public partial class FullServerJobDetails : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Jobs.Contract.CoreConnectionDetails BackupConnectionDetailsField;
        
        private DoubleTake.Jobs.Contract1.CutoverDetails CutoverDetailsField;
        
        private DoubleTake.Jobs.Contract.CoreConnectionDetails ProtectionConnectionDetailsField;
        
        private DoubleTake.Jobs.Contract.CoreConnectionDetails RecoveryConnectionDetailsField;
        
        private DoubleTake.Jobs.Contract.CoreConnectionDetails SystemVolumeRevertConnectionDetailsField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.CoreConnectionDetails BackupConnectionDetails
        {
            get
            {
                return this.BackupConnectionDetailsField;
            }
            set
            {
                this.BackupConnectionDetailsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract1.CutoverDetails CutoverDetails
        {
            get
            {
                return this.CutoverDetailsField;
            }
            set
            {
                this.CutoverDetailsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.CoreConnectionDetails ProtectionConnectionDetails
        {
            get
            {
                return this.ProtectionConnectionDetailsField;
            }
            set
            {
                this.ProtectionConnectionDetailsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.CoreConnectionDetails RecoveryConnectionDetails
        {
            get
            {
                return this.RecoveryConnectionDetailsField;
            }
            set
            {
                this.RecoveryConnectionDetailsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.CoreConnectionDetails SystemVolumeRevertConnectionDetails
        {
            get
            {
                return this.SystemVolumeRevertConnectionDetailsField;
            }
            set
            {
                this.SystemVolumeRevertConnectionDetailsField = value;
            }
        }
    }
}
namespace DoubleTake.Jobs.Contract.ImageBased
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ImageProtectionPersistedState", Namespace="DoubleTake.Jobs.Contract.ImageBased")]
    public partial class ImageProtectionPersistedState : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Jobs.Contract.CoreConnectionPersistedState ProtectionConnectionPersistedStateField;
        
        private System.Nullable<DoubleTake.Core.Contract.Connection.TargetStates> ProtectionTargetStateField;
        
        private string StateField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.CoreConnectionPersistedState ProtectionConnectionPersistedState
        {
            get
            {
                return this.ProtectionConnectionPersistedStateField;
            }
            set
            {
                this.ProtectionConnectionPersistedStateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<DoubleTake.Core.Contract.Connection.TargetStates> ProtectionTargetState
        {
            get
            {
                return this.ProtectionTargetStateField;
            }
            set
            {
                this.ProtectionTargetStateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State
        {
            get
            {
                return this.StateField;
            }
            set
            {
                this.StateField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ImageRecoveryPersistedState", Namespace="DoubleTake.Jobs.Contract.ImageBased")]
    public partial class ImageRecoveryPersistedState : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Jobs.Contract.FailoverOptions FailoverOptionsField;
        
        private DoubleTake.Jobs.Contract.CoreConnectionPersistedState RecoveryConnectionPersistedStateField;
        
        private System.Nullable<DoubleTake.Core.Contract.Connection.TargetStates> RecoveryTargetStateField;
        
        private string StateField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.FailoverOptions FailoverOptions
        {
            get
            {
                return this.FailoverOptionsField;
            }
            set
            {
                this.FailoverOptionsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.CoreConnectionPersistedState RecoveryConnectionPersistedState
        {
            get
            {
                return this.RecoveryConnectionPersistedStateField;
            }
            set
            {
                this.RecoveryConnectionPersistedStateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<DoubleTake.Core.Contract.Connection.TargetStates> RecoveryTargetState
        {
            get
            {
                return this.RecoveryTargetStateField;
            }
            set
            {
                this.RecoveryTargetStateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State
        {
            get
            {
                return this.StateField;
            }
            set
            {
                this.StateField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ImageProtectionJobDetails", Namespace="DoubleTake.Jobs.Contract.ImageBased")]
    public partial class ImageProtectionJobDetails : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Jobs.Contract.CoreConnectionDetails ProtectionConnectionDetailsField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.CoreConnectionDetails ProtectionConnectionDetails
        {
            get
            {
                return this.ProtectionConnectionDetailsField;
            }
            set
            {
                this.ProtectionConnectionDetailsField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ImageRecoveryJobDetails", Namespace="DoubleTake.Jobs.Contract.ImageBased")]
    public partial class ImageRecoveryJobDetails : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Jobs.Contract1.CutoverDetails CutoverDetailsField;
        
        private DoubleTake.Jobs.Contract.CoreConnectionDetails RecoveryConnectionDetailsField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract1.CutoverDetails CutoverDetails
        {
            get
            {
                return this.CutoverDetailsField;
            }
            set
            {
                this.CutoverDetailsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.CoreConnectionDetails RecoveryConnectionDetails
        {
            get
            {
                return this.RecoveryConnectionDetailsField;
            }
            set
            {
                this.RecoveryConnectionDetailsField = value;
            }
        }
    }
}
namespace DoubleTake.Jobs.Contract.UVRA
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UVRAPersistedState", Namespace="DoubleTake.Jobs.Contract.UVRA")]
    public partial class UVRAPersistedState : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.DateTime FailoverTimeField;
        
        private DoubleTake.Virtualization.Contract.VRA.VRAInternalVirtualNetworkInterfaceInfo[] ReplicaNicsField;
        
        private string SourceISCSIChapPasswordField;
        
        private string SourceISCSIChapUsernameField;
        
        private string SourceISCSITargetNameField;
        
        private DoubleTake.Core.Contract.MachineInfo SourceMachineInfoField;
        
        private System.DateTime StartTimeField;
        
        private DoubleTake.Virtualization.Contract.JobState StateField;
        
        private System.DateTime StopTimeField;
        
        private DoubleTake.Virtualization.Contract.VirtualizationConnectionInfo VRAVirtualizationConnectionInfoField;
        
        private DoubleTake.Virtualization.Contract.VRA.UVRAVolumePersistedState[] VolumePersistedStateField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime FailoverTime
        {
            get
            {
                return this.FailoverTimeField;
            }
            set
            {
                this.FailoverTimeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Virtualization.Contract.VRA.VRAInternalVirtualNetworkInterfaceInfo[] ReplicaNics
        {
            get
            {
                return this.ReplicaNicsField;
            }
            set
            {
                this.ReplicaNicsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceISCSIChapPassword
        {
            get
            {
                return this.SourceISCSIChapPasswordField;
            }
            set
            {
                this.SourceISCSIChapPasswordField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceISCSIChapUsername
        {
            get
            {
                return this.SourceISCSIChapUsernameField;
            }
            set
            {
                this.SourceISCSIChapUsernameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceISCSITargetName
        {
            get
            {
                return this.SourceISCSITargetNameField;
            }
            set
            {
                this.SourceISCSITargetNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.MachineInfo SourceMachineInfo
        {
            get
            {
                return this.SourceMachineInfoField;
            }
            set
            {
                this.SourceMachineInfoField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StartTime
        {
            get
            {
                return this.StartTimeField;
            }
            set
            {
                this.StartTimeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Virtualization.Contract.JobState State
        {
            get
            {
                return this.StateField;
            }
            set
            {
                this.StateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StopTime
        {
            get
            {
                return this.StopTimeField;
            }
            set
            {
                this.StopTimeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Virtualization.Contract.VirtualizationConnectionInfo VRAVirtualizationConnectionInfo
        {
            get
            {
                return this.VRAVirtualizationConnectionInfoField;
            }
            set
            {
                this.VRAVirtualizationConnectionInfoField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Virtualization.Contract.VRA.UVRAVolumePersistedState[] VolumePersistedState
        {
            get
            {
                return this.VolumePersistedStateField;
            }
            set
            {
                this.VolumePersistedStateField = value;
            }
        }
    }
}
namespace DoubleTake.Jobs.Contract.VRA
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VRAPersistedState", Namespace="DoubleTake.Jobs.Contract.VRA")]
    public partial class VRAPersistedState : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.DateTime FailoverTimeField;
        
        private System.Nullable<System.DateTime> MirrorStartTimeField;
        
        private DoubleTake.Virtualization.Contract.VRA.VRAInternalVirtualNetworkInterfaceInfo[] ReplicaNicsField;
        
        private string ReplicaVmVersionField;
        
        private DoubleTake.Core.Contract.MachineInfo SourceMachineInfoField;
        
        private System.DateTime StartTimeField;
        
        private DoubleTake.Virtualization.Contract.JobState StateField;
        
        private System.DateTime StopTimeField;
        
        private bool UpgradeProcessingRequiredField;
        
        private DoubleTake.Virtualization.Contract.VirtualizationConnectionInfo VRAVirtualizationConnectionInfoField;
        
        private DoubleTake.Virtualization.Contract.VRA.VRAVolumePersistedState[] VolumePersistedStateField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime FailoverTime
        {
            get
            {
                return this.FailoverTimeField;
            }
            set
            {
                this.FailoverTimeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> MirrorStartTime
        {
            get
            {
                return this.MirrorStartTimeField;
            }
            set
            {
                this.MirrorStartTimeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Virtualization.Contract.VRA.VRAInternalVirtualNetworkInterfaceInfo[] ReplicaNics
        {
            get
            {
                return this.ReplicaNicsField;
            }
            set
            {
                this.ReplicaNicsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReplicaVmVersion
        {
            get
            {
                return this.ReplicaVmVersionField;
            }
            set
            {
                this.ReplicaVmVersionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.MachineInfo SourceMachineInfo
        {
            get
            {
                return this.SourceMachineInfoField;
            }
            set
            {
                this.SourceMachineInfoField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StartTime
        {
            get
            {
                return this.StartTimeField;
            }
            set
            {
                this.StartTimeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Virtualization.Contract.JobState State
        {
            get
            {
                return this.StateField;
            }
            set
            {
                this.StateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StopTime
        {
            get
            {
                return this.StopTimeField;
            }
            set
            {
                this.StopTimeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool UpgradeProcessingRequired
        {
            get
            {
                return this.UpgradeProcessingRequiredField;
            }
            set
            {
                this.UpgradeProcessingRequiredField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Virtualization.Contract.VirtualizationConnectionInfo VRAVirtualizationConnectionInfo
        {
            get
            {
                return this.VRAVirtualizationConnectionInfoField;
            }
            set
            {
                this.VRAVirtualizationConnectionInfoField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Virtualization.Contract.VRA.VRAVolumePersistedState[] VolumePersistedState
        {
            get
            {
                return this.VolumePersistedStateField;
            }
            set
            {
                this.VolumePersistedStateField = value;
            }
        }
    }
}
namespace DoubleTake.Jobs.Contract.VcdVapp
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VcdVappPersistedState", Namespace="DoubleTake.Jobs.Contract.VcdVapp")]
    public partial class VcdVappPersistedState : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.DateTimeOffset JobCreationDateField;
        
        private DoubleTake.Virtualization.Contract.JobState JobStateField;
        
        private string LicenseDataField;
        
        private bool LicensedField;
        
        private DoubleTake.Virtualization.Contract.VcdVapp.PITSnapshotRecord[] SavedSnapshotsField;
        
        private string SnapshotNameField;
        
        private string TargetVappGuidField;
        
        private DoubleTake.Virtualization.Contract.VcdVapp.VmdkInfo[] VmdkdInfoListField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTimeOffset JobCreationDate
        {
            get
            {
                return this.JobCreationDateField;
            }
            set
            {
                this.JobCreationDateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Virtualization.Contract.JobState JobState
        {
            get
            {
                return this.JobStateField;
            }
            set
            {
                this.JobStateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LicenseData
        {
            get
            {
                return this.LicenseDataField;
            }
            set
            {
                this.LicenseDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Licensed
        {
            get
            {
                return this.LicensedField;
            }
            set
            {
                this.LicensedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Virtualization.Contract.VcdVapp.PITSnapshotRecord[] SavedSnapshots
        {
            get
            {
                return this.SavedSnapshotsField;
            }
            set
            {
                this.SavedSnapshotsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SnapshotName
        {
            get
            {
                return this.SnapshotNameField;
            }
            set
            {
                this.SnapshotNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetVappGuid
        {
            get
            {
                return this.TargetVappGuidField;
            }
            set
            {
                this.TargetVappGuidField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Virtualization.Contract.VcdVapp.VmdkInfo[] VmdkdInfoList
        {
            get
            {
                return this.VmdkdInfoListField;
            }
            set
            {
                this.VmdkdInfoListField = value;
            }
        }
    }
}
namespace DoubleTake.Virtualization.Contract
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="JobState", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Virtualization.Contract")]
    public partial class JobState : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private bool HasErrorField;
        
        private string HighLevelField;
        
        private bool IsInSyncField;
        
        private string LowLevelField;
        
        private DoubleTake.Virtualization.Contract.ErrorInfo[] RecentErrorsField;
        
        private DoubleTake.Jobs.Contract.ExtendedLowLevelState[] SourceActivationCodeMessagesField;
        
        private DoubleTake.Jobs.Contract.ExtendedLowLevelState[] TargetActivationCodeMessagesField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasError
        {
            get
            {
                return this.HasErrorField;
            }
            set
            {
                this.HasErrorField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HighLevel
        {
            get
            {
                return this.HighLevelField;
            }
            set
            {
                this.HighLevelField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsInSync
        {
            get
            {
                return this.IsInSyncField;
            }
            set
            {
                this.IsInSyncField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LowLevel
        {
            get
            {
                return this.LowLevelField;
            }
            set
            {
                this.LowLevelField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Virtualization.Contract.ErrorInfo[] RecentErrors
        {
            get
            {
                return this.RecentErrorsField;
            }
            set
            {
                this.RecentErrorsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.ExtendedLowLevelState[] SourceActivationCodeMessages
        {
            get
            {
                return this.SourceActivationCodeMessagesField;
            }
            set
            {
                this.SourceActivationCodeMessagesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.ExtendedLowLevelState[] TargetActivationCodeMessages
        {
            get
            {
                return this.TargetActivationCodeMessagesField;
            }
            set
            {
                this.TargetActivationCodeMessagesField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ErrorInfo", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Virtualization.Contract")]
    public partial class ErrorInfo : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string DetailsField;
        
        private DoubleTake.Jobs.Contract.Health HealthField;
        
        private int IdField;
        
        private string MessageField;
        
        private System.DateTime TimestampField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Details
        {
            get
            {
                return this.DetailsField;
            }
            set
            {
                this.DetailsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.Health Health
        {
            get
            {
                return this.HealthField;
            }
            set
            {
                this.HealthField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message
        {
            get
            {
                return this.MessageField;
            }
            set
            {
                this.MessageField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Timestamp
        {
            get
            {
                return this.TimestampField;
            }
            set
            {
                this.TimestampField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VirtualizationConnectionInfo", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Virtualization.Contract")]
    public partial class VirtualizationConnectionInfo : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.Guid MonitorIdField;
        
        private DoubleTake.Core.Contract.PathTransformation[] PathTransformationsField;
        
        private bool ProcessHardlinksField;
        
        private string RepsetNameField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid MonitorId
        {
            get
            {
                return this.MonitorIdField;
            }
            set
            {
                this.MonitorIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.PathTransformation[] PathTransformations
        {
            get
            {
                return this.PathTransformationsField;
            }
            set
            {
                this.PathTransformationsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ProcessHardlinks
        {
            get
            {
                return this.ProcessHardlinksField;
            }
            set
            {
                this.ProcessHardlinksField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RepsetName
        {
            get
            {
                return this.RepsetNameField;
            }
            set
            {
                this.RepsetNameField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VirtualNetworkInterfaceInfo", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Virtualization.Contract")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VRAInternalVirtualNetworkInterfaceInfo))]
    public partial class VirtualNetworkInterfaceInfo : DoubleTake.Core.Contract.NetworkInterfaceInfo
    {
        
        private string VirtualNetworkField;
        
        private string VirtualNicTypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VirtualNetwork
        {
            get
            {
                return this.VirtualNetworkField;
            }
            set
            {
                this.VirtualNetworkField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VirtualNicType
        {
            get
            {
                return this.VirtualNicTypeField;
            }
            set
            {
                this.VirtualNicTypeField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VMInfo", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Virtualization.Contract")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.ReplicaVMInfo))]
    public partial class VMInfo : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string AddressField;
        
        private System.Guid BiosGuidField;
        
        private byte[] BootVolumeSignatureField;
        
        private string DisplayNameField;
        
        private string GuestOSField;
        
        private System.Uri GuestUriField;
        
        private System.Guid IdField;
        
        private string PathField;
        
        private DoubleTake.Core.Contract.PathTransformation[] PathTransformationsField;
        
        private string SnapshotDataPathField;
        
        private string[] SnapshotFileNamesField;
        
        private string SystemDirectoryField;
        
        private string[] VirtualHardDiskPathField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address
        {
            get
            {
                return this.AddressField;
            }
            set
            {
                this.AddressField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid BiosGuid
        {
            get
            {
                return this.BiosGuidField;
            }
            set
            {
                this.BiosGuidField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] BootVolumeSignature
        {
            get
            {
                return this.BootVolumeSignatureField;
            }
            set
            {
                this.BootVolumeSignatureField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DisplayName
        {
            get
            {
                return this.DisplayNameField;
            }
            set
            {
                this.DisplayNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GuestOS
        {
            get
            {
                return this.GuestOSField;
            }
            set
            {
                this.GuestOSField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Uri GuestUri
        {
            get
            {
                return this.GuestUriField;
            }
            set
            {
                this.GuestUriField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Path
        {
            get
            {
                return this.PathField;
            }
            set
            {
                this.PathField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.PathTransformation[] PathTransformations
        {
            get
            {
                return this.PathTransformationsField;
            }
            set
            {
                this.PathTransformationsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SnapshotDataPath
        {
            get
            {
                return this.SnapshotDataPathField;
            }
            set
            {
                this.SnapshotDataPathField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] SnapshotFileNames
        {
            get
            {
                return this.SnapshotFileNamesField;
            }
            set
            {
                this.SnapshotFileNamesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SystemDirectory
        {
            get
            {
                return this.SystemDirectoryField;
            }
            set
            {
                this.SystemDirectoryField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] VirtualHardDiskPath
        {
            get
            {
                return this.VirtualHardDiskPathField;
            }
            set
            {
                this.VirtualHardDiskPathField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VirtualSwitchMapping", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Virtualization.Contract")]
    public partial class VirtualSwitchMapping : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Virtualization.Contract.VirtualSwitchInfo SourceVirtualSwitchField;
        
        private DoubleTake.Virtualization.Contract.VirtualSwitchInfo TargetVirtualSwitchField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Virtualization.Contract.VirtualSwitchInfo SourceVirtualSwitch
        {
            get
            {
                return this.SourceVirtualSwitchField;
            }
            set
            {
                this.SourceVirtualSwitchField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Virtualization.Contract.VirtualSwitchInfo TargetVirtualSwitch
        {
            get
            {
                return this.TargetVirtualSwitchField;
            }
            set
            {
                this.TargetVirtualSwitchField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SwitchPortInfo", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Virtualization.Contract")]
    public partial class SwitchPortInfo : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private int AccessVLanIdField;
        
        private string GuidField;
        
        private string NameField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AccessVLanId
        {
            get
            {
                return this.AccessVLanIdField;
            }
            set
            {
                this.AccessVLanIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Guid
        {
            get
            {
                return this.GuidField;
            }
            set
            {
                this.GuidField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VirtualSwitchInfo", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Virtualization.Contract")]
    public partial class VirtualSwitchInfo : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string LabelField;
        
        private string SwitchUuidField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Label
        {
            get
            {
                return this.LabelField;
            }
            set
            {
                this.LabelField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SwitchUuid
        {
            get
            {
                return this.SwitchUuidField;
            }
            set
            {
                this.SwitchUuidField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VMQualificationResults", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Virtualization.Contract")]
    public partial class VMQualificationResults : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string AddressField;
        
        private string DisplayNameField;
        
        private bool IsHeartbeatInstalledField;
        
        private DoubleTake.Virtualization.Contract.NetworkAdapterInfo[] NetworkAdaptersField;
        
        private DoubleTake.Virtualization.Contract.VHDInfo[] VHDInfoField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address
        {
            get
            {
                return this.AddressField;
            }
            set
            {
                this.AddressField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DisplayName
        {
            get
            {
                return this.DisplayNameField;
            }
            set
            {
                this.DisplayNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsHeartbeatInstalled
        {
            get
            {
                return this.IsHeartbeatInstalledField;
            }
            set
            {
                this.IsHeartbeatInstalledField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Virtualization.Contract.NetworkAdapterInfo[] NetworkAdapters
        {
            get
            {
                return this.NetworkAdaptersField;
            }
            set
            {
                this.NetworkAdaptersField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Virtualization.Contract.VHDInfo[] VHDInfo
        {
            get
            {
                return this.VHDInfoField;
            }
            set
            {
                this.VHDInfoField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NetworkAdapterInfo", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Virtualization.Contract")]
    public partial class NetworkAdapterInfo : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Virtualization.Contract.SwitchPortInfo SwitchPortField;
        
        private DoubleTake.Virtualization.Contract.VirtualSwitchInfo VirtualSwitchField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Virtualization.Contract.SwitchPortInfo SwitchPort
        {
            get
            {
                return this.SwitchPortField;
            }
            set
            {
                this.SwitchPortField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Virtualization.Contract.VirtualSwitchInfo VirtualSwitch
        {
            get
            {
                return this.VirtualSwitchField;
            }
            set
            {
                this.VirtualSwitchField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VHDInfo", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Virtualization.Contract")]
    public partial class VHDInfo : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string DriveField;
        
        private long FileSizeField;
        
        private long MaxInternalSizeField;
        
        private string ParentPathField;
        
        private string PathField;
        
        private int TypeField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Drive
        {
            get
            {
                return this.DriveField;
            }
            set
            {
                this.DriveField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long FileSize
        {
            get
            {
                return this.FileSizeField;
            }
            set
            {
                this.FileSizeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long MaxInternalSize
        {
            get
            {
                return this.MaxInternalSizeField;
            }
            set
            {
                this.MaxInternalSizeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ParentPath
        {
            get
            {
                return this.ParentPathField;
            }
            set
            {
                this.ParentPathField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Path
        {
            get
            {
                return this.PathField;
            }
            set
            {
                this.PathField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Type
        {
            get
            {
                return this.TypeField;
            }
            set
            {
                this.TypeField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServerQualificationResults", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Virtualization.Contract")]
    public partial class ServerQualificationResults : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private int CpusField;
        
        private long MemoryField;
        
        private string VersionField;
        
        private DoubleTake.Virtualization.Contract.VirtualSwitchInfo[] VirtualSwitchesField;
        
        private DoubleTake.Virtualization.Contract.VolumeQualificationResults[] VolumesField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Cpus
        {
            get
            {
                return this.CpusField;
            }
            set
            {
                this.CpusField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Memory
        {
            get
            {
                return this.MemoryField;
            }
            set
            {
                this.MemoryField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Version
        {
            get
            {
                return this.VersionField;
            }
            set
            {
                this.VersionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Virtualization.Contract.VirtualSwitchInfo[] VirtualSwitches
        {
            get
            {
                return this.VirtualSwitchesField;
            }
            set
            {
                this.VirtualSwitchesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Virtualization.Contract.VolumeQualificationResults[] Volumes
        {
            get
            {
                return this.VolumesField;
            }
            set
            {
                this.VolumesField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VolumeQualificationResults", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Virtualization.Contract")]
    public partial class VolumeQualificationResults : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string ClusterResourceGroupNameField;
        
        private string CurrentOwnerNodeNameField;
        
        private long DiskSizeField;
        
        private string DriveLetterField;
        
        private long FreeSpaceField;
        
        private bool IsSystemVolumeField;
        
        private bool IsVolumeCSVField;
        
        private long MaxFileSizeField;
        
        private long ProvisionedSpaceField;
        
        private string UrlField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ClusterResourceGroupName
        {
            get
            {
                return this.ClusterResourceGroupNameField;
            }
            set
            {
                this.ClusterResourceGroupNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CurrentOwnerNodeName
        {
            get
            {
                return this.CurrentOwnerNodeNameField;
            }
            set
            {
                this.CurrentOwnerNodeNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long DiskSize
        {
            get
            {
                return this.DiskSizeField;
            }
            set
            {
                this.DiskSizeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DriveLetter
        {
            get
            {
                return this.DriveLetterField;
            }
            set
            {
                this.DriveLetterField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long FreeSpace
        {
            get
            {
                return this.FreeSpaceField;
            }
            set
            {
                this.FreeSpaceField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSystemVolume
        {
            get
            {
                return this.IsSystemVolumeField;
            }
            set
            {
                this.IsSystemVolumeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsVolumeCSV
        {
            get
            {
                return this.IsVolumeCSVField;
            }
            set
            {
                this.IsVolumeCSVField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long MaxFileSize
        {
            get
            {
                return this.MaxFileSizeField;
            }
            set
            {
                this.MaxFileSizeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long ProvisionedSpace
        {
            get
            {
                return this.ProvisionedSpaceField;
            }
            set
            {
                this.ProvisionedSpaceField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Url
        {
            get
            {
                return this.UrlField;
            }
            set
            {
                this.UrlField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LicenseQuantity", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Virtualization.Contract")]
    public partial class LicenseQuantity : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private long AvailableField;
        
        private long TotalField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Available
        {
            get
            {
                return this.AvailableField;
            }
            set
            {
                this.AvailableField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Total
        {
            get
            {
                return this.TotalField;
            }
            set
            {
                this.TotalField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VimDatastoreItem", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Virtualization.Contract")]
    public partial class VimDatastoreItem : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string NameField;
        
        private long SizeField;
        
        private string TypeField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Size
        {
            get
            {
                return this.SizeField;
            }
            set
            {
                this.SizeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type
        {
            get
            {
                return this.TypeField;
            }
            set
            {
                this.TypeField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DtServiceException_Fault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Virtualization.Contract")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Alternate.TupleOfstringstring[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Alternate.TupleOfstringstring))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.ComponentModel.ObservableObject))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.CommonFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.CollectorInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.CollectorConfigurationInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.PropertyBag))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.NameValuePair[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.NameValuePair))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.PushInstallationOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.PushInstallToken))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.PushInstallStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.InstallStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.ServiceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.ServiceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.ServicesStartMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.Workload))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.WorkloadType[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.WorkloadType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.WorkloadSupportSummary))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.Workload[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.LogicalItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.LogicalItem[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.ChangedItems))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.DashboardEngineOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.EmailNotificationOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.SmtpConnectionSecurity))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.InvalidEmailAddressFormatFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.ExceptionDetail))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Install.InstallStep))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.IO.AceFlags))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.IO.AceType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Tasks.ActivityToken))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Tasks.ActivityStatusEntry))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Tasks.ActivityCompletionStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Tasks.ActivityStatusEntry[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Communication.ServiceConnectionParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Communication.ServiceConnectionParameters[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotCreationReason))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TargetStates))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.MirrorParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.MirrorComparisonCriteria))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.MirrorOperationOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthLimit))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthScheduleMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotEntry[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotEntry))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotQuality))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotAge))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.MirrorState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ReplicationState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ClusterResourceState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TransmissionMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.QueueTaskParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TaskParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.Weekdays))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthSpecification[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthSpecification))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthSpecificationType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionStartParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.CompressionLevel))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ArchiveSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ScheduleItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ArchiveCriteria))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthScheduleEntry))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthScheduleEntry[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.OrphansSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TransmissionSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TimeWindow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.VerifySchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ScriptPoint[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ScriptPoint))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ScriptExecutionMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ScriptPointType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TargetStateInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.CompressionLevel[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.RestoreParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ArchiveRestoreOption))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.RestoreOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionConfiguration))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionStatistics))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.QueueState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ControlOperation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TargetStateInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionQualificationResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionQualificationFailures))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobCredentials))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobSourceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobSourceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverDataAction))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorConfiguration))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.ActiveDirectoryFailoverOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitoredAddressConfiguration[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitoredAddressConfiguration))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.PingMethods))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverIPAddressesOption))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverItems))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverProcessingOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverReplaceActions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.SSMRecoveryType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverScriptConfiguration))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverTrigger))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.HighAvailabilityState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitoredAddressStatus[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitoredAddressStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.RestoreStates))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.ReMonitorAction))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorQualificationResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorableAddressInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorableAddressInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorConfiguration[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailbackOption))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TargetServiceStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.DnsServerDetail[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.DnsServerDetail))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.IPAddressMap[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.IPAddressMap))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.FullServerNicMappings[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.FullServerNicMappings))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TargetServicesToStop[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TargetServicesToStop))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TestDnsResult[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TestDnsResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TestDnsDetails[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TestDnsDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotActivityStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.Snapshot))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotCreateOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotBuildingBlockType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotCreationResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.Snapshot[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotListOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotRevertOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotDeleteOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotMountOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.LvmOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.VolumeGroup[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.VolumeGroup))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.LogicalVolume[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.LogicalVolume))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.PhysicalVolume[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.PhysicalVolume))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.AccessLevel))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CollectedServer[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CollectedServer))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Credentials))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CollectedServerStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CredentialsType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CollectorDatabaseStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ControlledServerInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ControlledServerInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ProductInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ActivationStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ActivationCode[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ActivationCode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ActivationAttribute[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ActivationAttribute))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.LicenseType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ProductVersion))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ServerInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Volume))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ProtectableItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.FileSystemAttributes))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.SaturationLevel))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.FileItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.FileSystemItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.DirectoryItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.NetworkInterfaceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.NetworkInterfaceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UnicastIPAddressInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UnicastIPAddressInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.OperatingSystemInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.OperatingSystemArchitecture))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.OperatingSystemProductType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.OperatingSystemVersion))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Volume[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ControlledServerInfoSimple[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ControlledServerInfoSimple))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CoreFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.DesktopInteractionMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageDeleteInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.VhdDeleteActionType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.MachineInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PathTransformation[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PathTransformation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageVhdInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageVhdInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.EngineJobType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ReplicationSetUsageType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PhysicalRule[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PhysicalRule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.InclusionMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.RecursionMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ProtectableItem[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageEditedProperties))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageDeleteInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ShutdownOption))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PathBlockingEntry[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PathBlockingEntry))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PathBlockingMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CloudBillingInformation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ClusterAddressInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ClusterHostOwnershipModel))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CoreClusterInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.FullServerJobType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.SystemStateVerificationResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.SystemStateVerificationStep[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.SystemStateVerificationStep))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.SystemStateCutoverStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ReplicationSetInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.WinServiceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.WinServiceStartMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Property[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Property))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.NamedSetting[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.NamedSetting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.MultiStringSetting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.StringSetting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.IntegerSetting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.BooleanSetting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.LogMessage[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.LogMessage))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.EmailNotificationSettings))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.EmailNotificationCategories))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.EmailNotificationTestParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.DnsDomainDetailsPrototype[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.DnsDomainDetailsPrototype))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract1.ClusteredResourceState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract1.RebootAction))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract1.DnsLockInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.ClusterGroupInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.ClusterGroupInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.ClusterResourceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.ClusterResourceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.ClusteredVirtualMachinesInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.ClusteredVirtualMachinesInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.VirtualMachine[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.VirtualMachine))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.StorageInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.StorageInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.VirtualMachineResourceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Diagnostics.Contract.DtInfoCollectionStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Diagnostics.Contract.DtInfoCollectionProgress))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Discovery.Contract.DynamicServiceEndpoint[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Discovery.Contract.DynamicServiceEndpoint))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Dtmu.Contract.UsageData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Dtmu.Contract.JobUsageData[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Dtmu.Contract.JobUsageData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Dtmu.Contract.DtmuJobStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Dtmu.Contract.DtmuActivationStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Applications.ApplicationsPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Applications.SqlDatabasePersistedInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Applications.SqlDatabasePersistedInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Diagnostics.DiagnosticsPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DTHV.DTHVPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FilesAndFolders.FilesAndFoldersPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FullServer.FullServerPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FullServer.FullServerJobDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ImageBased.ImageProtectionPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ImageBased.ImageRecoveryPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ImageBased.ImageProtectionJobDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ImageBased.ImageRecoveryJobDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Scheduling.BandwidthOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Scheduling.BandwidthEntry[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Scheduling.BandwidthEntry))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.UVRA.UVRAPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.VcdVapp.VcdVappPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Virtualization.DTAVPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.VRA.VRAPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreConnectionDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.EngineConnectionInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.EngineConnectionInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Feature[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Feature))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreConnectionPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ClusterPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ResourceAndPassiveNodes[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ResourceAndPassiveNodes))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DeleteOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreMonitorPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FailoverOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FailoverMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FailoverType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Health))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ExtendedLowLevelState[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ExtendedLowLevelState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FailoverPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.AddressPersistedState[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.AddressPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ApplicationOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DnsRecordLockOptions[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DnsRecordLockOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ServiceInformation[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ServiceInformation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ClusterOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreConnectionOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreMonitorOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DTHVOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DNSOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DnsDomainDetails[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DnsDomainDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DTAVOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FullServerFailoverOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ImageProtectionOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ImageRecoveryOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.MonitoringOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ServiceMonitoringOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.SimpleFailoverMonitorOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.SystemStateOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.TargetServicesOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.UnmanagedConnectionOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.VRAOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.VcdVappOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobStatistics))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreMonitorDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobAction[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobAction))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ActionStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CreateOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobCredentials))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ClusterFilesAndFoldersQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.TargetFileServerQualificationResults[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.TargetFileServerQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DTHVQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DTAVQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.VRAQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.V2VQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.RecommendedJobOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.VerificationStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.RecommendedFailoverOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FailbackOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.RecommendedFailbackOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.RestoreStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.RestoreOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.RecommendedRestoreOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.SourceQualificationFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract1.CutoverDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract1.VerificationStep[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract1.VerificationStep))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract1.VerificationTaskStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract1.FixJobOptionsTaskStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.Share[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.Share))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.Ace[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.Ace))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorActivity))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorAction))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ActionInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.QueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.CompositeQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.QueryResult[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.HeartbeatPingQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.IcmpPingQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.PerformanceCounterQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ServiceStatusQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ScriptQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VmHealthQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VmConfigQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VirtualSwitchConfigQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.DtscStatusQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ShareQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.CompositeActionInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorAction[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.LogActionInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ScriptActionInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ServiceOperationActionInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ServiceOperation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorQuery))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.QueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.CompositeQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.CompositeQueryOperation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorQuery[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.IcmpPingQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.HeartbeatPingQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.PerformanceCounterQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ComparisonOperation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ScriptQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ServiceStatusQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VmHealthQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VmConfigQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VirtualSwitchConfigQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.DtscStatusQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.DTTargetResourceQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ShareQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.TriggerMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ValidationFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.PropertyFault[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.PropertyFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ActivityResultNode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.CompositeActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ScriptActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ServiceOperationActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.SimpleMonitorInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.SimpleMonitorInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.VmdkDatastoreMapping[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.VmdkDatastoreMapping))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVmdkInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVmQualificationResults[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVmQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVimServer[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVimServer))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavReplicationAppliance[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavReplicationAppliance))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.AddVimServerAndRAFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DTAVRequestFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavHostAndCluster[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavHostAndCluster))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVmInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVmInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVmdkInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavGuestInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavGuestInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.LicenseData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.GracePeriodReason))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVimInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.EmailNotificationInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.EmailNotificationInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTHV.VHDMapping[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTHV.VHDMapping))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTHV.VLanMapping[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTHV.VLanMapping))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTHV.VMSystemState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VcdVapp.PITSnapshotRecord[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VcdVapp.PITSnapshotRecord))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VcdVapp.VmdkInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VcdVapp.VmdkInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VolumeOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VRAInternalVirtualNetworkInterfaceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VRAInternalVirtualNetworkInterfaceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.UVRAVolumePersistedState[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.UVRAVolumePersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VRAVolumePersistedState[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VRAVolumePersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.V2VVirtualMachine[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.V2VVirtualMachine))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VolumeOptions[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.ReplicaVMInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VRAWorkloadCustomizationOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.ActivationCodeInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.ESXInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.JobState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.ErrorInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.ErrorInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualNetworkInterfaceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualizationConnectionInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VMInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualNetworkInterfaceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.SwitchPortInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualSwitchMapping[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualSwitchMapping))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualSwitchInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VMQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.NetworkAdapterInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.NetworkAdapterInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VHDInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VHDInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualSwitchInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.ServerQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VolumeQualificationResults[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VolumeQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VMInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.LicenseQuantity))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VimDatastoreItem[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VimDatastoreItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.HyperVmNotFoundException_Fault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(string[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(bool[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(short[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(int[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(long[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(float[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(double[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.DateTime[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.TimeSpan[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Guid[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Uri[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(byte[][]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, System.Guid>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, System.Uri>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, DoubleTake.Core.Contract.Credentials>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ushort[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.DtProduct[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.DtProduct))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.SplaManagementFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.SplaManagementFaultCode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.UsageReport))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.JobInventory[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.JobInventory))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.JobStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.ActivationStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.LicenseResponse))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.Fault[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.Fault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.IO.DriveType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Net.Sockets.AddressFamily))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Net.NetworkCredential))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Net.IPAddress[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Net.IPAddress))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Security.SecureString))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.DateTimeOffset))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.DateTimeOffset[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(www.doubletake.com.Common.Contract.LogMessage[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(www.doubletake.com.Common.Contract.LogMessage))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(www.doubletake.com.Common.Contract.EventLogEntryData2[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(www.doubletake.com.Common.Contract.EventLogEntryData2))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(www.doubletake.com.Jobs.Contract.EngineControlStatus[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(www.doubletake.com.Jobs.Contract.EngineControlStatus))]
    public partial class DtServiceException_Fault : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private object InnerFaultField;
        
        private string MessageField;
        
        private string NameField;
        
        private string StackTraceField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object InnerFault
        {
            get
            {
                return this.InnerFaultField;
            }
            set
            {
                this.InnerFaultField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message
        {
            get
            {
                return this.MessageField;
            }
            set
            {
                this.MessageField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StackTrace
        {
            get
            {
                return this.StackTraceField;
            }
            set
            {
                this.StackTraceField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="HyperVmNotFoundException_Fault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Virtualization.Contract")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Alternate.TupleOfstringstring[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Alternate.TupleOfstringstring))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.ComponentModel.ObservableObject))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.CommonFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.CollectorInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.CollectorConfigurationInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.PropertyBag))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.NameValuePair[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.NameValuePair))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.PushInstallationOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.PushInstallToken))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.PushInstallStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.InstallStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.ServiceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.ServiceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.ServicesStartMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.Workload))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.WorkloadType[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.WorkloadType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.WorkloadSupportSummary))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.Workload[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.LogicalItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.LogicalItem[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.ChangedItems))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.DashboardEngineOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.EmailNotificationOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.SmtpConnectionSecurity))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.InvalidEmailAddressFormatFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.ExceptionDetail))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Install.InstallStep))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.IO.AceFlags))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.IO.AceType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Tasks.ActivityToken))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Tasks.ActivityStatusEntry))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Tasks.ActivityCompletionStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Tasks.ActivityStatusEntry[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Communication.ServiceConnectionParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Communication.ServiceConnectionParameters[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotCreationReason))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TargetStates))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.MirrorParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.MirrorComparisonCriteria))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.MirrorOperationOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthLimit))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthScheduleMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotEntry[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotEntry))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotQuality))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotAge))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.MirrorState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ReplicationState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ClusterResourceState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TransmissionMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.QueueTaskParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TaskParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.Weekdays))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthSpecification[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthSpecification))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthSpecificationType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionStartParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.CompressionLevel))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ArchiveSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ScheduleItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ArchiveCriteria))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthScheduleEntry))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthScheduleEntry[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.OrphansSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TransmissionSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TimeWindow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.VerifySchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ScriptPoint[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ScriptPoint))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ScriptExecutionMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ScriptPointType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TargetStateInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.CompressionLevel[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.RestoreParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ArchiveRestoreOption))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.RestoreOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionConfiguration))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionStatistics))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.QueueState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ControlOperation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TargetStateInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionQualificationResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionQualificationFailures))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobCredentials))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobSourceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobSourceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverDataAction))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorConfiguration))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.ActiveDirectoryFailoverOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitoredAddressConfiguration[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitoredAddressConfiguration))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.PingMethods))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverIPAddressesOption))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverItems))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverProcessingOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverReplaceActions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.SSMRecoveryType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverScriptConfiguration))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverTrigger))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.HighAvailabilityState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitoredAddressStatus[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitoredAddressStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.RestoreStates))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.ReMonitorAction))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorQualificationResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorableAddressInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorableAddressInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorConfiguration[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailbackOption))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TargetServiceStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.DnsServerDetail[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.DnsServerDetail))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.IPAddressMap[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.IPAddressMap))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.FullServerNicMappings[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.FullServerNicMappings))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TargetServicesToStop[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TargetServicesToStop))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TestDnsResult[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TestDnsResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TestDnsDetails[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TestDnsDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotActivityStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.Snapshot))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotCreateOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotBuildingBlockType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotCreationResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.Snapshot[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotListOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotRevertOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotDeleteOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotMountOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.LvmOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.VolumeGroup[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.VolumeGroup))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.LogicalVolume[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.LogicalVolume))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.PhysicalVolume[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.PhysicalVolume))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.AccessLevel))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CollectedServer[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CollectedServer))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Credentials))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CollectedServerStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CredentialsType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CollectorDatabaseStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ControlledServerInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ControlledServerInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ProductInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ActivationStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ActivationCode[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ActivationCode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ActivationAttribute[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ActivationAttribute))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.LicenseType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ProductVersion))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ServerInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Volume))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ProtectableItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.FileSystemAttributes))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.SaturationLevel))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.FileItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.FileSystemItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.DirectoryItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.NetworkInterfaceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.NetworkInterfaceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UnicastIPAddressInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UnicastIPAddressInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.OperatingSystemInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.OperatingSystemArchitecture))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.OperatingSystemProductType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.OperatingSystemVersion))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Volume[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ControlledServerInfoSimple[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ControlledServerInfoSimple))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CoreFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.DesktopInteractionMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageDeleteInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.VhdDeleteActionType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.MachineInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PathTransformation[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PathTransformation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageVhdInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageVhdInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.EngineJobType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ReplicationSetUsageType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PhysicalRule[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PhysicalRule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.InclusionMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.RecursionMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ProtectableItem[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageEditedProperties))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageDeleteInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ShutdownOption))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PathBlockingEntry[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PathBlockingEntry))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PathBlockingMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CloudBillingInformation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ClusterAddressInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ClusterHostOwnershipModel))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CoreClusterInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.FullServerJobType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.SystemStateVerificationResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.SystemStateVerificationStep[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.SystemStateVerificationStep))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.SystemStateCutoverStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ReplicationSetInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.WinServiceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.WinServiceStartMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Property[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Property))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.NamedSetting[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.NamedSetting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.MultiStringSetting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.StringSetting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.IntegerSetting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.BooleanSetting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.LogMessage[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.LogMessage))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.EmailNotificationSettings))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.EmailNotificationCategories))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.EmailNotificationTestParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.DnsDomainDetailsPrototype[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.DnsDomainDetailsPrototype))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract1.ClusteredResourceState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract1.RebootAction))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract1.DnsLockInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.ClusterGroupInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.ClusterGroupInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.ClusterResourceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.ClusterResourceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.ClusteredVirtualMachinesInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.ClusteredVirtualMachinesInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.VirtualMachine[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.VirtualMachine))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.StorageInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.StorageInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.VirtualMachineResourceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Diagnostics.Contract.DtInfoCollectionStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Diagnostics.Contract.DtInfoCollectionProgress))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Discovery.Contract.DynamicServiceEndpoint[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Discovery.Contract.DynamicServiceEndpoint))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Dtmu.Contract.UsageData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Dtmu.Contract.JobUsageData[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Dtmu.Contract.JobUsageData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Dtmu.Contract.DtmuJobStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Dtmu.Contract.DtmuActivationStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Applications.ApplicationsPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Applications.SqlDatabasePersistedInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Applications.SqlDatabasePersistedInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Diagnostics.DiagnosticsPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DTHV.DTHVPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FilesAndFolders.FilesAndFoldersPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FullServer.FullServerPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FullServer.FullServerJobDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ImageBased.ImageProtectionPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ImageBased.ImageRecoveryPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ImageBased.ImageProtectionJobDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ImageBased.ImageRecoveryJobDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Scheduling.BandwidthOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Scheduling.BandwidthEntry[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Scheduling.BandwidthEntry))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.UVRA.UVRAPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.VcdVapp.VcdVappPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Virtualization.DTAVPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.VRA.VRAPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreConnectionDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.EngineConnectionInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.EngineConnectionInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Feature[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Feature))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreConnectionPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ClusterPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ResourceAndPassiveNodes[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ResourceAndPassiveNodes))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DeleteOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreMonitorPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FailoverOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FailoverMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FailoverType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Health))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ExtendedLowLevelState[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ExtendedLowLevelState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FailoverPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.AddressPersistedState[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.AddressPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ApplicationOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DnsRecordLockOptions[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DnsRecordLockOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ServiceInformation[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ServiceInformation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ClusterOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreConnectionOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreMonitorOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DTHVOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DNSOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DnsDomainDetails[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DnsDomainDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DTAVOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FullServerFailoverOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ImageProtectionOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ImageRecoveryOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.MonitoringOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ServiceMonitoringOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.SimpleFailoverMonitorOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.SystemStateOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.TargetServicesOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.UnmanagedConnectionOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.VRAOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.VcdVappOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobStatistics))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreMonitorDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobAction[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobAction))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ActionStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CreateOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobCredentials))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ClusterFilesAndFoldersQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.TargetFileServerQualificationResults[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.TargetFileServerQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DTHVQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DTAVQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.VRAQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.V2VQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.RecommendedJobOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.VerificationStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.RecommendedFailoverOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FailbackOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.RecommendedFailbackOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.RestoreStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.RestoreOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.RecommendedRestoreOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.SourceQualificationFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract1.CutoverDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract1.VerificationStep[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract1.VerificationStep))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract1.VerificationTaskStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract1.FixJobOptionsTaskStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.Share[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.Share))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.Ace[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.Ace))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorActivity))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorAction))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ActionInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.QueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.CompositeQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.QueryResult[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.HeartbeatPingQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.IcmpPingQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.PerformanceCounterQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ServiceStatusQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ScriptQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VmHealthQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VmConfigQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VirtualSwitchConfigQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.DtscStatusQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ShareQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.CompositeActionInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorAction[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.LogActionInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ScriptActionInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ServiceOperationActionInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ServiceOperation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorQuery))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.QueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.CompositeQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.CompositeQueryOperation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorQuery[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.IcmpPingQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.HeartbeatPingQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.PerformanceCounterQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ComparisonOperation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ScriptQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ServiceStatusQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VmHealthQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VmConfigQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VirtualSwitchConfigQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.DtscStatusQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.DTTargetResourceQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ShareQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.TriggerMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ValidationFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.PropertyFault[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.PropertyFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ActivityResultNode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.CompositeActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ScriptActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ServiceOperationActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.SimpleMonitorInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.SimpleMonitorInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.VmdkDatastoreMapping[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.VmdkDatastoreMapping))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVmdkInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVmQualificationResults[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVmQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVimServer[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVimServer))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavReplicationAppliance[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavReplicationAppliance))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.AddVimServerAndRAFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DTAVRequestFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavHostAndCluster[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavHostAndCluster))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVmInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVmInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVmdkInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavGuestInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavGuestInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.LicenseData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.GracePeriodReason))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVimInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.EmailNotificationInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.EmailNotificationInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTHV.VHDMapping[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTHV.VHDMapping))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTHV.VLanMapping[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTHV.VLanMapping))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTHV.VMSystemState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VcdVapp.PITSnapshotRecord[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VcdVapp.PITSnapshotRecord))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VcdVapp.VmdkInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VcdVapp.VmdkInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VolumeOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VRAInternalVirtualNetworkInterfaceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VRAInternalVirtualNetworkInterfaceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.UVRAVolumePersistedState[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.UVRAVolumePersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VRAVolumePersistedState[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VRAVolumePersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.V2VVirtualMachine[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.V2VVirtualMachine))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VolumeOptions[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.ReplicaVMInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VRAWorkloadCustomizationOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.ActivationCodeInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.ESXInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.JobState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.ErrorInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.ErrorInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualNetworkInterfaceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualizationConnectionInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VMInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualNetworkInterfaceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.SwitchPortInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualSwitchMapping[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualSwitchMapping))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualSwitchInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VMQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.NetworkAdapterInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.NetworkAdapterInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VHDInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VHDInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualSwitchInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.ServerQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VolumeQualificationResults[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VolumeQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VMInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.LicenseQuantity))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VimDatastoreItem[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VimDatastoreItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DtServiceException_Fault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(string[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(bool[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(short[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(int[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(long[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(float[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(double[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.DateTime[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.TimeSpan[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Guid[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Uri[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(byte[][]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, System.Guid>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, System.Uri>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, DoubleTake.Core.Contract.Credentials>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ushort[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.DtProduct[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.DtProduct))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.SplaManagementFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.SplaManagementFaultCode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.UsageReport))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.JobInventory[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.JobInventory))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.JobStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.ActivationStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.LicenseResponse))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.Fault[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.Fault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.IO.DriveType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Net.Sockets.AddressFamily))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Net.NetworkCredential))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Net.IPAddress[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Net.IPAddress))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Security.SecureString))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.DateTimeOffset))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.DateTimeOffset[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(www.doubletake.com.Common.Contract.LogMessage[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(www.doubletake.com.Common.Contract.LogMessage))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(www.doubletake.com.Common.Contract.EventLogEntryData2[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(www.doubletake.com.Common.Contract.EventLogEntryData2))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(www.doubletake.com.Jobs.Contract.EngineControlStatus[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(www.doubletake.com.Jobs.Contract.EngineControlStatus))]
    public partial class HyperVmNotFoundException_Fault : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private object InnerFaultField;
        
        private string MessageField;
        
        private string NameField;
        
        private string StackTraceField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object InnerFault
        {
            get
            {
                return this.InnerFaultField;
            }
            set
            {
                this.InnerFaultField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message
        {
            get
            {
                return this.MessageField;
            }
            set
            {
                this.MessageField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StackTrace
        {
            get
            {
                return this.StackTraceField;
            }
            set
            {
                this.StackTraceField = value;
            }
        }
    }
}
namespace DoubleTake.Core.Contract.Connection
{
    using System;
    using System.Runtime.Serialization;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.FlagsAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Name="TargetStates", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Connection")]
    public enum TargetStates : long
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Good = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Mirroring = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MirrorStopped = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OpDropped = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Retrying = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Paused = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PausePending = 32,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RestoreRequired = 64,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ReplicationPending = 128,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SnapshotReverted = 256,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FailoverUnblocked = 512,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Disconnected = 1024,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SroImage = 2048,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FailoverMonitoring = 4096,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TransactionsPending = 8192,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GCReplicationComplete = 16384,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MarkedForDeletion = 32768,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        JobNotReadyOnTarget = 65536,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TargetPathBlocked = 2147483648,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = -4294967296,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SnapshotCreationReason", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Connection")]
    public enum SnapshotCreationReason : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Manual = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Automatic = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Scheduled = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Deferred = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DataTest = 4,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SnapshotEntry", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Connection")]
    public partial class SnapshotEntry : DoubleTake.Common.ComponentModel.ObservableObject
    {
        
        private string CommentField;
        
        private System.Guid IdField;
        
        private DoubleTake.Core.Contract.Connection.SnapshotCreationReason ReasonField;
        
        private DoubleTake.Core.Contract.Connection.TargetStates StatesField;
        
        private System.DateTimeOffset TimestampField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Comment
        {
            get
            {
                return this.CommentField;
            }
            set
            {
                this.CommentField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Connection.SnapshotCreationReason Reason
        {
            get
            {
                return this.ReasonField;
            }
            set
            {
                this.ReasonField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Connection.TargetStates States
        {
            get
            {
                return this.StatesField;
            }
            set
            {
                this.StatesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTimeOffset Timestamp
        {
            get
            {
                return this.TimestampField;
            }
            set
            {
                this.TimestampField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BandwidthSpecification", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Connection")]
    public partial class BandwidthSpecification : DoubleTake.Common.ComponentModel.ObservableObject
    {
        
        private string KeyField;
        
        private DoubleTake.Core.Contract.Connection.BandwidthSpecificationType TypeField;
        
        private long ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Key
        {
            get
            {
                return this.KeyField;
            }
            set
            {
                this.KeyField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Connection.BandwidthSpecificationType Type
        {
            get
            {
                return this.TypeField;
            }
            set
            {
                this.TypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Value
        {
            get
            {
                return this.ValueField;
            }
            set
            {
                this.ValueField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ArchiveCriteria", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Connection")]
    public partial class ArchiveCriteria : DoubleTake.Common.ComponentModel.ObservableObject
    {
        
        private System.TimeSpan AgeField;
        
        private int DiskUtilizationPercentageField;
        
        private bool LogErrorsField;
        
        private long MinimumFileSizeField;
        
        private string[] PathsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan Age
        {
            get
            {
                return this.AgeField;
            }
            set
            {
                this.AgeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DiskUtilizationPercentage
        {
            get
            {
                return this.DiskUtilizationPercentageField;
            }
            set
            {
                this.DiskUtilizationPercentageField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool LogErrors
        {
            get
            {
                return this.LogErrorsField;
            }
            set
            {
                this.LogErrorsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long MinimumFileSize
        {
            get
            {
                return this.MinimumFileSizeField;
            }
            set
            {
                this.MinimumFileSizeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] Paths
        {
            get
            {
                return this.PathsField;
            }
            set
            {
                this.PathsField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TimeWindow", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Connection")]
    public partial class TimeWindow : DoubleTake.Common.ComponentModel.ObservableObject
    {
        
        private System.TimeSpan DurationField;
        
        private System.DateTime StartField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan Duration
        {
            get
            {
                return this.DurationField;
            }
            set
            {
                this.DurationField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Start
        {
            get
            {
                return this.StartField;
            }
            set
            {
                this.StartField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ScriptPoint", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Connection")]
    public partial class ScriptPoint : DoubleTake.Common.ComponentModel.ObservableObject
    {
        
        private string ArgumentsField;
        
        private DoubleTake.Core.Contract.Connection.ScriptExecutionMode ExecutionModeField;
        
        private DoubleTake.Core.Contract.DesktopInteractionMode InteractionModeField;
        
        private string PathField;
        
        private DoubleTake.Core.Contract.Connection.ScriptPointType TypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Arguments
        {
            get
            {
                return this.ArgumentsField;
            }
            set
            {
                this.ArgumentsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Connection.ScriptExecutionMode ExecutionMode
        {
            get
            {
                return this.ExecutionModeField;
            }
            set
            {
                this.ExecutionModeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.DesktopInteractionMode InteractionMode
        {
            get
            {
                return this.InteractionModeField;
            }
            set
            {
                this.InteractionModeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Path
        {
            get
            {
                return this.PathField;
            }
            set
            {
                this.PathField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Connection.ScriptPointType Type
        {
            get
            {
                return this.TypeField;
            }
            set
            {
                this.TypeField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BandwidthScheduleMode", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Connection")]
    public enum BandwidthScheduleMode : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NotLimited = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Fixed = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Scheduled = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BandwidthSpecificationType", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Connection")]
    public enum BandwidthSpecificationType : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LAN = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WAN = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ScriptExecutionMode", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Connection")]
    public enum ScriptExecutionMode : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Synchronous = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Asynchronous = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ScriptPointType", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Connection")]
    public enum ScriptPointType : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MirrorStart = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MirrorComplete = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MirrorStop = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConnectionInfo", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Connection")]
    public partial class ConnectionInfo : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Core.Contract.Connection.ConnectionConfiguration ConfigurationField;
        
        private System.Guid GuidField;
        
        private string[] SourceAddressesField;
        
        private string SourceNameField;
        
        private DoubleTake.Core.Contract.Connection.ConnectionStatistics StatisticsField;
        
        private DoubleTake.Core.Contract.Connection.ConnectionStatus StatusField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Connection.ConnectionConfiguration Configuration
        {
            get
            {
                return this.ConfigurationField;
            }
            set
            {
                this.ConfigurationField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Guid
        {
            get
            {
                return this.GuidField;
            }
            set
            {
                this.GuidField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] SourceAddresses
        {
            get
            {
                return this.SourceAddressesField;
            }
            set
            {
                this.SourceAddressesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceName
        {
            get
            {
                return this.SourceNameField;
            }
            set
            {
                this.SourceNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Connection.ConnectionStatistics Statistics
        {
            get
            {
                return this.StatisticsField;
            }
            set
            {
                this.StatisticsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Connection.ConnectionStatus Status
        {
            get
            {
                return this.StatusField;
            }
            set
            {
                this.StatusField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConnectionConfiguration", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Connection")]
    public partial class ConnectionConfiguration : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private int BandwidthCollarField;
        
        private int CompressionAlgorithmField;
        
        private bool CompressionEnabledField;
        
        private int CompressionLevelField;
        
        private int ConnectionIdField;
        
        private bool EncryptField;
        
        private string JobTypeField;
        
        private DoubleTake.Core.Contract.PathTransformation[] PathTransformationsField;
        
        private string ReplicationSetField;
        
        private string SourceRouteField;
        
        private bool TargetLoadedField;
        
        private string TargetNameField;
        
        private string TargetRouteField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BandwidthCollar
        {
            get
            {
                return this.BandwidthCollarField;
            }
            set
            {
                this.BandwidthCollarField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CompressionAlgorithm
        {
            get
            {
                return this.CompressionAlgorithmField;
            }
            set
            {
                this.CompressionAlgorithmField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CompressionEnabled
        {
            get
            {
                return this.CompressionEnabledField;
            }
            set
            {
                this.CompressionEnabledField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CompressionLevel
        {
            get
            {
                return this.CompressionLevelField;
            }
            set
            {
                this.CompressionLevelField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ConnectionId
        {
            get
            {
                return this.ConnectionIdField;
            }
            set
            {
                this.ConnectionIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Encrypt
        {
            get
            {
                return this.EncryptField;
            }
            set
            {
                this.EncryptField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string JobType
        {
            get
            {
                return this.JobTypeField;
            }
            set
            {
                this.JobTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.PathTransformation[] PathTransformations
        {
            get
            {
                return this.PathTransformationsField;
            }
            set
            {
                this.PathTransformationsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReplicationSet
        {
            get
            {
                return this.ReplicationSetField;
            }
            set
            {
                this.ReplicationSetField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceRoute
        {
            get
            {
                return this.SourceRouteField;
            }
            set
            {
                this.SourceRouteField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool TargetLoaded
        {
            get
            {
                return this.TargetLoadedField;
            }
            set
            {
                this.TargetLoadedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetName
        {
            get
            {
                return this.TargetNameField;
            }
            set
            {
                this.TargetNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetRoute
        {
            get
            {
                return this.TargetRouteField;
            }
            set
            {
                this.TargetRouteField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConnectionStatistics", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Connection")]
    public partial class ConnectionStatistics : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private long DiskQueueBytesField;
        
        private long MirrorBytesRemainingField;
        
        private long MirrorBytesSentField;
        
        private long MirrorBytesSkippedField;
        
        private long MirrorBytesTransmittedField;
        
        private long MirrorOpsQueuedField;
        
        private short MirrorPermillageField;
        
        private long ReplicationBytesQueuedField;
        
        private long ReplicationBytesSentField;
        
        private long ReplicationBytesTransmittedField;
        
        private long ReplicationOpsQueuedField;
        
        private bool ReplicationSetCalcInProgressField;
        
        private long TotalBytesSentField;
        
        private long TotalBytesTransmittedField;
        
        private long TotalOpsQueuedField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long DiskQueueBytes
        {
            get
            {
                return this.DiskQueueBytesField;
            }
            set
            {
                this.DiskQueueBytesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long MirrorBytesRemaining
        {
            get
            {
                return this.MirrorBytesRemainingField;
            }
            set
            {
                this.MirrorBytesRemainingField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long MirrorBytesSent
        {
            get
            {
                return this.MirrorBytesSentField;
            }
            set
            {
                this.MirrorBytesSentField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long MirrorBytesSkipped
        {
            get
            {
                return this.MirrorBytesSkippedField;
            }
            set
            {
                this.MirrorBytesSkippedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long MirrorBytesTransmitted
        {
            get
            {
                return this.MirrorBytesTransmittedField;
            }
            set
            {
                this.MirrorBytesTransmittedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long MirrorOpsQueued
        {
            get
            {
                return this.MirrorOpsQueuedField;
            }
            set
            {
                this.MirrorOpsQueuedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short MirrorPermillage
        {
            get
            {
                return this.MirrorPermillageField;
            }
            set
            {
                this.MirrorPermillageField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long ReplicationBytesQueued
        {
            get
            {
                return this.ReplicationBytesQueuedField;
            }
            set
            {
                this.ReplicationBytesQueuedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long ReplicationBytesSent
        {
            get
            {
                return this.ReplicationBytesSentField;
            }
            set
            {
                this.ReplicationBytesSentField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long ReplicationBytesTransmitted
        {
            get
            {
                return this.ReplicationBytesTransmittedField;
            }
            set
            {
                this.ReplicationBytesTransmittedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long ReplicationOpsQueued
        {
            get
            {
                return this.ReplicationOpsQueuedField;
            }
            set
            {
                this.ReplicationOpsQueuedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ReplicationSetCalcInProgress
        {
            get
            {
                return this.ReplicationSetCalcInProgressField;
            }
            set
            {
                this.ReplicationSetCalcInProgressField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long TotalBytesSent
        {
            get
            {
                return this.TotalBytesSentField;
            }
            set
            {
                this.TotalBytesSentField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long TotalBytesTransmitted
        {
            get
            {
                return this.TotalBytesTransmittedField;
            }
            set
            {
                this.TotalBytesTransmittedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long TotalOpsQueued
        {
            get
            {
                return this.TotalOpsQueuedField;
            }
            set
            {
                this.TotalOpsQueuedField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConnectionStatus", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Connection")]
    public partial class ConnectionStatus : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private bool AliveField;
        
        private DoubleTake.Core.Contract.Connection.QueueState CmdRspQueueStateField;
        
        private DoubleTake.Core.Contract.Connection.ConnectionMode ConnectionModeField;
        
        private bool ErrorField;
        
        private bool InitialMirrorCompleteField;
        
        private bool IsRestoreRequiredField;
        
        private bool IsScheduledField;
        
        private DoubleTake.Core.Contract.Connection.QueueState MirrorQueueStateField;
        
        private long MirrorSizeField;
        
        private DoubleTake.Core.Contract.Connection.MirrorState MirrorStateField;
        
        private bool PeerMemoryLowField;
        
        private bool PendingAckQueueFullField;
        
        private DoubleTake.Core.Contract.Connection.QueueState ReplicationQueueStateField;
        
        private DoubleTake.Core.Contract.Connection.ReplicationState ReplicationStateField;
        
        private bool RestoringField;
        
        private DoubleTake.Core.Contract.Connection.QueueState RetransmitQueueStateField;
        
        private System.DateTimeOffset StartTimeField;
        
        private DoubleTake.Core.Contract.Connection.TargetStates TargetStateField;
        
        private DoubleTake.Core.Contract.Connection.TransmissionMode TransmissionModeField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Alive
        {
            get
            {
                return this.AliveField;
            }
            set
            {
                this.AliveField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Connection.QueueState CmdRspQueueState
        {
            get
            {
                return this.CmdRspQueueStateField;
            }
            set
            {
                this.CmdRspQueueStateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Connection.ConnectionMode ConnectionMode
        {
            get
            {
                return this.ConnectionModeField;
            }
            set
            {
                this.ConnectionModeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Error
        {
            get
            {
                return this.ErrorField;
            }
            set
            {
                this.ErrorField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool InitialMirrorComplete
        {
            get
            {
                return this.InitialMirrorCompleteField;
            }
            set
            {
                this.InitialMirrorCompleteField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsRestoreRequired
        {
            get
            {
                return this.IsRestoreRequiredField;
            }
            set
            {
                this.IsRestoreRequiredField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsScheduled
        {
            get
            {
                return this.IsScheduledField;
            }
            set
            {
                this.IsScheduledField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Connection.QueueState MirrorQueueState
        {
            get
            {
                return this.MirrorQueueStateField;
            }
            set
            {
                this.MirrorQueueStateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long MirrorSize
        {
            get
            {
                return this.MirrorSizeField;
            }
            set
            {
                this.MirrorSizeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Connection.MirrorState MirrorState
        {
            get
            {
                return this.MirrorStateField;
            }
            set
            {
                this.MirrorStateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool PeerMemoryLow
        {
            get
            {
                return this.PeerMemoryLowField;
            }
            set
            {
                this.PeerMemoryLowField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool PendingAckQueueFull
        {
            get
            {
                return this.PendingAckQueueFullField;
            }
            set
            {
                this.PendingAckQueueFullField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Connection.QueueState ReplicationQueueState
        {
            get
            {
                return this.ReplicationQueueStateField;
            }
            set
            {
                this.ReplicationQueueStateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Connection.ReplicationState ReplicationState
        {
            get
            {
                return this.ReplicationStateField;
            }
            set
            {
                this.ReplicationStateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Restoring
        {
            get
            {
                return this.RestoringField;
            }
            set
            {
                this.RestoringField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Connection.QueueState RetransmitQueueState
        {
            get
            {
                return this.RetransmitQueueStateField;
            }
            set
            {
                this.RetransmitQueueStateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTimeOffset StartTime
        {
            get
            {
                return this.StartTimeField;
            }
            set
            {
                this.StartTimeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Connection.TargetStates TargetState
        {
            get
            {
                return this.TargetStateField;
            }
            set
            {
                this.TargetStateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Connection.TransmissionMode TransmissionMode
        {
            get
            {
                return this.TransmissionModeField;
            }
            set
            {
                this.TransmissionModeField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QueueState", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Connection")]
    public enum QueueState : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Pause = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Active = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Scheduled = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConnectionMode", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Connection")]
    public enum ConnectionMode : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Manual = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Scheduled = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ManualRestoreRequired = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ScheduledRestoreRequired = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MirrorState", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Connection")]
    public enum MirrorState : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Calculating = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Idle = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Mirror = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Pause = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RemoveOrphans = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RepsetVerify = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Restore = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Stopped = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Transmitting = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = 9,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ReplicationState", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Connection")]
    public enum ReplicationState : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NotReplicating = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OutOfMemory = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Pending = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Replicating = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Watchdog = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Ready = 6,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TransmissionMode", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Connection")]
    public enum TransmissionMode : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Error = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Paused = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Started = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Scheduled = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Stopped = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = 5,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConnectionStartParameters", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Connection")]
    public partial class ConnectionStartParameters : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string ArchiveBinLocationField;
        
        private DoubleTake.Core.Contract.Connection.CompressionLevel CompressionLevelField;
        
        private bool IsEncryptedField;
        
        private bool IsMirrorEnabledField;
        
        private bool IsPathBlockingEnabledField;
        
        private bool IsReplicationEnabledField;
        
        private bool IsRestoreField;
        
        private DoubleTake.Core.Contract.Connection.MirrorParameters MirrorParametersField;
        
        private DoubleTake.Core.Contract.Connection.ConnectionSchedule ScheduleField;
        
        private DoubleTake.Core.Contract.Connection.ScriptPoint[] ScriptPointsField;
        
        private DoubleTake.Core.Contract.Connection.SnapshotSchedule SnapshotScheduleField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ArchiveBinLocation
        {
            get
            {
                return this.ArchiveBinLocationField;
            }
            set
            {
                this.ArchiveBinLocationField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Connection.CompressionLevel CompressionLevel
        {
            get
            {
                return this.CompressionLevelField;
            }
            set
            {
                this.CompressionLevelField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsEncrypted
        {
            get
            {
                return this.IsEncryptedField;
            }
            set
            {
                this.IsEncryptedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsMirrorEnabled
        {
            get
            {
                return this.IsMirrorEnabledField;
            }
            set
            {
                this.IsMirrorEnabledField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsPathBlockingEnabled
        {
            get
            {
                return this.IsPathBlockingEnabledField;
            }
            set
            {
                this.IsPathBlockingEnabledField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsReplicationEnabled
        {
            get
            {
                return this.IsReplicationEnabledField;
            }
            set
            {
                this.IsReplicationEnabledField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsRestore
        {
            get
            {
                return this.IsRestoreField;
            }
            set
            {
                this.IsRestoreField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Connection.MirrorParameters MirrorParameters
        {
            get
            {
                return this.MirrorParametersField;
            }
            set
            {
                this.MirrorParametersField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Connection.ConnectionSchedule Schedule
        {
            get
            {
                return this.ScheduleField;
            }
            set
            {
                this.ScheduleField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Connection.ScriptPoint[] ScriptPoints
        {
            get
            {
                return this.ScriptPointsField;
            }
            set
            {
                this.ScriptPointsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Connection.SnapshotSchedule SnapshotSchedule
        {
            get
            {
                return this.SnapshotScheduleField;
            }
            set
            {
                this.SnapshotScheduleField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompressionLevel", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Connection")]
    public partial class CompressionLevel : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private int AlgorithmField;
        
        private int LevelField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Algorithm
        {
            get
            {
                return this.AlgorithmField;
            }
            set
            {
                this.AlgorithmField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Level
        {
            get
            {
                return this.LevelField;
            }
            set
            {
                this.LevelField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MirrorParameters", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Connection")]
    public partial class MirrorParameters : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Core.Contract.Connection.MirrorComparisonCriteria ComparisonCriteriaField;
        
        private DoubleTake.Core.Contract.Connection.MirrorOperationOptions OptionsField;
        
        private bool OverrideJobOrphansProcessingField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Connection.MirrorComparisonCriteria ComparisonCriteria
        {
            get
            {
                return this.ComparisonCriteriaField;
            }
            set
            {
                this.ComparisonCriteriaField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Connection.MirrorOperationOptions Options
        {
            get
            {
                return this.OptionsField;
            }
            set
            {
                this.OptionsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool OverrideJobOrphansProcessing
        {
            get
            {
                return this.OverrideJobOrphansProcessingField;
            }
            set
            {
                this.OverrideJobOrphansProcessingField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConnectionSchedule", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Connection")]
    public partial class ConnectionSchedule : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Core.Contract.Connection.ArchiveSchedule ArchiveField;
        
        private DoubleTake.Core.Contract.Connection.BandwidthSchedule BandwidthField;
        
        private DoubleTake.Core.Contract.Connection.OrphansSchedule OrphansField;
        
        private DoubleTake.Core.Contract.Connection.TransmissionSchedule TransmissionField;
        
        private DoubleTake.Core.Contract.Connection.VerifySchedule VerifyField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Connection.ArchiveSchedule Archive
        {
            get
            {
                return this.ArchiveField;
            }
            set
            {
                this.ArchiveField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Connection.BandwidthSchedule Bandwidth
        {
            get
            {
                return this.BandwidthField;
            }
            set
            {
                this.BandwidthField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Connection.OrphansSchedule Orphans
        {
            get
            {
                return this.OrphansField;
            }
            set
            {
                this.OrphansField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Connection.TransmissionSchedule Transmission
        {
            get
            {
                return this.TransmissionField;
            }
            set
            {
                this.TransmissionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Connection.VerifySchedule Verify
        {
            get
            {
                return this.VerifyField;
            }
            set
            {
                this.VerifyField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SnapshotSchedule", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Connection")]
    public partial class SnapshotSchedule : DoubleTake.Core.Contract.Connection.ScheduleItem
    {
        
        private System.TimeSpan IntervalField;
        
        private int MaxNumberOfSnapshotsField;
        
        private System.DateTime StartTimeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan Interval
        {
            get
            {
                return this.IntervalField;
            }
            set
            {
                this.IntervalField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MaxNumberOfSnapshots
        {
            get
            {
                return this.MaxNumberOfSnapshotsField;
            }
            set
            {
                this.MaxNumberOfSnapshotsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StartTime
        {
            get
            {
                return this.StartTimeField;
            }
            set
            {
                this.StartTimeField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.FlagsAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Name="MirrorComparisonCriteria", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Connection")]
    public enum MirrorComparisonCriteria : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Newer = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Checksum = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.FlagsAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Name="MirrorOperationOptions", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Connection")]
    public enum MirrorOperationOptions : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Synchronize = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Report = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CalculateDifferences = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CalculateSize = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ProcessOrphans = 16,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ArchiveSchedule", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Connection")]
    public partial class ArchiveSchedule : DoubleTake.Core.Contract.Connection.ScheduleItem
    {
        
        private DoubleTake.Core.Contract.Connection.ArchiveCriteria CriteriaField;
        
        private DoubleTake.Core.Contract.Connection.Weekdays DaysField;
        
        private System.DateTime StartTimeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Connection.ArchiveCriteria Criteria
        {
            get
            {
                return this.CriteriaField;
            }
            set
            {
                this.CriteriaField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Connection.Weekdays Days
        {
            get
            {
                return this.DaysField;
            }
            set
            {
                this.DaysField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StartTime
        {
            get
            {
                return this.StartTimeField;
            }
            set
            {
                this.StartTimeField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BandwidthSchedule", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Connection")]
    public partial class BandwidthSchedule : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Core.Contract.Connection.BandwidthScheduleEntry CurrentField;
        
        private DoubleTake.Core.Contract.Connection.BandwidthScheduleEntry[] EntriesField;
        
        private DoubleTake.Core.Contract.Connection.BandwidthScheduleMode ModeField;
        
        private DoubleTake.Core.Contract.Connection.BandwidthSpecification[] SpecificationsField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Connection.BandwidthScheduleEntry Current
        {
            get
            {
                return this.CurrentField;
            }
            set
            {
                this.CurrentField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Connection.BandwidthScheduleEntry[] Entries
        {
            get
            {
                return this.EntriesField;
            }
            set
            {
                this.EntriesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Connection.BandwidthScheduleMode Mode
        {
            get
            {
                return this.ModeField;
            }
            set
            {
                this.ModeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Connection.BandwidthSpecification[] Specifications
        {
            get
            {
                return this.SpecificationsField;
            }
            set
            {
                this.SpecificationsField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OrphansSchedule", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Connection")]
    public partial class OrphansSchedule : DoubleTake.Core.Contract.Connection.ScheduleItem
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TransmissionSchedule", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Connection")]
    public partial class TransmissionSchedule : DoubleTake.Core.Contract.Connection.ScheduleItem
    {
        
        private System.Nullable<System.TimeSpan> DurationField;
        
        private System.Nullable<System.TimeSpan> IntervalField;
        
        private System.Nullable<long> MaxBytesField;
        
        private System.Nullable<System.DateTime> StartTimeField;
        
        private System.Nullable<long> ThresholdBytesField;
        
        private System.Nullable<long> ThresholdPercentageField;
        
        private DoubleTake.Core.Contract.Connection.TimeWindow WindowField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.TimeSpan> Duration
        {
            get
            {
                return this.DurationField;
            }
            set
            {
                this.DurationField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.TimeSpan> Interval
        {
            get
            {
                return this.IntervalField;
            }
            set
            {
                this.IntervalField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<long> MaxBytes
        {
            get
            {
                return this.MaxBytesField;
            }
            set
            {
                this.MaxBytesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> StartTime
        {
            get
            {
                return this.StartTimeField;
            }
            set
            {
                this.StartTimeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<long> ThresholdBytes
        {
            get
            {
                return this.ThresholdBytesField;
            }
            set
            {
                this.ThresholdBytesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<long> ThresholdPercentage
        {
            get
            {
                return this.ThresholdPercentageField;
            }
            set
            {
                this.ThresholdPercentageField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Connection.TimeWindow Window
        {
            get
            {
                return this.WindowField;
            }
            set
            {
                this.WindowField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VerifySchedule", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Connection")]
    public partial class VerifySchedule : DoubleTake.Core.Contract.Connection.ScheduleItem
    {
        
        private DoubleTake.Core.Contract.Connection.MirrorComparisonCriteria CriteriaField;
        
        private System.TimeSpan IntervalField;
        
        private DoubleTake.Core.Contract.Connection.MirrorOperationOptions OptionsField;
        
        private System.DateTime StartTimeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Connection.MirrorComparisonCriteria Criteria
        {
            get
            {
                return this.CriteriaField;
            }
            set
            {
                this.CriteriaField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan Interval
        {
            get
            {
                return this.IntervalField;
            }
            set
            {
                this.IntervalField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Connection.MirrorOperationOptions Options
        {
            get
            {
                return this.OptionsField;
            }
            set
            {
                this.OptionsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StartTime
        {
            get
            {
                return this.StartTimeField;
            }
            set
            {
                this.StartTimeField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ScheduleItem", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Connection")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.OrphansSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TransmissionSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.VerifySchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ArchiveSchedule))]
    public partial class ScheduleItem : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private bool IsEnabledField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsEnabled
        {
            get
            {
                return this.IsEnabledField;
            }
            set
            {
                this.IsEnabledField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.FlagsAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Name="Weekdays", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Connection")]
    public enum Weekdays : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Sunday = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Monday = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Tuesday = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Wednesday = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Thursday = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Friday = 32,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Saturday = 64,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Weekends = 65,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Workdays = 62,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        All = 127,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BandwidthScheduleEntry", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Connection")]
    public partial class BandwidthScheduleEntry : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Core.Contract.Connection.Weekdays DaysOfWeekField;
        
        private bool IsUnlimitedField;
        
        private long LimitField;
        
        private string NameField;
        
        private System.DateTime StartTimeField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Connection.Weekdays DaysOfWeek
        {
            get
            {
                return this.DaysOfWeekField;
            }
            set
            {
                this.DaysOfWeekField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsUnlimited
        {
            get
            {
                return this.IsUnlimitedField;
            }
            set
            {
                this.IsUnlimitedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Limit
        {
            get
            {
                return this.LimitField;
            }
            set
            {
                this.LimitField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StartTime
        {
            get
            {
                return this.StartTimeField;
            }
            set
            {
                this.StartTimeField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TargetStateInfo", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Connection")]
    public partial class TargetStateInfo : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.DateTimeOffset ConnectTimeField;
        
        private int ConnectionIdField;
        
        private DoubleTake.Core.Contract.EngineJobType EngineJobTypeField;
        
        private System.Guid GuidField;
        
        private bool HasSnapshotScheduleField;
        
        private System.DateTimeOffset LastUpdateTimeField;
        
        private System.DateTimeOffset NextScheduledSnapshotField;
        
        private string[] PathsField;
        
        private long QueueBytesField;
        
        private DoubleTake.Core.Contract.ReplicationSetUsageType ReplicationSetUsageTypeField;
        
        private System.TimeSpan ScheduledSnapshotIntervalField;
        
        private DoubleTake.Core.Contract.Connection.SnapshotEntry[] SnapshotsField;
        
        private string SourceEndPointField;
        
        private string SourceEndpointFromSourceField;
        
        private string SourceMachineNameField;
        
        private DoubleTake.Core.Contract.ProductVersion SourceVersionField;
        
        private DoubleTake.Core.Contract.Connection.TargetStates StatesField;
        
        private string TargetEndpointField;
        
        private string WorkloadIdField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTimeOffset ConnectTime
        {
            get
            {
                return this.ConnectTimeField;
            }
            set
            {
                this.ConnectTimeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ConnectionId
        {
            get
            {
                return this.ConnectionIdField;
            }
            set
            {
                this.ConnectionIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.EngineJobType EngineJobType
        {
            get
            {
                return this.EngineJobTypeField;
            }
            set
            {
                this.EngineJobTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Guid
        {
            get
            {
                return this.GuidField;
            }
            set
            {
                this.GuidField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasSnapshotSchedule
        {
            get
            {
                return this.HasSnapshotScheduleField;
            }
            set
            {
                this.HasSnapshotScheduleField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTimeOffset LastUpdateTime
        {
            get
            {
                return this.LastUpdateTimeField;
            }
            set
            {
                this.LastUpdateTimeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTimeOffset NextScheduledSnapshot
        {
            get
            {
                return this.NextScheduledSnapshotField;
            }
            set
            {
                this.NextScheduledSnapshotField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] Paths
        {
            get
            {
                return this.PathsField;
            }
            set
            {
                this.PathsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long QueueBytes
        {
            get
            {
                return this.QueueBytesField;
            }
            set
            {
                this.QueueBytesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.ReplicationSetUsageType ReplicationSetUsageType
        {
            get
            {
                return this.ReplicationSetUsageTypeField;
            }
            set
            {
                this.ReplicationSetUsageTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan ScheduledSnapshotInterval
        {
            get
            {
                return this.ScheduledSnapshotIntervalField;
            }
            set
            {
                this.ScheduledSnapshotIntervalField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Connection.SnapshotEntry[] Snapshots
        {
            get
            {
                return this.SnapshotsField;
            }
            set
            {
                this.SnapshotsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceEndPoint
        {
            get
            {
                return this.SourceEndPointField;
            }
            set
            {
                this.SourceEndPointField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceEndpointFromSource
        {
            get
            {
                return this.SourceEndpointFromSourceField;
            }
            set
            {
                this.SourceEndpointFromSourceField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceMachineName
        {
            get
            {
                return this.SourceMachineNameField;
            }
            set
            {
                this.SourceMachineNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.ProductVersion SourceVersion
        {
            get
            {
                return this.SourceVersionField;
            }
            set
            {
                this.SourceVersionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Connection.TargetStates States
        {
            get
            {
                return this.StatesField;
            }
            set
            {
                this.StatesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetEndpoint
        {
            get
            {
                return this.TargetEndpointField;
            }
            set
            {
                this.TargetEndpointField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WorkloadId
        {
            get
            {
                return this.WorkloadIdField;
            }
            set
            {
                this.WorkloadIdField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ClusterResourceState", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Connection")]
    public enum ClusterResourceState : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Uninitialized = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OfflinePending = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Offline = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OnlinePending = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Online = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ResourceNotFound = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Reconnected = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Connected = 7,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BandwidthLimit", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Connection")]
    public partial class BandwidthLimit : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private long LimitField;
        
        private DoubleTake.Core.Contract.Connection.BandwidthScheduleMode ModeField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Limit
        {
            get
            {
                return this.LimitField;
            }
            set
            {
                this.LimitField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Connection.BandwidthScheduleMode Mode
        {
            get
            {
                return this.ModeField;
            }
            set
            {
                this.ModeField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SnapshotQuality", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Connection")]
    public enum SnapshotQuality : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Good = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Bad = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SnapshotAge", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Connection")]
    public enum SnapshotAge : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Old = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        All = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QueueTaskParameters", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Connection")]
    public partial class QueueTaskParameters : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Core.Contract.DesktopInteractionMode DesktopInteractionModeField;
        
        private DoubleTake.Core.Contract.Connection.TaskParameters OnExecuteField;
        
        private DoubleTake.Core.Contract.Connection.TaskParameters OnQueueField;
        
        private DoubleTake.Core.Contract.Connection.TaskParameters OnReceiveField;
        
        private DoubleTake.Core.Contract.Connection.TaskParameters OnTransmitField;
        
        private string TaskNameField;
        
        private System.TimeSpan TimeoutField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.DesktopInteractionMode DesktopInteractionMode
        {
            get
            {
                return this.DesktopInteractionModeField;
            }
            set
            {
                this.DesktopInteractionModeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Connection.TaskParameters OnExecute
        {
            get
            {
                return this.OnExecuteField;
            }
            set
            {
                this.OnExecuteField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Connection.TaskParameters OnQueue
        {
            get
            {
                return this.OnQueueField;
            }
            set
            {
                this.OnQueueField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Connection.TaskParameters OnReceive
        {
            get
            {
                return this.OnReceiveField;
            }
            set
            {
                this.OnReceiveField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Connection.TaskParameters OnTransmit
        {
            get
            {
                return this.OnTransmitField;
            }
            set
            {
                this.OnTransmitField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TaskName
        {
            get
            {
                return this.TaskNameField;
            }
            set
            {
                this.TaskNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan Timeout
        {
            get
            {
                return this.TimeoutField;
            }
            set
            {
                this.TimeoutField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TaskParameters", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Connection")]
    public partial class TaskParameters : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string ArgumentsField;
        
        private string ScriptField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Arguments
        {
            get
            {
                return this.ArgumentsField;
            }
            set
            {
                this.ArgumentsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Script
        {
            get
            {
                return this.ScriptField;
            }
            set
            {
                this.ScriptField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RestoreParameters", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Connection")]
    public partial class RestoreParameters : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string ArchiveBinLocationField;
        
        private DoubleTake.Core.Contract.Connection.ArchiveRestoreOption ArchiveOptionField;
        
        private DoubleTake.Core.Contract.Connection.CompressionLevel CompressionLevelField;
        
        private DoubleTake.Core.Contract.Connection.MirrorComparisonCriteria MirrorComparisonCriteriaField;
        
        private string OriginalSourceNameField;
        
        private string OriginalTargetRouteField;
        
        private DoubleTake.Core.Contract.PathTransformation[] PathTransformationsField;
        
        private bool ProcessOrphansField;
        
        private string ReplicationSetNameField;
        
        private DoubleTake.Core.Contract.Connection.RestoreOptions RestoreOptionsField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ArchiveBinLocation
        {
            get
            {
                return this.ArchiveBinLocationField;
            }
            set
            {
                this.ArchiveBinLocationField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Connection.ArchiveRestoreOption ArchiveOption
        {
            get
            {
                return this.ArchiveOptionField;
            }
            set
            {
                this.ArchiveOptionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Connection.CompressionLevel CompressionLevel
        {
            get
            {
                return this.CompressionLevelField;
            }
            set
            {
                this.CompressionLevelField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Connection.MirrorComparisonCriteria MirrorComparisonCriteria
        {
            get
            {
                return this.MirrorComparisonCriteriaField;
            }
            set
            {
                this.MirrorComparisonCriteriaField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OriginalSourceName
        {
            get
            {
                return this.OriginalSourceNameField;
            }
            set
            {
                this.OriginalSourceNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OriginalTargetRoute
        {
            get
            {
                return this.OriginalTargetRouteField;
            }
            set
            {
                this.OriginalTargetRouteField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.PathTransformation[] PathTransformations
        {
            get
            {
                return this.PathTransformationsField;
            }
            set
            {
                this.PathTransformationsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ProcessOrphans
        {
            get
            {
                return this.ProcessOrphansField;
            }
            set
            {
                this.ProcessOrphansField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReplicationSetName
        {
            get
            {
                return this.ReplicationSetNameField;
            }
            set
            {
                this.ReplicationSetNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Connection.RestoreOptions RestoreOptions
        {
            get
            {
                return this.RestoreOptionsField;
            }
            set
            {
                this.RestoreOptionsField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ArchiveRestoreOption", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Connection")]
    public enum ArchiveRestoreOption : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ArchiveBeforeRestore = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RecallBeforeRestore = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.FlagsAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Name="RestoreOptions", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Connection")]
    public enum RestoreOptions : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UseTargetWorkload = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RestoreWorkloadToSource = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OverwriteExistingFiles = 4,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConnectionParameters", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Connection")]
    public partial class ConnectionParameters : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private bool CreateJobStatusResourceField;
        
        private string[] DependOnResourcesField;
        
        private bool IsTduField;
        
        private System.Guid JobIdField;
        
        private string JobTypeField;
        
        private DoubleTake.Core.Contract.PathTransformation[] PathTransformationsField;
        
        private int PortField;
        
        private string SourceClusterGroupNameField;
        
        private bool SourceIsClusteredField;
        
        private string TargetAddressField;
        
        private string WorkloadIdField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CreateJobStatusResource
        {
            get
            {
                return this.CreateJobStatusResourceField;
            }
            set
            {
                this.CreateJobStatusResourceField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] DependOnResources
        {
            get
            {
                return this.DependOnResourcesField;
            }
            set
            {
                this.DependOnResourcesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsTdu
        {
            get
            {
                return this.IsTduField;
            }
            set
            {
                this.IsTduField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid JobId
        {
            get
            {
                return this.JobIdField;
            }
            set
            {
                this.JobIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string JobType
        {
            get
            {
                return this.JobTypeField;
            }
            set
            {
                this.JobTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.PathTransformation[] PathTransformations
        {
            get
            {
                return this.PathTransformationsField;
            }
            set
            {
                this.PathTransformationsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Port
        {
            get
            {
                return this.PortField;
            }
            set
            {
                this.PortField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceClusterGroupName
        {
            get
            {
                return this.SourceClusterGroupNameField;
            }
            set
            {
                this.SourceClusterGroupNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool SourceIsClustered
        {
            get
            {
                return this.SourceIsClusteredField;
            }
            set
            {
                this.SourceIsClusteredField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetAddress
        {
            get
            {
                return this.TargetAddressField;
            }
            set
            {
                this.TargetAddressField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WorkloadId
        {
            get
            {
                return this.WorkloadIdField;
            }
            set
            {
                this.WorkloadIdField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ControlOperation", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Connection")]
    public enum ControlOperation : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Start = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Stop = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Pause = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Resume = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConnectionQualificationResult", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Connection")]
    public partial class ConnectionQualificationResult : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Core.Contract.Connection.CompressionLevel[] CompressionLevelsField;
        
        private int ConnectionPortField;
        
        private DoubleTake.Core.Contract.Connection.ConnectionQualificationFailures FailuresField;
        
        private bool IsQualifiedField;
        
        private bool IsRestoreRequiredField;
        
        private DoubleTake.Core.Contract.Connection.ConnectionStartParameters RecommendedStartParametersField;
        
        private DoubleTake.Core.Contract.UnicastIPAddressInfo[] RoutableAddressesField;
        
        private string TargetMachineNameField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Connection.CompressionLevel[] CompressionLevels
        {
            get
            {
                return this.CompressionLevelsField;
            }
            set
            {
                this.CompressionLevelsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ConnectionPort
        {
            get
            {
                return this.ConnectionPortField;
            }
            set
            {
                this.ConnectionPortField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Connection.ConnectionQualificationFailures Failures
        {
            get
            {
                return this.FailuresField;
            }
            set
            {
                this.FailuresField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsQualified
        {
            get
            {
                return this.IsQualifiedField;
            }
            set
            {
                this.IsQualifiedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsRestoreRequired
        {
            get
            {
                return this.IsRestoreRequiredField;
            }
            set
            {
                this.IsRestoreRequiredField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Connection.ConnectionStartParameters RecommendedStartParameters
        {
            get
            {
                return this.RecommendedStartParametersField;
            }
            set
            {
                this.RecommendedStartParametersField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.UnicastIPAddressInfo[] RoutableAddresses
        {
            get
            {
                return this.RoutableAddressesField;
            }
            set
            {
                this.RoutableAddressesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetMachineName
        {
            get
            {
                return this.TargetMachineNameField;
            }
            set
            {
                this.TargetMachineNameField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.FlagsAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConnectionQualificationFailures", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Connection")]
    public enum ConnectionQualificationFailures : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RoutableAddressDetermination = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CompressionAlgorithmDetermination = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RestoreRequiredDetermination = 4,
    }
}
namespace DoubleTake.Virtualization.Contract.DTHV
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VHDMapping", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Virtualization.Contract.DTHV")]
    public partial class VHDMapping : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string SourceVHDField;
        
        private string TargetVHDField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceVHD
        {
            get
            {
                return this.SourceVHDField;
            }
            set
            {
                this.SourceVHDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetVHD
        {
            get
            {
                return this.TargetVHDField;
            }
            set
            {
                this.TargetVHDField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VLanMapping", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Virtualization.Contract.DTHV")]
    public partial class VLanMapping : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Virtualization.Contract.SwitchPortInfo SourceSwitchPortField;
        
        private DoubleTake.Virtualization.Contract.SwitchPortInfo TargetSwitchPortField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Virtualization.Contract.SwitchPortInfo SourceSwitchPort
        {
            get
            {
                return this.SourceSwitchPortField;
            }
            set
            {
                this.SourceSwitchPortField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Virtualization.Contract.SwitchPortInfo TargetSwitchPort
        {
            get
            {
                return this.TargetSwitchPortField;
            }
            set
            {
                this.TargetSwitchPortField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VMSystemState", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Virtualization.Contract.DTHV")]
    public partial class VMSystemState : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private byte[] BootVolumeSignatureField;
        
        private string DomainField;
        
        private int DomainRoleField;
        
        private DoubleTake.Virtualization.Contract.VirtualNetworkInterfaceInfo[] NetworkInterfacesField;
        
        private string SystemDirectoryField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] BootVolumeSignature
        {
            get
            {
                return this.BootVolumeSignatureField;
            }
            set
            {
                this.BootVolumeSignatureField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Domain
        {
            get
            {
                return this.DomainField;
            }
            set
            {
                this.DomainField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DomainRole
        {
            get
            {
                return this.DomainRoleField;
            }
            set
            {
                this.DomainRoleField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Virtualization.Contract.VirtualNetworkInterfaceInfo[] NetworkInterfaces
        {
            get
            {
                return this.NetworkInterfacesField;
            }
            set
            {
                this.NetworkInterfacesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SystemDirectory
        {
            get
            {
                return this.SystemDirectoryField;
            }
            set
            {
                this.SystemDirectoryField = value;
            }
        }
    }
}
namespace DoubleTake.Core.Contract
{
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ImageDeleteInfo", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    public partial class ImageDeleteInfo : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private bool DeleteImageField;
        
        private System.Guid ImageIdField;
        
        private DoubleTake.Core.Contract.VhdDeleteActionType VhdDeleteActionField;
        
        private string[] VhdsToDeleteField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool DeleteImage
        {
            get
            {
                return this.DeleteImageField;
            }
            set
            {
                this.DeleteImageField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ImageId
        {
            get
            {
                return this.ImageIdField;
            }
            set
            {
                this.ImageIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.VhdDeleteActionType VhdDeleteAction
        {
            get
            {
                return this.VhdDeleteActionField;
            }
            set
            {
                this.VhdDeleteActionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] VhdsToDelete
        {
            get
            {
                return this.VhdsToDeleteField;
            }
            set
            {
                this.VhdsToDeleteField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VhdDeleteActionType", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    public enum VhdDeleteActionType : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        KeepAll = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DeleteAll = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UseVhdsToDelete = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProductVersion", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    public partial class ProductVersion : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private int BuildField;
        
        private int HotfixField;
        
        private int MajorField;
        
        private int MinorField;
        
        private int ServicePackField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Build
        {
            get
            {
                return this.BuildField;
            }
            set
            {
                this.BuildField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Hotfix
        {
            get
            {
                return this.HotfixField;
            }
            set
            {
                this.HotfixField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Major
        {
            get
            {
                return this.MajorField;
            }
            set
            {
                this.MajorField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Minor
        {
            get
            {
                return this.MinorField;
            }
            set
            {
                this.MinorField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ServicePack
        {
            get
            {
                return this.ServicePackField;
            }
            set
            {
                this.ServicePackField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MachineInfo", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    public partial class MachineInfo : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Core.Contract.ProductInfo ProductInfoField;
        
        private DoubleTake.Core.Contract.ServerInfo ServerInfoField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.ProductInfo ProductInfo
        {
            get
            {
                return this.ProductInfoField;
            }
            set
            {
                this.ProductInfoField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.ServerInfo ServerInfo
        {
            get
            {
                return this.ServerInfoField;
            }
            set
            {
                this.ServerInfoField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NetworkInterfaceInfo", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualNetworkInterfaceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VRAInternalVirtualNetworkInterfaceInfo))]
    public partial class NetworkInterfaceInfo : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string DescriptionField;
        
        private string DnsDomainField;
        
        private string[] DnsServersField;
        
        private string[] GatewaysField;
        
        private string GuidField;
        
        private DoubleTake.Core.Contract.UnicastIPAddressInfo[] IPAddressesField;
        
        private int IndexField;
        
        private int InterfaceIndexField;
        
        private string MacAddressField;
        
        private string NameField;
        
        private string PnpInstanceIdField;
        
        private string ServiceNameField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this.DescriptionField;
            }
            set
            {
                this.DescriptionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DnsDomain
        {
            get
            {
                return this.DnsDomainField;
            }
            set
            {
                this.DnsDomainField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] DnsServers
        {
            get
            {
                return this.DnsServersField;
            }
            set
            {
                this.DnsServersField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] Gateways
        {
            get
            {
                return this.GatewaysField;
            }
            set
            {
                this.GatewaysField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Guid
        {
            get
            {
                return this.GuidField;
            }
            set
            {
                this.GuidField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.UnicastIPAddressInfo[] IPAddresses
        {
            get
            {
                return this.IPAddressesField;
            }
            set
            {
                this.IPAddressesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Index
        {
            get
            {
                return this.IndexField;
            }
            set
            {
                this.IndexField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int InterfaceIndex
        {
            get
            {
                return this.InterfaceIndexField;
            }
            set
            {
                this.InterfaceIndexField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MacAddress
        {
            get
            {
                return this.MacAddressField;
            }
            set
            {
                this.MacAddressField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PnpInstanceId
        {
            get
            {
                return this.PnpInstanceIdField;
            }
            set
            {
                this.PnpInstanceIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServiceName
        {
            get
            {
                return this.ServiceNameField;
            }
            set
            {
                this.ServiceNameField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UnicastIPAddressInfo", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    public partial class UnicastIPAddressInfo : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string IPAddressField;
        
        private string IPv4MaskField;
        
        private bool IsDHCPField;
        
        private bool IsNATField;
        
        private bool IsOnlineField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IPAddress
        {
            get
            {
                return this.IPAddressField;
            }
            set
            {
                this.IPAddressField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IPv4Mask
        {
            get
            {
                return this.IPv4MaskField;
            }
            set
            {
                this.IPv4MaskField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDHCP
        {
            get
            {
                return this.IsDHCPField;
            }
            set
            {
                this.IsDHCPField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsNAT
        {
            get
            {
                return this.IsNATField;
            }
            set
            {
                this.IsNATField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsOnline
        {
            get
            {
                return this.IsOnlineField;
            }
            set
            {
                this.IsOnlineField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProductInfo", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    public partial class ProductInfo : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Core.Contract.ActivationStatus ActivationStatusField;
        
        private bool CanPauseTargetField;
        
        private bool CanResumeTargetField;
        
        private int EnginePortField;
        
        private long GatewaySessionKeyField;
        
        private string InstallationPathField;
        
        private string[] LocalEndpointsField;
        
        private string MachineNameField;
        
        private DoubleTake.Core.Contract.ProductVersion ManagementServiceVersionField;
        
        private string NameField;
        
        private string[] NatEndPointsField;
        
        private string ReservedAddressField;
        
        private string UniqueIdField;
        
        private DoubleTake.Core.Contract.ProductVersion VersionField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.ActivationStatus ActivationStatus
        {
            get
            {
                return this.ActivationStatusField;
            }
            set
            {
                this.ActivationStatusField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanPauseTarget
        {
            get
            {
                return this.CanPauseTargetField;
            }
            set
            {
                this.CanPauseTargetField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanResumeTarget
        {
            get
            {
                return this.CanResumeTargetField;
            }
            set
            {
                this.CanResumeTargetField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EnginePort
        {
            get
            {
                return this.EnginePortField;
            }
            set
            {
                this.EnginePortField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long GatewaySessionKey
        {
            get
            {
                return this.GatewaySessionKeyField;
            }
            set
            {
                this.GatewaySessionKeyField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string InstallationPath
        {
            get
            {
                return this.InstallationPathField;
            }
            set
            {
                this.InstallationPathField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] LocalEndpoints
        {
            get
            {
                return this.LocalEndpointsField;
            }
            set
            {
                this.LocalEndpointsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MachineName
        {
            get
            {
                return this.MachineNameField;
            }
            set
            {
                this.MachineNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.ProductVersion ManagementServiceVersion
        {
            get
            {
                return this.ManagementServiceVersionField;
            }
            set
            {
                this.ManagementServiceVersionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] NatEndPoints
        {
            get
            {
                return this.NatEndPointsField;
            }
            set
            {
                this.NatEndPointsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReservedAddress
        {
            get
            {
                return this.ReservedAddressField;
            }
            set
            {
                this.ReservedAddressField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UniqueId
        {
            get
            {
                return this.UniqueIdField;
            }
            set
            {
                this.UniqueIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.ProductVersion Version
        {
            get
            {
                return this.VersionField;
            }
            set
            {
                this.VersionField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServerInfo", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    public partial class ServerInfo : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.Guid BiosGuidField;
        
        private string BootVolumeField;
        
        private string DomainField;
        
        private string FullyQualifiedDomainField;
        
        private string HalInternalNameField;
        
        private string HalVersionField;
        
        private bool IsClusteredField;
        
        private bool IsHostedByHyperVField;
        
        private bool IsHostedByVMwareField;
        
        private bool IsHostedByXenField;
        
        private bool IsHyperVHostField;
        
        private bool IsReplicationEnabledField;
        
        private bool IsSBSField;
        
        private bool IsSSEField;
        
        private DoubleTake.Core.Contract.UVRA.LvmOptions LvmOptionsField;
        
        private int ManagementPortField;
        
        private long MemorySizeField;
        
        private string NameField;
        
        private DoubleTake.Core.Contract.NetworkInterfaceInfo[] NetworkInterfacesField;
        
        private string NodeLockedServerInfoField;
        
        private DoubleTake.Core.Contract.OperatingSystemInfo OperatingSystemField;
        
        private int ProcessorCountField;
        
        private string ProgramFilesPathField;
        
        private string SystemPathField;
        
        private string SystemRootField;
        
        private string SystemStateDefinitionField;
        
        private string SystemVolumeField;
        
        private DoubleTake.Core.Contract.Volume[] VolumesField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid BiosGuid
        {
            get
            {
                return this.BiosGuidField;
            }
            set
            {
                this.BiosGuidField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BootVolume
        {
            get
            {
                return this.BootVolumeField;
            }
            set
            {
                this.BootVolumeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Domain
        {
            get
            {
                return this.DomainField;
            }
            set
            {
                this.DomainField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FullyQualifiedDomain
        {
            get
            {
                return this.FullyQualifiedDomainField;
            }
            set
            {
                this.FullyQualifiedDomainField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HalInternalName
        {
            get
            {
                return this.HalInternalNameField;
            }
            set
            {
                this.HalInternalNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HalVersion
        {
            get
            {
                return this.HalVersionField;
            }
            set
            {
                this.HalVersionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsClustered
        {
            get
            {
                return this.IsClusteredField;
            }
            set
            {
                this.IsClusteredField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsHostedByHyperV
        {
            get
            {
                return this.IsHostedByHyperVField;
            }
            set
            {
                this.IsHostedByHyperVField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsHostedByVMware
        {
            get
            {
                return this.IsHostedByVMwareField;
            }
            set
            {
                this.IsHostedByVMwareField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsHostedByXen
        {
            get
            {
                return this.IsHostedByXenField;
            }
            set
            {
                this.IsHostedByXenField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsHyperVHost
        {
            get
            {
                return this.IsHyperVHostField;
            }
            set
            {
                this.IsHyperVHostField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsReplicationEnabled
        {
            get
            {
                return this.IsReplicationEnabledField;
            }
            set
            {
                this.IsReplicationEnabledField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSBS
        {
            get
            {
                return this.IsSBSField;
            }
            set
            {
                this.IsSBSField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSSE
        {
            get
            {
                return this.IsSSEField;
            }
            set
            {
                this.IsSSEField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.UVRA.LvmOptions LvmOptions
        {
            get
            {
                return this.LvmOptionsField;
            }
            set
            {
                this.LvmOptionsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ManagementPort
        {
            get
            {
                return this.ManagementPortField;
            }
            set
            {
                this.ManagementPortField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long MemorySize
        {
            get
            {
                return this.MemorySizeField;
            }
            set
            {
                this.MemorySizeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.NetworkInterfaceInfo[] NetworkInterfaces
        {
            get
            {
                return this.NetworkInterfacesField;
            }
            set
            {
                this.NetworkInterfacesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NodeLockedServerInfo
        {
            get
            {
                return this.NodeLockedServerInfoField;
            }
            set
            {
                this.NodeLockedServerInfoField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.OperatingSystemInfo OperatingSystem
        {
            get
            {
                return this.OperatingSystemField;
            }
            set
            {
                this.OperatingSystemField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProcessorCount
        {
            get
            {
                return this.ProcessorCountField;
            }
            set
            {
                this.ProcessorCountField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProgramFilesPath
        {
            get
            {
                return this.ProgramFilesPathField;
            }
            set
            {
                this.ProgramFilesPathField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SystemPath
        {
            get
            {
                return this.SystemPathField;
            }
            set
            {
                this.SystemPathField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SystemRoot
        {
            get
            {
                return this.SystemRootField;
            }
            set
            {
                this.SystemRootField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SystemStateDefinition
        {
            get
            {
                return this.SystemStateDefinitionField;
            }
            set
            {
                this.SystemStateDefinitionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SystemVolume
        {
            get
            {
                return this.SystemVolumeField;
            }
            set
            {
                this.SystemVolumeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Volume[] Volumes
        {
            get
            {
                return this.VolumesField;
            }
            set
            {
                this.VolumesField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActivationStatus", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    public partial class ActivationStatus : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Core.Contract.ActivationCode[] AddOnCodesField;
        
        private DoubleTake.Core.Contract.ActivationCode[] CodesField;
        
        private bool IsNodeLockedField;
        
        private bool IsValidField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.ActivationCode[] AddOnCodes
        {
            get
            {
                return this.AddOnCodesField;
            }
            set
            {
                this.AddOnCodesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.ActivationCode[] Codes
        {
            get
            {
                return this.CodesField;
            }
            set
            {
                this.CodesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsNodeLocked
        {
            get
            {
                return this.IsNodeLockedField;
            }
            set
            {
                this.IsNodeLockedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsValid
        {
            get
            {
                return this.IsValidField;
            }
            set
            {
                this.IsValidField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActivationCode", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    public partial class ActivationCode : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Core.Contract.ActivationAttribute[] AttributesField;
        
        private string CodeField;
        
        private System.DateTime ExpirationDateField;
        
        private bool IsEvaluationField;
        
        private bool IsExpiredField;
        
        private bool IsNodeLockedField;
        
        private bool IsValidField;
        
        private DoubleTake.Core.Contract.LicenseType LicenseTypeField;
        
        private int MajorVersionField;
        
        private int MinorVersionField;
        
        private int ProductCodeField;
        
        private string ProductNameField;
        
        private int SerialNumberField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.ActivationAttribute[] Attributes
        {
            get
            {
                return this.AttributesField;
            }
            set
            {
                this.AttributesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code
        {
            get
            {
                return this.CodeField;
            }
            set
            {
                this.CodeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ExpirationDate
        {
            get
            {
                return this.ExpirationDateField;
            }
            set
            {
                this.ExpirationDateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsEvaluation
        {
            get
            {
                return this.IsEvaluationField;
            }
            set
            {
                this.IsEvaluationField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsExpired
        {
            get
            {
                return this.IsExpiredField;
            }
            set
            {
                this.IsExpiredField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsNodeLocked
        {
            get
            {
                return this.IsNodeLockedField;
            }
            set
            {
                this.IsNodeLockedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsValid
        {
            get
            {
                return this.IsValidField;
            }
            set
            {
                this.IsValidField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.LicenseType LicenseType
        {
            get
            {
                return this.LicenseTypeField;
            }
            set
            {
                this.LicenseTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MajorVersion
        {
            get
            {
                return this.MajorVersionField;
            }
            set
            {
                this.MajorVersionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MinorVersion
        {
            get
            {
                return this.MinorVersionField;
            }
            set
            {
                this.MinorVersionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProductCode
        {
            get
            {
                return this.ProductCodeField;
            }
            set
            {
                this.ProductCodeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProductName
        {
            get
            {
                return this.ProductNameField;
            }
            set
            {
                this.ProductNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SerialNumber
        {
            get
            {
                return this.SerialNumberField;
            }
            set
            {
                this.SerialNumberField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActivationAttribute", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    public partial class ActivationAttribute : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string NameField;
        
        private long ValueField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Value
        {
            get
            {
                return this.ValueField;
            }
            set
            {
                this.ValueField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LicenseType", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    public enum LicenseType : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NotApplicable = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Limited = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Single = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Site = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NodeLockedKey = 4,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OperatingSystemInfo", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    public partial class OperatingSystemInfo : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Core.Contract.OperatingSystemArchitecture ArchitectureField;
        
        private int CSDVersionField;
        
        private int ProductSuiteField;
        
        private DoubleTake.Core.Contract.OperatingSystemProductType ProductTypeField;
        
        private string ServicePackField;
        
        private DoubleTake.Core.Contract.OperatingSystemVersion VersionField;
        
        private string VersionStringField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.OperatingSystemArchitecture Architecture
        {
            get
            {
                return this.ArchitectureField;
            }
            set
            {
                this.ArchitectureField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CSDVersion
        {
            get
            {
                return this.CSDVersionField;
            }
            set
            {
                this.CSDVersionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProductSuite
        {
            get
            {
                return this.ProductSuiteField;
            }
            set
            {
                this.ProductSuiteField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.OperatingSystemProductType ProductType
        {
            get
            {
                return this.ProductTypeField;
            }
            set
            {
                this.ProductTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServicePack
        {
            get
            {
                return this.ServicePackField;
            }
            set
            {
                this.ServicePackField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.OperatingSystemVersion Version
        {
            get
            {
                return this.VersionField;
            }
            set
            {
                this.VersionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VersionString
        {
            get
            {
                return this.VersionStringField;
            }
            set
            {
                this.VersionStringField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Volume", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VolumeOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.PhysicalVolume))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.UVRAVolumePersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VRAVolumePersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.LogicalVolume))]
    public partial class Volume : DoubleTake.Core.Contract.ProtectableItem
    {
        
        private long AvailableFreeSpaceField;
        
        private string DriveFormatField;
        
        private System.IO.DriveType DriveTypeField;
        
        private bool IsSystemDriveField;
        
        private string LabelField;
        
        private long TotalSizeField;
        
        private string VolumeTypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long AvailableFreeSpace
        {
            get
            {
                return this.AvailableFreeSpaceField;
            }
            set
            {
                this.AvailableFreeSpaceField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DriveFormat
        {
            get
            {
                return this.DriveFormatField;
            }
            set
            {
                this.DriveFormatField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.IO.DriveType DriveType
        {
            get
            {
                return this.DriveTypeField;
            }
            set
            {
                this.DriveTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSystemDrive
        {
            get
            {
                return this.IsSystemDriveField;
            }
            set
            {
                this.IsSystemDriveField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Label
        {
            get
            {
                return this.LabelField;
            }
            set
            {
                this.LabelField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long TotalSize
        {
            get
            {
                return this.TotalSizeField;
            }
            set
            {
                this.TotalSizeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VolumeType
        {
            get
            {
                return this.VolumeTypeField;
            }
            set
            {
                this.VolumeTypeField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProtectableItem", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.FileSystemItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.FileItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.DirectoryItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Volume))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VolumeOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.PhysicalVolume))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.UVRAVolumePersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VRAVolumePersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.LogicalVolume))]
    public partial class ProtectableItem : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.Nullable<DoubleTake.Core.Contract.FileSystemAttributes> AttributesField;
        
        private System.Nullable<System.DateTime> CreationTimeField;
        
        private bool IsContainerField;
        
        private bool IsReadOnlyField;
        
        private string ItemTypeField;
        
        private System.Nullable<System.DateTime> LastAccessTimeField;
        
        private System.Nullable<System.DateTime> LastWriteTimeField;
        
        private string MetadataField;
        
        private string NameField;
        
        private string PathField;
        
        private DoubleTake.Core.Contract.SaturationLevel SaturationField;
        
        private System.Nullable<long> SizeField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<DoubleTake.Core.Contract.FileSystemAttributes> Attributes
        {
            get
            {
                return this.AttributesField;
            }
            set
            {
                this.AttributesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> CreationTime
        {
            get
            {
                return this.CreationTimeField;
            }
            set
            {
                this.CreationTimeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsContainer
        {
            get
            {
                return this.IsContainerField;
            }
            set
            {
                this.IsContainerField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsReadOnly
        {
            get
            {
                return this.IsReadOnlyField;
            }
            set
            {
                this.IsReadOnlyField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ItemType
        {
            get
            {
                return this.ItemTypeField;
            }
            set
            {
                this.ItemTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> LastAccessTime
        {
            get
            {
                return this.LastAccessTimeField;
            }
            set
            {
                this.LastAccessTimeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> LastWriteTime
        {
            get
            {
                return this.LastWriteTimeField;
            }
            set
            {
                this.LastWriteTimeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Metadata
        {
            get
            {
                return this.MetadataField;
            }
            set
            {
                this.MetadataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Path
        {
            get
            {
                return this.PathField;
            }
            set
            {
                this.PathField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.SaturationLevel Saturation
        {
            get
            {
                return this.SaturationField;
            }
            set
            {
                this.SaturationField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<long> Size
        {
            get
            {
                return this.SizeField;
            }
            set
            {
                this.SizeField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileSystemItem", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.FileItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.DirectoryItem))]
    public partial class FileSystemItem : DoubleTake.Core.Contract.ProtectableItem
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileItem", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    public partial class FileItem : DoubleTake.Core.Contract.FileSystemItem
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DirectoryItem", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    public partial class DirectoryItem : DoubleTake.Core.Contract.FileSystemItem
    {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.FlagsAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileSystemAttributes", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    public enum FileSystemAttributes : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ReadOnly = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Hidden = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        System = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Directory = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Archive = 32,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Normal = 128,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Temporary = 256,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SparseFile = 512,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ReparsePoint = 1024,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Compressed = 2048,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Offline = 4096,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NotContentIndexed = 8192,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Encrypted = 16384,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SaturationLevel", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    public enum SaturationLevel : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Partial = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Full = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Error = 4,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OperatingSystemVersion", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    public partial class OperatingSystemVersion : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private int BuildField;
        
        private int MajorField;
        
        private int MinorField;
        
        private int RevisionField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Build
        {
            get
            {
                return this.BuildField;
            }
            set
            {
                this.BuildField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Major
        {
            get
            {
                return this.MajorField;
            }
            set
            {
                this.MajorField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Minor
        {
            get
            {
                return this.MinorField;
            }
            set
            {
                this.MinorField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Revision
        {
            get
            {
                return this.RevisionField;
            }
            set
            {
                this.RevisionField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OperatingSystemArchitecture", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    public enum OperatingSystemArchitecture : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        x86 = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        x64 = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ia64 = 6,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OperatingSystemProductType", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    public enum OperatingSystemProductType : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Workstation = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DomainController = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Server = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PathTransformation", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    public partial class PathTransformation : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string SourcePathField;
        
        private string TargetPathField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourcePath
        {
            get
            {
                return this.SourcePathField;
            }
            set
            {
                this.SourcePathField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetPath
        {
            get
            {
                return this.TargetPathField;
            }
            set
            {
                this.TargetPathField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Credentials", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    public partial class Credentials : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string DomainField;
        
        private string PasswordField;
        
        private string UserNameField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Domain
        {
            get
            {
                return this.DomainField;
            }
            set
            {
                this.DomainField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password
        {
            get
            {
                return this.PasswordField;
            }
            set
            {
                this.PasswordField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName
        {
            get
            {
                return this.UserNameField;
            }
            set
            {
                this.UserNameField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SystemStateVerificationResult", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    public partial class SystemStateVerificationResult : DoubleTake.Common.ComponentModel.ObservableObject
    {
        
        private bool IsCompatibleField;
        
        private DoubleTake.Core.Contract.SystemStateVerificationStep[] ValidationResultsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsCompatible
        {
            get
            {
                return this.IsCompatibleField;
            }
            set
            {
                this.IsCompatibleField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.SystemStateVerificationStep[] ValidationResults
        {
            get
            {
                return this.ValidationResultsField;
            }
            set
            {
                this.ValidationResultsField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SystemStateVerificationStep", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    public partial class SystemStateVerificationStep : DoubleTake.Common.ComponentModel.ObservableObject
    {
        
        private string MessageField;
        
        private string NameField;
        
        private string SourceField;
        
        private DoubleTake.Jobs.Contract.VerificationStatus StatusField;
        
        private string TargetField;
        
        private long TaskField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message
        {
            get
            {
                return this.MessageField;
            }
            set
            {
                this.MessageField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Source
        {
            get
            {
                return this.SourceField;
            }
            set
            {
                this.SourceField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.VerificationStatus Status
        {
            get
            {
                return this.StatusField;
            }
            set
            {
                this.StatusField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Target
        {
            get
            {
                return this.TargetField;
            }
            set
            {
                this.TargetField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Task
        {
            get
            {
                return this.TaskField;
            }
            set
            {
                this.TaskField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WinServiceInfo", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    public partial class WinServiceInfo : DoubleTake.Common.ComponentModel.ObservableObject
    {
        
        private bool IsInstalledField;
        
        private bool IsRunningField;
        
        private DoubleTake.Core.Contract.WinServiceStartMode StartModeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsInstalled
        {
            get
            {
                return this.IsInstalledField;
            }
            set
            {
                this.IsInstalledField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsRunning
        {
            get
            {
                return this.IsRunningField;
            }
            set
            {
                this.IsRunningField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.WinServiceStartMode StartMode
        {
            get
            {
                return this.StartModeField;
            }
            set
            {
                this.StartModeField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NamedSetting", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.MultiStringSetting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.StringSetting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.IntegerSetting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.BooleanSetting))]
    public partial class NamedSetting : DoubleTake.Common.ComponentModel.ObservableObject
    {
        
        private string NameField;
        
        private string TypeNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TypeName
        {
            get
            {
                return this.TypeNameField;
            }
            set
            {
                this.TypeNameField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MultiStringSetting", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    public partial class MultiStringSetting : DoubleTake.Core.Contract.NamedSetting
    {
        
        private string[] ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] Value
        {
            get
            {
                return this.ValueField;
            }
            set
            {
                this.ValueField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StringSetting", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    public partial class StringSetting : DoubleTake.Core.Contract.NamedSetting
    {
        
        private string ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value
        {
            get
            {
                return this.ValueField;
            }
            set
            {
                this.ValueField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IntegerSetting", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    public partial class IntegerSetting : DoubleTake.Core.Contract.NamedSetting
    {
        
        private long ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Value
        {
            get
            {
                return this.ValueField;
            }
            set
            {
                this.ValueField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BooleanSetting", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    public partial class BooleanSetting : DoubleTake.Core.Contract.NamedSetting
    {
        
        private bool ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Value
        {
            get
            {
                return this.ValueField;
            }
            set
            {
                this.ValueField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EmailNotificationSettings", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    public partial class EmailNotificationSettings : DoubleTake.Common.ComponentModel.ObservableObject
    {
        
        private DoubleTake.Core.Contract.EmailNotificationCategories CategoriesField;
        
        private string[] ExcludeIdsField;
        
        private string FromAddressField;
        
        private bool IsEnabledField;
        
        private bool IsEventDescriptionInSubjectField;
        
        private bool IsSmtpLogOnEnabledField;
        
        private string PasswordField;
        
        private int PortField;
        
        private string[] RecipientsField;
        
        private string ServerField;
        
        private string SubjectPrefixField;
        
        private string UserNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.EmailNotificationCategories Categories
        {
            get
            {
                return this.CategoriesField;
            }
            set
            {
                this.CategoriesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] ExcludeIds
        {
            get
            {
                return this.ExcludeIdsField;
            }
            set
            {
                this.ExcludeIdsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FromAddress
        {
            get
            {
                return this.FromAddressField;
            }
            set
            {
                this.FromAddressField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsEnabled
        {
            get
            {
                return this.IsEnabledField;
            }
            set
            {
                this.IsEnabledField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsEventDescriptionInSubject
        {
            get
            {
                return this.IsEventDescriptionInSubjectField;
            }
            set
            {
                this.IsEventDescriptionInSubjectField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSmtpLogOnEnabled
        {
            get
            {
                return this.IsSmtpLogOnEnabledField;
            }
            set
            {
                this.IsSmtpLogOnEnabledField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password
        {
            get
            {
                return this.PasswordField;
            }
            set
            {
                this.PasswordField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Port
        {
            get
            {
                return this.PortField;
            }
            set
            {
                this.PortField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] Recipients
        {
            get
            {
                return this.RecipientsField;
            }
            set
            {
                this.RecipientsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Server
        {
            get
            {
                return this.ServerField;
            }
            set
            {
                this.ServerField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SubjectPrefix
        {
            get
            {
                return this.SubjectPrefixField;
            }
            set
            {
                this.SubjectPrefixField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName
        {
            get
            {
                return this.UserNameField;
            }
            set
            {
                this.UserNameField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EmailNotificationTestParameters", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    public partial class EmailNotificationTestParameters : DoubleTake.Common.ComponentModel.ObservableObject
    {
        
        private string BodyTextField;
        
        private string[] RecipientsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BodyText
        {
            get
            {
                return this.BodyTextField;
            }
            set
            {
                this.BodyTextField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] Recipients
        {
            get
            {
                return this.RecipientsField;
            }
            set
            {
                this.RecipientsField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DesktopInteractionMode", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    public enum DesktopInteractionMode : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Interact = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.FlagsAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Name="EngineJobType", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    public enum EngineJobType : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NormalJob = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ImageJob = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RecoveryJob = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FullServerJob = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GeoClusterJob = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MigrationJob = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FullServerRevertJob = 32,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        VraRecoveryJob = 64,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        VraMigrationJob = 128,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DataOnlyOption = 256,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        VraJob = 512,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        HyperVJob = 1024,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Win32MirrorOption = 2048,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SourceConnectionResourceJob = 4096,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FullServerBackupJob = 8192,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UvraJob = 16384,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Property", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    public partial class Property : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string NameField;
        
        private string ValueField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value
        {
            get
            {
                return this.ValueField;
            }
            set
            {
                this.ValueField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PhysicalRule", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    public partial class PhysicalRule : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Core.Contract.InclusionMode InclusionField;
        
        private bool IsReadOnlyField;
        
        private string MetadataField;
        
        private string PathField;
        
        private DoubleTake.Core.Contract.RecursionMode RecursionField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.InclusionMode Inclusion
        {
            get
            {
                return this.InclusionField;
            }
            set
            {
                this.InclusionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsReadOnly
        {
            get
            {
                return this.IsReadOnlyField;
            }
            set
            {
                this.IsReadOnlyField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Metadata
        {
            get
            {
                return this.MetadataField;
            }
            set
            {
                this.MetadataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Path
        {
            get
            {
                return this.PathField;
            }
            set
            {
                this.PathField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.RecursionMode Recursion
        {
            get
            {
                return this.RecursionField;
            }
            set
            {
                this.RecursionField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InclusionMode", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    public enum InclusionMode : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Include = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Exclude = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RecursionMode", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    public enum RecursionMode : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Recursive = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NonRecursive = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WinServiceStartMode", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    public enum WinServiceStartMode : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Auto = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Manual = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Disabled = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DelayedAuto = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.FlagsAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Name="EmailNotificationCategories", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    public enum EmailNotificationCategories : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Information = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Warning = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Error = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        All = 255,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ImageVhdInfo", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    public partial class ImageVhdInfo : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string FilePathField;
        
        private string FormatTypeField;
        
        private long SizeInMBField;
        
        private bool UseExistingVhdField;
        
        private string VolumeLetterField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FilePath
        {
            get
            {
                return this.FilePathField;
            }
            set
            {
                this.FilePathField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FormatType
        {
            get
            {
                return this.FormatTypeField;
            }
            set
            {
                this.FormatTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long SizeInMB
        {
            get
            {
                return this.SizeInMBField;
            }
            set
            {
                this.SizeInMBField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool UseExistingVhd
        {
            get
            {
                return this.UseExistingVhdField;
            }
            set
            {
                this.UseExistingVhdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VolumeLetter
        {
            get
            {
                return this.VolumeLetterField;
            }
            set
            {
                this.VolumeLetterField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ReplicationSetUsageType", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    public enum ReplicationSetUsageType : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Normal = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SystemState = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GeoCluster = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AccessLevel", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    public enum AccessLevel : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = -1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NoAccess = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MonitorOnlyAccess = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FullAccess = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CollectedServer", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    public partial class CollectedServer : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Core.Contract.Credentials CredentialsField;
        
        private string[] IPAddressesField;
        
        private System.Nullable<System.DateTime> LastCollectedField;
        
        private string NameField;
        
        private int PortField;
        
        private string RouteField;
        
        private System.Nullable<DoubleTake.Core.Contract.CollectedServerStatus> StatusField;
        
        private string UniqueIdField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Credentials Credentials
        {
            get
            {
                return this.CredentialsField;
            }
            set
            {
                this.CredentialsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] IPAddresses
        {
            get
            {
                return this.IPAddressesField;
            }
            set
            {
                this.IPAddressesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> LastCollected
        {
            get
            {
                return this.LastCollectedField;
            }
            set
            {
                this.LastCollectedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Port
        {
            get
            {
                return this.PortField;
            }
            set
            {
                this.PortField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Route
        {
            get
            {
                return this.RouteField;
            }
            set
            {
                this.RouteField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<DoubleTake.Core.Contract.CollectedServerStatus> Status
        {
            get
            {
                return this.StatusField;
            }
            set
            {
                this.StatusField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UniqueId
        {
            get
            {
                return this.UniqueIdField;
            }
            set
            {
                this.UniqueIdField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CollectedServerStatus", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    public enum CollectedServerStatus : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OK = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidCredentials = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UnknownHost = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ServiceCommunicationError = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WritingToDatabase = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        JobWriteFailed = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Error = 6,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CredentialsType", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    public enum CredentialsType : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Windows = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SqlDatabase = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CollectorDatabaseStatus", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    public enum CollectorDatabaseStatus : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DatabaseNotConfigured = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SchemaSetupError = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Error = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidCredentials = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UnknownDatabaseServer = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DatabaseServerCommunicationError = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DatabaseCommunicationError = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InsufficientDatabaseAcessLevel = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OK = 8,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ControlledServerInfo", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    public partial class ControlledServerInfo : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Core.Contract.ProductInfo ProductInfoField;
        
        private DoubleTake.Core.Contract.ServerInfo ServerInfoField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.ProductInfo ProductInfo
        {
            get
            {
                return this.ProductInfoField;
            }
            set
            {
                this.ProductInfoField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.ServerInfo ServerInfo
        {
            get
            {
                return this.ServerInfoField;
            }
            set
            {
                this.ServerInfoField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ControlledServerInfoSimple", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    public partial class ControlledServerInfoSimple : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string ServerNameField;
        
        private System.Guid UniqueIdField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServerName
        {
            get
            {
                return this.ServerNameField;
            }
            set
            {
                this.ServerNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid UniqueId
        {
            get
            {
                return this.UniqueIdField;
            }
            set
            {
                this.UniqueIdField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CoreFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Alternate.TupleOfstringstring[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Alternate.TupleOfstringstring))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.ComponentModel.ObservableObject))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.CommonFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.CollectorInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.CollectorConfigurationInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.PropertyBag))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.NameValuePair[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.NameValuePair))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.PushInstallationOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.PushInstallToken))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.PushInstallStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.InstallStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.ServiceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.ServiceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.ServicesStartMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.Workload))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.WorkloadType[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.WorkloadType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.WorkloadSupportSummary))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.Workload[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.LogicalItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.LogicalItem[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.ChangedItems))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.DashboardEngineOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.EmailNotificationOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.SmtpConnectionSecurity))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.InvalidEmailAddressFormatFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.ExceptionDetail))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Install.InstallStep))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.IO.AceFlags))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.IO.AceType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Tasks.ActivityToken))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Tasks.ActivityStatusEntry))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Tasks.ActivityCompletionStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Tasks.ActivityStatusEntry[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Communication.ServiceConnectionParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Communication.ServiceConnectionParameters[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotCreationReason))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TargetStates))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.MirrorParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.MirrorComparisonCriteria))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.MirrorOperationOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthLimit))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthScheduleMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotEntry[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotEntry))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotQuality))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotAge))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.MirrorState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ReplicationState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ClusterResourceState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TransmissionMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.QueueTaskParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TaskParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.Weekdays))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthSpecification[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthSpecification))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthSpecificationType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionStartParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.CompressionLevel))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ArchiveSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ScheduleItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ArchiveCriteria))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthScheduleEntry))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthScheduleEntry[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.OrphansSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TransmissionSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TimeWindow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.VerifySchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ScriptPoint[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ScriptPoint))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ScriptExecutionMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ScriptPointType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TargetStateInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.CompressionLevel[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.RestoreParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ArchiveRestoreOption))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.RestoreOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionConfiguration))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionStatistics))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.QueueState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ControlOperation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TargetStateInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionQualificationResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionQualificationFailures))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobCredentials))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobSourceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobSourceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverDataAction))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorConfiguration))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.ActiveDirectoryFailoverOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitoredAddressConfiguration[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitoredAddressConfiguration))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.PingMethods))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverIPAddressesOption))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverItems))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverProcessingOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverReplaceActions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.SSMRecoveryType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverScriptConfiguration))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverTrigger))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.HighAvailabilityState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitoredAddressStatus[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitoredAddressStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.RestoreStates))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.ReMonitorAction))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorQualificationResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorableAddressInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorableAddressInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorConfiguration[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailbackOption))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TargetServiceStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.DnsServerDetail[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.DnsServerDetail))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.IPAddressMap[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.IPAddressMap))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.FullServerNicMappings[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.FullServerNicMappings))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TargetServicesToStop[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TargetServicesToStop))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TestDnsResult[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TestDnsResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TestDnsDetails[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TestDnsDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotActivityStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.Snapshot))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotCreateOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotBuildingBlockType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotCreationResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.Snapshot[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotListOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotRevertOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotDeleteOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotMountOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.LvmOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.VolumeGroup[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.VolumeGroup))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.LogicalVolume[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.LogicalVolume))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.PhysicalVolume[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.PhysicalVolume))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.AccessLevel))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CollectedServer[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CollectedServer))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Credentials))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CollectedServerStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CredentialsType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CollectorDatabaseStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ControlledServerInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ControlledServerInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ProductInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ActivationStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ActivationCode[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ActivationCode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ActivationAttribute[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ActivationAttribute))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.LicenseType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ProductVersion))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ServerInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Volume))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ProtectableItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.FileSystemAttributes))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.SaturationLevel))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.FileItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.FileSystemItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.DirectoryItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.NetworkInterfaceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.NetworkInterfaceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UnicastIPAddressInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UnicastIPAddressInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.OperatingSystemInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.OperatingSystemArchitecture))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.OperatingSystemProductType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.OperatingSystemVersion))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Volume[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ControlledServerInfoSimple[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ControlledServerInfoSimple))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.DesktopInteractionMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageDeleteInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.VhdDeleteActionType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.MachineInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PathTransformation[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PathTransformation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageVhdInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageVhdInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.EngineJobType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ReplicationSetUsageType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PhysicalRule[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PhysicalRule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.InclusionMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.RecursionMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ProtectableItem[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageEditedProperties))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageDeleteInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ShutdownOption))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PathBlockingEntry[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PathBlockingEntry))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PathBlockingMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CloudBillingInformation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ClusterAddressInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ClusterHostOwnershipModel))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CoreClusterInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.FullServerJobType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.SystemStateVerificationResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.SystemStateVerificationStep[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.SystemStateVerificationStep))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.SystemStateCutoverStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ReplicationSetInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.WinServiceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.WinServiceStartMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Property[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Property))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.NamedSetting[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.NamedSetting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.MultiStringSetting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.StringSetting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.IntegerSetting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.BooleanSetting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.LogMessage[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.LogMessage))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.EmailNotificationSettings))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.EmailNotificationCategories))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.EmailNotificationTestParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.DnsDomainDetailsPrototype[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.DnsDomainDetailsPrototype))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract1.ClusteredResourceState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract1.RebootAction))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract1.DnsLockInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.ClusterGroupInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.ClusterGroupInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.ClusterResourceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.ClusterResourceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.ClusteredVirtualMachinesInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.ClusteredVirtualMachinesInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.VirtualMachine[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.VirtualMachine))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.StorageInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.StorageInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.VirtualMachineResourceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Diagnostics.Contract.DtInfoCollectionStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Diagnostics.Contract.DtInfoCollectionProgress))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Discovery.Contract.DynamicServiceEndpoint[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Discovery.Contract.DynamicServiceEndpoint))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Dtmu.Contract.UsageData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Dtmu.Contract.JobUsageData[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Dtmu.Contract.JobUsageData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Dtmu.Contract.DtmuJobStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Dtmu.Contract.DtmuActivationStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Applications.ApplicationsPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Applications.SqlDatabasePersistedInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Applications.SqlDatabasePersistedInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Diagnostics.DiagnosticsPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DTHV.DTHVPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FilesAndFolders.FilesAndFoldersPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FullServer.FullServerPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FullServer.FullServerJobDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ImageBased.ImageProtectionPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ImageBased.ImageRecoveryPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ImageBased.ImageProtectionJobDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ImageBased.ImageRecoveryJobDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Scheduling.BandwidthOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Scheduling.BandwidthEntry[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Scheduling.BandwidthEntry))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.UVRA.UVRAPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.VcdVapp.VcdVappPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Virtualization.DTAVPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.VRA.VRAPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreConnectionDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.EngineConnectionInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.EngineConnectionInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Feature[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Feature))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreConnectionPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ClusterPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ResourceAndPassiveNodes[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ResourceAndPassiveNodes))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DeleteOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreMonitorPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FailoverOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FailoverMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FailoverType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Health))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ExtendedLowLevelState[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ExtendedLowLevelState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FailoverPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.AddressPersistedState[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.AddressPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ApplicationOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DnsRecordLockOptions[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DnsRecordLockOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ServiceInformation[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ServiceInformation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ClusterOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreConnectionOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreMonitorOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DTHVOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DNSOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DnsDomainDetails[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DnsDomainDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DTAVOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FullServerFailoverOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ImageProtectionOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ImageRecoveryOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.MonitoringOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ServiceMonitoringOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.SimpleFailoverMonitorOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.SystemStateOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.TargetServicesOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.UnmanagedConnectionOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.VRAOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.VcdVappOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobStatistics))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreMonitorDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobAction[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobAction))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ActionStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CreateOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobCredentials))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ClusterFilesAndFoldersQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.TargetFileServerQualificationResults[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.TargetFileServerQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DTHVQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DTAVQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.VRAQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.V2VQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.RecommendedJobOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.VerificationStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.RecommendedFailoverOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FailbackOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.RecommendedFailbackOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.RestoreStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.RestoreOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.RecommendedRestoreOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.SourceQualificationFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract1.CutoverDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract1.VerificationStep[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract1.VerificationStep))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract1.VerificationTaskStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract1.FixJobOptionsTaskStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.Share[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.Share))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.Ace[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.Ace))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorActivity))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorAction))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ActionInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.QueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.CompositeQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.QueryResult[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.HeartbeatPingQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.IcmpPingQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.PerformanceCounterQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ServiceStatusQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ScriptQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VmHealthQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VmConfigQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VirtualSwitchConfigQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.DtscStatusQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ShareQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.CompositeActionInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorAction[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.LogActionInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ScriptActionInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ServiceOperationActionInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ServiceOperation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorQuery))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.QueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.CompositeQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.CompositeQueryOperation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorQuery[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.IcmpPingQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.HeartbeatPingQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.PerformanceCounterQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ComparisonOperation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ScriptQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ServiceStatusQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VmHealthQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VmConfigQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VirtualSwitchConfigQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.DtscStatusQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.DTTargetResourceQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ShareQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.TriggerMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ValidationFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.PropertyFault[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.PropertyFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ActivityResultNode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.CompositeActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ScriptActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ServiceOperationActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.SimpleMonitorInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.SimpleMonitorInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.VmdkDatastoreMapping[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.VmdkDatastoreMapping))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVmdkInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVmQualificationResults[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVmQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVimServer[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVimServer))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavReplicationAppliance[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavReplicationAppliance))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.AddVimServerAndRAFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DTAVRequestFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavHostAndCluster[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavHostAndCluster))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVmInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVmInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVmdkInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavGuestInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavGuestInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.LicenseData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.GracePeriodReason))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVimInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.EmailNotificationInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.EmailNotificationInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTHV.VHDMapping[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTHV.VHDMapping))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTHV.VLanMapping[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTHV.VLanMapping))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTHV.VMSystemState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VcdVapp.PITSnapshotRecord[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VcdVapp.PITSnapshotRecord))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VcdVapp.VmdkInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VcdVapp.VmdkInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VolumeOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VRAInternalVirtualNetworkInterfaceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VRAInternalVirtualNetworkInterfaceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.UVRAVolumePersistedState[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.UVRAVolumePersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VRAVolumePersistedState[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VRAVolumePersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.V2VVirtualMachine[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.V2VVirtualMachine))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VolumeOptions[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.ReplicaVMInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VRAWorkloadCustomizationOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.ActivationCodeInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.ESXInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.JobState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.ErrorInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.ErrorInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualNetworkInterfaceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualizationConnectionInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VMInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualNetworkInterfaceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.SwitchPortInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualSwitchMapping[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualSwitchMapping))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualSwitchInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VMQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.NetworkAdapterInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.NetworkAdapterInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VHDInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VHDInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualSwitchInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.ServerQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VolumeQualificationResults[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VolumeQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VMInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.LicenseQuantity))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VimDatastoreItem[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VimDatastoreItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DtServiceException_Fault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.HyperVmNotFoundException_Fault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(string[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(bool[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(short[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(int[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(long[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(float[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(double[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.DateTime[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.TimeSpan[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Guid[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Uri[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(byte[][]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, System.Guid>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, System.Uri>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, DoubleTake.Core.Contract.Credentials>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ushort[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.DtProduct[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.DtProduct))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.SplaManagementFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.SplaManagementFaultCode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.UsageReport))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.JobInventory[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.JobInventory))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.JobStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.ActivationStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.LicenseResponse))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.Fault[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.Fault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.IO.DriveType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Net.Sockets.AddressFamily))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Net.NetworkCredential))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Net.IPAddress[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Net.IPAddress))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Security.SecureString))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.DateTimeOffset))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.DateTimeOffset[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(www.doubletake.com.Common.Contract.LogMessage[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(www.doubletake.com.Common.Contract.LogMessage))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(www.doubletake.com.Common.Contract.EventLogEntryData2[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(www.doubletake.com.Common.Contract.EventLogEntryData2))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(www.doubletake.com.Jobs.Contract.EngineControlStatus[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(www.doubletake.com.Jobs.Contract.EngineControlStatus))]
    public partial class CoreFault : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string CategoryField;
        
        private int ErrorCodeField;
        
        private object InnerFaultField;
        
        private string MessageField;
        
        private string NameField;
        
        private string StackTraceField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Category
        {
            get
            {
                return this.CategoryField;
            }
            set
            {
                this.CategoryField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ErrorCode
        {
            get
            {
                return this.ErrorCodeField;
            }
            set
            {
                this.ErrorCodeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object InnerFault
        {
            get
            {
                return this.InnerFaultField;
            }
            set
            {
                this.InnerFaultField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message
        {
            get
            {
                return this.MessageField;
            }
            set
            {
                this.MessageField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StackTrace
        {
            get
            {
                return this.StackTraceField;
            }
            set
            {
                this.StackTraceField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ImageInfo", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    public partial class ImageInfo : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.DateTime CreationTimestampField;
        
        private string DescriptionField;
        
        private System.Guid IdField;
        
        private string ImageNameField;
        
        private DoubleTake.Core.Contract.ImageType ImageTypeField;
        
        private string ProtectionConnectionIdField;
        
        private string ProtectionJobNameField;
        
        private DoubleTake.Core.Contract.Connection.SnapshotEntry[] SnapshotsField;
        
        private string SourceImageMountLocationField;
        
        private string SourceNameField;
        
        private DoubleTake.Core.Contract.Connection.TargetStates StateField;
        
        private DoubleTake.Core.Contract.ImageVhdInfo[] VhdFilesField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreationTimestamp
        {
            get
            {
                return this.CreationTimestampField;
            }
            set
            {
                this.CreationTimestampField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this.DescriptionField;
            }
            set
            {
                this.DescriptionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImageName
        {
            get
            {
                return this.ImageNameField;
            }
            set
            {
                this.ImageNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.ImageType ImageType
        {
            get
            {
                return this.ImageTypeField;
            }
            set
            {
                this.ImageTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProtectionConnectionId
        {
            get
            {
                return this.ProtectionConnectionIdField;
            }
            set
            {
                this.ProtectionConnectionIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProtectionJobName
        {
            get
            {
                return this.ProtectionJobNameField;
            }
            set
            {
                this.ProtectionJobNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Connection.SnapshotEntry[] Snapshots
        {
            get
            {
                return this.SnapshotsField;
            }
            set
            {
                this.SnapshotsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceImageMountLocation
        {
            get
            {
                return this.SourceImageMountLocationField;
            }
            set
            {
                this.SourceImageMountLocationField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceName
        {
            get
            {
                return this.SourceNameField;
            }
            set
            {
                this.SourceNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Connection.TargetStates State
        {
            get
            {
                return this.StateField;
            }
            set
            {
                this.StateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.ImageVhdInfo[] VhdFiles
        {
            get
            {
                return this.VhdFilesField;
            }
            set
            {
                this.VhdFilesField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ImageType", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    public enum ImageType : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DataOnly = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FullServer = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.FlagsAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Name="ImageEditedProperties", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    public enum ImageEditedProperties : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Name = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Description = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ShutdownOption", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    public enum ShutdownOption : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ShutdownOnly = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Restart = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PathBlockingEntry", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    public partial class PathBlockingEntry : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Core.Contract.PathBlockingMode BlockingModeField;
        
        private string[] PathsField;
        
        private string SourceAddressField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.PathBlockingMode BlockingMode
        {
            get
            {
                return this.BlockingModeField;
            }
            set
            {
                this.BlockingModeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] Paths
        {
            get
            {
                return this.PathsField;
            }
            set
            {
                this.PathsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceAddress
        {
            get
            {
                return this.SourceAddressField;
            }
            set
            {
                this.SourceAddressField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PathBlockingMode", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    public enum PathBlockingMode : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Blocked = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unblocked = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CloudBillingInformation", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    public partial class CloudBillingInformation : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string PasswordField;
        
        private string UserNameField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password
        {
            get
            {
                return this.PasswordField;
            }
            set
            {
                this.PasswordField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName
        {
            get
            {
                return this.UserNameField;
            }
            set
            {
                this.UserNameField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ClusterAddressInfo", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    public partial class ClusterAddressInfo : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.Net.IPAddress[] ClusterNodeAddressesField;
        
        private string ClusterNodeNameField;
        
        private string DeclaredHostField;
        
        private DoubleTake.Core.Contract.ClusterHostOwnershipModel DeclaredHostOwnerField;
        
        private string DomainField;
        
        private System.Net.IPAddress[] KnownClusterAddressesField;
        
        private string[] KnownClusterNamesField;
        
        private string[] KnownClusterNodeNamesField;
        
        private string ViaHostField;
        
        private DoubleTake.Core.Contract.ClusterHostOwnershipModel ViaHostOwnerField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Net.IPAddress[] ClusterNodeAddresses
        {
            get
            {
                return this.ClusterNodeAddressesField;
            }
            set
            {
                this.ClusterNodeAddressesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ClusterNodeName
        {
            get
            {
                return this.ClusterNodeNameField;
            }
            set
            {
                this.ClusterNodeNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DeclaredHost
        {
            get
            {
                return this.DeclaredHostField;
            }
            set
            {
                this.DeclaredHostField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.ClusterHostOwnershipModel DeclaredHostOwner
        {
            get
            {
                return this.DeclaredHostOwnerField;
            }
            set
            {
                this.DeclaredHostOwnerField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Domain
        {
            get
            {
                return this.DomainField;
            }
            set
            {
                this.DomainField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Net.IPAddress[] KnownClusterAddresses
        {
            get
            {
                return this.KnownClusterAddressesField;
            }
            set
            {
                this.KnownClusterAddressesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] KnownClusterNames
        {
            get
            {
                return this.KnownClusterNamesField;
            }
            set
            {
                this.KnownClusterNamesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] KnownClusterNodeNames
        {
            get
            {
                return this.KnownClusterNodeNamesField;
            }
            set
            {
                this.KnownClusterNodeNamesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ViaHost
        {
            get
            {
                return this.ViaHostField;
            }
            set
            {
                this.ViaHostField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.ClusterHostOwnershipModel ViaHostOwner
        {
            get
            {
                return this.ViaHostOwnerField;
            }
            set
            {
                this.ViaHostOwnerField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ClusterHostOwnershipModel", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    public enum ClusterHostOwnershipModel : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Standalone = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Clustered = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CoreClusterInfo", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    public partial class CoreClusterInfo : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string ClusterUniqueIdField;
        
        private System.Net.IPAddress[] CoreClusterIPAddressesField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ClusterUniqueId
        {
            get
            {
                return this.ClusterUniqueIdField;
            }
            set
            {
                this.ClusterUniqueIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Net.IPAddress[] CoreClusterIPAddresses
        {
            get
            {
                return this.CoreClusterIPAddressesField;
            }
            set
            {
                this.CoreClusterIPAddressesField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FullServerJobType", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    public enum FullServerJobType : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FullServerProtection = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BackupRecovery = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FullServerFailback = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FullServerRestoreMirror = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BackupProtection = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SnapshotMirror = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FullServerCutover = 6,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SystemStateCutoverStatus", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    public partial class SystemStateCutoverStatus : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private int PercentCompleteField;
        
        private int StateField;
        
        private bool TargetRebootFailedField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PercentComplete
        {
            get
            {
                return this.PercentCompleteField;
            }
            set
            {
                this.PercentCompleteField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int State
        {
            get
            {
                return this.StateField;
            }
            set
            {
                this.StateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool TargetRebootFailed
        {
            get
            {
                return this.TargetRebootFailedField;
            }
            set
            {
                this.TargetRebootFailedField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ReplicationSetInfo", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    public partial class ReplicationSetInfo : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private long ByteCountField;
        
        private long DirectoryCountField;
        
        private long FileCountField;
        
        private bool IsCalculatingField;
        
        private bool IsCaseSensitiveField;
        
        private System.DateTimeOffset LastCalculatedField;
        
        private System.DateTimeOffset LastSavedField;
        
        private string NameField;
        
        private DoubleTake.Core.Contract.PhysicalRule[] RulesField;
        
        private string UsageTypeField;
        
        private int VolumeCountField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long ByteCount
        {
            get
            {
                return this.ByteCountField;
            }
            set
            {
                this.ByteCountField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long DirectoryCount
        {
            get
            {
                return this.DirectoryCountField;
            }
            set
            {
                this.DirectoryCountField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long FileCount
        {
            get
            {
                return this.FileCountField;
            }
            set
            {
                this.FileCountField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsCalculating
        {
            get
            {
                return this.IsCalculatingField;
            }
            set
            {
                this.IsCalculatingField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsCaseSensitive
        {
            get
            {
                return this.IsCaseSensitiveField;
            }
            set
            {
                this.IsCaseSensitiveField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTimeOffset LastCalculated
        {
            get
            {
                return this.LastCalculatedField;
            }
            set
            {
                this.LastCalculatedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTimeOffset LastSaved
        {
            get
            {
                return this.LastSavedField;
            }
            set
            {
                this.LastSavedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.PhysicalRule[] Rules
        {
            get
            {
                return this.RulesField;
            }
            set
            {
                this.RulesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UsageType
        {
            get
            {
                return this.UsageTypeField;
            }
            set
            {
                this.UsageTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int VolumeCount
        {
            get
            {
                return this.VolumeCountField;
            }
            set
            {
                this.VolumeCountField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LogMessage", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    public partial class LogMessage : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private int IdField;
        
        private int MessageTypeField;
        
        private int ProcessIdField;
        
        private int SequenceField;
        
        private string TextField;
        
        private int ThreadIdField;
        
        private System.DateTime TimestampField;
        
        private System.DateTimeOffset TimestampOffsetField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MessageType
        {
            get
            {
                return this.MessageTypeField;
            }
            set
            {
                this.MessageTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProcessId
        {
            get
            {
                return this.ProcessIdField;
            }
            set
            {
                this.ProcessIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Sequence
        {
            get
            {
                return this.SequenceField;
            }
            set
            {
                this.SequenceField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Text
        {
            get
            {
                return this.TextField;
            }
            set
            {
                this.TextField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ThreadId
        {
            get
            {
                return this.ThreadIdField;
            }
            set
            {
                this.ThreadIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Timestamp
        {
            get
            {
                return this.TimestampField;
            }
            set
            {
                this.TimestampField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTimeOffset TimestampOffset
        {
            get
            {
                return this.TimestampOffsetField;
            }
            set
            {
                this.TimestampOffsetField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DnsDomainDetailsPrototype", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    public partial class DnsDomainDetailsPrototype : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string[] dnsServersField;
        
        private string domainField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] dnsServers
        {
            get
            {
                return this.dnsServersField;
            }
            set
            {
                this.dnsServersField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string domain
        {
            get
            {
                return this.domainField;
            }
            set
            {
                this.domainField = value;
            }
        }
    }
}
namespace DoubleTake.Core.Contract.Monitor
{
    using System.Runtime.Serialization;
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FailoverDataAction", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Monitor")]
    public enum FailoverDataAction : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Apply = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Flush = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Revert = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FailoverScriptConfiguration", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Monitor")]
    public partial class FailoverScriptConfiguration : DoubleTake.Common.ComponentModel.ObservableObject
    {
        
        private string PostFailbackScriptField;
        
        private string PostFailbackScriptArgsField;
        
        private string PostFailoverScriptField;
        
        private string PostFailoverScriptArgsField;
        
        private string PreFailbackScriptField;
        
        private string PreFailbackScriptArgsField;
        
        private bool PreFailbackWaitField;
        
        private string PreFailoverScriptField;
        
        private string PreFailoverScriptArgsField;
        
        private bool PreFailoverWaitField;
        
        private string SourcePostFailbackScriptField;
        
        private string SourcePostFailbackScriptArgsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PostFailbackScript
        {
            get
            {
                return this.PostFailbackScriptField;
            }
            set
            {
                this.PostFailbackScriptField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PostFailbackScriptArgs
        {
            get
            {
                return this.PostFailbackScriptArgsField;
            }
            set
            {
                this.PostFailbackScriptArgsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PostFailoverScript
        {
            get
            {
                return this.PostFailoverScriptField;
            }
            set
            {
                this.PostFailoverScriptField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PostFailoverScriptArgs
        {
            get
            {
                return this.PostFailoverScriptArgsField;
            }
            set
            {
                this.PostFailoverScriptArgsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PreFailbackScript
        {
            get
            {
                return this.PreFailbackScriptField;
            }
            set
            {
                this.PreFailbackScriptField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PreFailbackScriptArgs
        {
            get
            {
                return this.PreFailbackScriptArgsField;
            }
            set
            {
                this.PreFailbackScriptArgsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool PreFailbackWait
        {
            get
            {
                return this.PreFailbackWaitField;
            }
            set
            {
                this.PreFailbackWaitField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PreFailoverScript
        {
            get
            {
                return this.PreFailoverScriptField;
            }
            set
            {
                this.PreFailoverScriptField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PreFailoverScriptArgs
        {
            get
            {
                return this.PreFailoverScriptArgsField;
            }
            set
            {
                this.PreFailoverScriptArgsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool PreFailoverWait
        {
            get
            {
                return this.PreFailoverWaitField;
            }
            set
            {
                this.PreFailoverWaitField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourcePostFailbackScript
        {
            get
            {
                return this.SourcePostFailbackScriptField;
            }
            set
            {
                this.SourcePostFailbackScriptField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourcePostFailbackScriptArgs
        {
            get
            {
                return this.SourcePostFailbackScriptArgsField;
            }
            set
            {
                this.SourcePostFailbackScriptArgsField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MonitorConfiguration", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Monitor")]
    public partial class MonitorConfiguration : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string ADPasswordField;
        
        private string ADUserNameField;
        
        private DoubleTake.Core.Contract.Credentials ActiveDirectoryCredentialsField;
        
        private DoubleTake.Core.Contract.Monitor.ActiveDirectoryFailoverOptions ActiveDirectoryOptionsField;
        
        private DoubleTake.Core.Contract.Monitor.MonitoredAddressConfiguration[] AddressesField;
        
        private DoubleTake.Core.Contract.Monitor.FailoverDataAction DataActionField;
        
        private DoubleTake.Core.Contract.Monitor.FailoverIPAddressesOption FailoverIPAddressesOptionField;
        
        private DoubleTake.Core.Contract.Monitor.FailoverType FailoverTypeField;
        
        private DoubleTake.Core.Contract.Monitor.FailoverItems ItemsToFailoverField;
        
        private int MaxScriptFailuresField;
        
        private string NameField;
        
        private DoubleTake.Core.Contract.Monitor.FailoverProcessingOptions ProcessingOptionsField;
        
        private DoubleTake.Core.Contract.Monitor.FailoverReplaceActions ReplaceActionsField;
        
        private string SSMLogPathField;
        
        private bool SSMManualRebootField;
        
        private DoubleTake.Core.Contract.Monitor.SSMRecoveryType SSMRecoveryTypeField;
        
        private string SSMSourceNicGuidsField;
        
        private string SSMStagingPathField;
        
        private string SSMTargetNicGuidsField;
        
        private string ScriptMonitorEngineField;
        
        private string ScriptMonitorNameField;
        
        private DoubleTake.Core.Contract.Monitor.FailoverScriptConfiguration ScriptsField;
        
        private string SourceAddressField;
        
        private DoubleTake.Core.Contract.Monitor.FailoverTrigger TriggerField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ADPassword
        {
            get
            {
                return this.ADPasswordField;
            }
            set
            {
                this.ADPasswordField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ADUserName
        {
            get
            {
                return this.ADUserNameField;
            }
            set
            {
                this.ADUserNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Credentials ActiveDirectoryCredentials
        {
            get
            {
                return this.ActiveDirectoryCredentialsField;
            }
            set
            {
                this.ActiveDirectoryCredentialsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Monitor.ActiveDirectoryFailoverOptions ActiveDirectoryOptions
        {
            get
            {
                return this.ActiveDirectoryOptionsField;
            }
            set
            {
                this.ActiveDirectoryOptionsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Monitor.MonitoredAddressConfiguration[] Addresses
        {
            get
            {
                return this.AddressesField;
            }
            set
            {
                this.AddressesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Monitor.FailoverDataAction DataAction
        {
            get
            {
                return this.DataActionField;
            }
            set
            {
                this.DataActionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Monitor.FailoverIPAddressesOption FailoverIPAddressesOption
        {
            get
            {
                return this.FailoverIPAddressesOptionField;
            }
            set
            {
                this.FailoverIPAddressesOptionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Monitor.FailoverType FailoverType
        {
            get
            {
                return this.FailoverTypeField;
            }
            set
            {
                this.FailoverTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Monitor.FailoverItems ItemsToFailover
        {
            get
            {
                return this.ItemsToFailoverField;
            }
            set
            {
                this.ItemsToFailoverField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MaxScriptFailures
        {
            get
            {
                return this.MaxScriptFailuresField;
            }
            set
            {
                this.MaxScriptFailuresField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Monitor.FailoverProcessingOptions ProcessingOptions
        {
            get
            {
                return this.ProcessingOptionsField;
            }
            set
            {
                this.ProcessingOptionsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Monitor.FailoverReplaceActions ReplaceActions
        {
            get
            {
                return this.ReplaceActionsField;
            }
            set
            {
                this.ReplaceActionsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SSMLogPath
        {
            get
            {
                return this.SSMLogPathField;
            }
            set
            {
                this.SSMLogPathField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool SSMManualReboot
        {
            get
            {
                return this.SSMManualRebootField;
            }
            set
            {
                this.SSMManualRebootField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Monitor.SSMRecoveryType SSMRecoveryType
        {
            get
            {
                return this.SSMRecoveryTypeField;
            }
            set
            {
                this.SSMRecoveryTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SSMSourceNicGuids
        {
            get
            {
                return this.SSMSourceNicGuidsField;
            }
            set
            {
                this.SSMSourceNicGuidsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SSMStagingPath
        {
            get
            {
                return this.SSMStagingPathField;
            }
            set
            {
                this.SSMStagingPathField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SSMTargetNicGuids
        {
            get
            {
                return this.SSMTargetNicGuidsField;
            }
            set
            {
                this.SSMTargetNicGuidsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ScriptMonitorEngine
        {
            get
            {
                return this.ScriptMonitorEngineField;
            }
            set
            {
                this.ScriptMonitorEngineField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ScriptMonitorName
        {
            get
            {
                return this.ScriptMonitorNameField;
            }
            set
            {
                this.ScriptMonitorNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Monitor.FailoverScriptConfiguration Scripts
        {
            get
            {
                return this.ScriptsField;
            }
            set
            {
                this.ScriptsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceAddress
        {
            get
            {
                return this.SourceAddressField;
            }
            set
            {
                this.SourceAddressField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Monitor.FailoverTrigger Trigger
        {
            get
            {
                return this.TriggerField;
            }
            set
            {
                this.TriggerField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.FlagsAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActiveDirectoryFailoverOptions", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Monitor")]
    public enum ActiveDirectoryFailoverOptions : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FailoverHostName = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FailbackHostName = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MonitoredAddressConfiguration", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Monitor")]
    public partial class MonitoredAddressConfiguration : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string AddressField;
        
        private string MacAddressField;
        
        private short MaxPingAttemptsField;
        
        private string NicNameField;
        
        private System.TimeSpan PingIntervalField;
        
        private DoubleTake.Core.Contract.Monitor.PingMethods PingMethodsField;
        
        private string SubnetMaskField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address
        {
            get
            {
                return this.AddressField;
            }
            set
            {
                this.AddressField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MacAddress
        {
            get
            {
                return this.MacAddressField;
            }
            set
            {
                this.MacAddressField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short MaxPingAttempts
        {
            get
            {
                return this.MaxPingAttemptsField;
            }
            set
            {
                this.MaxPingAttemptsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NicName
        {
            get
            {
                return this.NicNameField;
            }
            set
            {
                this.NicNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan PingInterval
        {
            get
            {
                return this.PingIntervalField;
            }
            set
            {
                this.PingIntervalField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Monitor.PingMethods PingMethods
        {
            get
            {
                return this.PingMethodsField;
            }
            set
            {
                this.PingMethodsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SubnetMask
        {
            get
            {
                return this.SubnetMaskField;
            }
            set
            {
                this.SubnetMaskField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FailoverIPAddressesOption", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Monitor")]
    public enum FailoverIPAddressesOption : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Monitored = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        All = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FailoverType", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Monitor")]
    public enum FailoverType : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FullServer = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Normal = 0,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.FlagsAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Name="FailoverItems", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Monitor")]
    public enum FailoverItems : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        IPAddresses = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Name = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Shares = 4,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.FlagsAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Name="FailoverProcessingOptions", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Monitor")]
    public enum FailoverProcessingOptions : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UserInterventionRequired = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UseShareFile = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.FlagsAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Name="FailoverReplaceActions", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Monitor")]
    public enum FailoverReplaceActions : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Address = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Name = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SSMRecoveryType", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Monitor")]
    public enum SSMRecoveryType : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LAN = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WAN = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FailoverTrigger", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Monitor")]
    public enum FailoverTrigger : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OneAddressFails = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AllAddressesFail = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.FlagsAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Name="PingMethods", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Monitor")]
    public enum PingMethods : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ForceUpdate = 256,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Manual = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Network = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Script = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Service = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="HighAvailabilityState", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Monitor")]
    public enum HighAvailabilityState : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FailbackOccurring = 80,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FailbackRemonitor = 96,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FailbackRequired = 64,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FailoverMonitoring = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FailoverOccurring = 48,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FailoverRequired = 32,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Illegal = -1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MonitoredAddressStatus", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Monitor")]
    public partial class MonitoredAddressStatus : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string AddressField;
        
        private bool AliveField;
        
        private bool FailoverConditionMetField;
        
        private System.TimeSpan RemainingTimeField;
        
        private bool WarningConditionMetField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address
        {
            get
            {
                return this.AddressField;
            }
            set
            {
                this.AddressField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Alive
        {
            get
            {
                return this.AliveField;
            }
            set
            {
                this.AliveField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool FailoverConditionMet
        {
            get
            {
                return this.FailoverConditionMetField;
            }
            set
            {
                this.FailoverConditionMetField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan RemainingTime
        {
            get
            {
                return this.RemainingTimeField;
            }
            set
            {
                this.RemainingTimeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool WarningConditionMet
        {
            get
            {
                return this.WarningConditionMetField;
            }
            set
            {
                this.WarningConditionMetField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.FlagsAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Name="RestoreStates", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Monitor")]
    public enum RestoreStates : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Connected = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Mirroring = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MirrorStopped = 32,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MultiConnect = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OldServer = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OpDropped = 64,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OpRetrying = 128,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Required = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MonitorInfo", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Monitor")]
    public partial class MonitorInfo : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Core.Contract.Monitor.MonitorConfiguration ConfigurationField;
        
        private System.Guid GuidField;
        
        private string NameField;
        
        private DoubleTake.Core.Contract.Monitor.MonitorStatus StatusField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Monitor.MonitorConfiguration Configuration
        {
            get
            {
                return this.ConfigurationField;
            }
            set
            {
                this.ConfigurationField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Guid
        {
            get
            {
                return this.GuidField;
            }
            set
            {
                this.GuidField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Monitor.MonitorStatus Status
        {
            get
            {
                return this.StatusField;
            }
            set
            {
                this.StatusField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MonitorStatus", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Monitor")]
    public partial class MonitorStatus : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Core.Contract.Monitor.MonitoredAddressStatus[] AddressesField;
        
        private string NameField;
        
        private DoubleTake.Core.Contract.Monitor.RestoreStates RestoreStatesField;
        
        private DoubleTake.Core.Contract.Monitor.HighAvailabilityState StatusField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Monitor.MonitoredAddressStatus[] Addresses
        {
            get
            {
                return this.AddressesField;
            }
            set
            {
                this.AddressesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Monitor.RestoreStates RestoreStates
        {
            get
            {
                return this.RestoreStatesField;
            }
            set
            {
                this.RestoreStatesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Monitor.HighAvailabilityState Status
        {
            get
            {
                return this.StatusField;
            }
            set
            {
                this.StatusField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ReMonitorAction", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Monitor")]
    public enum ReMonitorAction : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Remove = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Resume = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MonitorQualificationResult", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Monitor")]
    public partial class MonitorQualificationResult : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Core.Contract.Monitor.MonitorConfiguration DefaultMonitorField;
        
        private bool IsQualifiedField;
        
        private DoubleTake.Core.Contract.Monitor.MonitorableAddressInfo[] MonitorableAddressesField;
        
        private string SourceMachineNameField;
        
        private DoubleTake.Core.Contract.NetworkInterfaceInfo[] TargetInterfacesField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Monitor.MonitorConfiguration DefaultMonitor
        {
            get
            {
                return this.DefaultMonitorField;
            }
            set
            {
                this.DefaultMonitorField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsQualified
        {
            get
            {
                return this.IsQualifiedField;
            }
            set
            {
                this.IsQualifiedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Monitor.MonitorableAddressInfo[] MonitorableAddresses
        {
            get
            {
                return this.MonitorableAddressesField;
            }
            set
            {
                this.MonitorableAddressesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceMachineName
        {
            get
            {
                return this.SourceMachineNameField;
            }
            set
            {
                this.SourceMachineNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.NetworkInterfaceInfo[] TargetInterfaces
        {
            get
            {
                return this.TargetInterfacesField;
            }
            set
            {
                this.TargetInterfacesField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MonitorableAddressInfo", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Monitor")]
    public partial class MonitorableAddressInfo : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Core.Contract.UnicastIPAddressInfo AddressField;
        
        private string InterfaceMacAddressField;
        
        private string[] TargetInterfaceGuidsField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.UnicastIPAddressInfo Address
        {
            get
            {
                return this.AddressField;
            }
            set
            {
                this.AddressField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string InterfaceMacAddress
        {
            get
            {
                return this.InterfaceMacAddressField;
            }
            set
            {
                this.InterfaceMacAddressField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] TargetInterfaceGuids
        {
            get
            {
                return this.TargetInterfaceGuidsField;
            }
            set
            {
                this.TargetInterfaceGuidsField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FailbackOption", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Monitor")]
    public enum FailbackOption : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FailbackOnly = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RemoveMonitor = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ResumeMonitoring = 2,
    }
}
namespace System
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DateTimeOffset", Namespace="http://schemas.datacontract.org/2004/07/System")]
    public partial struct DateTimeOffset : System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.DateTime DateTimeField;
        
        private short OffsetMinutesField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime DateTime
        {
            get
            {
                return this.DateTimeField;
            }
            set
            {
                this.DateTimeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public short OffsetMinutes
        {
            get
            {
                return this.OffsetMinutesField;
            }
            set
            {
                this.OffsetMinutesField = value;
            }
        }
    }
}
namespace DoubleTake.Virtualization.Contract.VcdVapp
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PITSnapshotRecord", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Virtualization.Contract.VcdVap" +
        "p")]
    public partial class PITSnapshotRecord : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Core.Contract.Connection.SnapshotCreationReason reasonField;
        
        private System.Guid snapshotIdField;
        
        private System.DateTimeOffset snapshotTimestampField;
        
        private string vAppMetaDataAsStringField;
        
        private string vAppSnapshotNameField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Connection.SnapshotCreationReason reason
        {
            get
            {
                return this.reasonField;
            }
            set
            {
                this.reasonField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid snapshotId
        {
            get
            {
                return this.snapshotIdField;
            }
            set
            {
                this.snapshotIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTimeOffset snapshotTimestamp
        {
            get
            {
                return this.snapshotTimestampField;
            }
            set
            {
                this.snapshotTimestampField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string vAppMetaDataAsString
        {
            get
            {
                return this.vAppMetaDataAsStringField;
            }
            set
            {
                this.vAppMetaDataAsStringField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string vAppSnapshotName
        {
            get
            {
                return this.vAppSnapshotNameField;
            }
            set
            {
                this.vAppSnapshotNameField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VmdkInfo", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Virtualization.Contract.VcdVap" +
        "p")]
    public partial class VmdkInfo : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private bool doDifferenceMirrorField;
        
        private string sourceVmUuidField;
        
        private string sourceVmdkUuidField;
        
        private string targetChangeIdField;
        
        private int targetDeviceKeyField;
        
        private long targetDiskOffsetField;
        
        private string targetVmUuidField;
        
        private string targetVmdkPathField;
        
        private string targetVmdkUuidField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool doDifferenceMirror
        {
            get
            {
                return this.doDifferenceMirrorField;
            }
            set
            {
                this.doDifferenceMirrorField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string sourceVmUuid
        {
            get
            {
                return this.sourceVmUuidField;
            }
            set
            {
                this.sourceVmUuidField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string sourceVmdkUuid
        {
            get
            {
                return this.sourceVmdkUuidField;
            }
            set
            {
                this.sourceVmdkUuidField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string targetChangeId
        {
            get
            {
                return this.targetChangeIdField;
            }
            set
            {
                this.targetChangeIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int targetDeviceKey
        {
            get
            {
                return this.targetDeviceKeyField;
            }
            set
            {
                this.targetDeviceKeyField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long targetDiskOffset
        {
            get
            {
                return this.targetDiskOffsetField;
            }
            set
            {
                this.targetDiskOffsetField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string targetVmUuid
        {
            get
            {
                return this.targetVmUuidField;
            }
            set
            {
                this.targetVmUuidField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string targetVmdkPath
        {
            get
            {
                return this.targetVmdkPathField;
            }
            set
            {
                this.targetVmdkPathField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string targetVmdkUuid
        {
            get
            {
                return this.targetVmdkUuidField;
            }
            set
            {
                this.targetVmdkUuidField = value;
            }
        }
    }
}
namespace DoubleTake.Monitoring.Contract
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Share", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Monitoring.Contract")]
    public partial class Share : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Monitoring.Contract.Ace[] AcesField;
        
        private System.Nullable<int> MaxUsersField;
        
        private string NameField;
        
        private string PathField;
        
        private int TypeField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Monitoring.Contract.Ace[] Aces
        {
            get
            {
                return this.AcesField;
            }
            set
            {
                this.AcesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> MaxUsers
        {
            get
            {
                return this.MaxUsersField;
            }
            set
            {
                this.MaxUsersField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Path
        {
            get
            {
                return this.PathField;
            }
            set
            {
                this.PathField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Type
        {
            get
            {
                return this.TypeField;
            }
            set
            {
                this.TypeField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Ace", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Monitoring.Contract")]
    public partial class Ace : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private int AccessMaskField;
        
        private DoubleTake.Common.IO.AceFlags AceFlagsField;
        
        private DoubleTake.Common.IO.AceType AceTypeField;
        
        private string DomainField;
        
        private string NameField;
        
        private byte[] SidField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AccessMask
        {
            get
            {
                return this.AccessMaskField;
            }
            set
            {
                this.AccessMaskField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Common.IO.AceFlags AceFlags
        {
            get
            {
                return this.AceFlagsField;
            }
            set
            {
                this.AceFlagsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Common.IO.AceType AceType
        {
            get
            {
                return this.AceTypeField;
            }
            set
            {
                this.AceTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Domain
        {
            get
            {
                return this.DomainField;
            }
            set
            {
                this.DomainField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Sid
        {
            get
            {
                return this.SidField;
            }
            set
            {
                this.SidField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MonitorOptions", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Monitoring.Contract")]
    public partial class MonitorOptions : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.TimeSpan IntervalField;
        
        private int MissesAllowedField;
        
        private string NameField;
        
        private string PersistencePathField;
        
        private System.Nullable<bool> PersistentField;
        
        private DoubleTake.Monitoring.Contract.MonitorActivity RootActivityField;
        
        private System.TimeSpan TimeAllowedField;
        
        private DoubleTake.Monitoring.Contract.TriggerMode TriggerModeField;
        
        private DoubleTake.Monitoring.Contract.MonitorAction TriggeredActionField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan Interval
        {
            get
            {
                return this.IntervalField;
            }
            set
            {
                this.IntervalField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MissesAllowed
        {
            get
            {
                return this.MissesAllowedField;
            }
            set
            {
                this.MissesAllowedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PersistencePath
        {
            get
            {
                return this.PersistencePathField;
            }
            set
            {
                this.PersistencePathField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> Persistent
        {
            get
            {
                return this.PersistentField;
            }
            set
            {
                this.PersistentField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Monitoring.Contract.MonitorActivity RootActivity
        {
            get
            {
                return this.RootActivityField;
            }
            set
            {
                this.RootActivityField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan TimeAllowed
        {
            get
            {
                return this.TimeAllowedField;
            }
            set
            {
                this.TimeAllowedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Monitoring.Contract.TriggerMode TriggerMode
        {
            get
            {
                return this.TriggerModeField;
            }
            set
            {
                this.TriggerModeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Monitoring.Contract.MonitorAction TriggeredAction
        {
            get
            {
                return this.TriggeredActionField;
            }
            set
            {
                this.TriggeredActionField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MonitorActivity", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Monitoring.Contract")]
    public partial class MonitorActivity : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Monitoring.Contract.MonitorAction CorrectiveActionField;
        
        private DoubleTake.Monitoring.Contract.MonitorActivity FailureBranchField;
        
        private string NameField;
        
        private bool NegateQueryResultField;
        
        private DoubleTake.Monitoring.Contract.MonitorQuery QueryField;
        
        private int RepeatCountField;
        
        private DoubleTake.Monitoring.Contract.MonitorActivity SuccessBranchField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Monitoring.Contract.MonitorAction CorrectiveAction
        {
            get
            {
                return this.CorrectiveActionField;
            }
            set
            {
                this.CorrectiveActionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Monitoring.Contract.MonitorActivity FailureBranch
        {
            get
            {
                return this.FailureBranchField;
            }
            set
            {
                this.FailureBranchField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool NegateQueryResult
        {
            get
            {
                return this.NegateQueryResultField;
            }
            set
            {
                this.NegateQueryResultField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Monitoring.Contract.MonitorQuery Query
        {
            get
            {
                return this.QueryField;
            }
            set
            {
                this.QueryField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RepeatCount
        {
            get
            {
                return this.RepeatCountField;
            }
            set
            {
                this.RepeatCountField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Monitoring.Contract.MonitorActivity SuccessBranch
        {
            get
            {
                return this.SuccessBranchField;
            }
            set
            {
                this.SuccessBranchField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MonitorAction", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Monitoring.Contract")]
    public partial class MonitorAction : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Monitoring.Contract.ActionInput InputField;
        
        private string NameField;
        
        private DoubleTake.Core.Contract.Credentials RemoteServerCredentialsField;
        
        private System.Uri RemoteServerUriField;
        
        private System.TimeSpan TimeoutField;
        
        private System.Guid UniqueIdField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Monitoring.Contract.ActionInput Input
        {
            get
            {
                return this.InputField;
            }
            set
            {
                this.InputField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Credentials RemoteServerCredentials
        {
            get
            {
                return this.RemoteServerCredentialsField;
            }
            set
            {
                this.RemoteServerCredentialsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Uri RemoteServerUri
        {
            get
            {
                return this.RemoteServerUriField;
            }
            set
            {
                this.RemoteServerUriField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan Timeout
        {
            get
            {
                return this.TimeoutField;
            }
            set
            {
                this.TimeoutField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid UniqueId
        {
            get
            {
                return this.UniqueIdField;
            }
            set
            {
                this.UniqueIdField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActionInput", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Monitoring.Contract")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.CompositeActionInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.LogActionInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ScriptActionInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ServiceOperationActionInput))]
    public partial class ActionInput : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.Collections.Generic.Dictionary<string, DoubleTake.Core.Contract.Credentials> CredentialsField;
        
        private DoubleTake.Monitoring.Contract.QueryResult QueryResultField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<string, DoubleTake.Core.Contract.Credentials> Credentials
        {
            get
            {
                return this.CredentialsField;
            }
            set
            {
                this.CredentialsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Monitoring.Contract.QueryResult QueryResult
        {
            get
            {
                return this.QueryResultField;
            }
            set
            {
                this.QueryResultField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QueryResult", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Monitoring.Contract")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.CompositeQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.HeartbeatPingQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.IcmpPingQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.PerformanceCounterQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ServiceStatusQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ScriptQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VmHealthQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VmConfigQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VirtualSwitchConfigQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.DtscStatusQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ShareQueryResult))]
    public partial class QueryResult : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Common.Contract.ExceptionDetail ExceptionField;
        
        private DoubleTake.Monitoring.Contract.MonitorResult ResultField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Common.Contract.ExceptionDetail Exception
        {
            get
            {
                return this.ExceptionField;
            }
            set
            {
                this.ExceptionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Monitoring.Contract.MonitorResult Result
        {
            get
            {
                return this.ResultField;
            }
            set
            {
                this.ResultField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MonitorResult", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Monitoring.Contract")]
    public enum MonitorResult : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Success = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Failure = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Indeterminate = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeQueryResult", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Monitoring.Contract")]
    public partial class CompositeQueryResult : DoubleTake.Monitoring.Contract.QueryResult
    {
        
        private DoubleTake.Monitoring.Contract.QueryResult[] QueryResultsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Monitoring.Contract.QueryResult[] QueryResults
        {
            get
            {
                return this.QueryResultsField;
            }
            set
            {
                this.QueryResultsField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="HeartbeatPingQueryResult", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Monitoring.Contract")]
    public partial class HeartbeatPingQueryResult : DoubleTake.Monitoring.Contract.QueryResult
    {
        
        private int EnginePortField;
        
        private string IPAddressField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EnginePort
        {
            get
            {
                return this.EnginePortField;
            }
            set
            {
                this.EnginePortField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IPAddress
        {
            get
            {
                return this.IPAddressField;
            }
            set
            {
                this.IPAddressField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IcmpPingQueryResult", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Monitoring.Contract")]
    public partial class IcmpPingQueryResult : DoubleTake.Monitoring.Contract.QueryResult
    {
        
        private DoubleTake.Common.Contract.ExceptionDetail ExceptionDetailField;
        
        private string NetworkIdField;
        
        private string ReplyAddressField;
        
        private System.TimeSpan RoundtripField;
        
        private string StatusField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Common.Contract.ExceptionDetail ExceptionDetail
        {
            get
            {
                return this.ExceptionDetailField;
            }
            set
            {
                this.ExceptionDetailField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NetworkId
        {
            get
            {
                return this.NetworkIdField;
            }
            set
            {
                this.NetworkIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReplyAddress
        {
            get
            {
                return this.ReplyAddressField;
            }
            set
            {
                this.ReplyAddressField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan Roundtrip
        {
            get
            {
                return this.RoundtripField;
            }
            set
            {
                this.RoundtripField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Status
        {
            get
            {
                return this.StatusField;
            }
            set
            {
                this.StatusField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PerformanceCounterQueryResult", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Monitoring.Contract")]
    public partial class PerformanceCounterQueryResult : DoubleTake.Monitoring.Contract.QueryResult
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceStatusQueryResult", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Monitoring.Contract")]
    public partial class ServiceStatusQueryResult : DoubleTake.Monitoring.Contract.QueryResult
    {
        
        private string ServiceNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServiceName
        {
            get
            {
                return this.ServiceNameField;
            }
            set
            {
                this.ServiceNameField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ScriptQueryResult", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Monitoring.Contract")]
    public partial class ScriptQueryResult : DoubleTake.Monitoring.Contract.QueryResult
    {
        
        private System.Nullable<int> ExitCodeField;
        
        private System.Nullable<System.DateTimeOffset> ExitTimeField;
        
        private System.DateTimeOffset StartTimeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ExitCode
        {
            get
            {
                return this.ExitCodeField;
            }
            set
            {
                this.ExitCodeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTimeOffset> ExitTime
        {
            get
            {
                return this.ExitTimeField;
            }
            set
            {
                this.ExitTimeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTimeOffset StartTime
        {
            get
            {
                return this.StartTimeField;
            }
            set
            {
                this.StartTimeField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VmHealthQueryResult", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Monitoring.Contract")]
    public partial class VmHealthQueryResult : DoubleTake.Monitoring.Contract.QueryResult
    {
        
        private string VmIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VmId
        {
            get
            {
                return this.VmIdField;
            }
            set
            {
                this.VmIdField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VmConfigQueryResult", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Monitoring.Contract")]
    public partial class VmConfigQueryResult : DoubleTake.Monitoring.Contract.QueryResult
    {
        
        private string[] VhdPathField;
        
        private DoubleTake.Virtualization.Contract.VirtualSwitchInfo[] VirtualSwitchInfoCollField;
        
        private string VmIdField;
        
        private string VmSnapshotDataRootField;
        
        private string[] VmSnapshotFileNamesField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] VhdPath
        {
            get
            {
                return this.VhdPathField;
            }
            set
            {
                this.VhdPathField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Virtualization.Contract.VirtualSwitchInfo[] VirtualSwitchInfoColl
        {
            get
            {
                return this.VirtualSwitchInfoCollField;
            }
            set
            {
                this.VirtualSwitchInfoCollField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VmId
        {
            get
            {
                return this.VmIdField;
            }
            set
            {
                this.VmIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VmSnapshotDataRoot
        {
            get
            {
                return this.VmSnapshotDataRootField;
            }
            set
            {
                this.VmSnapshotDataRootField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] VmSnapshotFileNames
        {
            get
            {
                return this.VmSnapshotFileNamesField;
            }
            set
            {
                this.VmSnapshotFileNamesField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VirtualSwitchConfigQueryResult", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Monitoring.Contract")]
    public partial class VirtualSwitchConfigQueryResult : DoubleTake.Monitoring.Contract.QueryResult
    {
        
        private DoubleTake.Virtualization.Contract.VirtualSwitchInfo[] VirtualSwitchInfoCollField;
        
        private string VmIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Virtualization.Contract.VirtualSwitchInfo[] VirtualSwitchInfoColl
        {
            get
            {
                return this.VirtualSwitchInfoCollField;
            }
            set
            {
                this.VirtualSwitchInfoCollField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VmId
        {
            get
            {
                return this.VmIdField;
            }
            set
            {
                this.VmIdField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DtscStatusQueryResult", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Monitoring.Contract")]
    public partial class DtscStatusQueryResult : DoubleTake.Monitoring.Contract.QueryResult
    {
        
        private string OwningNodeField;
        
        private int ResourceStateField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OwningNode
        {
            get
            {
                return this.OwningNodeField;
            }
            set
            {
                this.OwningNodeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ResourceState
        {
            get
            {
                return this.ResourceStateField;
            }
            set
            {
                this.ResourceStateField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ShareQueryResult", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Monitoring.Contract")]
    public partial class ShareQueryResult : DoubleTake.Monitoring.Contract.QueryResult
    {
        
        private DoubleTake.Monitoring.Contract.Share[] SharesField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Monitoring.Contract.Share[] Shares
        {
            get
            {
                return this.SharesField;
            }
            set
            {
                this.SharesField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeActionInput", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Monitoring.Contract")]
    public partial class CompositeActionInput : DoubleTake.Monitoring.Contract.ActionInput
    {
        
        private DoubleTake.Monitoring.Contract.MonitorAction[] ActionsField;
        
        private bool ParallelExecutionField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Monitoring.Contract.MonitorAction[] Actions
        {
            get
            {
                return this.ActionsField;
            }
            set
            {
                this.ActionsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ParallelExecution
        {
            get
            {
                return this.ParallelExecutionField;
            }
            set
            {
                this.ParallelExecutionField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LogActionInput", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Monitoring.Contract")]
    public partial class LogActionInput : DoubleTake.Monitoring.Contract.ActionInput
    {
        
        private string EventTypeStringField;
        
        private string MessageField;
        
        private string[] MessageFormatParametersField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EventTypeString
        {
            get
            {
                return this.EventTypeStringField;
            }
            set
            {
                this.EventTypeStringField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message
        {
            get
            {
                return this.MessageField;
            }
            set
            {
                this.MessageField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] MessageFormatParameters
        {
            get
            {
                return this.MessageFormatParametersField;
            }
            set
            {
                this.MessageFormatParametersField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ScriptActionInput", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Monitoring.Contract")]
    public partial class ScriptActionInput : DoubleTake.Monitoring.Contract.ActionInput
    {
        
        private string ArgumentsField;
        
        private string FileNameField;
        
        private string RunAsField;
        
        private bool WaitForCompletionField;
        
        private System.Nullable<System.TimeSpan> WaitForCompletionTimeoutField;
        
        private string WorkingDirectoryField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Arguments
        {
            get
            {
                return this.ArgumentsField;
            }
            set
            {
                this.ArgumentsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileName
        {
            get
            {
                return this.FileNameField;
            }
            set
            {
                this.FileNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RunAs
        {
            get
            {
                return this.RunAsField;
            }
            set
            {
                this.RunAsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool WaitForCompletion
        {
            get
            {
                return this.WaitForCompletionField;
            }
            set
            {
                this.WaitForCompletionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.TimeSpan> WaitForCompletionTimeout
        {
            get
            {
                return this.WaitForCompletionTimeoutField;
            }
            set
            {
                this.WaitForCompletionTimeoutField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WorkingDirectory
        {
            get
            {
                return this.WorkingDirectoryField;
            }
            set
            {
                this.WorkingDirectoryField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceOperationActionInput", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Monitoring.Contract")]
    public partial class ServiceOperationActionInput : DoubleTake.Monitoring.Contract.ActionInput
    {
        
        private string ServiceNameField;
        
        private DoubleTake.Monitoring.Contract.ServiceOperation ServiceOperationField;
        
        private string[] StartArgumentsField;
        
        private System.Nullable<System.TimeSpan> TimeoutField;
        
        private bool WaitForStatusField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServiceName
        {
            get
            {
                return this.ServiceNameField;
            }
            set
            {
                this.ServiceNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Monitoring.Contract.ServiceOperation ServiceOperation
        {
            get
            {
                return this.ServiceOperationField;
            }
            set
            {
                this.ServiceOperationField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] StartArguments
        {
            get
            {
                return this.StartArgumentsField;
            }
            set
            {
                this.StartArgumentsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.TimeSpan> Timeout
        {
            get
            {
                return this.TimeoutField;
            }
            set
            {
                this.TimeoutField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool WaitForStatus
        {
            get
            {
                return this.WaitForStatusField;
            }
            set
            {
                this.WaitForStatusField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceOperation", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Monitoring.Contract")]
    public enum ServiceOperation : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Start = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Stop = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Pause = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Continue = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MonitorQuery", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Monitoring.Contract")]
    public partial class MonitorQuery : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Monitoring.Contract.QueryInput InputField;
        
        private string NameField;
        
        private DoubleTake.Core.Contract.Credentials RemoteServerCredentialsField;
        
        private System.Uri RemoteServerUriField;
        
        private System.TimeSpan TimeoutField;
        
        private System.Guid UniqueIdField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Monitoring.Contract.QueryInput Input
        {
            get
            {
                return this.InputField;
            }
            set
            {
                this.InputField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Credentials RemoteServerCredentials
        {
            get
            {
                return this.RemoteServerCredentialsField;
            }
            set
            {
                this.RemoteServerCredentialsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Uri RemoteServerUri
        {
            get
            {
                return this.RemoteServerUriField;
            }
            set
            {
                this.RemoteServerUriField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan Timeout
        {
            get
            {
                return this.TimeoutField;
            }
            set
            {
                this.TimeoutField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid UniqueId
        {
            get
            {
                return this.UniqueIdField;
            }
            set
            {
                this.UniqueIdField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QueryInput", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Monitoring.Contract")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.CompositeQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.IcmpPingQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.HeartbeatPingQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.PerformanceCounterQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ScriptQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ServiceStatusQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VmHealthQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VmConfigQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VirtualSwitchConfigQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.DtscStatusQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.DTTargetResourceQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ShareQueryInput))]
    public partial class QueryInput : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.Collections.Generic.Dictionary<string, DoubleTake.Core.Contract.Credentials> CredentialsField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<string, DoubleTake.Core.Contract.Credentials> Credentials
        {
            get
            {
                return this.CredentialsField;
            }
            set
            {
                this.CredentialsField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeQueryInput", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Monitoring.Contract")]
    public partial class CompositeQueryInput : DoubleTake.Monitoring.Contract.QueryInput
    {
        
        private DoubleTake.Monitoring.Contract.CompositeQueryOperation OperationField;
        
        private bool ParallelExecutionField;
        
        private DoubleTake.Monitoring.Contract.MonitorQuery[] QueriesField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Monitoring.Contract.CompositeQueryOperation Operation
        {
            get
            {
                return this.OperationField;
            }
            set
            {
                this.OperationField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ParallelExecution
        {
            get
            {
                return this.ParallelExecutionField;
            }
            set
            {
                this.ParallelExecutionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Monitoring.Contract.MonitorQuery[] Queries
        {
            get
            {
                return this.QueriesField;
            }
            set
            {
                this.QueriesField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeQueryOperation", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Monitoring.Contract")]
    public enum CompositeQueryOperation : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        And = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Or = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IcmpPingQueryInput", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Monitoring.Contract")]
    public partial class IcmpPingQueryInput : DoubleTake.Monitoring.Contract.QueryInput
    {
        
        private string NetworkIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NetworkId
        {
            get
            {
                return this.NetworkIdField;
            }
            set
            {
                this.NetworkIdField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="HeartbeatPingQueryInput", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Monitoring.Contract")]
    public partial class HeartbeatPingQueryInput : DoubleTake.Monitoring.Contract.QueryInput
    {
        
        private System.Nullable<int> EnginePortField;
        
        private string IPAddressField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> EnginePort
        {
            get
            {
                return this.EnginePortField;
            }
            set
            {
                this.EnginePortField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IPAddress
        {
            get
            {
                return this.IPAddressField;
            }
            set
            {
                this.IPAddressField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PerformanceCounterQueryInput", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Monitoring.Contract")]
    public partial class PerformanceCounterQueryInput : DoubleTake.Monitoring.Contract.QueryInput
    {
        
        private string CategoryField;
        
        private DoubleTake.Monitoring.Contract.ComparisonOperation ComparisonOperationField;
        
        private string CounterField;
        
        private float CriteriaField;
        
        private string InstanceField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Category
        {
            get
            {
                return this.CategoryField;
            }
            set
            {
                this.CategoryField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Monitoring.Contract.ComparisonOperation ComparisonOperation
        {
            get
            {
                return this.ComparisonOperationField;
            }
            set
            {
                this.ComparisonOperationField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Counter
        {
            get
            {
                return this.CounterField;
            }
            set
            {
                this.CounterField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Criteria
        {
            get
            {
                return this.CriteriaField;
            }
            set
            {
                this.CriteriaField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Instance
        {
            get
            {
                return this.InstanceField;
            }
            set
            {
                this.InstanceField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ComparisonOperation", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Monitoring.Contract")]
    public enum ComparisonOperation : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Equal = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LessThan = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LessThanOrEqual = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GreatherThan = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GreatherThanOrEqual = 4,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ScriptQueryInput", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Monitoring.Contract")]
    public partial class ScriptQueryInput : DoubleTake.Monitoring.Contract.QueryInput
    {
        
        private string ArgumentsField;
        
        private string FileNameField;
        
        private string RunAsField;
        
        private bool WaitForCompletionField;
        
        private System.Nullable<System.TimeSpan> WaitForCompletionTimeoutField;
        
        private string WorkingDirectoryField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Arguments
        {
            get
            {
                return this.ArgumentsField;
            }
            set
            {
                this.ArgumentsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileName
        {
            get
            {
                return this.FileNameField;
            }
            set
            {
                this.FileNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RunAs
        {
            get
            {
                return this.RunAsField;
            }
            set
            {
                this.RunAsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool WaitForCompletion
        {
            get
            {
                return this.WaitForCompletionField;
            }
            set
            {
                this.WaitForCompletionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.TimeSpan> WaitForCompletionTimeout
        {
            get
            {
                return this.WaitForCompletionTimeoutField;
            }
            set
            {
                this.WaitForCompletionTimeoutField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WorkingDirectory
        {
            get
            {
                return this.WorkingDirectoryField;
            }
            set
            {
                this.WorkingDirectoryField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceStatusQueryInput", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Monitoring.Contract")]
    public partial class ServiceStatusQueryInput : DoubleTake.Monitoring.Contract.QueryInput
    {
        
        private string ServiceNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServiceName
        {
            get
            {
                return this.ServiceNameField;
            }
            set
            {
                this.ServiceNameField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VmHealthQueryInput", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Monitoring.Contract")]
    public partial class VmHealthQueryInput : DoubleTake.Monitoring.Contract.QueryInput
    {
        
        private string VmIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VmId
        {
            get
            {
                return this.VmIdField;
            }
            set
            {
                this.VmIdField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VmConfigQueryInput", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Monitoring.Contract")]
    public partial class VmConfigQueryInput : DoubleTake.Monitoring.Contract.QueryInput
    {
        
        private string[] VhdPathField;
        
        private string VmIdField;
        
        private string externalDataRootField;
        
        private string snapshotDataRootField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] VhdPath
        {
            get
            {
                return this.VhdPathField;
            }
            set
            {
                this.VhdPathField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VmId
        {
            get
            {
                return this.VmIdField;
            }
            set
            {
                this.VmIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string externalDataRoot
        {
            get
            {
                return this.externalDataRootField;
            }
            set
            {
                this.externalDataRootField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string snapshotDataRoot
        {
            get
            {
                return this.snapshotDataRootField;
            }
            set
            {
                this.snapshotDataRootField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VirtualSwitchConfigQueryInput", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Monitoring.Contract")]
    public partial class VirtualSwitchConfigQueryInput : DoubleTake.Monitoring.Contract.QueryInput
    {
        
        private DoubleTake.Virtualization.Contract.VirtualSwitchInfo[] VirtualSwitchInfoCollField;
        
        private string VmIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Virtualization.Contract.VirtualSwitchInfo[] VirtualSwitchInfoColl
        {
            get
            {
                return this.VirtualSwitchInfoCollField;
            }
            set
            {
                this.VirtualSwitchInfoCollField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VmId
        {
            get
            {
                return this.VmIdField;
            }
            set
            {
                this.VmIdField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DtscStatusQueryInput", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Monitoring.Contract")]
    public partial class DtscStatusQueryInput : DoubleTake.Monitoring.Contract.QueryInput
    {
        
        private string replicationSetNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string replicationSetName
        {
            get
            {
                return this.replicationSetNameField;
            }
            set
            {
                this.replicationSetNameField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DTTargetResourceQueryInput", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Monitoring.Contract")]
    public partial class DTTargetResourceQueryInput : DoubleTake.Monitoring.Contract.QueryInput
    {
        
        private string JobIdField;
        
        private string ResourceNameField;
        
        private string TargetHostNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string JobId
        {
            get
            {
                return this.JobIdField;
            }
            set
            {
                this.JobIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ResourceName
        {
            get
            {
                return this.ResourceNameField;
            }
            set
            {
                this.ResourceNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetHostName
        {
            get
            {
                return this.TargetHostNameField;
            }
            set
            {
                this.TargetHostNameField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ShareQueryInput", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Monitoring.Contract")]
    public partial class ShareQueryInput : DoubleTake.Monitoring.Contract.QueryInput
    {
        
        private System.Guid idJobField;
        
        private DoubleTake.Core.Contract.PhysicalRule[] rulesField;
        
        private System.Uri targetField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid idJob
        {
            get
            {
                return this.idJobField;
            }
            set
            {
                this.idJobField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.PhysicalRule[] rules
        {
            get
            {
                return this.rulesField;
            }
            set
            {
                this.rulesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Uri target
        {
            get
            {
                return this.targetField;
            }
            set
            {
                this.targetField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TriggerMode", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Monitoring.Contract")]
    public enum TriggerMode : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MissesAllowed = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TimeAllowed = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ValidationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Monitoring.Contract")]
    public partial class ValidationFault : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Monitoring.Contract.PropertyFault[] PropertyFaultsField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Monitoring.Contract.PropertyFault[] PropertyFaults
        {
            get
            {
                return this.PropertyFaultsField;
            }
            set
            {
                this.PropertyFaultsField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PropertyFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Monitoring.Contract")]
    public partial class PropertyFault : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Common.Contract.ExceptionDetail ExceptionDetailField;
        
        private string PropertyNameField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Common.Contract.ExceptionDetail ExceptionDetail
        {
            get
            {
                return this.ExceptionDetailField;
            }
            set
            {
                this.ExceptionDetailField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PropertyName
        {
            get
            {
                return this.PropertyNameField;
            }
            set
            {
                this.PropertyNameField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MonitorInfo", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Monitoring.Contract")]
    public partial class MonitorInfo : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.Guid IdField;
        
        private DoubleTake.Monitoring.Contract.MonitorOptions OptionsField;
        
        private DoubleTake.Monitoring.Contract.MonitorStatus StatusField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Monitoring.Contract.MonitorOptions Options
        {
            get
            {
                return this.OptionsField;
            }
            set
            {
                this.OptionsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Monitoring.Contract.MonitorStatus Status
        {
            get
            {
                return this.StatusField;
            }
            set
            {
                this.StatusField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MonitorStatus", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Monitoring.Contract")]
    public partial class MonitorStatus : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Monitoring.Contract.ActivityResultNode ActivityResultField;
        
        private bool CanStartField;
        
        private bool CanStopField;
        
        private int MissesField;
        
        private DoubleTake.Monitoring.Contract.MonitorState StateField;
        
        private System.TimeSpan TimeToTriggerField;
        
        private DoubleTake.Monitoring.Contract.ActionResult TriggeredActionResultField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Monitoring.Contract.ActivityResultNode ActivityResult
        {
            get
            {
                return this.ActivityResultField;
            }
            set
            {
                this.ActivityResultField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanStart
        {
            get
            {
                return this.CanStartField;
            }
            set
            {
                this.CanStartField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanStop
        {
            get
            {
                return this.CanStopField;
            }
            set
            {
                this.CanStopField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Misses
        {
            get
            {
                return this.MissesField;
            }
            set
            {
                this.MissesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Monitoring.Contract.MonitorState State
        {
            get
            {
                return this.StateField;
            }
            set
            {
                this.StateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan TimeToTrigger
        {
            get
            {
                return this.TimeToTriggerField;
            }
            set
            {
                this.TimeToTriggerField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Monitoring.Contract.ActionResult TriggeredActionResult
        {
            get
            {
                return this.TriggeredActionResultField;
            }
            set
            {
                this.TriggeredActionResultField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActivityResultNode", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Monitoring.Contract")]
    public partial class ActivityResultNode : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string ActivityNameField;
        
        private DoubleTake.Monitoring.Contract.ActionResult CorrectiveActionResultField;
        
        private DoubleTake.Monitoring.Contract.ActivityResultNode PreviousField;
        
        private DoubleTake.Monitoring.Contract.QueryResult QueryResultField;
        
        private DoubleTake.Monitoring.Contract.MonitorResult ResultField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ActivityName
        {
            get
            {
                return this.ActivityNameField;
            }
            set
            {
                this.ActivityNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Monitoring.Contract.ActionResult CorrectiveActionResult
        {
            get
            {
                return this.CorrectiveActionResultField;
            }
            set
            {
                this.CorrectiveActionResultField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Monitoring.Contract.ActivityResultNode Previous
        {
            get
            {
                return this.PreviousField;
            }
            set
            {
                this.PreviousField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Monitoring.Contract.QueryResult QueryResult
        {
            get
            {
                return this.QueryResultField;
            }
            set
            {
                this.QueryResultField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Monitoring.Contract.MonitorResult Result
        {
            get
            {
                return this.ResultField;
            }
            set
            {
                this.ResultField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActionResult", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Monitoring.Contract")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.CompositeActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ScriptActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ServiceOperationActionResult))]
    public partial class ActionResult : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Common.Contract.ExceptionDetail ExceptionField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Common.Contract.ExceptionDetail Exception
        {
            get
            {
                return this.ExceptionField;
            }
            set
            {
                this.ExceptionField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeActionResult", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Monitoring.Contract")]
    public partial class CompositeActionResult : DoubleTake.Monitoring.Contract.ActionResult
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ScriptActionResult", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Monitoring.Contract")]
    public partial class ScriptActionResult : DoubleTake.Monitoring.Contract.ActionResult
    {
        
        private System.Nullable<int> ExitCodeField;
        
        private System.Nullable<System.DateTimeOffset> ExitTimeField;
        
        private System.DateTimeOffset StartTimeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ExitCode
        {
            get
            {
                return this.ExitCodeField;
            }
            set
            {
                this.ExitCodeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTimeOffset> ExitTime
        {
            get
            {
                return this.ExitTimeField;
            }
            set
            {
                this.ExitTimeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTimeOffset StartTime
        {
            get
            {
                return this.StartTimeField;
            }
            set
            {
                this.StartTimeField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceOperationActionResult", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Monitoring.Contract")]
    public partial class ServiceOperationActionResult : DoubleTake.Monitoring.Contract.ActionResult
    {
        
        private string ServiceStatusField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServiceStatus
        {
            get
            {
                return this.ServiceStatusField;
            }
            set
            {
                this.ServiceStatusField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MonitorState", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Monitoring.Contract")]
    public enum MonitorState : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Initial = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Stopped = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Running = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Missed = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Triggering = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Triggered = 5,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SimpleMonitorInfo", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Monitoring.Contract")]
    public partial class SimpleMonitorInfo : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private bool CanStartField;
        
        private bool CanStopField;
        
        private System.Guid IdField;
        
        private int MissesField;
        
        private string NameField;
        
        private DoubleTake.Monitoring.Contract.MonitorState StateField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanStart
        {
            get
            {
                return this.CanStartField;
            }
            set
            {
                this.CanStartField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanStop
        {
            get
            {
                return this.CanStopField;
            }
            set
            {
                this.CanStopField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Misses
        {
            get
            {
                return this.MissesField;
            }
            set
            {
                this.MissesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Monitoring.Contract.MonitorState State
        {
            get
            {
                return this.StateField;
            }
            set
            {
                this.StateField = value;
            }
        }
    }
}
namespace DoubleTake.Common.IO
{
    using System;
    using System.Runtime.Serialization;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.FlagsAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Name="AceFlags", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.IO")]
    public enum AceFlags : byte
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ObjectInheritAce = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ContainerInheritAce = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NoPropogateInheritAce = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InheritOnlyAce = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InheritedAce = 16,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AceType", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.IO")]
    public enum AceType : byte
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AccessAllowed = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AccessDenied = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Audit = 2,
    }
}
namespace DoubleTake.Virtualization.Contract.VRA
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VRAInternalVirtualNetworkInterfaceInfo", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Virtualization.Contract.VRA")]
    public partial class VRAInternalVirtualNetworkInterfaceInfo : DoubleTake.Virtualization.Contract.VirtualNetworkInterfaceInfo
    {
        
        private int BusNumberField;
        
        private int DeviceNumberField;
        
        private string VRANicIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BusNumber
        {
            get
            {
                return this.BusNumberField;
            }
            set
            {
                this.BusNumberField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DeviceNumber
        {
            get
            {
                return this.DeviceNumberField;
            }
            set
            {
                this.DeviceNumberField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VRANicId
        {
            get
            {
                return this.VRANicIdField;
            }
            set
            {
                this.VRANicIdField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UVRAVolumePersistedState", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Virtualization.Contract.VRA")]
    public partial class UVRAVolumePersistedState : DoubleTake.Virtualization.Contract.VRA.VolumeOptions
    {
        
        private int ApplianceSCSIBusField;
        
        private int ApplianceSCSIUnitNumberField;
        
        private string DeviceIDField;
        
        private int DriveIndexField;
        
        private string DriveNameField;
        
        private string MountPointField;
        
        private string OriginalPathField;
        
        private string PNPDeviceIDField;
        
        private int ReplicaVmSCSIBusField;
        
        private int ReplicaVmSCSIUnitNumberField;
        
        private byte[] ReverseVolumeSignatureField;
        
        private int SourceISCSIBusField;
        
        private int SourceISCSIUnitNumberField;
        
        private string VirtualDiskFilenameField;
        
        private string VolumeNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ApplianceSCSIBus
        {
            get
            {
                return this.ApplianceSCSIBusField;
            }
            set
            {
                this.ApplianceSCSIBusField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ApplianceSCSIUnitNumber
        {
            get
            {
                return this.ApplianceSCSIUnitNumberField;
            }
            set
            {
                this.ApplianceSCSIUnitNumberField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DeviceID
        {
            get
            {
                return this.DeviceIDField;
            }
            set
            {
                this.DeviceIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DriveIndex
        {
            get
            {
                return this.DriveIndexField;
            }
            set
            {
                this.DriveIndexField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DriveName
        {
            get
            {
                return this.DriveNameField;
            }
            set
            {
                this.DriveNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MountPoint
        {
            get
            {
                return this.MountPointField;
            }
            set
            {
                this.MountPointField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OriginalPath
        {
            get
            {
                return this.OriginalPathField;
            }
            set
            {
                this.OriginalPathField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PNPDeviceID
        {
            get
            {
                return this.PNPDeviceIDField;
            }
            set
            {
                this.PNPDeviceIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ReplicaVmSCSIBus
        {
            get
            {
                return this.ReplicaVmSCSIBusField;
            }
            set
            {
                this.ReplicaVmSCSIBusField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ReplicaVmSCSIUnitNumber
        {
            get
            {
                return this.ReplicaVmSCSIUnitNumberField;
            }
            set
            {
                this.ReplicaVmSCSIUnitNumberField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] ReverseVolumeSignature
        {
            get
            {
                return this.ReverseVolumeSignatureField;
            }
            set
            {
                this.ReverseVolumeSignatureField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SourceISCSIBus
        {
            get
            {
                return this.SourceISCSIBusField;
            }
            set
            {
                this.SourceISCSIBusField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SourceISCSIUnitNumber
        {
            get
            {
                return this.SourceISCSIUnitNumberField;
            }
            set
            {
                this.SourceISCSIUnitNumberField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VirtualDiskFilename
        {
            get
            {
                return this.VirtualDiskFilenameField;
            }
            set
            {
                this.VirtualDiskFilenameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VolumeName
        {
            get
            {
                return this.VolumeNameField;
            }
            set
            {
                this.VolumeNameField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VolumeOptions", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Virtualization.Contract.VRA")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.PhysicalVolume))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.UVRAVolumePersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VRAVolumePersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.LogicalVolume))]
    public partial class VolumeOptions : DoubleTake.Core.Contract.Volume
    {
        
        private long DesiredSizeField;
        
        private string DiskControllerTypeField;
        
        private string DiskProvisioningTypeField;
        
        private string PreexistingDiskPathField;
        
        private string VirtualDiskPathField;
        
        private byte[] VolumeSignatureField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long DesiredSize
        {
            get
            {
                return this.DesiredSizeField;
            }
            set
            {
                this.DesiredSizeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DiskControllerType
        {
            get
            {
                return this.DiskControllerTypeField;
            }
            set
            {
                this.DiskControllerTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DiskProvisioningType
        {
            get
            {
                return this.DiskProvisioningTypeField;
            }
            set
            {
                this.DiskProvisioningTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PreexistingDiskPath
        {
            get
            {
                return this.PreexistingDiskPathField;
            }
            set
            {
                this.PreexistingDiskPathField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VirtualDiskPath
        {
            get
            {
                return this.VirtualDiskPathField;
            }
            set
            {
                this.VirtualDiskPathField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] VolumeSignature
        {
            get
            {
                return this.VolumeSignatureField;
            }
            set
            {
                this.VolumeSignatureField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VRAVolumePersistedState", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Virtualization.Contract.VRA")]
    public partial class VRAVolumePersistedState : DoubleTake.Virtualization.Contract.VRA.VolumeOptions
    {
        
        private int ApplianceSCSIBusField;
        
        private int ApplianceSCSIUnitNumberField;
        
        private string DeviceIDField;
        
        private int DriveIndexField;
        
        private string DriveNameField;
        
        private bool IsGptField;
        
        private string MountPointField;
        
        private string OriginalPathField;
        
        private string PNPDeviceIDField;
        
        private int ReplicaVmSCSIBusField;
        
        private int ReplicaVmSCSIUnitNumberField;
        
        private byte[] ReverseVolumeSignatureField;
        
        private string VirtualDiskFilenameField;
        
        private string VolumeNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ApplianceSCSIBus
        {
            get
            {
                return this.ApplianceSCSIBusField;
            }
            set
            {
                this.ApplianceSCSIBusField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ApplianceSCSIUnitNumber
        {
            get
            {
                return this.ApplianceSCSIUnitNumberField;
            }
            set
            {
                this.ApplianceSCSIUnitNumberField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DeviceID
        {
            get
            {
                return this.DeviceIDField;
            }
            set
            {
                this.DeviceIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DriveIndex
        {
            get
            {
                return this.DriveIndexField;
            }
            set
            {
                this.DriveIndexField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DriveName
        {
            get
            {
                return this.DriveNameField;
            }
            set
            {
                this.DriveNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsGpt
        {
            get
            {
                return this.IsGptField;
            }
            set
            {
                this.IsGptField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MountPoint
        {
            get
            {
                return this.MountPointField;
            }
            set
            {
                this.MountPointField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OriginalPath
        {
            get
            {
                return this.OriginalPathField;
            }
            set
            {
                this.OriginalPathField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PNPDeviceID
        {
            get
            {
                return this.PNPDeviceIDField;
            }
            set
            {
                this.PNPDeviceIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ReplicaVmSCSIBus
        {
            get
            {
                return this.ReplicaVmSCSIBusField;
            }
            set
            {
                this.ReplicaVmSCSIBusField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ReplicaVmSCSIUnitNumber
        {
            get
            {
                return this.ReplicaVmSCSIUnitNumberField;
            }
            set
            {
                this.ReplicaVmSCSIUnitNumberField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] ReverseVolumeSignature
        {
            get
            {
                return this.ReverseVolumeSignatureField;
            }
            set
            {
                this.ReverseVolumeSignatureField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VirtualDiskFilename
        {
            get
            {
                return this.VirtualDiskFilenameField;
            }
            set
            {
                this.VirtualDiskFilenameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VolumeName
        {
            get
            {
                return this.VolumeNameField;
            }
            set
            {
                this.VolumeNameField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="V2VVirtualMachine", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Virtualization.Contract.VRA")]
    public partial class V2VVirtualMachine : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string ActivationCodeField;
        
        private System.Guid BiosGuidField;
        
        private int CPUsField;
        
        private DoubleTake.Core.Contract.Credentials CredentialsField;
        
        private string DiskFormatField;
        
        private string DisplayNameField;
        
        private string GuestOSField;
        
        private System.Guid GuidField;
        
        private long MemoryField;
        
        private string NetworkIdField;
        
        private DoubleTake.Virtualization.Contract.VirtualNetworkInterfaceInfo[] NetworkInterfaceInfoField;
        
        private string PathField;
        
        private string SnapshotPathField;
        
        private string SystemDirectoryField;
        
        private string TargetPathField;
        
        private DoubleTake.Virtualization.Contract.VRA.VolumeOptions[] VolumesField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ActivationCode
        {
            get
            {
                return this.ActivationCodeField;
            }
            set
            {
                this.ActivationCodeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid BiosGuid
        {
            get
            {
                return this.BiosGuidField;
            }
            set
            {
                this.BiosGuidField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CPUs
        {
            get
            {
                return this.CPUsField;
            }
            set
            {
                this.CPUsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Credentials Credentials
        {
            get
            {
                return this.CredentialsField;
            }
            set
            {
                this.CredentialsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DiskFormat
        {
            get
            {
                return this.DiskFormatField;
            }
            set
            {
                this.DiskFormatField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DisplayName
        {
            get
            {
                return this.DisplayNameField;
            }
            set
            {
                this.DisplayNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GuestOS
        {
            get
            {
                return this.GuestOSField;
            }
            set
            {
                this.GuestOSField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Guid
        {
            get
            {
                return this.GuidField;
            }
            set
            {
                this.GuidField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Memory
        {
            get
            {
                return this.MemoryField;
            }
            set
            {
                this.MemoryField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NetworkId
        {
            get
            {
                return this.NetworkIdField;
            }
            set
            {
                this.NetworkIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Virtualization.Contract.VirtualNetworkInterfaceInfo[] NetworkInterfaceInfo
        {
            get
            {
                return this.NetworkInterfaceInfoField;
            }
            set
            {
                this.NetworkInterfaceInfoField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Path
        {
            get
            {
                return this.PathField;
            }
            set
            {
                this.PathField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SnapshotPath
        {
            get
            {
                return this.SnapshotPathField;
            }
            set
            {
                this.SnapshotPathField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SystemDirectory
        {
            get
            {
                return this.SystemDirectoryField;
            }
            set
            {
                this.SystemDirectoryField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetPath
        {
            get
            {
                return this.TargetPathField;
            }
            set
            {
                this.TargetPathField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Virtualization.Contract.VRA.VolumeOptions[] Volumes
        {
            get
            {
                return this.VolumesField;
            }
            set
            {
                this.VolumesField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ReplicaVMInfo", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Virtualization.Contract.VRA")]
    public partial class ReplicaVMInfo : DoubleTake.Virtualization.Contract.VMInfo
    {
        
        private int CpusField;
        
        private long MemoryField;
        
        private string OperatingSystemField;
        
        private string PrestageFolderField;
        
        private string RunOnceAtStartupField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Cpus
        {
            get
            {
                return this.CpusField;
            }
            set
            {
                this.CpusField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Memory
        {
            get
            {
                return this.MemoryField;
            }
            set
            {
                this.MemoryField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OperatingSystem
        {
            get
            {
                return this.OperatingSystemField;
            }
            set
            {
                this.OperatingSystemField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PrestageFolder
        {
            get
            {
                return this.PrestageFolderField;
            }
            set
            {
                this.PrestageFolderField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RunOnceAtStartup
        {
            get
            {
                return this.RunOnceAtStartupField;
            }
            set
            {
                this.RunOnceAtStartupField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VRAWorkloadCustomizationOptions", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Virtualization.Contract.VRA")]
    public partial class VRAWorkloadCustomizationOptions : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private bool NoReplicationField;
        
        private bool PowerupReplicaAfterFailoverField;
        
        private bool ShouldShutdownSourceField;
        
        private bool UseWin32Field;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool NoReplication
        {
            get
            {
                return this.NoReplicationField;
            }
            set
            {
                this.NoReplicationField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool PowerupReplicaAfterFailover
        {
            get
            {
                return this.PowerupReplicaAfterFailoverField;
            }
            set
            {
                this.PowerupReplicaAfterFailoverField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ShouldShutdownSource
        {
            get
            {
                return this.ShouldShutdownSourceField;
            }
            set
            {
                this.ShouldShutdownSourceField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool UseWin32
        {
            get
            {
                return this.UseWin32Field;
            }
            set
            {
                this.UseWin32Field = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActivationCodeInfo", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Virtualization.Contract.VRA")]
    public partial class ActivationCodeInfo : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string ActivationCodeField;
        
        private int DaysToExpireField;
        
        private bool IsEvalField;
        
        private bool IsNodeLockedField;
        
        private bool IsValidField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ActivationCode
        {
            get
            {
                return this.ActivationCodeField;
            }
            set
            {
                this.ActivationCodeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DaysToExpire
        {
            get
            {
                return this.DaysToExpireField;
            }
            set
            {
                this.DaysToExpireField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsEval
        {
            get
            {
                return this.IsEvalField;
            }
            set
            {
                this.IsEvalField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsNodeLocked
        {
            get
            {
                return this.IsNodeLockedField;
            }
            set
            {
                this.IsNodeLockedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsValid
        {
            get
            {
                return this.IsValidField;
            }
            set
            {
                this.IsValidField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ESXInfo", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Virtualization.Contract.VRA")]
    public partial class ESXInfo : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string FullNameField;
        
        private bool HasUserPermissionsField;
        
        private int UserRoleIDField;
        
        private string VersionField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FullName
        {
            get
            {
                return this.FullNameField;
            }
            set
            {
                this.FullNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasUserPermissions
        {
            get
            {
                return this.HasUserPermissionsField;
            }
            set
            {
                this.HasUserPermissionsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserRoleID
        {
            get
            {
                return this.UserRoleIDField;
            }
            set
            {
                this.UserRoleIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Version
        {
            get
            {
                return this.VersionField;
            }
            set
            {
                this.VersionField = value;
            }
        }
    }
}
namespace DoubleTake.Core.Contract.UVRA
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LvmOptions", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.UVRA")]
    public partial class LvmOptions : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Core.Contract.UVRA.VolumeGroup[] VolumeGroupField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.UVRA.VolumeGroup[] VolumeGroup
        {
            get
            {
                return this.VolumeGroupField;
            }
            set
            {
                this.VolumeGroupField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VolumeGroup", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.UVRA")]
    public partial class VolumeGroup : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Core.Contract.UVRA.LogicalVolume[] LogicalVolumeField;
        
        private long MaxPhysicalVolumeSizeField;
        
        private string NameField;
        
        private DoubleTake.Core.Contract.UVRA.PhysicalVolume[] PhysicalVolumeField;
        
        private string[] PreexistingDisksPathField;
        
        private long SourceVolumeGroupSizeField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.UVRA.LogicalVolume[] LogicalVolume
        {
            get
            {
                return this.LogicalVolumeField;
            }
            set
            {
                this.LogicalVolumeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long MaxPhysicalVolumeSize
        {
            get
            {
                return this.MaxPhysicalVolumeSizeField;
            }
            set
            {
                this.MaxPhysicalVolumeSizeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.UVRA.PhysicalVolume[] PhysicalVolume
        {
            get
            {
                return this.PhysicalVolumeField;
            }
            set
            {
                this.PhysicalVolumeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] PreexistingDisksPath
        {
            get
            {
                return this.PreexistingDisksPathField;
            }
            set
            {
                this.PreexistingDisksPathField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long SourceVolumeGroupSize
        {
            get
            {
                return this.SourceVolumeGroupSizeField;
            }
            set
            {
                this.SourceVolumeGroupSizeField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LogicalVolume", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.UVRA")]
    public partial class LogicalVolume : DoubleTake.Virtualization.Contract.VRA.VolumeOptions
    {
        
        private string LogicalVolumeNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LogicalVolumeName
        {
            get
            {
                return this.LogicalVolumeNameField;
            }
            set
            {
                this.LogicalVolumeNameField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PhysicalVolume", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.UVRA")]
    public partial class PhysicalVolume : DoubleTake.Virtualization.Contract.VRA.VolumeOptions
    {
    }
}
namespace DoubleTake.Jobs.Contract.Scheduling
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BandwidthOptions", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Jobs.Contract.Scheduling")]
    public partial class BandwidthOptions : DoubleTake.Common.ComponentModel.ObservableObject
    {
        
        private DoubleTake.Jobs.Contract.Scheduling.BandwidthEntry[] EntriesField;
        
        private long LimitField;
        
        private DoubleTake.Core.Contract.Connection.BandwidthScheduleMode ModeField;
        
        private DoubleTake.Core.Contract.Connection.BandwidthSpecification[] SpecificationsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.Scheduling.BandwidthEntry[] Entries
        {
            get
            {
                return this.EntriesField;
            }
            set
            {
                this.EntriesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Limit
        {
            get
            {
                return this.LimitField;
            }
            set
            {
                this.LimitField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Connection.BandwidthScheduleMode Mode
        {
            get
            {
                return this.ModeField;
            }
            set
            {
                this.ModeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Connection.BandwidthSpecification[] Specifications
        {
            get
            {
                return this.SpecificationsField;
            }
            set
            {
                this.SpecificationsField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BandwidthEntry", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Jobs.Contract.Scheduling")]
    public partial class BandwidthEntry : DoubleTake.Common.ComponentModel.ObservableObject
    {
        
        private DoubleTake.Core.Contract.Connection.Weekdays DaysOfWeekField;
        
        private System.DateTime EndTimeField;
        
        private bool IsUnlimitedField;
        
        private long LimitField;
        
        private string NameField;
        
        private System.DateTime StartTimeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Connection.Weekdays DaysOfWeek
        {
            get
            {
                return this.DaysOfWeekField;
            }
            set
            {
                this.DaysOfWeekField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EndTime
        {
            get
            {
                return this.EndTimeField;
            }
            set
            {
                this.EndTimeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsUnlimited
        {
            get
            {
                return this.IsUnlimitedField;
            }
            set
            {
                this.IsUnlimitedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Limit
        {
            get
            {
                return this.LimitField;
            }
            set
            {
                this.LimitField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StartTime
        {
            get
            {
                return this.StartTimeField;
            }
            set
            {
                this.StartTimeField = value;
            }
        }
    }
}
namespace DoubleTake.Common.Contract
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Workload", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    public partial class Workload : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string[] LogicalRulesField;
        
        private DoubleTake.Core.Contract.PhysicalRule[] PhysicalRulesField;
        
        private string RecoveryImageDataPathField;
        
        private System.Guid RecoveryImageIdField;
        
        private System.Guid RecoverySnapshotSetIdField;
        
        private string WorkloadTypeNameField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] LogicalRules
        {
            get
            {
                return this.LogicalRulesField;
            }
            set
            {
                this.LogicalRulesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.PhysicalRule[] PhysicalRules
        {
            get
            {
                return this.PhysicalRulesField;
            }
            set
            {
                this.PhysicalRulesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RecoveryImageDataPath
        {
            get
            {
                return this.RecoveryImageDataPathField;
            }
            set
            {
                this.RecoveryImageDataPathField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid RecoveryImageId
        {
            get
            {
                return this.RecoveryImageIdField;
            }
            set
            {
                this.RecoveryImageIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid RecoverySnapshotSetId
        {
            get
            {
                return this.RecoverySnapshotSetIdField;
            }
            set
            {
                this.RecoverySnapshotSetIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WorkloadTypeName
        {
            get
            {
                return this.WorkloadTypeNameField;
            }
            set
            {
                this.WorkloadTypeNameField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Alternate.TupleOfstringstring[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Alternate.TupleOfstringstring))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.ComponentModel.ObservableObject))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.CollectorInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.CollectorConfigurationInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.PropertyBag))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.NameValuePair[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.NameValuePair))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.PushInstallationOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.PushInstallToken))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.PushInstallStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.InstallStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.ServiceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.ServiceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.ServicesStartMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.Workload))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.WorkloadType[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.WorkloadType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.WorkloadSupportSummary))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.Workload[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.LogicalItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.LogicalItem[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.ChangedItems))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.DashboardEngineOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.EmailNotificationOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.SmtpConnectionSecurity))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.InvalidEmailAddressFormatFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.ExceptionDetail))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Install.InstallStep))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.IO.AceFlags))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.IO.AceType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Tasks.ActivityToken))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Tasks.ActivityStatusEntry))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Tasks.ActivityCompletionStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Tasks.ActivityStatusEntry[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Communication.ServiceConnectionParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Communication.ServiceConnectionParameters[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotCreationReason))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TargetStates))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.MirrorParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.MirrorComparisonCriteria))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.MirrorOperationOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthLimit))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthScheduleMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotEntry[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotEntry))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotQuality))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotAge))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.MirrorState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ReplicationState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ClusterResourceState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TransmissionMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.QueueTaskParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TaskParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.Weekdays))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthSpecification[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthSpecification))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthSpecificationType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionStartParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.CompressionLevel))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ArchiveSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ScheduleItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ArchiveCriteria))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthScheduleEntry))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthScheduleEntry[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.OrphansSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TransmissionSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TimeWindow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.VerifySchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ScriptPoint[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ScriptPoint))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ScriptExecutionMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ScriptPointType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TargetStateInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.CompressionLevel[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.RestoreParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ArchiveRestoreOption))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.RestoreOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionConfiguration))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionStatistics))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.QueueState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ControlOperation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TargetStateInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionQualificationResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionQualificationFailures))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobCredentials))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobSourceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobSourceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverDataAction))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorConfiguration))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.ActiveDirectoryFailoverOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitoredAddressConfiguration[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitoredAddressConfiguration))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.PingMethods))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverIPAddressesOption))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverItems))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverProcessingOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverReplaceActions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.SSMRecoveryType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverScriptConfiguration))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverTrigger))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.HighAvailabilityState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitoredAddressStatus[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitoredAddressStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.RestoreStates))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.ReMonitorAction))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorQualificationResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorableAddressInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorableAddressInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorConfiguration[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailbackOption))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TargetServiceStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.DnsServerDetail[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.DnsServerDetail))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.IPAddressMap[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.IPAddressMap))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.FullServerNicMappings[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.FullServerNicMappings))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TargetServicesToStop[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TargetServicesToStop))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TestDnsResult[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TestDnsResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TestDnsDetails[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TestDnsDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotActivityStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.Snapshot))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotCreateOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotBuildingBlockType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotCreationResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.Snapshot[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotListOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotRevertOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotDeleteOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotMountOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.LvmOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.VolumeGroup[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.VolumeGroup))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.LogicalVolume[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.LogicalVolume))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.PhysicalVolume[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.PhysicalVolume))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.AccessLevel))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CollectedServer[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CollectedServer))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Credentials))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CollectedServerStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CredentialsType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CollectorDatabaseStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ControlledServerInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ControlledServerInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ProductInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ActivationStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ActivationCode[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ActivationCode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ActivationAttribute[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ActivationAttribute))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.LicenseType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ProductVersion))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ServerInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Volume))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ProtectableItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.FileSystemAttributes))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.SaturationLevel))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.FileItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.FileSystemItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.DirectoryItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.NetworkInterfaceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.NetworkInterfaceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UnicastIPAddressInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UnicastIPAddressInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.OperatingSystemInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.OperatingSystemArchitecture))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.OperatingSystemProductType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.OperatingSystemVersion))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Volume[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ControlledServerInfoSimple[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ControlledServerInfoSimple))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CoreFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.DesktopInteractionMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageDeleteInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.VhdDeleteActionType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.MachineInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PathTransformation[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PathTransformation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageVhdInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageVhdInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.EngineJobType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ReplicationSetUsageType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PhysicalRule[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PhysicalRule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.InclusionMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.RecursionMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ProtectableItem[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageEditedProperties))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageDeleteInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ShutdownOption))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PathBlockingEntry[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PathBlockingEntry))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PathBlockingMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CloudBillingInformation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ClusterAddressInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ClusterHostOwnershipModel))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CoreClusterInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.FullServerJobType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.SystemStateVerificationResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.SystemStateVerificationStep[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.SystemStateVerificationStep))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.SystemStateCutoverStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ReplicationSetInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.WinServiceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.WinServiceStartMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Property[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Property))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.NamedSetting[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.NamedSetting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.MultiStringSetting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.StringSetting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.IntegerSetting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.BooleanSetting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.LogMessage[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.LogMessage))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.EmailNotificationSettings))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.EmailNotificationCategories))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.EmailNotificationTestParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.DnsDomainDetailsPrototype[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.DnsDomainDetailsPrototype))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract1.ClusteredResourceState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract1.RebootAction))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract1.DnsLockInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.ClusterGroupInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.ClusterGroupInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.ClusterResourceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.ClusterResourceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.ClusteredVirtualMachinesInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.ClusteredVirtualMachinesInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.VirtualMachine[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.VirtualMachine))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.StorageInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.StorageInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.VirtualMachineResourceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Diagnostics.Contract.DtInfoCollectionStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Diagnostics.Contract.DtInfoCollectionProgress))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Discovery.Contract.DynamicServiceEndpoint[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Discovery.Contract.DynamicServiceEndpoint))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Dtmu.Contract.UsageData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Dtmu.Contract.JobUsageData[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Dtmu.Contract.JobUsageData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Dtmu.Contract.DtmuJobStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Dtmu.Contract.DtmuActivationStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Applications.ApplicationsPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Applications.SqlDatabasePersistedInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Applications.SqlDatabasePersistedInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Diagnostics.DiagnosticsPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DTHV.DTHVPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FilesAndFolders.FilesAndFoldersPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FullServer.FullServerPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FullServer.FullServerJobDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ImageBased.ImageProtectionPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ImageBased.ImageRecoveryPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ImageBased.ImageProtectionJobDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ImageBased.ImageRecoveryJobDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Scheduling.BandwidthOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Scheduling.BandwidthEntry[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Scheduling.BandwidthEntry))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.UVRA.UVRAPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.VcdVapp.VcdVappPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Virtualization.DTAVPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.VRA.VRAPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreConnectionDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.EngineConnectionInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.EngineConnectionInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Feature[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Feature))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreConnectionPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ClusterPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ResourceAndPassiveNodes[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ResourceAndPassiveNodes))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DeleteOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreMonitorPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FailoverOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FailoverMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FailoverType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Health))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ExtendedLowLevelState[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ExtendedLowLevelState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FailoverPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.AddressPersistedState[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.AddressPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ApplicationOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DnsRecordLockOptions[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DnsRecordLockOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ServiceInformation[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ServiceInformation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ClusterOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreConnectionOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreMonitorOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DTHVOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DNSOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DnsDomainDetails[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DnsDomainDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DTAVOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FullServerFailoverOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ImageProtectionOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ImageRecoveryOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.MonitoringOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ServiceMonitoringOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.SimpleFailoverMonitorOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.SystemStateOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.TargetServicesOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.UnmanagedConnectionOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.VRAOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.VcdVappOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobStatistics))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreMonitorDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobAction[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobAction))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ActionStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CreateOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobCredentials))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ClusterFilesAndFoldersQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.TargetFileServerQualificationResults[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.TargetFileServerQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DTHVQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DTAVQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.VRAQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.V2VQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.RecommendedJobOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.VerificationStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.RecommendedFailoverOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FailbackOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.RecommendedFailbackOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.RestoreStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.RestoreOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.RecommendedRestoreOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.SourceQualificationFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract1.CutoverDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract1.VerificationStep[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract1.VerificationStep))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract1.VerificationTaskStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract1.FixJobOptionsTaskStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.Share[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.Share))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.Ace[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.Ace))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorActivity))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorAction))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ActionInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.QueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.CompositeQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.QueryResult[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.HeartbeatPingQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.IcmpPingQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.PerformanceCounterQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ServiceStatusQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ScriptQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VmHealthQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VmConfigQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VirtualSwitchConfigQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.DtscStatusQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ShareQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.CompositeActionInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorAction[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.LogActionInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ScriptActionInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ServiceOperationActionInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ServiceOperation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorQuery))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.QueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.CompositeQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.CompositeQueryOperation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorQuery[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.IcmpPingQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.HeartbeatPingQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.PerformanceCounterQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ComparisonOperation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ScriptQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ServiceStatusQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VmHealthQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VmConfigQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VirtualSwitchConfigQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.DtscStatusQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.DTTargetResourceQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ShareQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.TriggerMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ValidationFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.PropertyFault[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.PropertyFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ActivityResultNode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.CompositeActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ScriptActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ServiceOperationActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.SimpleMonitorInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.SimpleMonitorInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.VmdkDatastoreMapping[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.VmdkDatastoreMapping))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVmdkInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVmQualificationResults[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVmQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVimServer[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVimServer))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavReplicationAppliance[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavReplicationAppliance))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.AddVimServerAndRAFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DTAVRequestFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavHostAndCluster[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavHostAndCluster))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVmInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVmInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVmdkInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavGuestInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavGuestInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.LicenseData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.GracePeriodReason))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVimInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.EmailNotificationInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.EmailNotificationInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTHV.VHDMapping[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTHV.VHDMapping))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTHV.VLanMapping[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTHV.VLanMapping))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTHV.VMSystemState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VcdVapp.PITSnapshotRecord[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VcdVapp.PITSnapshotRecord))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VcdVapp.VmdkInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VcdVapp.VmdkInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VolumeOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VRAInternalVirtualNetworkInterfaceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VRAInternalVirtualNetworkInterfaceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.UVRAVolumePersistedState[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.UVRAVolumePersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VRAVolumePersistedState[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VRAVolumePersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.V2VVirtualMachine[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.V2VVirtualMachine))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VolumeOptions[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.ReplicaVMInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VRAWorkloadCustomizationOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.ActivationCodeInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.ESXInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.JobState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.ErrorInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.ErrorInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualNetworkInterfaceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualizationConnectionInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VMInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualNetworkInterfaceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.SwitchPortInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualSwitchMapping[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualSwitchMapping))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualSwitchInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VMQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.NetworkAdapterInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.NetworkAdapterInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VHDInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VHDInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualSwitchInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.ServerQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VolumeQualificationResults[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VolumeQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VMInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.LicenseQuantity))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VimDatastoreItem[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VimDatastoreItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DtServiceException_Fault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.HyperVmNotFoundException_Fault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(string[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(bool[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(short[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(int[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(long[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(float[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(double[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.DateTime[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.TimeSpan[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Guid[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Uri[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(byte[][]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, System.Guid>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, System.Uri>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, DoubleTake.Core.Contract.Credentials>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ushort[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.DtProduct[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.DtProduct))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.SplaManagementFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.SplaManagementFaultCode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.UsageReport))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.JobInventory[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.JobInventory))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.JobStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.ActivationStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.LicenseResponse))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.Fault[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.Fault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.IO.DriveType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Net.Sockets.AddressFamily))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Net.NetworkCredential))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Net.IPAddress[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Net.IPAddress))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Security.SecureString))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.DateTimeOffset))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.DateTimeOffset[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(www.doubletake.com.Common.Contract.LogMessage[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(www.doubletake.com.Common.Contract.LogMessage))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(www.doubletake.com.Common.Contract.EventLogEntryData2[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(www.doubletake.com.Common.Contract.EventLogEntryData2))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(www.doubletake.com.Jobs.Contract.EngineControlStatus[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(www.doubletake.com.Jobs.Contract.EngineControlStatus))]
    public partial class CommonFault : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private object InnerFaultField;
        
        private string MessageField;
        
        private string NameField;
        
        private string StackTraceField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object InnerFault
        {
            get
            {
                return this.InnerFaultField;
            }
            set
            {
                this.InnerFaultField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message
        {
            get
            {
                return this.MessageField;
            }
            set
            {
                this.MessageField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StackTrace
        {
            get
            {
                return this.StackTraceField;
            }
            set
            {
                this.StackTraceField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Alternate.TupleOfstringstring[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Alternate.TupleOfstringstring))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.ComponentModel.ObservableObject))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.CommonFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.CollectorInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.CollectorConfigurationInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.PropertyBag))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.NameValuePair[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.NameValuePair))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.PushInstallationOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.PushInstallToken))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.PushInstallStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.InstallStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.ServiceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.ServiceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.ServicesStartMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.Workload))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.WorkloadType[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.WorkloadType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.WorkloadSupportSummary))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.Workload[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.LogicalItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.LogicalItem[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.ChangedItems))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.DashboardEngineOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.EmailNotificationOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.SmtpConnectionSecurity))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.InvalidEmailAddressFormatFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.ExceptionDetail))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Install.InstallStep))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.IO.AceFlags))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.IO.AceType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Tasks.ActivityToken))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Tasks.ActivityStatusEntry))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Tasks.ActivityCompletionStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Tasks.ActivityStatusEntry[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Communication.ServiceConnectionParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Communication.ServiceConnectionParameters[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotCreationReason))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TargetStates))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.MirrorParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.MirrorComparisonCriteria))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.MirrorOperationOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthLimit))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthScheduleMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotEntry[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotEntry))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotQuality))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotAge))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.MirrorState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ReplicationState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ClusterResourceState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TransmissionMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.QueueTaskParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TaskParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.Weekdays))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthSpecification[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthSpecification))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthSpecificationType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionStartParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.CompressionLevel))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ArchiveSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ScheduleItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ArchiveCriteria))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthScheduleEntry))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthScheduleEntry[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.OrphansSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TransmissionSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TimeWindow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.VerifySchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ScriptPoint[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ScriptPoint))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ScriptExecutionMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ScriptPointType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TargetStateInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.CompressionLevel[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.RestoreParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ArchiveRestoreOption))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.RestoreOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionConfiguration))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionStatistics))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.QueueState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ControlOperation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TargetStateInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionQualificationResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionQualificationFailures))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobCredentials))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobSourceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobSourceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverDataAction))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorConfiguration))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.ActiveDirectoryFailoverOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitoredAddressConfiguration[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitoredAddressConfiguration))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.PingMethods))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverIPAddressesOption))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverItems))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverProcessingOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverReplaceActions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.SSMRecoveryType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverScriptConfiguration))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverTrigger))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.HighAvailabilityState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitoredAddressStatus[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitoredAddressStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.RestoreStates))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.ReMonitorAction))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorQualificationResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorableAddressInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorableAddressInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorConfiguration[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailbackOption))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TargetServiceStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.DnsServerDetail[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.DnsServerDetail))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.IPAddressMap[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.IPAddressMap))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.FullServerNicMappings[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.FullServerNicMappings))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TargetServicesToStop[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TargetServicesToStop))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TestDnsResult[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TestDnsResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TestDnsDetails[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TestDnsDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotActivityStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.Snapshot))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotCreateOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotBuildingBlockType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotCreationResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.Snapshot[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotListOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotRevertOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotDeleteOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotMountOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.LvmOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.VolumeGroup[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.VolumeGroup))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.LogicalVolume[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.LogicalVolume))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.PhysicalVolume[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.PhysicalVolume))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.AccessLevel))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CollectedServer[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CollectedServer))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Credentials))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CollectedServerStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CredentialsType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CollectorDatabaseStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ControlledServerInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ControlledServerInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ProductInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ActivationStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ActivationCode[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ActivationCode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ActivationAttribute[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ActivationAttribute))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.LicenseType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ProductVersion))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ServerInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Volume))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ProtectableItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.FileSystemAttributes))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.SaturationLevel))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.FileItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.FileSystemItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.DirectoryItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.NetworkInterfaceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.NetworkInterfaceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UnicastIPAddressInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UnicastIPAddressInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.OperatingSystemInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.OperatingSystemArchitecture))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.OperatingSystemProductType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.OperatingSystemVersion))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Volume[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ControlledServerInfoSimple[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ControlledServerInfoSimple))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CoreFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.DesktopInteractionMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageDeleteInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.VhdDeleteActionType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.MachineInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PathTransformation[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PathTransformation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageVhdInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageVhdInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.EngineJobType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ReplicationSetUsageType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PhysicalRule[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PhysicalRule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.InclusionMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.RecursionMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ProtectableItem[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageEditedProperties))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageDeleteInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ShutdownOption))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PathBlockingEntry[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PathBlockingEntry))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PathBlockingMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CloudBillingInformation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ClusterAddressInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ClusterHostOwnershipModel))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CoreClusterInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.FullServerJobType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.SystemStateVerificationResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.SystemStateVerificationStep[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.SystemStateVerificationStep))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.SystemStateCutoverStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ReplicationSetInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.WinServiceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.WinServiceStartMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Property[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Property))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.NamedSetting[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.NamedSetting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.MultiStringSetting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.StringSetting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.IntegerSetting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.BooleanSetting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.LogMessage[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.LogMessage))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.EmailNotificationSettings))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.EmailNotificationCategories))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.EmailNotificationTestParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.DnsDomainDetailsPrototype[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.DnsDomainDetailsPrototype))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract1.ClusteredResourceState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract1.RebootAction))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract1.DnsLockInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.ClusterGroupInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.ClusterGroupInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.ClusterResourceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.ClusterResourceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.ClusteredVirtualMachinesInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.ClusteredVirtualMachinesInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.VirtualMachine[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.VirtualMachine))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.StorageInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.StorageInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.VirtualMachineResourceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Diagnostics.Contract.DtInfoCollectionStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Diagnostics.Contract.DtInfoCollectionProgress))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Discovery.Contract.DynamicServiceEndpoint[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Discovery.Contract.DynamicServiceEndpoint))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Dtmu.Contract.UsageData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Dtmu.Contract.JobUsageData[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Dtmu.Contract.JobUsageData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Dtmu.Contract.DtmuJobStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Dtmu.Contract.DtmuActivationStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Applications.ApplicationsPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Applications.SqlDatabasePersistedInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Applications.SqlDatabasePersistedInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Diagnostics.DiagnosticsPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DTHV.DTHVPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FilesAndFolders.FilesAndFoldersPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FullServer.FullServerPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FullServer.FullServerJobDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ImageBased.ImageProtectionPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ImageBased.ImageRecoveryPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ImageBased.ImageProtectionJobDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ImageBased.ImageRecoveryJobDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Scheduling.BandwidthOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Scheduling.BandwidthEntry[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Scheduling.BandwidthEntry))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.UVRA.UVRAPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.VcdVapp.VcdVappPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Virtualization.DTAVPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.VRA.VRAPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreConnectionDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.EngineConnectionInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.EngineConnectionInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Feature[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Feature))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreConnectionPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ClusterPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ResourceAndPassiveNodes[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ResourceAndPassiveNodes))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DeleteOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreMonitorPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FailoverOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FailoverMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FailoverType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Health))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ExtendedLowLevelState[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ExtendedLowLevelState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FailoverPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.AddressPersistedState[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.AddressPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ApplicationOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DnsRecordLockOptions[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DnsRecordLockOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ServiceInformation[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ServiceInformation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ClusterOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreConnectionOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreMonitorOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DTHVOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DNSOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DnsDomainDetails[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DnsDomainDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DTAVOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FullServerFailoverOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ImageProtectionOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ImageRecoveryOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.MonitoringOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ServiceMonitoringOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.SimpleFailoverMonitorOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.SystemStateOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.TargetServicesOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.UnmanagedConnectionOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.VRAOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.VcdVappOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobStatistics))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreMonitorDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobAction[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobAction))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ActionStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CreateOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobCredentials))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ClusterFilesAndFoldersQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.TargetFileServerQualificationResults[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.TargetFileServerQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DTHVQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DTAVQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.VRAQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.V2VQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.RecommendedJobOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.VerificationStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.RecommendedFailoverOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FailbackOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.RecommendedFailbackOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.RestoreStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.RestoreOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.RecommendedRestoreOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.SourceQualificationFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract1.CutoverDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract1.VerificationStep[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract1.VerificationStep))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract1.VerificationTaskStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract1.FixJobOptionsTaskStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.Share[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.Share))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.Ace[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.Ace))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorActivity))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorAction))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ActionInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.QueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.CompositeQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.QueryResult[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.HeartbeatPingQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.IcmpPingQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.PerformanceCounterQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ServiceStatusQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ScriptQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VmHealthQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VmConfigQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VirtualSwitchConfigQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.DtscStatusQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ShareQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.CompositeActionInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorAction[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.LogActionInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ScriptActionInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ServiceOperationActionInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ServiceOperation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorQuery))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.QueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.CompositeQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.CompositeQueryOperation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorQuery[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.IcmpPingQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.HeartbeatPingQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.PerformanceCounterQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ComparisonOperation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ScriptQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ServiceStatusQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VmHealthQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VmConfigQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VirtualSwitchConfigQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.DtscStatusQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.DTTargetResourceQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ShareQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.TriggerMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ValidationFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.PropertyFault[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.PropertyFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ActivityResultNode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.CompositeActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ScriptActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ServiceOperationActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.SimpleMonitorInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.SimpleMonitorInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.VmdkDatastoreMapping[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.VmdkDatastoreMapping))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVmdkInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVmQualificationResults[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVmQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVimServer[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVimServer))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavReplicationAppliance[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavReplicationAppliance))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.AddVimServerAndRAFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DTAVRequestFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavHostAndCluster[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavHostAndCluster))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVmInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVmInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVmdkInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavGuestInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavGuestInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.LicenseData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.GracePeriodReason))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVimInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.EmailNotificationInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.EmailNotificationInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTHV.VHDMapping[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTHV.VHDMapping))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTHV.VLanMapping[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTHV.VLanMapping))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTHV.VMSystemState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VcdVapp.PITSnapshotRecord[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VcdVapp.PITSnapshotRecord))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VcdVapp.VmdkInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VcdVapp.VmdkInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VolumeOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VRAInternalVirtualNetworkInterfaceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VRAInternalVirtualNetworkInterfaceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.UVRAVolumePersistedState[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.UVRAVolumePersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VRAVolumePersistedState[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VRAVolumePersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.V2VVirtualMachine[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.V2VVirtualMachine))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VolumeOptions[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.ReplicaVMInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VRAWorkloadCustomizationOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.ActivationCodeInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.ESXInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.JobState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.ErrorInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.ErrorInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualNetworkInterfaceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualizationConnectionInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VMInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualNetworkInterfaceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.SwitchPortInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualSwitchMapping[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualSwitchMapping))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualSwitchInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VMQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.NetworkAdapterInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.NetworkAdapterInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VHDInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VHDInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualSwitchInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.ServerQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VolumeQualificationResults[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VolumeQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VMInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.LicenseQuantity))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VimDatastoreItem[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VimDatastoreItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DtServiceException_Fault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.HyperVmNotFoundException_Fault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(string[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(bool[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(short[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(int[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(long[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(float[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(double[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.DateTime[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.TimeSpan[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Guid[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Uri[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(byte[][]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, System.Guid>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, System.Uri>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, DoubleTake.Core.Contract.Credentials>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ushort[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.DtProduct[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.DtProduct))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.SplaManagementFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.SplaManagementFaultCode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.UsageReport))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.JobInventory[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.JobInventory))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.JobStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.ActivationStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.LicenseResponse))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.Fault[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.Fault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.IO.DriveType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Net.Sockets.AddressFamily))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Net.NetworkCredential))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Net.IPAddress[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Net.IPAddress))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Security.SecureString))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.DateTimeOffset))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.DateTimeOffset[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(www.doubletake.com.Common.Contract.LogMessage[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(www.doubletake.com.Common.Contract.LogMessage))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(www.doubletake.com.Common.Contract.EventLogEntryData2[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(www.doubletake.com.Common.Contract.EventLogEntryData2))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(www.doubletake.com.Jobs.Contract.EngineControlStatus[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(www.doubletake.com.Jobs.Contract.EngineControlStatus))]
    public partial class ArgumentFault : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string ActualValueField;
        
        private string ExceptionTypeField;
        
        private object InnerFaultField;
        
        private string MessageField;
        
        private string NameField;
        
        private string ParameterNameField;
        
        private string StackTraceField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ActualValue
        {
            get
            {
                return this.ActualValueField;
            }
            set
            {
                this.ActualValueField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExceptionType
        {
            get
            {
                return this.ExceptionTypeField;
            }
            set
            {
                this.ExceptionTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object InnerFault
        {
            get
            {
                return this.InnerFaultField;
            }
            set
            {
                this.InnerFaultField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message
        {
            get
            {
                return this.MessageField;
            }
            set
            {
                this.MessageField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ParameterName
        {
            get
            {
                return this.ParameterNameField;
            }
            set
            {
                this.ParameterNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StackTrace
        {
            get
            {
                return this.StackTraceField;
            }
            set
            {
                this.StackTraceField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Alternate.TupleOfstringstring[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Alternate.TupleOfstringstring))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.ComponentModel.ObservableObject))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.CommonFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.CollectorInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.CollectorConfigurationInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.PropertyBag))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.NameValuePair[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.NameValuePair))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.PushInstallationOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.PushInstallToken))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.PushInstallStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.InstallStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.ServiceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.ServiceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.ServicesStartMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.Workload))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.WorkloadType[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.WorkloadType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.WorkloadSupportSummary))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.Workload[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.LogicalItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.LogicalItem[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.ChangedItems))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.DashboardEngineOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.EmailNotificationOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.SmtpConnectionSecurity))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.InvalidEmailAddressFormatFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.ExceptionDetail))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Install.InstallStep))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.IO.AceFlags))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.IO.AceType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Tasks.ActivityToken))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Tasks.ActivityStatusEntry))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Tasks.ActivityCompletionStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Tasks.ActivityStatusEntry[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Communication.ServiceConnectionParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Communication.ServiceConnectionParameters[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotCreationReason))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TargetStates))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.MirrorParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.MirrorComparisonCriteria))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.MirrorOperationOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthLimit))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthScheduleMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotEntry[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotEntry))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotQuality))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotAge))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.MirrorState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ReplicationState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ClusterResourceState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TransmissionMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.QueueTaskParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TaskParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.Weekdays))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthSpecification[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthSpecification))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthSpecificationType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionStartParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.CompressionLevel))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ArchiveSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ScheduleItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ArchiveCriteria))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthScheduleEntry))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthScheduleEntry[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.OrphansSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TransmissionSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TimeWindow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.VerifySchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ScriptPoint[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ScriptPoint))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ScriptExecutionMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ScriptPointType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TargetStateInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.CompressionLevel[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.RestoreParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ArchiveRestoreOption))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.RestoreOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionConfiguration))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionStatistics))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.QueueState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ControlOperation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TargetStateInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionQualificationResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionQualificationFailures))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobCredentials))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobSourceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobSourceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverDataAction))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorConfiguration))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.ActiveDirectoryFailoverOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitoredAddressConfiguration[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitoredAddressConfiguration))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.PingMethods))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverIPAddressesOption))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverItems))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverProcessingOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverReplaceActions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.SSMRecoveryType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverScriptConfiguration))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverTrigger))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.HighAvailabilityState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitoredAddressStatus[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitoredAddressStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.RestoreStates))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.ReMonitorAction))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorQualificationResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorableAddressInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorableAddressInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorConfiguration[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailbackOption))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TargetServiceStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.DnsServerDetail[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.DnsServerDetail))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.IPAddressMap[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.IPAddressMap))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.FullServerNicMappings[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.FullServerNicMappings))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TargetServicesToStop[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TargetServicesToStop))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TestDnsResult[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TestDnsResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TestDnsDetails[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TestDnsDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotActivityStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.Snapshot))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotCreateOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotBuildingBlockType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotCreationResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.Snapshot[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotListOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotRevertOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotDeleteOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotMountOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.LvmOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.VolumeGroup[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.VolumeGroup))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.LogicalVolume[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.LogicalVolume))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.PhysicalVolume[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.PhysicalVolume))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.AccessLevel))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CollectedServer[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CollectedServer))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Credentials))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CollectedServerStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CredentialsType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CollectorDatabaseStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ControlledServerInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ControlledServerInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ProductInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ActivationStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ActivationCode[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ActivationCode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ActivationAttribute[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ActivationAttribute))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.LicenseType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ProductVersion))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ServerInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Volume))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ProtectableItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.FileSystemAttributes))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.SaturationLevel))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.FileItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.FileSystemItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.DirectoryItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.NetworkInterfaceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.NetworkInterfaceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UnicastIPAddressInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UnicastIPAddressInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.OperatingSystemInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.OperatingSystemArchitecture))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.OperatingSystemProductType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.OperatingSystemVersion))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Volume[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ControlledServerInfoSimple[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ControlledServerInfoSimple))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CoreFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.DesktopInteractionMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageDeleteInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.VhdDeleteActionType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.MachineInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PathTransformation[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PathTransformation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageVhdInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageVhdInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.EngineJobType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ReplicationSetUsageType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PhysicalRule[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PhysicalRule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.InclusionMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.RecursionMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ProtectableItem[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageEditedProperties))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageDeleteInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ShutdownOption))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PathBlockingEntry[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PathBlockingEntry))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PathBlockingMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CloudBillingInformation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ClusterAddressInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ClusterHostOwnershipModel))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CoreClusterInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.FullServerJobType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.SystemStateVerificationResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.SystemStateVerificationStep[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.SystemStateVerificationStep))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.SystemStateCutoverStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ReplicationSetInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.WinServiceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.WinServiceStartMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Property[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Property))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.NamedSetting[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.NamedSetting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.MultiStringSetting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.StringSetting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.IntegerSetting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.BooleanSetting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.LogMessage[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.LogMessage))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.EmailNotificationSettings))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.EmailNotificationCategories))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.EmailNotificationTestParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.DnsDomainDetailsPrototype[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.DnsDomainDetailsPrototype))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract1.ClusteredResourceState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract1.RebootAction))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract1.DnsLockInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.ClusterGroupInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.ClusterGroupInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.ClusterResourceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.ClusterResourceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.ClusteredVirtualMachinesInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.ClusteredVirtualMachinesInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.VirtualMachine[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.VirtualMachine))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.StorageInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.StorageInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.VirtualMachineResourceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Diagnostics.Contract.DtInfoCollectionStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Diagnostics.Contract.DtInfoCollectionProgress))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Discovery.Contract.DynamicServiceEndpoint[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Discovery.Contract.DynamicServiceEndpoint))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Dtmu.Contract.UsageData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Dtmu.Contract.JobUsageData[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Dtmu.Contract.JobUsageData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Dtmu.Contract.DtmuJobStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Dtmu.Contract.DtmuActivationStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Applications.ApplicationsPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Applications.SqlDatabasePersistedInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Applications.SqlDatabasePersistedInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Diagnostics.DiagnosticsPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DTHV.DTHVPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FilesAndFolders.FilesAndFoldersPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FullServer.FullServerPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FullServer.FullServerJobDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ImageBased.ImageProtectionPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ImageBased.ImageRecoveryPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ImageBased.ImageProtectionJobDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ImageBased.ImageRecoveryJobDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Scheduling.BandwidthOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Scheduling.BandwidthEntry[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Scheduling.BandwidthEntry))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.UVRA.UVRAPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.VcdVapp.VcdVappPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Virtualization.DTAVPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.VRA.VRAPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreConnectionDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.EngineConnectionInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.EngineConnectionInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Feature[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Feature))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreConnectionPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ClusterPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ResourceAndPassiveNodes[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ResourceAndPassiveNodes))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DeleteOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreMonitorPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FailoverOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FailoverMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FailoverType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Health))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ExtendedLowLevelState[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ExtendedLowLevelState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FailoverPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.AddressPersistedState[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.AddressPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ApplicationOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DnsRecordLockOptions[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DnsRecordLockOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ServiceInformation[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ServiceInformation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ClusterOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreConnectionOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreMonitorOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DTHVOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DNSOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DnsDomainDetails[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DnsDomainDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DTAVOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FullServerFailoverOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ImageProtectionOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ImageRecoveryOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.MonitoringOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ServiceMonitoringOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.SimpleFailoverMonitorOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.SystemStateOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.TargetServicesOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.UnmanagedConnectionOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.VRAOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.VcdVappOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobStatistics))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreMonitorDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobAction[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobAction))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ActionStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CreateOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobCredentials))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ClusterFilesAndFoldersQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.TargetFileServerQualificationResults[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.TargetFileServerQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DTHVQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DTAVQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.VRAQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.V2VQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.RecommendedJobOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.VerificationStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.RecommendedFailoverOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FailbackOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.RecommendedFailbackOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.RestoreStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.RestoreOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.RecommendedRestoreOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.SourceQualificationFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract1.CutoverDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract1.VerificationStep[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract1.VerificationStep))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract1.VerificationTaskStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract1.FixJobOptionsTaskStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.Share[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.Share))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.Ace[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.Ace))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorActivity))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorAction))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ActionInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.QueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.CompositeQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.QueryResult[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.HeartbeatPingQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.IcmpPingQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.PerformanceCounterQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ServiceStatusQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ScriptQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VmHealthQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VmConfigQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VirtualSwitchConfigQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.DtscStatusQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ShareQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.CompositeActionInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorAction[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.LogActionInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ScriptActionInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ServiceOperationActionInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ServiceOperation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorQuery))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.QueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.CompositeQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.CompositeQueryOperation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorQuery[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.IcmpPingQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.HeartbeatPingQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.PerformanceCounterQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ComparisonOperation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ScriptQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ServiceStatusQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VmHealthQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VmConfigQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VirtualSwitchConfigQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.DtscStatusQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.DTTargetResourceQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ShareQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.TriggerMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ValidationFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.PropertyFault[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.PropertyFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ActivityResultNode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.CompositeActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ScriptActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ServiceOperationActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.SimpleMonitorInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.SimpleMonitorInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.VmdkDatastoreMapping[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.VmdkDatastoreMapping))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVmdkInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVmQualificationResults[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVmQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVimServer[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVimServer))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavReplicationAppliance[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavReplicationAppliance))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.AddVimServerAndRAFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DTAVRequestFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavHostAndCluster[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavHostAndCluster))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVmInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVmInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVmdkInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavGuestInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavGuestInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.LicenseData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.GracePeriodReason))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVimInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.EmailNotificationInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.EmailNotificationInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTHV.VHDMapping[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTHV.VHDMapping))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTHV.VLanMapping[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTHV.VLanMapping))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTHV.VMSystemState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VcdVapp.PITSnapshotRecord[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VcdVapp.PITSnapshotRecord))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VcdVapp.VmdkInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VcdVapp.VmdkInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VolumeOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VRAInternalVirtualNetworkInterfaceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VRAInternalVirtualNetworkInterfaceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.UVRAVolumePersistedState[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.UVRAVolumePersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VRAVolumePersistedState[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VRAVolumePersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.V2VVirtualMachine[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.V2VVirtualMachine))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VolumeOptions[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.ReplicaVMInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VRAWorkloadCustomizationOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.ActivationCodeInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.ESXInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.JobState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.ErrorInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.ErrorInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualNetworkInterfaceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualizationConnectionInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VMInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualNetworkInterfaceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.SwitchPortInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualSwitchMapping[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualSwitchMapping))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualSwitchInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VMQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.NetworkAdapterInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.NetworkAdapterInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VHDInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VHDInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualSwitchInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.ServerQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VolumeQualificationResults[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VolumeQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VMInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.LicenseQuantity))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VimDatastoreItem[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VimDatastoreItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DtServiceException_Fault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.HyperVmNotFoundException_Fault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(string[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(bool[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(short[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(int[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(long[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(float[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(double[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.DateTime[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.TimeSpan[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Guid[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Uri[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(byte[][]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, System.Guid>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, System.Uri>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, DoubleTake.Core.Contract.Credentials>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ushort[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.DtProduct[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.DtProduct))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.SplaManagementFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.SplaManagementFaultCode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.UsageReport))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.JobInventory[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.JobInventory))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.JobStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.ActivationStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.LicenseResponse))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.Fault[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.Fault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.IO.DriveType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Net.Sockets.AddressFamily))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Net.NetworkCredential))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Net.IPAddress[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Net.IPAddress))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Security.SecureString))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.DateTimeOffset))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.DateTimeOffset[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(www.doubletake.com.Common.Contract.LogMessage[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(www.doubletake.com.Common.Contract.LogMessage))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(www.doubletake.com.Common.Contract.EventLogEntryData2[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(www.doubletake.com.Common.Contract.EventLogEntryData2))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(www.doubletake.com.Jobs.Contract.EngineControlStatus[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(www.doubletake.com.Jobs.Contract.EngineControlStatus))]
    public partial class EngineCommunicationFault : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private int ErrorCodeField;
        
        private object InnerFaultField;
        
        private string MessageField;
        
        private string NameField;
        
        private string ReasonField;
        
        private string StackTraceField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ErrorCode
        {
            get
            {
                return this.ErrorCodeField;
            }
            set
            {
                this.ErrorCodeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object InnerFault
        {
            get
            {
                return this.InnerFaultField;
            }
            set
            {
                this.InnerFaultField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message
        {
            get
            {
                return this.MessageField;
            }
            set
            {
                this.MessageField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Reason
        {
            get
            {
                return this.ReasonField;
            }
            set
            {
                this.ReasonField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StackTrace
        {
            get
            {
                return this.StackTraceField;
            }
            set
            {
                this.StackTraceField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EngineCommandFailedFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Alternate.TupleOfstringstring[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Alternate.TupleOfstringstring))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.ComponentModel.ObservableObject))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.CommonFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.CollectorInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.CollectorConfigurationInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.PropertyBag))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.NameValuePair[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.NameValuePair))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.PushInstallationOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.PushInstallToken))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.PushInstallStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.InstallStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.ServiceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.ServiceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.ServicesStartMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.Workload))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.WorkloadType[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.WorkloadType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.WorkloadSupportSummary))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.Workload[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.LogicalItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.LogicalItem[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.ChangedItems))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.DashboardEngineOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.EmailNotificationOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.SmtpConnectionSecurity))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.InvalidEmailAddressFormatFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.ExceptionDetail))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Install.InstallStep))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.IO.AceFlags))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.IO.AceType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Tasks.ActivityToken))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Tasks.ActivityStatusEntry))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Tasks.ActivityCompletionStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Tasks.ActivityStatusEntry[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Communication.ServiceConnectionParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Communication.ServiceConnectionParameters[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotCreationReason))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TargetStates))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.MirrorParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.MirrorComparisonCriteria))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.MirrorOperationOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthLimit))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthScheduleMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotEntry[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotEntry))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotQuality))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotAge))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.MirrorState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ReplicationState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ClusterResourceState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TransmissionMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.QueueTaskParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TaskParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.Weekdays))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthSpecification[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthSpecification))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthSpecificationType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionStartParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.CompressionLevel))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ArchiveSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ScheduleItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ArchiveCriteria))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthScheduleEntry))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthScheduleEntry[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.OrphansSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TransmissionSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TimeWindow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.VerifySchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ScriptPoint[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ScriptPoint))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ScriptExecutionMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ScriptPointType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TargetStateInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.CompressionLevel[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.RestoreParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ArchiveRestoreOption))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.RestoreOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionConfiguration))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionStatistics))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.QueueState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ControlOperation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TargetStateInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionQualificationResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionQualificationFailures))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobCredentials))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobSourceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobSourceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverDataAction))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorConfiguration))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.ActiveDirectoryFailoverOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitoredAddressConfiguration[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitoredAddressConfiguration))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.PingMethods))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverIPAddressesOption))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverItems))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverProcessingOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverReplaceActions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.SSMRecoveryType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverScriptConfiguration))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverTrigger))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.HighAvailabilityState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitoredAddressStatus[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitoredAddressStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.RestoreStates))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.ReMonitorAction))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorQualificationResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorableAddressInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorableAddressInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorConfiguration[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailbackOption))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TargetServiceStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.DnsServerDetail[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.DnsServerDetail))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.IPAddressMap[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.IPAddressMap))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.FullServerNicMappings[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.FullServerNicMappings))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TargetServicesToStop[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TargetServicesToStop))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TestDnsResult[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TestDnsResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TestDnsDetails[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TestDnsDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotActivityStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.Snapshot))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotCreateOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotBuildingBlockType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotCreationResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.Snapshot[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotListOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotRevertOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotDeleteOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotMountOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.LvmOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.VolumeGroup[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.VolumeGroup))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.LogicalVolume[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.LogicalVolume))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.PhysicalVolume[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.PhysicalVolume))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.AccessLevel))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CollectedServer[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CollectedServer))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Credentials))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CollectedServerStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CredentialsType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CollectorDatabaseStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ControlledServerInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ControlledServerInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ProductInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ActivationStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ActivationCode[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ActivationCode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ActivationAttribute[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ActivationAttribute))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.LicenseType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ProductVersion))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ServerInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Volume))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ProtectableItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.FileSystemAttributes))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.SaturationLevel))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.FileItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.FileSystemItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.DirectoryItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.NetworkInterfaceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.NetworkInterfaceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UnicastIPAddressInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UnicastIPAddressInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.OperatingSystemInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.OperatingSystemArchitecture))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.OperatingSystemProductType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.OperatingSystemVersion))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Volume[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ControlledServerInfoSimple[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ControlledServerInfoSimple))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CoreFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.DesktopInteractionMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageDeleteInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.VhdDeleteActionType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.MachineInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PathTransformation[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PathTransformation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageVhdInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageVhdInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.EngineJobType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ReplicationSetUsageType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PhysicalRule[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PhysicalRule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.InclusionMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.RecursionMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ProtectableItem[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageEditedProperties))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageDeleteInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ShutdownOption))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PathBlockingEntry[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PathBlockingEntry))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PathBlockingMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CloudBillingInformation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ClusterAddressInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ClusterHostOwnershipModel))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CoreClusterInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.FullServerJobType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.SystemStateVerificationResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.SystemStateVerificationStep[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.SystemStateVerificationStep))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.SystemStateCutoverStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ReplicationSetInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.WinServiceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.WinServiceStartMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Property[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Property))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.NamedSetting[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.NamedSetting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.MultiStringSetting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.StringSetting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.IntegerSetting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.BooleanSetting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.LogMessage[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.LogMessage))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.EmailNotificationSettings))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.EmailNotificationCategories))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.EmailNotificationTestParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.DnsDomainDetailsPrototype[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.DnsDomainDetailsPrototype))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract1.ClusteredResourceState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract1.RebootAction))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract1.DnsLockInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.ClusterGroupInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.ClusterGroupInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.ClusterResourceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.ClusterResourceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.ClusteredVirtualMachinesInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.ClusteredVirtualMachinesInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.VirtualMachine[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.VirtualMachine))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.StorageInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.StorageInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.VirtualMachineResourceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Diagnostics.Contract.DtInfoCollectionStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Diagnostics.Contract.DtInfoCollectionProgress))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Discovery.Contract.DynamicServiceEndpoint[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Discovery.Contract.DynamicServiceEndpoint))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Dtmu.Contract.UsageData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Dtmu.Contract.JobUsageData[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Dtmu.Contract.JobUsageData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Dtmu.Contract.DtmuJobStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Dtmu.Contract.DtmuActivationStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Applications.ApplicationsPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Applications.SqlDatabasePersistedInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Applications.SqlDatabasePersistedInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Diagnostics.DiagnosticsPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DTHV.DTHVPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FilesAndFolders.FilesAndFoldersPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FullServer.FullServerPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FullServer.FullServerJobDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ImageBased.ImageProtectionPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ImageBased.ImageRecoveryPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ImageBased.ImageProtectionJobDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ImageBased.ImageRecoveryJobDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Scheduling.BandwidthOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Scheduling.BandwidthEntry[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Scheduling.BandwidthEntry))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.UVRA.UVRAPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.VcdVapp.VcdVappPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Virtualization.DTAVPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.VRA.VRAPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreConnectionDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.EngineConnectionInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.EngineConnectionInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Feature[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Feature))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreConnectionPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ClusterPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ResourceAndPassiveNodes[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ResourceAndPassiveNodes))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DeleteOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreMonitorPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FailoverOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FailoverMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FailoverType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Health))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ExtendedLowLevelState[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ExtendedLowLevelState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FailoverPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.AddressPersistedState[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.AddressPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ApplicationOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DnsRecordLockOptions[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DnsRecordLockOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ServiceInformation[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ServiceInformation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ClusterOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreConnectionOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreMonitorOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DTHVOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DNSOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DnsDomainDetails[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DnsDomainDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DTAVOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FullServerFailoverOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ImageProtectionOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ImageRecoveryOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.MonitoringOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ServiceMonitoringOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.SimpleFailoverMonitorOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.SystemStateOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.TargetServicesOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.UnmanagedConnectionOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.VRAOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.VcdVappOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobStatistics))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreMonitorDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobAction[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobAction))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ActionStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CreateOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobCredentials))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ClusterFilesAndFoldersQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.TargetFileServerQualificationResults[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.TargetFileServerQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DTHVQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DTAVQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.VRAQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.V2VQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.RecommendedJobOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.VerificationStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.RecommendedFailoverOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FailbackOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.RecommendedFailbackOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.RestoreStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.RestoreOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.RecommendedRestoreOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.SourceQualificationFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract1.CutoverDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract1.VerificationStep[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract1.VerificationStep))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract1.VerificationTaskStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract1.FixJobOptionsTaskStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.Share[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.Share))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.Ace[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.Ace))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorActivity))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorAction))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ActionInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.QueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.CompositeQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.QueryResult[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.HeartbeatPingQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.IcmpPingQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.PerformanceCounterQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ServiceStatusQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ScriptQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VmHealthQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VmConfigQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VirtualSwitchConfigQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.DtscStatusQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ShareQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.CompositeActionInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorAction[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.LogActionInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ScriptActionInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ServiceOperationActionInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ServiceOperation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorQuery))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.QueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.CompositeQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.CompositeQueryOperation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorQuery[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.IcmpPingQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.HeartbeatPingQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.PerformanceCounterQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ComparisonOperation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ScriptQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ServiceStatusQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VmHealthQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VmConfigQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VirtualSwitchConfigQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.DtscStatusQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.DTTargetResourceQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ShareQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.TriggerMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ValidationFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.PropertyFault[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.PropertyFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ActivityResultNode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.CompositeActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ScriptActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ServiceOperationActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.SimpleMonitorInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.SimpleMonitorInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.VmdkDatastoreMapping[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.VmdkDatastoreMapping))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVmdkInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVmQualificationResults[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVmQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVimServer[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVimServer))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavReplicationAppliance[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavReplicationAppliance))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.AddVimServerAndRAFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DTAVRequestFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavHostAndCluster[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavHostAndCluster))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVmInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVmInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVmdkInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavGuestInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavGuestInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.LicenseData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.GracePeriodReason))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVimInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.EmailNotificationInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.EmailNotificationInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTHV.VHDMapping[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTHV.VHDMapping))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTHV.VLanMapping[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTHV.VLanMapping))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTHV.VMSystemState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VcdVapp.PITSnapshotRecord[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VcdVapp.PITSnapshotRecord))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VcdVapp.VmdkInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VcdVapp.VmdkInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VolumeOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VRAInternalVirtualNetworkInterfaceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VRAInternalVirtualNetworkInterfaceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.UVRAVolumePersistedState[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.UVRAVolumePersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VRAVolumePersistedState[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VRAVolumePersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.V2VVirtualMachine[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.V2VVirtualMachine))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VolumeOptions[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.ReplicaVMInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VRAWorkloadCustomizationOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.ActivationCodeInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.ESXInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.JobState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.ErrorInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.ErrorInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualNetworkInterfaceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualizationConnectionInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VMInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualNetworkInterfaceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.SwitchPortInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualSwitchMapping[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualSwitchMapping))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualSwitchInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VMQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.NetworkAdapterInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.NetworkAdapterInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VHDInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VHDInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualSwitchInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.ServerQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VolumeQualificationResults[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VolumeQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VMInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.LicenseQuantity))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VimDatastoreItem[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VimDatastoreItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DtServiceException_Fault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.HyperVmNotFoundException_Fault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(string[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(bool[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(short[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(int[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(long[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(float[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(double[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.DateTime[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.TimeSpan[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Guid[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Uri[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(byte[][]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, System.Guid>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, System.Uri>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, DoubleTake.Core.Contract.Credentials>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ushort[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.DtProduct[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.DtProduct))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.SplaManagementFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.SplaManagementFaultCode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.UsageReport))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.JobInventory[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.JobInventory))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.JobStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.ActivationStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.LicenseResponse))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.Fault[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.Fault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.IO.DriveType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Net.Sockets.AddressFamily))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Net.NetworkCredential))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Net.IPAddress[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Net.IPAddress))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Security.SecureString))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.DateTimeOffset))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.DateTimeOffset[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(www.doubletake.com.Common.Contract.LogMessage[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(www.doubletake.com.Common.Contract.LogMessage))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(www.doubletake.com.Common.Contract.EventLogEntryData2[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(www.doubletake.com.Common.Contract.EventLogEntryData2))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(www.doubletake.com.Jobs.Contract.EngineControlStatus[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(www.doubletake.com.Jobs.Contract.EngineControlStatus))]
    public partial class EngineCommandFailedFault : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string CommandNameField;
        
        private int ErrorCodeField;
        
        private object InnerFaultField;
        
        private string MessageField;
        
        private string NameField;
        
        private string StackTraceField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CommandName
        {
            get
            {
                return this.CommandNameField;
            }
            set
            {
                this.CommandNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ErrorCode
        {
            get
            {
                return this.ErrorCodeField;
            }
            set
            {
                this.ErrorCodeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object InnerFault
        {
            get
            {
                return this.InnerFaultField;
            }
            set
            {
                this.InnerFaultField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message
        {
            get
            {
                return this.MessageField;
            }
            set
            {
                this.MessageField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StackTrace
        {
            get
            {
                return this.StackTraceField;
            }
            set
            {
                this.StackTraceField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Alternate.TupleOfstringstring[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Alternate.TupleOfstringstring))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.ComponentModel.ObservableObject))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.CommonFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.CollectorInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.CollectorConfigurationInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.PropertyBag))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.NameValuePair[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.NameValuePair))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.PushInstallationOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.PushInstallToken))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.PushInstallStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.InstallStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.ServiceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.ServiceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.ServicesStartMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.Workload))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.WorkloadType[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.WorkloadType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.WorkloadSupportSummary))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.Workload[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.LogicalItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.LogicalItem[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.ChangedItems))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.DashboardEngineOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.EmailNotificationOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.SmtpConnectionSecurity))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.InvalidEmailAddressFormatFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.ExceptionDetail))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Install.InstallStep))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.IO.AceFlags))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.IO.AceType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Tasks.ActivityToken))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Tasks.ActivityStatusEntry))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Tasks.ActivityCompletionStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Tasks.ActivityStatusEntry[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Communication.ServiceConnectionParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Communication.ServiceConnectionParameters[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotCreationReason))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TargetStates))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.MirrorParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.MirrorComparisonCriteria))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.MirrorOperationOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthLimit))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthScheduleMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotEntry[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotEntry))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotQuality))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotAge))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.MirrorState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ReplicationState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ClusterResourceState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TransmissionMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.QueueTaskParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TaskParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.Weekdays))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthSpecification[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthSpecification))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthSpecificationType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionStartParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.CompressionLevel))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ArchiveSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ScheduleItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ArchiveCriteria))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthScheduleEntry))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthScheduleEntry[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.OrphansSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TransmissionSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TimeWindow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.VerifySchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ScriptPoint[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ScriptPoint))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ScriptExecutionMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ScriptPointType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TargetStateInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.CompressionLevel[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.RestoreParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ArchiveRestoreOption))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.RestoreOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionConfiguration))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionStatistics))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.QueueState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ControlOperation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TargetStateInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionQualificationResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionQualificationFailures))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobCredentials))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobSourceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobSourceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverDataAction))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorConfiguration))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.ActiveDirectoryFailoverOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitoredAddressConfiguration[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitoredAddressConfiguration))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.PingMethods))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverIPAddressesOption))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverItems))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverProcessingOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverReplaceActions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.SSMRecoveryType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverScriptConfiguration))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverTrigger))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.HighAvailabilityState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitoredAddressStatus[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitoredAddressStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.RestoreStates))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.ReMonitorAction))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorQualificationResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorableAddressInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorableAddressInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorConfiguration[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailbackOption))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TargetServiceStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.DnsServerDetail[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.DnsServerDetail))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.IPAddressMap[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.IPAddressMap))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.FullServerNicMappings[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.FullServerNicMappings))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TargetServicesToStop[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TargetServicesToStop))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TestDnsResult[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TestDnsResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TestDnsDetails[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TestDnsDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotActivityStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.Snapshot))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotCreateOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotBuildingBlockType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotCreationResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.Snapshot[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotListOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotRevertOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotDeleteOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotMountOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.LvmOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.VolumeGroup[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.VolumeGroup))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.LogicalVolume[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.LogicalVolume))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.PhysicalVolume[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.PhysicalVolume))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.AccessLevel))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CollectedServer[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CollectedServer))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Credentials))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CollectedServerStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CredentialsType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CollectorDatabaseStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ControlledServerInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ControlledServerInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ProductInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ActivationStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ActivationCode[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ActivationCode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ActivationAttribute[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ActivationAttribute))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.LicenseType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ProductVersion))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ServerInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Volume))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ProtectableItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.FileSystemAttributes))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.SaturationLevel))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.FileItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.FileSystemItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.DirectoryItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.NetworkInterfaceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.NetworkInterfaceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UnicastIPAddressInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UnicastIPAddressInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.OperatingSystemInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.OperatingSystemArchitecture))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.OperatingSystemProductType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.OperatingSystemVersion))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Volume[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ControlledServerInfoSimple[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ControlledServerInfoSimple))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CoreFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.DesktopInteractionMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageDeleteInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.VhdDeleteActionType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.MachineInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PathTransformation[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PathTransformation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageVhdInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageVhdInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.EngineJobType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ReplicationSetUsageType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PhysicalRule[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PhysicalRule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.InclusionMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.RecursionMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ProtectableItem[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageEditedProperties))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageDeleteInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ShutdownOption))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PathBlockingEntry[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PathBlockingEntry))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PathBlockingMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CloudBillingInformation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ClusterAddressInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ClusterHostOwnershipModel))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CoreClusterInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.FullServerJobType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.SystemStateVerificationResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.SystemStateVerificationStep[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.SystemStateVerificationStep))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.SystemStateCutoverStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ReplicationSetInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.WinServiceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.WinServiceStartMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Property[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Property))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.NamedSetting[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.NamedSetting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.MultiStringSetting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.StringSetting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.IntegerSetting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.BooleanSetting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.LogMessage[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.LogMessage))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.EmailNotificationSettings))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.EmailNotificationCategories))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.EmailNotificationTestParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.DnsDomainDetailsPrototype[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.DnsDomainDetailsPrototype))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract1.ClusteredResourceState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract1.RebootAction))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract1.DnsLockInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.ClusterGroupInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.ClusterGroupInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.ClusterResourceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.ClusterResourceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.ClusteredVirtualMachinesInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.ClusteredVirtualMachinesInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.VirtualMachine[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.VirtualMachine))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.StorageInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.StorageInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.VirtualMachineResourceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Diagnostics.Contract.DtInfoCollectionStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Diagnostics.Contract.DtInfoCollectionProgress))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Discovery.Contract.DynamicServiceEndpoint[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Discovery.Contract.DynamicServiceEndpoint))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Dtmu.Contract.UsageData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Dtmu.Contract.JobUsageData[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Dtmu.Contract.JobUsageData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Dtmu.Contract.DtmuJobStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Dtmu.Contract.DtmuActivationStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Applications.ApplicationsPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Applications.SqlDatabasePersistedInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Applications.SqlDatabasePersistedInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Diagnostics.DiagnosticsPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DTHV.DTHVPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FilesAndFolders.FilesAndFoldersPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FullServer.FullServerPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FullServer.FullServerJobDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ImageBased.ImageProtectionPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ImageBased.ImageRecoveryPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ImageBased.ImageProtectionJobDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ImageBased.ImageRecoveryJobDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Scheduling.BandwidthOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Scheduling.BandwidthEntry[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Scheduling.BandwidthEntry))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.UVRA.UVRAPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.VcdVapp.VcdVappPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Virtualization.DTAVPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.VRA.VRAPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreConnectionDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.EngineConnectionInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.EngineConnectionInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Feature[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Feature))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreConnectionPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ClusterPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ResourceAndPassiveNodes[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ResourceAndPassiveNodes))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DeleteOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreMonitorPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FailoverOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FailoverMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FailoverType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Health))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ExtendedLowLevelState[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ExtendedLowLevelState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FailoverPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.AddressPersistedState[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.AddressPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ApplicationOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DnsRecordLockOptions[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DnsRecordLockOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ServiceInformation[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ServiceInformation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ClusterOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreConnectionOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreMonitorOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DTHVOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DNSOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DnsDomainDetails[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DnsDomainDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DTAVOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FullServerFailoverOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ImageProtectionOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ImageRecoveryOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.MonitoringOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ServiceMonitoringOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.SimpleFailoverMonitorOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.SystemStateOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.TargetServicesOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.UnmanagedConnectionOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.VRAOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.VcdVappOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobStatistics))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreMonitorDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobAction[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobAction))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ActionStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CreateOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobCredentials))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ClusterFilesAndFoldersQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.TargetFileServerQualificationResults[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.TargetFileServerQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DTHVQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DTAVQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.VRAQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.V2VQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.RecommendedJobOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.VerificationStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.RecommendedFailoverOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FailbackOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.RecommendedFailbackOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.RestoreStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.RestoreOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.RecommendedRestoreOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.SourceQualificationFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract1.CutoverDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract1.VerificationStep[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract1.VerificationStep))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract1.VerificationTaskStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract1.FixJobOptionsTaskStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.Share[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.Share))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.Ace[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.Ace))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorActivity))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorAction))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ActionInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.QueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.CompositeQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.QueryResult[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.HeartbeatPingQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.IcmpPingQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.PerformanceCounterQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ServiceStatusQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ScriptQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VmHealthQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VmConfigQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VirtualSwitchConfigQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.DtscStatusQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ShareQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.CompositeActionInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorAction[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.LogActionInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ScriptActionInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ServiceOperationActionInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ServiceOperation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorQuery))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.QueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.CompositeQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.CompositeQueryOperation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorQuery[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.IcmpPingQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.HeartbeatPingQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.PerformanceCounterQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ComparisonOperation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ScriptQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ServiceStatusQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VmHealthQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VmConfigQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VirtualSwitchConfigQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.DtscStatusQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.DTTargetResourceQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ShareQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.TriggerMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ValidationFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.PropertyFault[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.PropertyFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ActivityResultNode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.CompositeActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ScriptActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ServiceOperationActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.SimpleMonitorInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.SimpleMonitorInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.VmdkDatastoreMapping[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.VmdkDatastoreMapping))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVmdkInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVmQualificationResults[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVmQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVimServer[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVimServer))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavReplicationAppliance[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavReplicationAppliance))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.AddVimServerAndRAFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DTAVRequestFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavHostAndCluster[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavHostAndCluster))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVmInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVmInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVmdkInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavGuestInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavGuestInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.LicenseData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.GracePeriodReason))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVimInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.EmailNotificationInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.EmailNotificationInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTHV.VHDMapping[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTHV.VHDMapping))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTHV.VLanMapping[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTHV.VLanMapping))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTHV.VMSystemState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VcdVapp.PITSnapshotRecord[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VcdVapp.PITSnapshotRecord))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VcdVapp.VmdkInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VcdVapp.VmdkInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VolumeOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VRAInternalVirtualNetworkInterfaceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VRAInternalVirtualNetworkInterfaceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.UVRAVolumePersistedState[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.UVRAVolumePersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VRAVolumePersistedState[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VRAVolumePersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.V2VVirtualMachine[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.V2VVirtualMachine))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VolumeOptions[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.ReplicaVMInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VRAWorkloadCustomizationOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.ActivationCodeInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.ESXInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.JobState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.ErrorInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.ErrorInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualNetworkInterfaceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualizationConnectionInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VMInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualNetworkInterfaceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.SwitchPortInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualSwitchMapping[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualSwitchMapping))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualSwitchInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VMQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.NetworkAdapterInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.NetworkAdapterInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VHDInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VHDInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualSwitchInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.ServerQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VolumeQualificationResults[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VolumeQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VMInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.LicenseQuantity))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VimDatastoreItem[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VimDatastoreItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DtServiceException_Fault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.HyperVmNotFoundException_Fault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(string[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(bool[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(short[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(int[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(long[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(float[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(double[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.DateTime[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.TimeSpan[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Guid[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Uri[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(byte[][]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, System.Guid>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, System.Uri>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, DoubleTake.Core.Contract.Credentials>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ushort[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.DtProduct[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.DtProduct))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.SplaManagementFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.SplaManagementFaultCode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.UsageReport))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.JobInventory[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.JobInventory))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.JobStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.ActivationStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.LicenseResponse))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.Fault[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.Fault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.IO.DriveType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Net.Sockets.AddressFamily))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Net.NetworkCredential))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Net.IPAddress[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Net.IPAddress))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Security.SecureString))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.DateTimeOffset))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.DateTimeOffset[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(www.doubletake.com.Common.Contract.LogMessage[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(www.doubletake.com.Common.Contract.LogMessage))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(www.doubletake.com.Common.Contract.EventLogEntryData2[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(www.doubletake.com.Common.Contract.EventLogEntryData2))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(www.doubletake.com.Jobs.Contract.EngineControlStatus[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(www.doubletake.com.Jobs.Contract.EngineControlStatus))]
    public partial class InvalidOperationFault : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private object InnerFaultField;
        
        private string MessageField;
        
        private string NameField;
        
        private string StackTraceField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object InnerFault
        {
            get
            {
                return this.InnerFaultField;
            }
            set
            {
                this.InnerFaultField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message
        {
            get
            {
                return this.MessageField;
            }
            set
            {
                this.MessageField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StackTrace
        {
            get
            {
                return this.StackTraceField;
            }
            set
            {
                this.StackTraceField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Alternate.TupleOfstringstring[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Alternate.TupleOfstringstring))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.ComponentModel.ObservableObject))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.CommonFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.CollectorInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.CollectorConfigurationInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.PropertyBag))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.NameValuePair[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.NameValuePair))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.PushInstallationOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.PushInstallToken))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.PushInstallStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.InstallStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.ServiceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.ServiceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.ServicesStartMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.Workload))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.WorkloadType[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.WorkloadType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.WorkloadSupportSummary))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.Workload[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.LogicalItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.LogicalItem[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.ChangedItems))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.DashboardEngineOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.EmailNotificationOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.SmtpConnectionSecurity))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.InvalidEmailAddressFormatFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.ExceptionDetail))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Install.InstallStep))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.IO.AceFlags))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.IO.AceType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Tasks.ActivityToken))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Tasks.ActivityStatusEntry))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Tasks.ActivityCompletionStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Tasks.ActivityStatusEntry[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Communication.ServiceConnectionParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Communication.ServiceConnectionParameters[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotCreationReason))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TargetStates))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.MirrorParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.MirrorComparisonCriteria))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.MirrorOperationOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthLimit))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthScheduleMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotEntry[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotEntry))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotQuality))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotAge))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.MirrorState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ReplicationState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ClusterResourceState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TransmissionMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.QueueTaskParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TaskParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.Weekdays))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthSpecification[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthSpecification))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthSpecificationType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionStartParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.CompressionLevel))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ArchiveSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ScheduleItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ArchiveCriteria))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthScheduleEntry))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthScheduleEntry[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.OrphansSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TransmissionSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TimeWindow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.VerifySchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ScriptPoint[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ScriptPoint))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ScriptExecutionMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ScriptPointType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TargetStateInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.CompressionLevel[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.RestoreParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ArchiveRestoreOption))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.RestoreOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionConfiguration))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionStatistics))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.QueueState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ControlOperation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TargetStateInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionQualificationResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionQualificationFailures))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobCredentials))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobSourceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobSourceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverDataAction))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorConfiguration))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.ActiveDirectoryFailoverOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitoredAddressConfiguration[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitoredAddressConfiguration))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.PingMethods))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverIPAddressesOption))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverItems))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverProcessingOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverReplaceActions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.SSMRecoveryType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverScriptConfiguration))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverTrigger))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.HighAvailabilityState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitoredAddressStatus[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitoredAddressStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.RestoreStates))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.ReMonitorAction))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorQualificationResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorableAddressInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorableAddressInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorConfiguration[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailbackOption))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TargetServiceStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.DnsServerDetail[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.DnsServerDetail))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.IPAddressMap[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.IPAddressMap))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.FullServerNicMappings[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.FullServerNicMappings))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TargetServicesToStop[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TargetServicesToStop))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TestDnsResult[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TestDnsResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TestDnsDetails[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TestDnsDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotActivityStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.Snapshot))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotCreateOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotBuildingBlockType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotCreationResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.Snapshot[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotListOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotRevertOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotDeleteOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotMountOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.LvmOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.VolumeGroup[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.VolumeGroup))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.LogicalVolume[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.LogicalVolume))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.PhysicalVolume[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.PhysicalVolume))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.AccessLevel))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CollectedServer[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CollectedServer))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Credentials))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CollectedServerStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CredentialsType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CollectorDatabaseStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ControlledServerInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ControlledServerInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ProductInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ActivationStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ActivationCode[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ActivationCode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ActivationAttribute[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ActivationAttribute))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.LicenseType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ProductVersion))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ServerInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Volume))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ProtectableItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.FileSystemAttributes))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.SaturationLevel))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.FileItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.FileSystemItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.DirectoryItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.NetworkInterfaceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.NetworkInterfaceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UnicastIPAddressInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UnicastIPAddressInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.OperatingSystemInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.OperatingSystemArchitecture))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.OperatingSystemProductType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.OperatingSystemVersion))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Volume[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ControlledServerInfoSimple[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ControlledServerInfoSimple))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CoreFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.DesktopInteractionMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageDeleteInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.VhdDeleteActionType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.MachineInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PathTransformation[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PathTransformation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageVhdInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageVhdInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.EngineJobType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ReplicationSetUsageType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PhysicalRule[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PhysicalRule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.InclusionMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.RecursionMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ProtectableItem[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageEditedProperties))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageDeleteInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ShutdownOption))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PathBlockingEntry[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PathBlockingEntry))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PathBlockingMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CloudBillingInformation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ClusterAddressInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ClusterHostOwnershipModel))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CoreClusterInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.FullServerJobType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.SystemStateVerificationResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.SystemStateVerificationStep[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.SystemStateVerificationStep))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.SystemStateCutoverStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ReplicationSetInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.WinServiceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.WinServiceStartMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Property[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Property))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.NamedSetting[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.NamedSetting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.MultiStringSetting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.StringSetting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.IntegerSetting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.BooleanSetting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.LogMessage[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.LogMessage))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.EmailNotificationSettings))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.EmailNotificationCategories))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.EmailNotificationTestParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.DnsDomainDetailsPrototype[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.DnsDomainDetailsPrototype))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract1.ClusteredResourceState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract1.RebootAction))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract1.DnsLockInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.ClusterGroupInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.ClusterGroupInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.ClusterResourceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.ClusterResourceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.ClusteredVirtualMachinesInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.ClusteredVirtualMachinesInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.VirtualMachine[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.VirtualMachine))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.StorageInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.StorageInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.VirtualMachineResourceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Diagnostics.Contract.DtInfoCollectionStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Diagnostics.Contract.DtInfoCollectionProgress))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Discovery.Contract.DynamicServiceEndpoint[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Discovery.Contract.DynamicServiceEndpoint))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Dtmu.Contract.UsageData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Dtmu.Contract.JobUsageData[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Dtmu.Contract.JobUsageData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Dtmu.Contract.DtmuJobStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Dtmu.Contract.DtmuActivationStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Applications.ApplicationsPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Applications.SqlDatabasePersistedInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Applications.SqlDatabasePersistedInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Diagnostics.DiagnosticsPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DTHV.DTHVPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FilesAndFolders.FilesAndFoldersPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FullServer.FullServerPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FullServer.FullServerJobDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ImageBased.ImageProtectionPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ImageBased.ImageRecoveryPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ImageBased.ImageProtectionJobDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ImageBased.ImageRecoveryJobDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Scheduling.BandwidthOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Scheduling.BandwidthEntry[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Scheduling.BandwidthEntry))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.UVRA.UVRAPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.VcdVapp.VcdVappPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Virtualization.DTAVPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.VRA.VRAPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreConnectionDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.EngineConnectionInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.EngineConnectionInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Feature[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Feature))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreConnectionPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ClusterPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ResourceAndPassiveNodes[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ResourceAndPassiveNodes))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DeleteOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreMonitorPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FailoverOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FailoverMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FailoverType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Health))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ExtendedLowLevelState[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ExtendedLowLevelState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FailoverPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.AddressPersistedState[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.AddressPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ApplicationOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DnsRecordLockOptions[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DnsRecordLockOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ServiceInformation[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ServiceInformation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ClusterOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreConnectionOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreMonitorOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DTHVOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DNSOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DnsDomainDetails[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DnsDomainDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DTAVOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FullServerFailoverOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ImageProtectionOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ImageRecoveryOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.MonitoringOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ServiceMonitoringOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.SimpleFailoverMonitorOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.SystemStateOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.TargetServicesOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.UnmanagedConnectionOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.VRAOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.VcdVappOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobStatistics))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreMonitorDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobAction[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobAction))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ActionStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CreateOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobCredentials))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ClusterFilesAndFoldersQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.TargetFileServerQualificationResults[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.TargetFileServerQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DTHVQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DTAVQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.VRAQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.V2VQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.RecommendedJobOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.VerificationStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.RecommendedFailoverOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FailbackOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.RecommendedFailbackOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.RestoreStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.RestoreOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.RecommendedRestoreOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.SourceQualificationFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract1.CutoverDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract1.VerificationStep[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract1.VerificationStep))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract1.VerificationTaskStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract1.FixJobOptionsTaskStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.Share[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.Share))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.Ace[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.Ace))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorActivity))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorAction))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ActionInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.QueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.CompositeQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.QueryResult[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.HeartbeatPingQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.IcmpPingQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.PerformanceCounterQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ServiceStatusQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ScriptQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VmHealthQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VmConfigQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VirtualSwitchConfigQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.DtscStatusQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ShareQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.CompositeActionInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorAction[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.LogActionInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ScriptActionInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ServiceOperationActionInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ServiceOperation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorQuery))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.QueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.CompositeQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.CompositeQueryOperation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorQuery[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.IcmpPingQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.HeartbeatPingQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.PerformanceCounterQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ComparisonOperation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ScriptQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ServiceStatusQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VmHealthQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VmConfigQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VirtualSwitchConfigQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.DtscStatusQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.DTTargetResourceQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ShareQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.TriggerMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ValidationFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.PropertyFault[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.PropertyFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ActivityResultNode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.CompositeActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ScriptActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ServiceOperationActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.SimpleMonitorInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.SimpleMonitorInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.VmdkDatastoreMapping[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.VmdkDatastoreMapping))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVmdkInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVmQualificationResults[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVmQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVimServer[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVimServer))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavReplicationAppliance[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavReplicationAppliance))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.AddVimServerAndRAFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DTAVRequestFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavHostAndCluster[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavHostAndCluster))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVmInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVmInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVmdkInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavGuestInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavGuestInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.LicenseData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.GracePeriodReason))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVimInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.EmailNotificationInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.EmailNotificationInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTHV.VHDMapping[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTHV.VHDMapping))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTHV.VLanMapping[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTHV.VLanMapping))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTHV.VMSystemState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VcdVapp.PITSnapshotRecord[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VcdVapp.PITSnapshotRecord))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VcdVapp.VmdkInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VcdVapp.VmdkInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VolumeOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VRAInternalVirtualNetworkInterfaceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VRAInternalVirtualNetworkInterfaceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.UVRAVolumePersistedState[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.UVRAVolumePersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VRAVolumePersistedState[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VRAVolumePersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.V2VVirtualMachine[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.V2VVirtualMachine))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VolumeOptions[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.ReplicaVMInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VRAWorkloadCustomizationOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.ActivationCodeInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.ESXInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.JobState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.ErrorInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.ErrorInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualNetworkInterfaceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualizationConnectionInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VMInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualNetworkInterfaceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.SwitchPortInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualSwitchMapping[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualSwitchMapping))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualSwitchInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VMQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.NetworkAdapterInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.NetworkAdapterInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VHDInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VHDInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualSwitchInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.ServerQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VolumeQualificationResults[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VolumeQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VMInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.LicenseQuantity))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VimDatastoreItem[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VimDatastoreItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DtServiceException_Fault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.HyperVmNotFoundException_Fault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(string[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(bool[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(short[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(int[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(long[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(float[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(double[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.DateTime[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.TimeSpan[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Guid[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Uri[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(byte[][]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, System.Guid>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, System.Uri>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, DoubleTake.Core.Contract.Credentials>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ushort[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.DtProduct[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.DtProduct))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.SplaManagementFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.SplaManagementFaultCode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.UsageReport))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.JobInventory[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.JobInventory))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.JobStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.ActivationStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.LicenseResponse))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.Fault[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.Fault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.IO.DriveType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Net.Sockets.AddressFamily))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Net.NetworkCredential))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Net.IPAddress[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Net.IPAddress))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Security.SecureString))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.DateTimeOffset))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.DateTimeOffset[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(www.doubletake.com.Common.Contract.LogMessage[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(www.doubletake.com.Common.Contract.LogMessage))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(www.doubletake.com.Common.Contract.EventLogEntryData2[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(www.doubletake.com.Common.Contract.EventLogEntryData2))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(www.doubletake.com.Jobs.Contract.EngineControlStatus[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(www.doubletake.com.Jobs.Contract.EngineControlStatus))]
    public partial class AccessLevelRequiredFault : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Core.Contract.AccessLevel CurrentAccessLevelField;
        
        private object InnerFaultField;
        
        private string MessageField;
        
        private string NameField;
        
        private DoubleTake.Core.Contract.AccessLevel RequiredAccessLevelField;
        
        private string StackTraceField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.AccessLevel CurrentAccessLevel
        {
            get
            {
                return this.CurrentAccessLevelField;
            }
            set
            {
                this.CurrentAccessLevelField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object InnerFault
        {
            get
            {
                return this.InnerFaultField;
            }
            set
            {
                this.InnerFaultField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message
        {
            get
            {
                return this.MessageField;
            }
            set
            {
                this.MessageField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.AccessLevel RequiredAccessLevel
        {
            get
            {
                return this.RequiredAccessLevelField;
            }
            set
            {
                this.RequiredAccessLevelField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StackTrace
        {
            get
            {
                return this.StackTraceField;
            }
            set
            {
                this.StackTraceField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CollectorInfo", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    public partial class CollectorInfo : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Core.Contract.CollectedServer[] CollectedServersField;
        
        private DoubleTake.Common.Contract.CollectorConfigurationInfo CollectorConfigInfoField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.CollectedServer[] CollectedServers
        {
            get
            {
                return this.CollectedServersField;
            }
            set
            {
                this.CollectedServersField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Common.Contract.CollectorConfigurationInfo CollectorConfigInfo
        {
            get
            {
                return this.CollectorConfigInfoField;
            }
            set
            {
                this.CollectorConfigInfoField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CollectorConfigurationInfo", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    public partial class CollectorConfigurationInfo : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.TimeSpan CollectionIntervalField;
        
        private DoubleTake.Core.Contract.Credentials DatabaseCredentialsField;
        
        private DoubleTake.Core.Contract.CredentialsType DatabaseCredentialsTypeField;
        
        private string DatabaseInstanceNameField;
        
        private string DatabaseNameField;
        
        private string DatabaseServerNameField;
        
        private DoubleTake.Core.Contract.CollectorDatabaseStatus DatabaseStatusField;
        
        private System.TimeSpan RetentionIntervalField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan CollectionInterval
        {
            get
            {
                return this.CollectionIntervalField;
            }
            set
            {
                this.CollectionIntervalField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Credentials DatabaseCredentials
        {
            get
            {
                return this.DatabaseCredentialsField;
            }
            set
            {
                this.DatabaseCredentialsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.CredentialsType DatabaseCredentialsType
        {
            get
            {
                return this.DatabaseCredentialsTypeField;
            }
            set
            {
                this.DatabaseCredentialsTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DatabaseInstanceName
        {
            get
            {
                return this.DatabaseInstanceNameField;
            }
            set
            {
                this.DatabaseInstanceNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DatabaseName
        {
            get
            {
                return this.DatabaseNameField;
            }
            set
            {
                this.DatabaseNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DatabaseServerName
        {
            get
            {
                return this.DatabaseServerNameField;
            }
            set
            {
                this.DatabaseServerNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.CollectorDatabaseStatus DatabaseStatus
        {
            get
            {
                return this.DatabaseStatusField;
            }
            set
            {
                this.DatabaseStatusField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan RetentionInterval
        {
            get
            {
                return this.RetentionIntervalField;
            }
            set
            {
                this.RetentionIntervalField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PropertyBag", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    public partial class PropertyBag : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Common.Contract.NameValuePair[] NameValuePairsField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Common.Contract.NameValuePair[] NameValuePairs
        {
            get
            {
                return this.NameValuePairsField;
            }
            set
            {
                this.NameValuePairsField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NameValuePair", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Alternate.TupleOfstringstring[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Alternate.TupleOfstringstring))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.ComponentModel.ObservableObject))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.CommonFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.CollectorInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.CollectorConfigurationInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.PropertyBag))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.NameValuePair[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.PushInstallationOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.PushInstallToken))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.PushInstallStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.InstallStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.ServiceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.ServiceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.ServicesStartMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.Workload))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.WorkloadType[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.WorkloadType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.WorkloadSupportSummary))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.Workload[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.LogicalItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.LogicalItem[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.ChangedItems))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.DashboardEngineOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.EmailNotificationOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.SmtpConnectionSecurity))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.InvalidEmailAddressFormatFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.ExceptionDetail))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Install.InstallStep))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.IO.AceFlags))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.IO.AceType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Tasks.ActivityToken))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Tasks.ActivityStatusEntry))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Tasks.ActivityCompletionStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Tasks.ActivityStatusEntry[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Communication.ServiceConnectionParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Communication.ServiceConnectionParameters[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotCreationReason))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TargetStates))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.MirrorParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.MirrorComparisonCriteria))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.MirrorOperationOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthLimit))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthScheduleMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotEntry[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotEntry))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotQuality))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotAge))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.MirrorState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ReplicationState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ClusterResourceState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TransmissionMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.QueueTaskParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TaskParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.Weekdays))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthSpecification[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthSpecification))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthSpecificationType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionStartParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.CompressionLevel))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ArchiveSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ScheduleItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ArchiveCriteria))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthScheduleEntry))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthScheduleEntry[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.OrphansSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TransmissionSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TimeWindow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.VerifySchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ScriptPoint[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ScriptPoint))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ScriptExecutionMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ScriptPointType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TargetStateInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.CompressionLevel[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.RestoreParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ArchiveRestoreOption))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.RestoreOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionConfiguration))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionStatistics))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.QueueState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ControlOperation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TargetStateInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionQualificationResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionQualificationFailures))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobCredentials))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobSourceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobSourceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverDataAction))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorConfiguration))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.ActiveDirectoryFailoverOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitoredAddressConfiguration[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitoredAddressConfiguration))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.PingMethods))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverIPAddressesOption))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverItems))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverProcessingOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverReplaceActions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.SSMRecoveryType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverScriptConfiguration))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverTrigger))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.HighAvailabilityState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitoredAddressStatus[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitoredAddressStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.RestoreStates))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.ReMonitorAction))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorQualificationResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorableAddressInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorableAddressInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorConfiguration[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailbackOption))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TargetServiceStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.DnsServerDetail[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.DnsServerDetail))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.IPAddressMap[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.IPAddressMap))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.FullServerNicMappings[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.FullServerNicMappings))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TargetServicesToStop[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TargetServicesToStop))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TestDnsResult[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TestDnsResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TestDnsDetails[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TestDnsDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotActivityStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.Snapshot))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotCreateOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotBuildingBlockType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotCreationResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.Snapshot[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotListOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotRevertOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotDeleteOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotMountOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.LvmOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.VolumeGroup[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.VolumeGroup))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.LogicalVolume[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.LogicalVolume))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.PhysicalVolume[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.PhysicalVolume))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.AccessLevel))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CollectedServer[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CollectedServer))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Credentials))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CollectedServerStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CredentialsType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CollectorDatabaseStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ControlledServerInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ControlledServerInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ProductInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ActivationStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ActivationCode[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ActivationCode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ActivationAttribute[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ActivationAttribute))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.LicenseType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ProductVersion))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ServerInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Volume))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ProtectableItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.FileSystemAttributes))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.SaturationLevel))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.FileItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.FileSystemItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.DirectoryItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.NetworkInterfaceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.NetworkInterfaceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UnicastIPAddressInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UnicastIPAddressInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.OperatingSystemInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.OperatingSystemArchitecture))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.OperatingSystemProductType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.OperatingSystemVersion))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Volume[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ControlledServerInfoSimple[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ControlledServerInfoSimple))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CoreFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.DesktopInteractionMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageDeleteInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.VhdDeleteActionType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.MachineInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PathTransformation[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PathTransformation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageVhdInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageVhdInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.EngineJobType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ReplicationSetUsageType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PhysicalRule[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PhysicalRule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.InclusionMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.RecursionMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ProtectableItem[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageEditedProperties))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageDeleteInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ShutdownOption))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PathBlockingEntry[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PathBlockingEntry))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PathBlockingMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CloudBillingInformation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ClusterAddressInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ClusterHostOwnershipModel))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CoreClusterInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.FullServerJobType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.SystemStateVerificationResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.SystemStateVerificationStep[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.SystemStateVerificationStep))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.SystemStateCutoverStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ReplicationSetInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.WinServiceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.WinServiceStartMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Property[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Property))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.NamedSetting[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.NamedSetting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.MultiStringSetting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.StringSetting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.IntegerSetting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.BooleanSetting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.LogMessage[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.LogMessage))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.EmailNotificationSettings))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.EmailNotificationCategories))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.EmailNotificationTestParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.DnsDomainDetailsPrototype[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.DnsDomainDetailsPrototype))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract1.ClusteredResourceState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract1.RebootAction))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract1.DnsLockInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.ClusterGroupInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.ClusterGroupInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.ClusterResourceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.ClusterResourceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.ClusteredVirtualMachinesInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.ClusteredVirtualMachinesInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.VirtualMachine[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.VirtualMachine))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.StorageInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.StorageInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.VirtualMachineResourceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Diagnostics.Contract.DtInfoCollectionStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Diagnostics.Contract.DtInfoCollectionProgress))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Discovery.Contract.DynamicServiceEndpoint[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Discovery.Contract.DynamicServiceEndpoint))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Dtmu.Contract.UsageData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Dtmu.Contract.JobUsageData[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Dtmu.Contract.JobUsageData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Dtmu.Contract.DtmuJobStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Dtmu.Contract.DtmuActivationStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Applications.ApplicationsPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Applications.SqlDatabasePersistedInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Applications.SqlDatabasePersistedInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Diagnostics.DiagnosticsPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DTHV.DTHVPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FilesAndFolders.FilesAndFoldersPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FullServer.FullServerPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FullServer.FullServerJobDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ImageBased.ImageProtectionPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ImageBased.ImageRecoveryPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ImageBased.ImageProtectionJobDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ImageBased.ImageRecoveryJobDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Scheduling.BandwidthOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Scheduling.BandwidthEntry[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Scheduling.BandwidthEntry))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.UVRA.UVRAPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.VcdVapp.VcdVappPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Virtualization.DTAVPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.VRA.VRAPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreConnectionDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.EngineConnectionInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.EngineConnectionInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Feature[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Feature))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreConnectionPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ClusterPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ResourceAndPassiveNodes[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ResourceAndPassiveNodes))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DeleteOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreMonitorPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FailoverOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FailoverMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FailoverType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Health))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ExtendedLowLevelState[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ExtendedLowLevelState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FailoverPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.AddressPersistedState[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.AddressPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ApplicationOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DnsRecordLockOptions[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DnsRecordLockOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ServiceInformation[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ServiceInformation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ClusterOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreConnectionOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreMonitorOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DTHVOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DNSOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DnsDomainDetails[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DnsDomainDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DTAVOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FullServerFailoverOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ImageProtectionOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ImageRecoveryOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.MonitoringOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ServiceMonitoringOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.SimpleFailoverMonitorOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.SystemStateOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.TargetServicesOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.UnmanagedConnectionOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.VRAOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.VcdVappOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobStatistics))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreMonitorDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobAction[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobAction))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ActionStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CreateOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobCredentials))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ClusterFilesAndFoldersQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.TargetFileServerQualificationResults[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.TargetFileServerQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DTHVQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DTAVQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.VRAQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.V2VQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.RecommendedJobOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.VerificationStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.RecommendedFailoverOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FailbackOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.RecommendedFailbackOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.RestoreStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.RestoreOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.RecommendedRestoreOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.SourceQualificationFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract1.CutoverDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract1.VerificationStep[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract1.VerificationStep))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract1.VerificationTaskStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract1.FixJobOptionsTaskStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.Share[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.Share))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.Ace[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.Ace))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorActivity))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorAction))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ActionInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.QueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.CompositeQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.QueryResult[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.HeartbeatPingQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.IcmpPingQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.PerformanceCounterQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ServiceStatusQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ScriptQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VmHealthQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VmConfigQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VirtualSwitchConfigQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.DtscStatusQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ShareQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.CompositeActionInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorAction[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.LogActionInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ScriptActionInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ServiceOperationActionInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ServiceOperation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorQuery))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.QueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.CompositeQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.CompositeQueryOperation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorQuery[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.IcmpPingQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.HeartbeatPingQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.PerformanceCounterQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ComparisonOperation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ScriptQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ServiceStatusQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VmHealthQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VmConfigQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VirtualSwitchConfigQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.DtscStatusQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.DTTargetResourceQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ShareQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.TriggerMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ValidationFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.PropertyFault[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.PropertyFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ActivityResultNode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.CompositeActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ScriptActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ServiceOperationActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.SimpleMonitorInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.SimpleMonitorInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.VmdkDatastoreMapping[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.VmdkDatastoreMapping))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVmdkInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVmQualificationResults[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVmQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVimServer[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVimServer))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavReplicationAppliance[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavReplicationAppliance))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.AddVimServerAndRAFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DTAVRequestFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavHostAndCluster[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavHostAndCluster))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVmInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVmInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVmdkInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavGuestInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavGuestInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.LicenseData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.GracePeriodReason))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVimInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.EmailNotificationInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.EmailNotificationInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTHV.VHDMapping[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTHV.VHDMapping))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTHV.VLanMapping[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTHV.VLanMapping))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTHV.VMSystemState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VcdVapp.PITSnapshotRecord[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VcdVapp.PITSnapshotRecord))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VcdVapp.VmdkInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VcdVapp.VmdkInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VolumeOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VRAInternalVirtualNetworkInterfaceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VRAInternalVirtualNetworkInterfaceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.UVRAVolumePersistedState[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.UVRAVolumePersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VRAVolumePersistedState[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VRAVolumePersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.V2VVirtualMachine[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.V2VVirtualMachine))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VolumeOptions[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.ReplicaVMInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VRAWorkloadCustomizationOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.ActivationCodeInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.ESXInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.JobState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.ErrorInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.ErrorInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualNetworkInterfaceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualizationConnectionInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VMInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualNetworkInterfaceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.SwitchPortInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualSwitchMapping[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualSwitchMapping))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualSwitchInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VMQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.NetworkAdapterInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.NetworkAdapterInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VHDInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VHDInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualSwitchInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.ServerQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VolumeQualificationResults[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VolumeQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VMInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.LicenseQuantity))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VimDatastoreItem[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VimDatastoreItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DtServiceException_Fault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.HyperVmNotFoundException_Fault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(string[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(bool[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(short[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(int[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(long[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(float[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(double[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.DateTime[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.TimeSpan[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Guid[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Uri[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(byte[][]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, System.Guid>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, System.Uri>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, DoubleTake.Core.Contract.Credentials>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ushort[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.DtProduct[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.DtProduct))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.SplaManagementFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.SplaManagementFaultCode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.UsageReport))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.JobInventory[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.JobInventory))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.JobStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.ActivationStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.LicenseResponse))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.Fault[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.Fault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.IO.DriveType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Net.Sockets.AddressFamily))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Net.NetworkCredential))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Net.IPAddress[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Net.IPAddress))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Security.SecureString))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.DateTimeOffset))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.DateTimeOffset[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(www.doubletake.com.Common.Contract.LogMessage[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(www.doubletake.com.Common.Contract.LogMessage))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(www.doubletake.com.Common.Contract.EventLogEntryData2[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(www.doubletake.com.Common.Contract.EventLogEntryData2))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(www.doubletake.com.Jobs.Contract.EngineControlStatus[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(www.doubletake.com.Jobs.Contract.EngineControlStatus))]
    public partial class NameValuePair : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private bool EncryptedField;
        
        private string NameField;
        
        private object ValueField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Encrypted
        {
            get
            {
                return this.EncryptedField;
            }
            set
            {
                this.EncryptedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object Value
        {
            get
            {
                return this.ValueField;
            }
            set
            {
                this.ValueField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PushInstallationOptions", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    public partial class PushInstallationOptions : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string[] ActivationCodesField;
        
        private int DiskFreeSpaceMinimumField;
        
        private string DiskQueueFolderField;
        
        private int DiskQueueMaxSizeField;
        
        private string DoubleTakeFolderField;
        
        private bool ForwardPortField;
        
        private bool LimitDiskQueueSpaceField;
        
        private DoubleTake.Core.Contract.Credentials NetworkCredentialField;
        
        private int PortField;
        
        private int QueueMemoryBufferMaximumField;
        
        private bool RebootIfRequiredField;
        
        private string ServerNameField;
        
        private bool ServiceStartupField;
        
        private string TemporaryInstallerFileDirectoryField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] ActivationCodes
        {
            get
            {
                return this.ActivationCodesField;
            }
            set
            {
                this.ActivationCodesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DiskFreeSpaceMinimum
        {
            get
            {
                return this.DiskFreeSpaceMinimumField;
            }
            set
            {
                this.DiskFreeSpaceMinimumField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DiskQueueFolder
        {
            get
            {
                return this.DiskQueueFolderField;
            }
            set
            {
                this.DiskQueueFolderField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DiskQueueMaxSize
        {
            get
            {
                return this.DiskQueueMaxSizeField;
            }
            set
            {
                this.DiskQueueMaxSizeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DoubleTakeFolder
        {
            get
            {
                return this.DoubleTakeFolderField;
            }
            set
            {
                this.DoubleTakeFolderField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ForwardPort
        {
            get
            {
                return this.ForwardPortField;
            }
            set
            {
                this.ForwardPortField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool LimitDiskQueueSpace
        {
            get
            {
                return this.LimitDiskQueueSpaceField;
            }
            set
            {
                this.LimitDiskQueueSpaceField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Credentials NetworkCredential
        {
            get
            {
                return this.NetworkCredentialField;
            }
            set
            {
                this.NetworkCredentialField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Port
        {
            get
            {
                return this.PortField;
            }
            set
            {
                this.PortField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int QueueMemoryBufferMaximum
        {
            get
            {
                return this.QueueMemoryBufferMaximumField;
            }
            set
            {
                this.QueueMemoryBufferMaximumField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool RebootIfRequired
        {
            get
            {
                return this.RebootIfRequiredField;
            }
            set
            {
                this.RebootIfRequiredField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServerName
        {
            get
            {
                return this.ServerNameField;
            }
            set
            {
                this.ServerNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ServiceStartup
        {
            get
            {
                return this.ServiceStartupField;
            }
            set
            {
                this.ServiceStartupField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TemporaryInstallerFileDirectory
        {
            get
            {
                return this.TemporaryInstallerFileDirectoryField;
            }
            set
            {
                this.TemporaryInstallerFileDirectoryField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PushInstallToken", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    public partial class PushInstallToken : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.Guid IdField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PushInstallStatus", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    public partial class PushInstallStatus : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string InstallMessageField;
        
        private DoubleTake.Common.Install.InstallStep InstallStepIdField;
        
        private DoubleTake.Communication.ServiceConnectionParameters serviceConnectionParametersField;
        
        private DoubleTake.Common.Contract.InstallStatus statusField;
        
        private DoubleTake.Common.Contract.PushInstallToken tokenField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string InstallMessage
        {
            get
            {
                return this.InstallMessageField;
            }
            set
            {
                this.InstallMessageField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Common.Install.InstallStep InstallStepId
        {
            get
            {
                return this.InstallStepIdField;
            }
            set
            {
                this.InstallStepIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Communication.ServiceConnectionParameters serviceConnectionParameters
        {
            get
            {
                return this.serviceConnectionParametersField;
            }
            set
            {
                this.serviceConnectionParametersField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Common.Contract.InstallStatus status
        {
            get
            {
                return this.statusField;
            }
            set
            {
                this.statusField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Common.Contract.PushInstallToken token
        {
            get
            {
                return this.tokenField;
            }
            set
            {
                this.tokenField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InstallStatus", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    public enum InstallStatus : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NotStarted = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InProgress = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Success = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Canceled = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Error = 4,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceInfo", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    public partial class ServiceInfo : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string accountField;
        
        private string nameField;
        
        private string nameDisplayField;
        
        private DoubleTake.Common.Contract.ServicesStartMode startModeField;
        
        private DoubleTake.Core.Contract.Options.TargetServiceStatus statusField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string account
        {
            get
            {
                return this.accountField;
            }
            set
            {
                this.accountField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string nameDisplay
        {
            get
            {
                return this.nameDisplayField;
            }
            set
            {
                this.nameDisplayField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Common.Contract.ServicesStartMode startMode
        {
            get
            {
                return this.startModeField;
            }
            set
            {
                this.startModeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Options.TargetServiceStatus status
        {
            get
            {
                return this.statusField;
            }
            set
            {
                this.statusField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServicesStartMode", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    public enum ServicesStartMode : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Boot = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        System = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Auto = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Manual = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Disabled = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = 5,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WorkloadType", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    public partial class WorkloadType : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private bool IsLicensedField;
        
        private bool IsPresentField;
        
        private string NameField;
        
        private DoubleTake.Common.Contract.WorkloadSupportSummary SupportSummaryField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsLicensed
        {
            get
            {
                return this.IsLicensedField;
            }
            set
            {
                this.IsLicensedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsPresent
        {
            get
            {
                return this.IsPresentField;
            }
            set
            {
                this.IsPresentField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Common.Contract.WorkloadSupportSummary SupportSummary
        {
            get
            {
                return this.SupportSummaryField;
            }
            set
            {
                this.SupportSummaryField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WorkloadSupportSummary", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    public partial class WorkloadSupportSummary : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string ReasonField;
        
        private string[] ReasonFormatParametersField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Reason
        {
            get
            {
                return this.ReasonField;
            }
            set
            {
                this.ReasonField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] ReasonFormatParameters
        {
            get
            {
                return this.ReasonFormatParametersField;
            }
            set
            {
                this.ReasonFormatParametersField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LogicalItem", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    public partial class LogicalItem : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private bool IsContainerField;
        
        private bool IsReadOnlyField;
        
        private string ItemTypeField;
        
        private string MetadataField;
        
        private string NameField;
        
        private string PathField;
        
        private DoubleTake.Core.Contract.SaturationLevel SaturationField;
        
        private DoubleTake.Core.Contract.SaturationLevel SaturationDefaultField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsContainer
        {
            get
            {
                return this.IsContainerField;
            }
            set
            {
                this.IsContainerField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsReadOnly
        {
            get
            {
                return this.IsReadOnlyField;
            }
            set
            {
                this.IsReadOnlyField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ItemType
        {
            get
            {
                return this.ItemTypeField;
            }
            set
            {
                this.ItemTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Metadata
        {
            get
            {
                return this.MetadataField;
            }
            set
            {
                this.MetadataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Path
        {
            get
            {
                return this.PathField;
            }
            set
            {
                this.PathField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.SaturationLevel Saturation
        {
            get
            {
                return this.SaturationField;
            }
            set
            {
                this.SaturationField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.SaturationLevel SaturationDefault
        {
            get
            {
                return this.SaturationDefaultField;
            }
            set
            {
                this.SaturationDefaultField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChangedItems", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    public partial class ChangedItems : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Common.Contract.LogicalItem[] LogicalItemsField;
        
        private string[] LogicalRulesField;
        
        private DoubleTake.Core.Contract.ProtectableItem[] PhysicalItemsField;
        
        private DoubleTake.Core.Contract.PhysicalRule[] PhysicalRulesField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Common.Contract.LogicalItem[] LogicalItems
        {
            get
            {
                return this.LogicalItemsField;
            }
            set
            {
                this.LogicalItemsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] LogicalRules
        {
            get
            {
                return this.LogicalRulesField;
            }
            set
            {
                this.LogicalRulesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.ProtectableItem[] PhysicalItems
        {
            get
            {
                return this.PhysicalItemsField;
            }
            set
            {
                this.PhysicalItemsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.PhysicalRule[] PhysicalRules
        {
            get
            {
                return this.PhysicalRulesField;
            }
            set
            {
                this.PhysicalRulesField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DashboardEngineOptions", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    public partial class DashboardEngineOptions : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private int DelayedPollIntervalInMinutesField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DelayedPollIntervalInMinutes
        {
            get
            {
                return this.DelayedPollIntervalInMinutesField;
            }
            set
            {
                this.DelayedPollIntervalInMinutesField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EmailNotificationOptions", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    public partial class EmailNotificationOptions : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Common.Contract.SmtpConnectionSecurity ConnectionSecurityField;
        
        private bool EnabledField;
        
        private string EntryIdFilterField;
        
        private string EntryTypeFilterField;
        
        private string FromField;
        
        private bool IncludeEventDescriptionInSubjectField;
        
        private bool LoginToSmtpServerField;
        
        private DoubleTake.Core.Contract.Credentials SmtpCredentialsField;
        
        private System.Nullable<int> SmtpPortField;
        
        private string SmtpServerField;
        
        private string SubjectPrefixField;
        
        private string ToField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Common.Contract.SmtpConnectionSecurity ConnectionSecurity
        {
            get
            {
                return this.ConnectionSecurityField;
            }
            set
            {
                this.ConnectionSecurityField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Enabled
        {
            get
            {
                return this.EnabledField;
            }
            set
            {
                this.EnabledField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EntryIdFilter
        {
            get
            {
                return this.EntryIdFilterField;
            }
            set
            {
                this.EntryIdFilterField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EntryTypeFilter
        {
            get
            {
                return this.EntryTypeFilterField;
            }
            set
            {
                this.EntryTypeFilterField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string From
        {
            get
            {
                return this.FromField;
            }
            set
            {
                this.FromField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IncludeEventDescriptionInSubject
        {
            get
            {
                return this.IncludeEventDescriptionInSubjectField;
            }
            set
            {
                this.IncludeEventDescriptionInSubjectField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool LoginToSmtpServer
        {
            get
            {
                return this.LoginToSmtpServerField;
            }
            set
            {
                this.LoginToSmtpServerField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Credentials SmtpCredentials
        {
            get
            {
                return this.SmtpCredentialsField;
            }
            set
            {
                this.SmtpCredentialsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> SmtpPort
        {
            get
            {
                return this.SmtpPortField;
            }
            set
            {
                this.SmtpPortField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SmtpServer
        {
            get
            {
                return this.SmtpServerField;
            }
            set
            {
                this.SmtpServerField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SubjectPrefix
        {
            get
            {
                return this.SubjectPrefixField;
            }
            set
            {
                this.SubjectPrefixField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string To
        {
            get
            {
                return this.ToField;
            }
            set
            {
                this.ToField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SmtpConnectionSecurity", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    public enum SmtpConnectionSecurity : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Plain = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SSL = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TLS = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InvalidEmailAddressFormatFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Alternate.TupleOfstringstring[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Alternate.TupleOfstringstring))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.ComponentModel.ObservableObject))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.CommonFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.CollectorInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.CollectorConfigurationInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.PropertyBag))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.NameValuePair[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.NameValuePair))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.PushInstallationOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.PushInstallToken))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.PushInstallStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.InstallStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.ServiceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.ServiceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.ServicesStartMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.Workload))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.WorkloadType[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.WorkloadType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.WorkloadSupportSummary))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.Workload[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.LogicalItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.LogicalItem[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.ChangedItems))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.DashboardEngineOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.EmailNotificationOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.SmtpConnectionSecurity))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.ExceptionDetail))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Install.InstallStep))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.IO.AceFlags))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.IO.AceType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Tasks.ActivityToken))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Tasks.ActivityStatusEntry))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Tasks.ActivityCompletionStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Tasks.ActivityStatusEntry[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Communication.ServiceConnectionParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Communication.ServiceConnectionParameters[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotCreationReason))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TargetStates))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.MirrorParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.MirrorComparisonCriteria))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.MirrorOperationOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthLimit))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthScheduleMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotEntry[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotEntry))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotQuality))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotAge))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.MirrorState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ReplicationState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ClusterResourceState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TransmissionMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.QueueTaskParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TaskParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.Weekdays))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthSpecification[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthSpecification))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthSpecificationType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionStartParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.CompressionLevel))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ArchiveSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ScheduleItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ArchiveCriteria))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthScheduleEntry))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthScheduleEntry[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.OrphansSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TransmissionSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TimeWindow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.VerifySchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ScriptPoint[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ScriptPoint))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ScriptExecutionMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ScriptPointType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TargetStateInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.CompressionLevel[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.RestoreParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ArchiveRestoreOption))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.RestoreOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionConfiguration))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionStatistics))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.QueueState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ControlOperation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TargetStateInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionQualificationResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionQualificationFailures))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobCredentials))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobSourceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobSourceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverDataAction))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorConfiguration))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.ActiveDirectoryFailoverOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitoredAddressConfiguration[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitoredAddressConfiguration))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.PingMethods))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverIPAddressesOption))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverItems))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverProcessingOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverReplaceActions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.SSMRecoveryType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverScriptConfiguration))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverTrigger))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.HighAvailabilityState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitoredAddressStatus[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitoredAddressStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.RestoreStates))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.ReMonitorAction))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorQualificationResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorableAddressInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorableAddressInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorConfiguration[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailbackOption))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TargetServiceStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.DnsServerDetail[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.DnsServerDetail))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.IPAddressMap[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.IPAddressMap))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.FullServerNicMappings[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.FullServerNicMappings))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TargetServicesToStop[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TargetServicesToStop))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TestDnsResult[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TestDnsResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TestDnsDetails[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TestDnsDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotActivityStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.Snapshot))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotCreateOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotBuildingBlockType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotCreationResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.Snapshot[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotListOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotRevertOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotDeleteOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotMountOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.LvmOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.VolumeGroup[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.VolumeGroup))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.LogicalVolume[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.LogicalVolume))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.PhysicalVolume[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.PhysicalVolume))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.AccessLevel))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CollectedServer[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CollectedServer))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Credentials))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CollectedServerStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CredentialsType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CollectorDatabaseStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ControlledServerInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ControlledServerInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ProductInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ActivationStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ActivationCode[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ActivationCode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ActivationAttribute[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ActivationAttribute))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.LicenseType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ProductVersion))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ServerInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Volume))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ProtectableItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.FileSystemAttributes))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.SaturationLevel))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.FileItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.FileSystemItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.DirectoryItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.NetworkInterfaceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.NetworkInterfaceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UnicastIPAddressInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UnicastIPAddressInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.OperatingSystemInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.OperatingSystemArchitecture))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.OperatingSystemProductType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.OperatingSystemVersion))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Volume[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ControlledServerInfoSimple[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ControlledServerInfoSimple))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CoreFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.DesktopInteractionMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageDeleteInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.VhdDeleteActionType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.MachineInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PathTransformation[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PathTransformation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageVhdInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageVhdInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.EngineJobType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ReplicationSetUsageType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PhysicalRule[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PhysicalRule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.InclusionMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.RecursionMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ProtectableItem[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageEditedProperties))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageDeleteInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ShutdownOption))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PathBlockingEntry[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PathBlockingEntry))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PathBlockingMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CloudBillingInformation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ClusterAddressInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ClusterHostOwnershipModel))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CoreClusterInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.FullServerJobType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.SystemStateVerificationResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.SystemStateVerificationStep[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.SystemStateVerificationStep))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.SystemStateCutoverStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ReplicationSetInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.WinServiceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.WinServiceStartMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Property[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Property))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.NamedSetting[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.NamedSetting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.MultiStringSetting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.StringSetting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.IntegerSetting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.BooleanSetting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.LogMessage[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.LogMessage))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.EmailNotificationSettings))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.EmailNotificationCategories))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.EmailNotificationTestParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.DnsDomainDetailsPrototype[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.DnsDomainDetailsPrototype))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract1.ClusteredResourceState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract1.RebootAction))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract1.DnsLockInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.ClusterGroupInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.ClusterGroupInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.ClusterResourceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.ClusterResourceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.ClusteredVirtualMachinesInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.ClusteredVirtualMachinesInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.VirtualMachine[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.VirtualMachine))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.StorageInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.StorageInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.VirtualMachineResourceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Diagnostics.Contract.DtInfoCollectionStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Diagnostics.Contract.DtInfoCollectionProgress))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Discovery.Contract.DynamicServiceEndpoint[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Discovery.Contract.DynamicServiceEndpoint))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Dtmu.Contract.UsageData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Dtmu.Contract.JobUsageData[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Dtmu.Contract.JobUsageData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Dtmu.Contract.DtmuJobStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Dtmu.Contract.DtmuActivationStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Applications.ApplicationsPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Applications.SqlDatabasePersistedInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Applications.SqlDatabasePersistedInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Diagnostics.DiagnosticsPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DTHV.DTHVPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FilesAndFolders.FilesAndFoldersPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FullServer.FullServerPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FullServer.FullServerJobDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ImageBased.ImageProtectionPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ImageBased.ImageRecoveryPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ImageBased.ImageProtectionJobDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ImageBased.ImageRecoveryJobDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Scheduling.BandwidthOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Scheduling.BandwidthEntry[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Scheduling.BandwidthEntry))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.UVRA.UVRAPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.VcdVapp.VcdVappPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Virtualization.DTAVPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.VRA.VRAPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreConnectionDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.EngineConnectionInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.EngineConnectionInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Feature[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Feature))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreConnectionPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ClusterPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ResourceAndPassiveNodes[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ResourceAndPassiveNodes))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DeleteOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreMonitorPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FailoverOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FailoverMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FailoverType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Health))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ExtendedLowLevelState[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ExtendedLowLevelState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FailoverPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.AddressPersistedState[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.AddressPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ApplicationOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DnsRecordLockOptions[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DnsRecordLockOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ServiceInformation[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ServiceInformation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ClusterOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreConnectionOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreMonitorOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DTHVOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DNSOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DnsDomainDetails[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DnsDomainDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DTAVOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FullServerFailoverOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ImageProtectionOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ImageRecoveryOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.MonitoringOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ServiceMonitoringOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.SimpleFailoverMonitorOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.SystemStateOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.TargetServicesOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.UnmanagedConnectionOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.VRAOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.VcdVappOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobStatistics))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreMonitorDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobAction[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobAction))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ActionStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CreateOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobCredentials))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ClusterFilesAndFoldersQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.TargetFileServerQualificationResults[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.TargetFileServerQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DTHVQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DTAVQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.VRAQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.V2VQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.RecommendedJobOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.VerificationStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.RecommendedFailoverOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FailbackOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.RecommendedFailbackOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.RestoreStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.RestoreOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.RecommendedRestoreOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.SourceQualificationFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract1.CutoverDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract1.VerificationStep[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract1.VerificationStep))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract1.VerificationTaskStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract1.FixJobOptionsTaskStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.Share[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.Share))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.Ace[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.Ace))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorActivity))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorAction))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ActionInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.QueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.CompositeQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.QueryResult[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.HeartbeatPingQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.IcmpPingQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.PerformanceCounterQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ServiceStatusQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ScriptQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VmHealthQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VmConfigQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VirtualSwitchConfigQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.DtscStatusQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ShareQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.CompositeActionInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorAction[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.LogActionInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ScriptActionInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ServiceOperationActionInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ServiceOperation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorQuery))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.QueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.CompositeQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.CompositeQueryOperation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorQuery[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.IcmpPingQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.HeartbeatPingQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.PerformanceCounterQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ComparisonOperation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ScriptQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ServiceStatusQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VmHealthQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VmConfigQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VirtualSwitchConfigQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.DtscStatusQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.DTTargetResourceQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ShareQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.TriggerMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ValidationFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.PropertyFault[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.PropertyFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ActivityResultNode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.CompositeActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ScriptActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ServiceOperationActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.SimpleMonitorInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.SimpleMonitorInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.VmdkDatastoreMapping[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.VmdkDatastoreMapping))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVmdkInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVmQualificationResults[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVmQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVimServer[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVimServer))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavReplicationAppliance[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavReplicationAppliance))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.AddVimServerAndRAFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DTAVRequestFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavHostAndCluster[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavHostAndCluster))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVmInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVmInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVmdkInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavGuestInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavGuestInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.LicenseData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.GracePeriodReason))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVimInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.EmailNotificationInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.EmailNotificationInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTHV.VHDMapping[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTHV.VHDMapping))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTHV.VLanMapping[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTHV.VLanMapping))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTHV.VMSystemState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VcdVapp.PITSnapshotRecord[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VcdVapp.PITSnapshotRecord))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VcdVapp.VmdkInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VcdVapp.VmdkInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VolumeOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VRAInternalVirtualNetworkInterfaceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VRAInternalVirtualNetworkInterfaceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.UVRAVolumePersistedState[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.UVRAVolumePersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VRAVolumePersistedState[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VRAVolumePersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.V2VVirtualMachine[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.V2VVirtualMachine))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VolumeOptions[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.ReplicaVMInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VRAWorkloadCustomizationOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.ActivationCodeInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.ESXInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.JobState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.ErrorInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.ErrorInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualNetworkInterfaceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualizationConnectionInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VMInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualNetworkInterfaceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.SwitchPortInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualSwitchMapping[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualSwitchMapping))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualSwitchInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VMQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.NetworkAdapterInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.NetworkAdapterInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VHDInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VHDInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualSwitchInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.ServerQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VolumeQualificationResults[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VolumeQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VMInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.LicenseQuantity))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VimDatastoreItem[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VimDatastoreItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DtServiceException_Fault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.HyperVmNotFoundException_Fault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(string[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(bool[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(short[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(int[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(long[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(float[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(double[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.DateTime[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.TimeSpan[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Guid[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Uri[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(byte[][]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, System.Guid>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, System.Uri>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, DoubleTake.Core.Contract.Credentials>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ushort[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.DtProduct[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.DtProduct))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.SplaManagementFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.SplaManagementFaultCode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.UsageReport))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.JobInventory[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.JobInventory))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.JobStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.ActivationStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.LicenseResponse))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.Fault[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.Fault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.IO.DriveType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Net.Sockets.AddressFamily))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Net.NetworkCredential))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Net.IPAddress[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Net.IPAddress))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Security.SecureString))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.DateTimeOffset))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.DateTimeOffset[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(www.doubletake.com.Common.Contract.LogMessage[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(www.doubletake.com.Common.Contract.LogMessage))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(www.doubletake.com.Common.Contract.EventLogEntryData2[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(www.doubletake.com.Common.Contract.EventLogEntryData2))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(www.doubletake.com.Jobs.Contract.EngineControlStatus[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(www.doubletake.com.Jobs.Contract.EngineControlStatus))]
    public partial class InvalidEmailAddressFormatFault : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private object InnerFaultField;
        
        private string MessageField;
        
        private string NameField;
        
        private string StackTraceField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object InnerFault
        {
            get
            {
                return this.InnerFaultField;
            }
            set
            {
                this.InnerFaultField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message
        {
            get
            {
                return this.MessageField;
            }
            set
            {
                this.MessageField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StackTrace
        {
            get
            {
                return this.StackTraceField;
            }
            set
            {
                this.StackTraceField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExceptionDetail", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    public partial class ExceptionDetail : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Common.Contract.ExceptionDetail InnerExceptionField;
        
        private string MessageField;
        
        private string StackTraceField;
        
        private string TypeField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Common.Contract.ExceptionDetail InnerException
        {
            get
            {
                return this.InnerExceptionField;
            }
            set
            {
                this.InnerExceptionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message
        {
            get
            {
                return this.MessageField;
            }
            set
            {
                this.MessageField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StackTrace
        {
            get
            {
                return this.StackTraceField;
            }
            set
            {
                this.StackTraceField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type
        {
            get
            {
                return this.TypeField;
            }
            set
            {
                this.TypeField = value;
            }
        }
    }
}
namespace DoubleTake.Common.ComponentModel
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ObservableObject", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.ComponentModel")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotEntry))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthSpecification))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ArchiveCriteria))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TimeWindow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ScriptPoint))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobSourceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverScriptConfiguration))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TestDnsResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.SystemStateVerificationResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.SystemStateVerificationStep))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.WinServiceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.NamedSetting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.MultiStringSetting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.StringSetting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.IntegerSetting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.BooleanSetting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.EmailNotificationSettings))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.EmailNotificationTestParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Scheduling.BandwidthEntry))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Scheduling.BandwidthOptions))]
    public partial class ObservableObject : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
    }
}
namespace DoubleTake.Core.Contract.Job
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="JobSourceInfo", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Job")]
    public partial class JobSourceInfo : DoubleTake.Common.ComponentModel.ObservableObject
    {
        
        private DoubleTake.Core.Contract.Connection.ConnectionInfo[] ConnectionInfoField;
        
        private System.Guid GuidField;
        
        private string TargetRouteField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Connection.ConnectionInfo[] ConnectionInfo
        {
            get
            {
                return this.ConnectionInfoField;
            }
            set
            {
                this.ConnectionInfoField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Guid
        {
            get
            {
                return this.GuidField;
            }
            set
            {
                this.GuidField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetRoute
        {
            get
            {
                return this.TargetRouteField;
            }
            set
            {
                this.TargetRouteField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="JobInfo", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Job")]
    public partial class JobInfo : DoubleTake.Common.ComponentModel.ObservableObject
    {
        
        private DoubleTake.Core.Contract.Connection.ConnectionInfo[] ConnectionInfoField;
        
        private System.Guid GuidField;
        
        private bool IsStartedField;
        
        private DoubleTake.Core.Contract.Job.JobParameters ParametersField;
        
        private DoubleTake.Core.Contract.UnicastIPAddressInfo SourceAddressField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Connection.ConnectionInfo[] ConnectionInfo
        {
            get
            {
                return this.ConnectionInfoField;
            }
            set
            {
                this.ConnectionInfoField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Guid
        {
            get
            {
                return this.GuidField;
            }
            set
            {
                this.GuidField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsStarted
        {
            get
            {
                return this.IsStartedField;
            }
            set
            {
                this.IsStartedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Job.JobParameters Parameters
        {
            get
            {
                return this.ParametersField;
            }
            set
            {
                this.ParametersField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.UnicastIPAddressInfo SourceAddress
        {
            get
            {
                return this.SourceAddressField;
            }
            set
            {
                this.SourceAddressField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="JobParameters", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Job")]
    public partial class JobParameters : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Core.Contract.Connection.ConnectionStartParameters ConnectionStartParametersField;
        
        private DoubleTake.Core.Contract.EngineJobType EngineJobTypeField;
        
        private string JobTypeField;
        
        private DoubleTake.Core.Contract.Monitor.MonitorConfiguration MonitorField;
        
        private DoubleTake.Core.Contract.PathTransformation[] PathTransformationsField;
        
        private DoubleTake.Core.Contract.Property[] PropertiesField;
        
        private DoubleTake.Core.Contract.UnicastIPAddressInfo[] SourceAddressesField;
        
        private DoubleTake.Core.Contract.UnicastIPAddressInfo TargetAddressField;
        
        private DoubleTake.Core.Contract.PhysicalRule[] WorkloadRulesField;
        
        private string WorkloadTypeField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Connection.ConnectionStartParameters ConnectionStartParameters
        {
            get
            {
                return this.ConnectionStartParametersField;
            }
            set
            {
                this.ConnectionStartParametersField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.EngineJobType EngineJobType
        {
            get
            {
                return this.EngineJobTypeField;
            }
            set
            {
                this.EngineJobTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string JobType
        {
            get
            {
                return this.JobTypeField;
            }
            set
            {
                this.JobTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Monitor.MonitorConfiguration Monitor
        {
            get
            {
                return this.MonitorField;
            }
            set
            {
                this.MonitorField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.PathTransformation[] PathTransformations
        {
            get
            {
                return this.PathTransformationsField;
            }
            set
            {
                this.PathTransformationsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Property[] Properties
        {
            get
            {
                return this.PropertiesField;
            }
            set
            {
                this.PropertiesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.UnicastIPAddressInfo[] SourceAddresses
        {
            get
            {
                return this.SourceAddressesField;
            }
            set
            {
                this.SourceAddressesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.UnicastIPAddressInfo TargetAddress
        {
            get
            {
                return this.TargetAddressField;
            }
            set
            {
                this.TargetAddressField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.PhysicalRule[] WorkloadRules
        {
            get
            {
                return this.WorkloadRulesField;
            }
            set
            {
                this.WorkloadRulesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WorkloadType
        {
            get
            {
                return this.WorkloadTypeField;
            }
            set
            {
                this.WorkloadTypeField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="JobCredentials", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Job")]
    public partial class JobCredentials : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Core.Contract.Credentials SourceCredentialsField;
        
        private DoubleTake.Core.Contract.Credentials TargetCredentialsField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Credentials SourceCredentials
        {
            get
            {
                return this.SourceCredentialsField;
            }
            set
            {
                this.SourceCredentialsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Credentials TargetCredentials
        {
            get
            {
                return this.TargetCredentialsField;
            }
            set
            {
                this.TargetCredentialsField = value;
            }
        }
    }
}
namespace DoubleTake.Core.Contract.Options
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TestDnsResult", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Options")]
    public partial class TestDnsResult : DoubleTake.Common.ComponentModel.ObservableObject
    {
        
        private string DomainNameField;
        
        private string ResultMessageField;
        
        private DoubleTake.Jobs.Contract.VerificationStatus StatusField;
        
        private DoubleTake.Core.Contract.Options.TestDnsDetails[] TestDetailsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DomainName
        {
            get
            {
                return this.DomainNameField;
            }
            set
            {
                this.DomainNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ResultMessage
        {
            get
            {
                return this.ResultMessageField;
            }
            set
            {
                this.ResultMessageField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.VerificationStatus Status
        {
            get
            {
                return this.StatusField;
            }
            set
            {
                this.StatusField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Options.TestDnsDetails[] TestDetails
        {
            get
            {
                return this.TestDetailsField;
            }
            set
            {
                this.TestDetailsField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TestDnsDetails", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Options")]
    public partial class TestDnsDetails : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string IPAddressField;
        
        private string ResultMessageField;
        
        private DoubleTake.Jobs.Contract.VerificationStatus StatusField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IPAddress
        {
            get
            {
                return this.IPAddressField;
            }
            set
            {
                this.IPAddressField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ResultMessage
        {
            get
            {
                return this.ResultMessageField;
            }
            set
            {
                this.ResultMessageField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.VerificationStatus Status
        {
            get
            {
                return this.StatusField;
            }
            set
            {
                this.StatusField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DnsServerDetail", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Options")]
    public partial class DnsServerDetail : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string AddressField;
        
        private string OriginField;
        
        private bool SelectedForUpdateField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address
        {
            get
            {
                return this.AddressField;
            }
            set
            {
                this.AddressField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Origin
        {
            get
            {
                return this.OriginField;
            }
            set
            {
                this.OriginField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool SelectedForUpdate
        {
            get
            {
                return this.SelectedForUpdateField;
            }
            set
            {
                this.SelectedForUpdateField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IPAddressMap", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Options")]
    public partial class IPAddressMap : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private bool ShouldUpdateTtlField;
        
        private string SourceIPField;
        
        private string TargetIPField;
        
        private int TtlValueField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ShouldUpdateTtl
        {
            get
            {
                return this.ShouldUpdateTtlField;
            }
            set
            {
                this.ShouldUpdateTtlField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceIP
        {
            get
            {
                return this.SourceIPField;
            }
            set
            {
                this.SourceIPField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetIP
        {
            get
            {
                return this.TargetIPField;
            }
            set
            {
                this.TargetIPField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TtlValue
        {
            get
            {
                return this.TtlValueField;
            }
            set
            {
                this.TtlValueField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FullServerNicMappings", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Options")]
    public partial class FullServerNicMappings : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string SourceNicField;
        
        private string TargetNicField;
        
        private string[] TargetNicListField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceNic
        {
            get
            {
                return this.SourceNicField;
            }
            set
            {
                this.SourceNicField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetNic
        {
            get
            {
                return this.TargetNicField;
            }
            set
            {
                this.TargetNicField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] TargetNicList
        {
            get
            {
                return this.TargetNicListField;
            }
            set
            {
                this.TargetNicListField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TargetServicesToStop", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Options")]
    public partial class TargetServicesToStop : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private bool FailoverField;
        
        private bool IsCriticalField;
        
        private bool KeepRunningNonCriticalField;
        
        private string ServiceDescriptionField;
        
        private string ServiceNameField;
        
        private DoubleTake.Core.Contract.Options.TargetServiceStatus StateField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Failover
        {
            get
            {
                return this.FailoverField;
            }
            set
            {
                this.FailoverField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsCritical
        {
            get
            {
                return this.IsCriticalField;
            }
            set
            {
                this.IsCriticalField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool KeepRunningNonCritical
        {
            get
            {
                return this.KeepRunningNonCriticalField;
            }
            set
            {
                this.KeepRunningNonCriticalField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServiceDescription
        {
            get
            {
                return this.ServiceDescriptionField;
            }
            set
            {
                this.ServiceDescriptionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServiceName
        {
            get
            {
                return this.ServiceNameField;
            }
            set
            {
                this.ServiceNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Options.TargetServiceStatus State
        {
            get
            {
                return this.StateField;
            }
            set
            {
                this.StateField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TargetServiceStatus", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Options")]
    public enum TargetServiceStatus : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Stopped = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Started = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        StopPending = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        StartPending = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ResumePending = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PausePending = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Paused = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = 7,
    }
}
namespace DoubleTake.Virtualization.Contract.DTAV
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VmdkDatastoreMapping", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Virtualization.Contract.DTAV")]
    public partial class VmdkDatastoreMapping : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Virtualization.Contract.DTAV.DtavVmdkInfo PrestagedVmdkInfoField;
        
        private DoubleTake.Virtualization.Contract.DTAV.DtavVmdkInfo SourceVmdkInfoField;
        
        private string TargetDatastoreNameField;
        
        private string TargetDatastoreUrlField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Virtualization.Contract.DTAV.DtavVmdkInfo PrestagedVmdkInfo
        {
            get
            {
                return this.PrestagedVmdkInfoField;
            }
            set
            {
                this.PrestagedVmdkInfoField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Virtualization.Contract.DTAV.DtavVmdkInfo SourceVmdkInfo
        {
            get
            {
                return this.SourceVmdkInfoField;
            }
            set
            {
                this.SourceVmdkInfoField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetDatastoreName
        {
            get
            {
                return this.TargetDatastoreNameField;
            }
            set
            {
                this.TargetDatastoreNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetDatastoreUrl
        {
            get
            {
                return this.TargetDatastoreUrlField;
            }
            set
            {
                this.TargetDatastoreUrlField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DtavVmdkInfo", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Virtualization.Contract.DTAV")]
    public partial class DtavVmdkInfo : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string DiskFormatField;
        
        private long DiskSizeField;
        
        private string PathField;
        
        private string UuidField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DiskFormat
        {
            get
            {
                return this.DiskFormatField;
            }
            set
            {
                this.DiskFormatField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long DiskSize
        {
            get
            {
                return this.DiskSizeField;
            }
            set
            {
                this.DiskSizeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Path
        {
            get
            {
                return this.PathField;
            }
            set
            {
                this.PathField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Uuid
        {
            get
            {
                return this.UuidField;
            }
            set
            {
                this.UuidField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DtavVmQualificationResults", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Virtualization.Contract.DTAV")]
    public partial class DtavVmQualificationResults : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string DiskFormatField;
        
        private string DisplayNameField;
        
        private System.Guid IdField;
        
        private bool IsWANFailoverEnabledField;
        
        private DoubleTake.Virtualization.Contract.VolumeQualificationResults SourceDatastoreField;
        
        private string SourceRAField;
        
        private string SourceVmHostIdField;
        
        private DoubleTake.Virtualization.Contract.VolumeQualificationResults TargetDatastoreField;
        
        private string TargetHostField;
        
        private string TargetHostIdField;
        
        private string TargetPathField;
        
        private string TargetRAField;
        
        private string TargetVmDisplayNameField;
        
        private DoubleTake.Virtualization.Contract.DTAV.VmdkDatastoreMapping[] VmdkDatastoreMappingsField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DiskFormat
        {
            get
            {
                return this.DiskFormatField;
            }
            set
            {
                this.DiskFormatField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DisplayName
        {
            get
            {
                return this.DisplayNameField;
            }
            set
            {
                this.DisplayNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsWANFailoverEnabled
        {
            get
            {
                return this.IsWANFailoverEnabledField;
            }
            set
            {
                this.IsWANFailoverEnabledField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Virtualization.Contract.VolumeQualificationResults SourceDatastore
        {
            get
            {
                return this.SourceDatastoreField;
            }
            set
            {
                this.SourceDatastoreField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceRA
        {
            get
            {
                return this.SourceRAField;
            }
            set
            {
                this.SourceRAField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceVmHostId
        {
            get
            {
                return this.SourceVmHostIdField;
            }
            set
            {
                this.SourceVmHostIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Virtualization.Contract.VolumeQualificationResults TargetDatastore
        {
            get
            {
                return this.TargetDatastoreField;
            }
            set
            {
                this.TargetDatastoreField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetHost
        {
            get
            {
                return this.TargetHostField;
            }
            set
            {
                this.TargetHostField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetHostId
        {
            get
            {
                return this.TargetHostIdField;
            }
            set
            {
                this.TargetHostIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetPath
        {
            get
            {
                return this.TargetPathField;
            }
            set
            {
                this.TargetPathField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetRA
        {
            get
            {
                return this.TargetRAField;
            }
            set
            {
                this.TargetRAField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetVmDisplayName
        {
            get
            {
                return this.TargetVmDisplayNameField;
            }
            set
            {
                this.TargetVmDisplayNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Virtualization.Contract.DTAV.VmdkDatastoreMapping[] VmdkDatastoreMappings
        {
            get
            {
                return this.VmdkDatastoreMappingsField;
            }
            set
            {
                this.VmdkDatastoreMappingsField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DtavVimServer", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Virtualization.Contract.DTAV")]
    public partial class DtavVimServer : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Core.Contract.Credentials CredentialsField;
        
        private string NetworkIdField;
        
        private int PortField;
        
        private DoubleTake.Virtualization.Contract.DTAV.DtavReplicationAppliance[] ReplicationAppliancesField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Credentials Credentials
        {
            get
            {
                return this.CredentialsField;
            }
            set
            {
                this.CredentialsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NetworkId
        {
            get
            {
                return this.NetworkIdField;
            }
            set
            {
                this.NetworkIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Port
        {
            get
            {
                return this.PortField;
            }
            set
            {
                this.PortField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Virtualization.Contract.DTAV.DtavReplicationAppliance[] ReplicationAppliances
        {
            get
            {
                return this.ReplicationAppliancesField;
            }
            set
            {
                this.ReplicationAppliancesField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DtavReplicationAppliance", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Virtualization.Contract.DTAV")]
    public partial class DtavReplicationAppliance : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Core.Contract.Credentials CredentialsField;
        
        private string ManagementAddressField;
        
        private System.Guid RaVmGuidField;
        
        private string[] ReplicationAddressesField;
        
        private string vimHostIdOrClusterNameField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Credentials Credentials
        {
            get
            {
                return this.CredentialsField;
            }
            set
            {
                this.CredentialsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ManagementAddress
        {
            get
            {
                return this.ManagementAddressField;
            }
            set
            {
                this.ManagementAddressField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid RaVmGuid
        {
            get
            {
                return this.RaVmGuidField;
            }
            set
            {
                this.RaVmGuidField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] ReplicationAddresses
        {
            get
            {
                return this.ReplicationAddressesField;
            }
            set
            {
                this.ReplicationAddressesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string vimHostIdOrClusterName
        {
            get
            {
                return this.vimHostIdOrClusterNameField;
            }
            set
            {
                this.vimHostIdOrClusterNameField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AddVimServerAndRAFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Virtualization.Contract.DTAV")]
    public partial class AddVimServerAndRAFault : DoubleTake.Virtualization.Contract.DTAV.DTAVRequestFault
    {
        
        private bool IsVimServerErrorField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsVimServerError
        {
            get
            {
                return this.IsVimServerErrorField;
            }
            set
            {
                this.IsVimServerErrorField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DTAVRequestFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Virtualization.Contract.DTAV")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.AddVimServerAndRAFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Alternate.TupleOfstringstring[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Alternate.TupleOfstringstring))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.ComponentModel.ObservableObject))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.CommonFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.CollectorInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.CollectorConfigurationInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.PropertyBag))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.NameValuePair[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.NameValuePair))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.PushInstallationOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.PushInstallToken))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.PushInstallStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.InstallStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.ServiceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.ServiceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.ServicesStartMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.Workload))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.WorkloadType[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.WorkloadType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.WorkloadSupportSummary))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.Workload[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.LogicalItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.LogicalItem[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.ChangedItems))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.DashboardEngineOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.EmailNotificationOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.SmtpConnectionSecurity))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.InvalidEmailAddressFormatFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Contract.ExceptionDetail))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Install.InstallStep))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.IO.AceFlags))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.IO.AceType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Tasks.ActivityToken))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Tasks.ActivityStatusEntry))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Tasks.ActivityCompletionStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Common.Tasks.ActivityStatusEntry[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Communication.ServiceConnectionParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Communication.ServiceConnectionParameters[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotCreationReason))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TargetStates))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.MirrorParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.MirrorComparisonCriteria))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.MirrorOperationOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthLimit))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthScheduleMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotEntry[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotEntry))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotQuality))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotAge))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.MirrorState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ReplicationState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ClusterResourceState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TransmissionMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.QueueTaskParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TaskParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.Weekdays))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthSpecification[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthSpecification))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthSpecificationType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionStartParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.CompressionLevel))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ArchiveSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ScheduleItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ArchiveCriteria))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthScheduleEntry))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.BandwidthScheduleEntry[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.OrphansSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TransmissionSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TimeWindow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.VerifySchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ScriptPoint[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ScriptPoint))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ScriptExecutionMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ScriptPointType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.SnapshotSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TargetStateInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.CompressionLevel[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.RestoreParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ArchiveRestoreOption))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.RestoreOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionConfiguration))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionStatistics))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.QueueState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ControlOperation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.TargetStateInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionQualificationResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Connection.ConnectionQualificationFailures))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobCredentials))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobSourceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobSourceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Job.JobParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverDataAction))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorConfiguration))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.ActiveDirectoryFailoverOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitoredAddressConfiguration[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitoredAddressConfiguration))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.PingMethods))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverIPAddressesOption))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverItems))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverProcessingOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverReplaceActions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.SSMRecoveryType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverScriptConfiguration))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailoverTrigger))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.HighAvailabilityState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitoredAddressStatus[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitoredAddressStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.RestoreStates))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.ReMonitorAction))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorQualificationResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorableAddressInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorableAddressInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.MonitorConfiguration[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Monitor.FailbackOption))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TargetServiceStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.DnsServerDetail[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.DnsServerDetail))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.IPAddressMap[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.IPAddressMap))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.FullServerNicMappings[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.FullServerNicMappings))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TargetServicesToStop[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TargetServicesToStop))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TestDnsResult[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TestDnsResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TestDnsDetails[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Options.TestDnsDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotActivityStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.Snapshot))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotCreateOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotBuildingBlockType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotCreationResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.Snapshot[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotListOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotRevertOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotDeleteOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Snapshot.SnapshotMountOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.LvmOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.VolumeGroup[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.VolumeGroup))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.LogicalVolume[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.LogicalVolume))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.PhysicalVolume[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UVRA.PhysicalVolume))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.AccessLevel))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CollectedServer[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CollectedServer))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Credentials))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CollectedServerStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CredentialsType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CollectorDatabaseStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ControlledServerInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ControlledServerInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ProductInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ActivationStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ActivationCode[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ActivationCode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ActivationAttribute[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ActivationAttribute))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.LicenseType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ProductVersion))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ServerInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Volume))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ProtectableItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.FileSystemAttributes))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.SaturationLevel))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.FileItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.FileSystemItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.DirectoryItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.NetworkInterfaceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.NetworkInterfaceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UnicastIPAddressInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.UnicastIPAddressInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.OperatingSystemInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.OperatingSystemArchitecture))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.OperatingSystemProductType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.OperatingSystemVersion))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Volume[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ControlledServerInfoSimple[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ControlledServerInfoSimple))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CoreFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.DesktopInteractionMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageDeleteInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.VhdDeleteActionType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.MachineInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PathTransformation[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PathTransformation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageVhdInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageVhdInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.EngineJobType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ReplicationSetUsageType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PhysicalRule[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PhysicalRule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.InclusionMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.RecursionMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ProtectableItem[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageEditedProperties))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ImageDeleteInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ShutdownOption))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PathBlockingEntry[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PathBlockingEntry))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.PathBlockingMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CloudBillingInformation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ClusterAddressInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ClusterHostOwnershipModel))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.CoreClusterInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.FullServerJobType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.SystemStateVerificationResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.SystemStateVerificationStep[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.SystemStateVerificationStep))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.SystemStateCutoverStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.ReplicationSetInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.WinServiceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.WinServiceStartMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Property[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.Property))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.NamedSetting[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.NamedSetting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.MultiStringSetting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.StringSetting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.IntegerSetting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.BooleanSetting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.LogMessage[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.LogMessage))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.EmailNotificationSettings))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.EmailNotificationCategories))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.EmailNotificationTestParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.DnsDomainDetailsPrototype[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract.DnsDomainDetailsPrototype))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract1.ClusteredResourceState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract1.RebootAction))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.Contract1.DnsLockInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.ClusterGroupInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.ClusterGroupInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.ClusterResourceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.ClusterResourceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.ClusteredVirtualMachinesInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.ClusteredVirtualMachinesInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.VirtualMachine[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.VirtualMachine))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.StorageInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.StorageInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Core.VirtualMachineResourceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Diagnostics.Contract.DtInfoCollectionStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Diagnostics.Contract.DtInfoCollectionProgress))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Discovery.Contract.DynamicServiceEndpoint[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Discovery.Contract.DynamicServiceEndpoint))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Dtmu.Contract.UsageData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Dtmu.Contract.JobUsageData[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Dtmu.Contract.JobUsageData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Dtmu.Contract.DtmuJobStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Dtmu.Contract.DtmuActivationStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Applications.ApplicationsPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Applications.SqlDatabasePersistedInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Applications.SqlDatabasePersistedInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Diagnostics.DiagnosticsPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DTHV.DTHVPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FilesAndFolders.FilesAndFoldersPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FullServer.FullServerPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FullServer.FullServerJobDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ImageBased.ImageProtectionPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ImageBased.ImageRecoveryPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ImageBased.ImageProtectionJobDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ImageBased.ImageRecoveryJobDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Scheduling.BandwidthOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Scheduling.BandwidthEntry[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Scheduling.BandwidthEntry))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.UVRA.UVRAPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.VcdVapp.VcdVappPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Virtualization.DTAVPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.VRA.VRAPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreConnectionDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.EngineConnectionInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.EngineConnectionInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Feature[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Feature))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreConnectionPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ClusterPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ResourceAndPassiveNodes[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ResourceAndPassiveNodes))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DeleteOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreMonitorPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FailoverOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FailoverMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FailoverType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.Health))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ExtendedLowLevelState[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ExtendedLowLevelState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FailoverPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.AddressPersistedState[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.AddressPersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ApplicationOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DnsRecordLockOptions[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DnsRecordLockOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ServiceInformation[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ServiceInformation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ClusterOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreConnectionOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreMonitorOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DTHVOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DNSOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DnsDomainDetails[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DnsDomainDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DTAVOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FullServerFailoverOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ImageProtectionOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ImageRecoveryOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.MonitoringOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ServiceMonitoringOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.SimpleFailoverMonitorOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.SystemStateOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.TargetServicesOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.UnmanagedConnectionOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.VRAOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.VcdVappOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobStatistics))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreMonitorDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobAction[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobAction))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ActionStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CreateOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobCredentials))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.ClusterFilesAndFoldersQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.TargetFileServerQualificationResults[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.TargetFileServerQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.CoreQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DTHVQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.DTAVQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.VRAQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.V2VQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.RecommendedJobOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.VerificationStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.JobInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.RecommendedFailoverOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.FailbackOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.RecommendedFailbackOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.RestoreStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.RestoreOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.RecommendedRestoreOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract.SourceQualificationFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract1.CutoverDetails))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract1.VerificationStep[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract1.VerificationStep))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract1.VerificationTaskStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Jobs.Contract1.FixJobOptionsTaskStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.Share[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.Share))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.Ace[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.Ace))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorActivity))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorAction))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ActionInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.QueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.CompositeQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.QueryResult[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.HeartbeatPingQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.IcmpPingQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.PerformanceCounterQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ServiceStatusQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ScriptQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VmHealthQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VmConfigQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VirtualSwitchConfigQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.DtscStatusQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ShareQueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.CompositeActionInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorAction[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.LogActionInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ScriptActionInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ServiceOperationActionInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ServiceOperation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorQuery))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.QueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.CompositeQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.CompositeQueryOperation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorQuery[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.IcmpPingQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.HeartbeatPingQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.PerformanceCounterQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ComparisonOperation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ScriptQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ServiceStatusQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VmHealthQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VmConfigQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.VirtualSwitchConfigQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.DtscStatusQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.DTTargetResourceQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ShareQueryInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.TriggerMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ValidationFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.PropertyFault[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.PropertyFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ActivityResultNode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.CompositeActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ScriptActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.ServiceOperationActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.SimpleMonitorInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.MonitorInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Monitoring.Contract.SimpleMonitorInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.VmdkDatastoreMapping[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.VmdkDatastoreMapping))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVmdkInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVmQualificationResults[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVmQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVimServer[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVimServer))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavReplicationAppliance[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavReplicationAppliance))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavHostAndCluster[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavHostAndCluster))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVmInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVmInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVmdkInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavGuestInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavGuestInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.LicenseData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.GracePeriodReason))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.DtavVimInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.EmailNotificationInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.EmailNotificationInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTHV.VHDMapping[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTHV.VHDMapping))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTHV.VLanMapping[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTHV.VLanMapping))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DTHV.VMSystemState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VcdVapp.PITSnapshotRecord[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VcdVapp.PITSnapshotRecord))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VcdVapp.VmdkInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VcdVapp.VmdkInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VolumeOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VRAInternalVirtualNetworkInterfaceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VRAInternalVirtualNetworkInterfaceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.UVRAVolumePersistedState[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.UVRAVolumePersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VRAVolumePersistedState[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VRAVolumePersistedState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.V2VVirtualMachine[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.V2VVirtualMachine))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VolumeOptions[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.ReplicaVMInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.VRAWorkloadCustomizationOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.ActivationCodeInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VRA.ESXInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.JobState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.ErrorInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.ErrorInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualNetworkInterfaceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualizationConnectionInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VMInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualNetworkInterfaceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.SwitchPortInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualSwitchMapping[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualSwitchMapping))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualSwitchInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VMQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.NetworkAdapterInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.NetworkAdapterInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VHDInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VHDInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VirtualSwitchInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.ServerQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VolumeQualificationResults[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VolumeQualificationResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VMInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.LicenseQuantity))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VimDatastoreItem[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.VimDatastoreItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.DtServiceException_Fault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DoubleTake.Virtualization.Contract.HyperVmNotFoundException_Fault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(string[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(bool[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(short[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(int[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(long[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(float[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(double[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.DateTime[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.TimeSpan[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Guid[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Uri[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(byte[][]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, System.Guid>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, System.Uri>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, DoubleTake.Core.Contract.Credentials>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ushort[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.DtProduct[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.DtProduct))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.SplaManagementFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.SplaManagementFaultCode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.UsageReport))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.JobInventory[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.JobInventory))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.JobStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.ActivationStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.LicenseResponse))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.Fault[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SplaManagement.Fault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.IO.DriveType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Net.Sockets.AddressFamily))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Net.NetworkCredential))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Net.IPAddress[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Net.IPAddress))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Security.SecureString))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.DateTimeOffset))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.DateTimeOffset[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(www.doubletake.com.Common.Contract.LogMessage[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(www.doubletake.com.Common.Contract.LogMessage))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(www.doubletake.com.Common.Contract.EventLogEntryData2[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(www.doubletake.com.Common.Contract.EventLogEntryData2))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(www.doubletake.com.Jobs.Contract.EngineControlStatus[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(www.doubletake.com.Jobs.Contract.EngineControlStatus))]
    public partial class DTAVRequestFault : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private object InnerFaultField;
        
        private string MessageField;
        
        private string[] MessageArgumentsField;
        
        private string MessageKeyField;
        
        private string NameField;
        
        private string StackTraceField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object InnerFault
        {
            get
            {
                return this.InnerFaultField;
            }
            set
            {
                this.InnerFaultField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message
        {
            get
            {
                return this.MessageField;
            }
            set
            {
                this.MessageField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] MessageArguments
        {
            get
            {
                return this.MessageArgumentsField;
            }
            set
            {
                this.MessageArgumentsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MessageKey
        {
            get
            {
                return this.MessageKeyField;
            }
            set
            {
                this.MessageKeyField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StackTrace
        {
            get
            {
                return this.StackTraceField;
            }
            set
            {
                this.StackTraceField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DtavHostAndCluster", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Virtualization.Contract.DTAV")]
    public partial class DtavHostAndCluster : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private bool IsClusterField;
        
        private string NameField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsCluster
        {
            get
            {
                return this.IsClusterField;
            }
            set
            {
                this.IsClusterField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DtavVmInfo", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Virtualization.Contract.DTAV")]
    public partial class DtavVmInfo : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private bool BusSharingModeField;
        
        private string DisplayNameField;
        
        private string EsxHostField;
        
        private string GuestOSField;
        
        private bool HasSnapshotsField;
        
        private string HostIdField;
        
        private System.Guid IdField;
        
        private bool IsCBTSupportedField;
        
        private bool IsIndependentField;
        
        private bool IsMissingVmIdField;
        
        private bool IsRAField;
        
        private bool IsRawField;
        
        private bool IsSuspendedField;
        
        private long TotalDiskSizeBytesField;
        
        private string VersionField;
        
        private DoubleTake.Virtualization.Contract.DTAV.DtavVmdkInfo[] VmdksField;
        
        private bool isMissingVmdkIdField;
        
        private string primaryDatastoreNameField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BusSharingMode
        {
            get
            {
                return this.BusSharingModeField;
            }
            set
            {
                this.BusSharingModeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DisplayName
        {
            get
            {
                return this.DisplayNameField;
            }
            set
            {
                this.DisplayNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EsxHost
        {
            get
            {
                return this.EsxHostField;
            }
            set
            {
                this.EsxHostField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GuestOS
        {
            get
            {
                return this.GuestOSField;
            }
            set
            {
                this.GuestOSField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasSnapshots
        {
            get
            {
                return this.HasSnapshotsField;
            }
            set
            {
                this.HasSnapshotsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HostId
        {
            get
            {
                return this.HostIdField;
            }
            set
            {
                this.HostIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsCBTSupported
        {
            get
            {
                return this.IsCBTSupportedField;
            }
            set
            {
                this.IsCBTSupportedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsIndependent
        {
            get
            {
                return this.IsIndependentField;
            }
            set
            {
                this.IsIndependentField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsMissingVmId
        {
            get
            {
                return this.IsMissingVmIdField;
            }
            set
            {
                this.IsMissingVmIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsRA
        {
            get
            {
                return this.IsRAField;
            }
            set
            {
                this.IsRAField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsRaw
        {
            get
            {
                return this.IsRawField;
            }
            set
            {
                this.IsRawField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSuspended
        {
            get
            {
                return this.IsSuspendedField;
            }
            set
            {
                this.IsSuspendedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long TotalDiskSizeBytes
        {
            get
            {
                return this.TotalDiskSizeBytesField;
            }
            set
            {
                this.TotalDiskSizeBytesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Version
        {
            get
            {
                return this.VersionField;
            }
            set
            {
                this.VersionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Virtualization.Contract.DTAV.DtavVmdkInfo[] Vmdks
        {
            get
            {
                return this.VmdksField;
            }
            set
            {
                this.VmdksField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool isMissingVmdkId
        {
            get
            {
                return this.isMissingVmdkIdField;
            }
            set
            {
                this.isMissingVmdkIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string primaryDatastoreName
        {
            get
            {
                return this.primaryDatastoreNameField;
            }
            set
            {
                this.primaryDatastoreNameField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DtavGuestInfo", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Virtualization.Contract.DTAV")]
    public partial class DtavGuestInfo : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string ErrorField;
        
        private string GuestOsField;
        
        private bool IsWanFailoverAvailableField;
        
        private DoubleTake.Virtualization.Contract.VirtualNetworkInterfaceInfo[] NetworkInterfaceInfoField;
        
        private string VmGuidField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Error
        {
            get
            {
                return this.ErrorField;
            }
            set
            {
                this.ErrorField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GuestOs
        {
            get
            {
                return this.GuestOsField;
            }
            set
            {
                this.GuestOsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsWanFailoverAvailable
        {
            get
            {
                return this.IsWanFailoverAvailableField;
            }
            set
            {
                this.IsWanFailoverAvailableField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Virtualization.Contract.VirtualNetworkInterfaceInfo[] NetworkInterfaceInfo
        {
            get
            {
                return this.NetworkInterfaceInfoField;
            }
            set
            {
                this.NetworkInterfaceInfoField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VmGuid
        {
            get
            {
                return this.VmGuidField;
            }
            set
            {
                this.VmGuidField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LicenseData", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Virtualization.Contract.DTAV")]
    public partial class LicenseData : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.DateTime GracePeriodEndField;
        
        private DoubleTake.Virtualization.Contract.DTAV.GracePeriodReason GracePeriodReasonField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime GracePeriodEnd
        {
            get
            {
                return this.GracePeriodEndField;
            }
            set
            {
                this.GracePeriodEndField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Virtualization.Contract.DTAV.GracePeriodReason GracePeriodReason
        {
            get
            {
                return this.GracePeriodReasonField;
            }
            set
            {
                this.GracePeriodReasonField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GracePeriodReason", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Virtualization.Contract.DTAV")]
    public enum GracePeriodReason : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Eval = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Autocalc = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidatedLicense = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LicenseAllocationRemoved = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        JobCreated = 5,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DtavVimInfo", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Virtualization.Contract.DTAV")]
    public partial class DtavVimInfo : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.Guid EsxServerGuidField;
        
        private string EsxServerNameField;
        
        private DoubleTake.Virtualization.Contract.DTAV.DtavVmInfo[] VmsField;
        
        private DoubleTake.Virtualization.Contract.VolumeQualificationResults[] VolumesField;
        
        private DoubleTake.Virtualization.Contract.VirtualSwitchInfo[] VswitchesField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid EsxServerGuid
        {
            get
            {
                return this.EsxServerGuidField;
            }
            set
            {
                this.EsxServerGuidField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EsxServerName
        {
            get
            {
                return this.EsxServerNameField;
            }
            set
            {
                this.EsxServerNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Virtualization.Contract.DTAV.DtavVmInfo[] Vms
        {
            get
            {
                return this.VmsField;
            }
            set
            {
                this.VmsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Virtualization.Contract.VolumeQualificationResults[] Volumes
        {
            get
            {
                return this.VolumesField;
            }
            set
            {
                this.VolumesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Virtualization.Contract.VirtualSwitchInfo[] Vswitches
        {
            get
            {
                return this.VswitchesField;
            }
            set
            {
                this.VswitchesField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EmailNotificationInfo", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Virtualization.Contract.DTAV")]
    public partial class EmailNotificationInfo : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string JobNameField;
        
        private string NotificationCategoryField;
        
        private string NotificationEventField;
        
        private string ReplicaVirtualMachineField;
        
        private string SourceVirtualMachineField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string JobName
        {
            get
            {
                return this.JobNameField;
            }
            set
            {
                this.JobNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NotificationCategory
        {
            get
            {
                return this.NotificationCategoryField;
            }
            set
            {
                this.NotificationCategoryField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NotificationEvent
        {
            get
            {
                return this.NotificationEventField;
            }
            set
            {
                this.NotificationEventField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReplicaVirtualMachine
        {
            get
            {
                return this.ReplicaVirtualMachineField;
            }
            set
            {
                this.ReplicaVirtualMachineField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceVirtualMachine
        {
            get
            {
                return this.SourceVirtualMachineField;
            }
            set
            {
                this.SourceVirtualMachineField = value;
            }
        }
    }
}
namespace DoubleTake.Jobs.Contract1
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CutoverDetails", Namespace="DoubleTake.Jobs.Contract")]
    public partial class CutoverDetails : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private int PercentCompleteField;
        
        private int StateField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PercentComplete
        {
            get
            {
                return this.PercentCompleteField;
            }
            set
            {
                this.PercentCompleteField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int State
        {
            get
            {
                return this.StateField;
            }
            set
            {
                this.StateField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VerificationStep", Namespace="DoubleTake.Jobs.Contract")]
    public partial class VerificationStep : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private bool CanFixField;
        
        private string IdField;
        
        private int IndexField;
        
        private string[] MessageFormatParametersField;
        
        private string MessageKeyField;
        
        private int ProgressField;
        
        private DoubleTake.Jobs.Contract.VerificationStatus StatusField;
        
        private string[] TitleFormatParametersField;
        
        private string TitleKeyField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanFix
        {
            get
            {
                return this.CanFixField;
            }
            set
            {
                this.CanFixField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Index
        {
            get
            {
                return this.IndexField;
            }
            set
            {
                this.IndexField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] MessageFormatParameters
        {
            get
            {
                return this.MessageFormatParametersField;
            }
            set
            {
                this.MessageFormatParametersField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MessageKey
        {
            get
            {
                return this.MessageKeyField;
            }
            set
            {
                this.MessageKeyField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Progress
        {
            get
            {
                return this.ProgressField;
            }
            set
            {
                this.ProgressField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.VerificationStatus Status
        {
            get
            {
                return this.StatusField;
            }
            set
            {
                this.StatusField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] TitleFormatParameters
        {
            get
            {
                return this.TitleFormatParametersField;
            }
            set
            {
                this.TitleFormatParametersField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TitleKey
        {
            get
            {
                return this.TitleKeyField;
            }
            set
            {
                this.TitleKeyField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VerificationTaskStatus", Namespace="DoubleTake.Jobs.Contract")]
    public partial class VerificationTaskStatus : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Jobs.Contract1.VerificationStep[] StepsField;
        
        private DoubleTake.Common.Tasks.ActivityStatusEntry TaskField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract1.VerificationStep[] Steps
        {
            get
            {
                return this.StepsField;
            }
            set
            {
                this.StepsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Common.Tasks.ActivityStatusEntry Task
        {
            get
            {
                return this.TaskField;
            }
            set
            {
                this.TaskField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FixJobOptionsTaskStatus", Namespace="DoubleTake.Jobs.Contract")]
    public partial class FixJobOptionsTaskStatus : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Jobs.Contract.JobOptions JobOptionsField;
        
        private DoubleTake.Common.Tasks.ActivityStatusEntry TaskField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Jobs.Contract.JobOptions JobOptions
        {
            get
            {
                return this.JobOptionsField;
            }
            set
            {
                this.JobOptionsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Common.Tasks.ActivityStatusEntry Task
        {
            get
            {
                return this.TaskField;
            }
            set
            {
                this.TaskField = value;
            }
        }
    }
}
namespace www.doubletake.com.Jobs.Contract
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EngineControlStatus", Namespace="http://www.doubletake.com/Jobs/Contract")]
    public partial class EngineControlStatus : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private bool CanPauseMirrorField;
        
        private bool CanPauseTargetField;
        
        private bool CanPauseTransmissionField;
        
        private bool CanProcessOrphansField;
        
        private bool CanResumeMirrorField;
        
        private bool CanResumeTargetField;
        
        private bool CanResumeTransmissionField;
        
        private bool CanSetBandwidthField;
        
        private bool CanStartMirrorField;
        
        private bool CanStartTransmissionField;
        
        private bool CanStopMirrorField;
        
        private bool CanTakeSnapshotField;
        
        private bool CanUpdateSharesField;
        
        private bool CanVerifyField;
        
        private System.Guid ConnectionIdField;
        
        private string RoleField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanPauseMirror
        {
            get
            {
                return this.CanPauseMirrorField;
            }
            set
            {
                this.CanPauseMirrorField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanPauseTarget
        {
            get
            {
                return this.CanPauseTargetField;
            }
            set
            {
                this.CanPauseTargetField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanPauseTransmission
        {
            get
            {
                return this.CanPauseTransmissionField;
            }
            set
            {
                this.CanPauseTransmissionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanProcessOrphans
        {
            get
            {
                return this.CanProcessOrphansField;
            }
            set
            {
                this.CanProcessOrphansField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanResumeMirror
        {
            get
            {
                return this.CanResumeMirrorField;
            }
            set
            {
                this.CanResumeMirrorField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanResumeTarget
        {
            get
            {
                return this.CanResumeTargetField;
            }
            set
            {
                this.CanResumeTargetField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanResumeTransmission
        {
            get
            {
                return this.CanResumeTransmissionField;
            }
            set
            {
                this.CanResumeTransmissionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanSetBandwidth
        {
            get
            {
                return this.CanSetBandwidthField;
            }
            set
            {
                this.CanSetBandwidthField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanStartMirror
        {
            get
            {
                return this.CanStartMirrorField;
            }
            set
            {
                this.CanStartMirrorField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanStartTransmission
        {
            get
            {
                return this.CanStartTransmissionField;
            }
            set
            {
                this.CanStartTransmissionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanStopMirror
        {
            get
            {
                return this.CanStopMirrorField;
            }
            set
            {
                this.CanStopMirrorField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanTakeSnapshot
        {
            get
            {
                return this.CanTakeSnapshotField;
            }
            set
            {
                this.CanTakeSnapshotField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanUpdateShares
        {
            get
            {
                return this.CanUpdateSharesField;
            }
            set
            {
                this.CanUpdateSharesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanVerify
        {
            get
            {
                return this.CanVerifyField;
            }
            set
            {
                this.CanVerifyField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ConnectionId
        {
            get
            {
                return this.ConnectionIdField;
            }
            set
            {
                this.ConnectionIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Role
        {
            get
            {
                return this.RoleField;
            }
            set
            {
                this.RoleField = value;
            }
        }
    }
}
namespace DoubleTake.Communication
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceConnectionParameters", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Communication")]
    public partial class ServiceConnectionParameters : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string AddressField;
        
        private string DomainField;
        
        private string PasswordField;
        
        private System.Nullable<int> PortField;
        
        private string UserNameField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address
        {
            get
            {
                return this.AddressField;
            }
            set
            {
                this.AddressField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Domain
        {
            get
            {
                return this.DomainField;
            }
            set
            {
                this.DomainField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password
        {
            get
            {
                return this.PasswordField;
            }
            set
            {
                this.PasswordField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> Port
        {
            get
            {
                return this.PortField;
            }
            set
            {
                this.PortField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName
        {
            get
            {
                return this.UserNameField;
            }
            set
            {
                this.UserNameField = value;
            }
        }
    }
}
namespace DoubleTake.Dtmu.Contract
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UsageData", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Dtmu.Contract")]
    public partial class UsageData : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Dtmu.Contract.JobUsageData[] DataField;
        
        private System.DateTimeOffset NextCollectionTimeField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Dtmu.Contract.JobUsageData[] Data
        {
            get
            {
                return this.DataField;
            }
            set
            {
                this.DataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTimeOffset NextCollectionTime
        {
            get
            {
                return this.NextCollectionTimeField;
            }
            set
            {
                this.NextCollectionTimeField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="JobUsageData", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Dtmu.Contract")]
    public partial class JobUsageData : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private bool IsInitialDataField;
        
        private System.Guid JobOrConnectionIdField;
        
        private string JobOrConnectionNameField;
        
        private string JobOrConnectionTypeField;
        
        private DoubleTake.Dtmu.Contract.DtmuJobStatus JobStatusField;
        
        private string PersistencePathField;
        
        private DoubleTake.Dtmu.Contract.DtmuActivationStatus SourceActivationStatusField;
        
        private string SourceNetworkIdField;
        
        private System.Guid SourceUniqueIdField;
        
        private string TargetNetworkIdField;
        
        private System.Guid TargetUniqueIdField;
        
        private System.DateTimeOffset TimestampField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsInitialData
        {
            get
            {
                return this.IsInitialDataField;
            }
            set
            {
                this.IsInitialDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid JobOrConnectionId
        {
            get
            {
                return this.JobOrConnectionIdField;
            }
            set
            {
                this.JobOrConnectionIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string JobOrConnectionName
        {
            get
            {
                return this.JobOrConnectionNameField;
            }
            set
            {
                this.JobOrConnectionNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string JobOrConnectionType
        {
            get
            {
                return this.JobOrConnectionTypeField;
            }
            set
            {
                this.JobOrConnectionTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Dtmu.Contract.DtmuJobStatus JobStatus
        {
            get
            {
                return this.JobStatusField;
            }
            set
            {
                this.JobStatusField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PersistencePath
        {
            get
            {
                return this.PersistencePathField;
            }
            set
            {
                this.PersistencePathField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Dtmu.Contract.DtmuActivationStatus SourceActivationStatus
        {
            get
            {
                return this.SourceActivationStatusField;
            }
            set
            {
                this.SourceActivationStatusField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceNetworkId
        {
            get
            {
                return this.SourceNetworkIdField;
            }
            set
            {
                this.SourceNetworkIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid SourceUniqueId
        {
            get
            {
                return this.SourceUniqueIdField;
            }
            set
            {
                this.SourceUniqueIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetNetworkId
        {
            get
            {
                return this.TargetNetworkIdField;
            }
            set
            {
                this.TargetNetworkIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid TargetUniqueId
        {
            get
            {
                return this.TargetUniqueIdField;
            }
            set
            {
                this.TargetUniqueIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTimeOffset Timestamp
        {
            get
            {
                return this.TimestampField;
            }
            set
            {
                this.TimestampField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DtmuActivationStatus", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Dtmu.Contract")]
    public partial class DtmuActivationStatus : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string CodeField;
        
        private bool IsValidField;
        
        private int MajorVersionField;
        
        private int MinorVersionField;
        
        private int ProductCodeField;
        
        private string ProductNameField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code
        {
            get
            {
                return this.CodeField;
            }
            set
            {
                this.CodeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsValid
        {
            get
            {
                return this.IsValidField;
            }
            set
            {
                this.IsValidField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MajorVersion
        {
            get
            {
                return this.MajorVersionField;
            }
            set
            {
                this.MajorVersionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MinorVersion
        {
            get
            {
                return this.MinorVersionField;
            }
            set
            {
                this.MinorVersionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProductCode
        {
            get
            {
                return this.ProductCodeField;
            }
            set
            {
                this.ProductCodeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProductName
        {
            get
            {
                return this.ProductNameField;
            }
            set
            {
                this.ProductNameField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DtmuJobStatus", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Dtmu.Contract")]
    public enum DtmuJobStatus : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Ok = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SourceConnectivityError = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Error = 3,
    }
}
namespace DoubleTake.Common.Alternate
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TupleOfstringstring", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Alternate")]
    public partial class TupleOfstringstring : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string Value0k__BackingFieldField;
        
        private string Value1k__BackingFieldField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Value0>k__BackingField", IsRequired=true)]
        public string Value0k__BackingField
        {
            get
            {
                return this.Value0k__BackingFieldField;
            }
            set
            {
                this.Value0k__BackingFieldField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Value1>k__BackingField", IsRequired=true)]
        public string Value1k__BackingField
        {
            get
            {
                return this.Value1k__BackingFieldField;
            }
            set
            {
                this.Value1k__BackingFieldField = value;
            }
        }
    }
}
namespace DoubleTake.Common.Install
{
    using System.Runtime.Serialization;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InstallStep", Namespace="DoubleTake.Common.Install")]
    public enum InstallStep : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PushFiles = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CheckWMIAccess = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CheckMachineInstall = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CheckFilePush = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CheckLicenses = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RemoteExecute = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Uninstall = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CheckExistingInstall = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CheckDotNetVersion = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Rebooting = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CheckingLogFile = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Success = 11,
    }
}
namespace DoubleTake.Common.Tasks
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActivityToken", Namespace="DoubleTake.Common.Tasks")]
    public partial class ActivityToken : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string[] ActivityNameFormatParametersField;
        
        private string ActivityNameIdField;
        
        private System.Guid IdField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] ActivityNameFormatParameters
        {
            get
            {
                return this.ActivityNameFormatParametersField;
            }
            set
            {
                this.ActivityNameFormatParametersField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ActivityNameId
        {
            get
            {
                return this.ActivityNameIdField;
            }
            set
            {
                this.ActivityNameIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActivityStatusEntry", Namespace="DoubleTake.Common.Tasks")]
    public partial class ActivityStatusEntry : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.TimeSpan DurationField;
        
        private string[] MessageFormatParametersField;
        
        private string MessageIdField;
        
        private string RequesterUserNameField;
        
        private DoubleTake.Common.Tasks.ActivityCompletionStatus StatusField;
        
        private System.DateTimeOffset TimeStampField;
        
        private DoubleTake.Common.Tasks.ActivityToken TokenField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan Duration
        {
            get
            {
                return this.DurationField;
            }
            set
            {
                this.DurationField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] MessageFormatParameters
        {
            get
            {
                return this.MessageFormatParametersField;
            }
            set
            {
                this.MessageFormatParametersField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MessageId
        {
            get
            {
                return this.MessageIdField;
            }
            set
            {
                this.MessageIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RequesterUserName
        {
            get
            {
                return this.RequesterUserNameField;
            }
            set
            {
                this.RequesterUserNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Common.Tasks.ActivityCompletionStatus Status
        {
            get
            {
                return this.StatusField;
            }
            set
            {
                this.StatusField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTimeOffset TimeStamp
        {
            get
            {
                return this.TimeStampField;
            }
            set
            {
                this.TimeStampField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Common.Tasks.ActivityToken Token
        {
            get
            {
                return this.TokenField;
            }
            set
            {
                this.TokenField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActivityCompletionStatus", Namespace="DoubleTake.Common.Tasks")]
    public enum ActivityCompletionStatus : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Pending = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Running = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Completed = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Canceled = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Faulted = 4,
    }
}
namespace DoubleTake.Core.Contract.Snapshot
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SnapshotActivityStatus", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Snapshot")]
    public partial class SnapshotActivityStatus : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Common.Tasks.ActivityStatusEntry activityStatusEntryField;
        
        private DoubleTake.Core.Contract.Snapshot.Snapshot snapshotField;
        
        private DoubleTake.Core.Contract.Snapshot.Snapshot[] snapshotListField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Common.Tasks.ActivityStatusEntry activityStatusEntry
        {
            get
            {
                return this.activityStatusEntryField;
            }
            set
            {
                this.activityStatusEntryField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Snapshot.Snapshot snapshot
        {
            get
            {
                return this.snapshotField;
            }
            set
            {
                this.snapshotField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Snapshot.Snapshot[] snapshotList
        {
            get
            {
                return this.snapshotListField;
            }
            set
            {
                this.snapshotListField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Snapshot", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Snapshot")]
    public partial class Snapshot : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.DateTimeOffset createTimeField;
        
        private DoubleTake.Core.Contract.Snapshot.SnapshotCreateOptions optionsField;
        
        private System.Guid parentIdField;
        
        private DoubleTake.Core.Contract.Snapshot.SnapshotCreationResult resultField;
        
        private System.Guid snapshotIdField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTimeOffset createTime
        {
            get
            {
                return this.createTimeField;
            }
            set
            {
                this.createTimeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Snapshot.SnapshotCreateOptions options
        {
            get
            {
                return this.optionsField;
            }
            set
            {
                this.optionsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid parentId
        {
            get
            {
                return this.parentIdField;
            }
            set
            {
                this.parentIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Snapshot.SnapshotCreationResult result
        {
            get
            {
                return this.resultField;
            }
            set
            {
                this.resultField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid snapshotId
        {
            get
            {
                return this.snapshotIdField;
            }
            set
            {
                this.snapshotIdField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SnapshotCreateOptions", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Snapshot")]
    public partial class SnapshotCreateOptions : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string commentField;
        
        private DoubleTake.Core.Contract.Snapshot.SnapshotOptions commonOptionsField;
        
        private string jobTypeField;
        
        private string nameField;
        
        private DoubleTake.Core.Contract.Connection.SnapshotCreationReason reasonField;
        
        private DoubleTake.Core.Contract.Connection.TargetStates targetStateField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string comment
        {
            get
            {
                return this.commentField;
            }
            set
            {
                this.commentField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Snapshot.SnapshotOptions commonOptions
        {
            get
            {
                return this.commonOptionsField;
            }
            set
            {
                this.commonOptionsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string jobType
        {
            get
            {
                return this.jobTypeField;
            }
            set
            {
                this.jobTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Connection.SnapshotCreationReason reason
        {
            get
            {
                return this.reasonField;
            }
            set
            {
                this.reasonField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Connection.TargetStates targetState
        {
            get
            {
                return this.targetStateField;
            }
            set
            {
                this.targetStateField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SnapshotOptions", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Snapshot")]
    public partial class SnapshotOptions : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string hostAddressField;
        
        private string hostDomainField;
        
        private string hostLoginField;
        
        private string hostPasswordField;
        
        private int hostPortField;
        
        private string imageIdField;
        
        private System.Nullable<System.Guid> jobIdField;
        
        private DoubleTake.Core.Contract.Snapshot.SnapshotBuildingBlockType typeField;
        
        private string[] volumesField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string hostAddress
        {
            get
            {
                return this.hostAddressField;
            }
            set
            {
                this.hostAddressField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string hostDomain
        {
            get
            {
                return this.hostDomainField;
            }
            set
            {
                this.hostDomainField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string hostLogin
        {
            get
            {
                return this.hostLoginField;
            }
            set
            {
                this.hostLoginField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string hostPassword
        {
            get
            {
                return this.hostPasswordField;
            }
            set
            {
                this.hostPasswordField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int hostPort
        {
            get
            {
                return this.hostPortField;
            }
            set
            {
                this.hostPortField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string imageId
        {
            get
            {
                return this.imageIdField;
            }
            set
            {
                this.imageIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Guid> jobId
        {
            get
            {
                return this.jobIdField;
            }
            set
            {
                this.jobIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Snapshot.SnapshotBuildingBlockType type
        {
            get
            {
                return this.typeField;
            }
            set
            {
                this.typeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] volumes
        {
            get
            {
                return this.volumesField;
            }
            set
            {
                this.volumesField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SnapshotBuildingBlockType", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Snapshot")]
    public enum SnapshotBuildingBlockType : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        VSPHERE = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LVM_SERVER = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LVM_VOLUMES = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SnapshotCreationResult", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Snapshot")]
    public enum SnapshotCreationResult : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GOOD = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BAD = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UNKNOWN = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SnapshotListOptions", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Snapshot")]
    public partial class SnapshotListOptions : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Core.Contract.Snapshot.SnapshotOptions commonOptionsField;
        
        private System.Nullable<System.DateTimeOffset> createTimeField;
        
        private System.Nullable<System.TimeSpan> createTimeRangeField;
        
        private bool fromCacheField;
        
        private string jobTypeField;
        
        private System.Nullable<DoubleTake.Core.Contract.Connection.SnapshotCreationReason> reasonField;
        
        private System.Nullable<DoubleTake.Core.Contract.Snapshot.SnapshotCreationResult> resultField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Snapshot.SnapshotOptions commonOptions
        {
            get
            {
                return this.commonOptionsField;
            }
            set
            {
                this.commonOptionsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTimeOffset> createTime
        {
            get
            {
                return this.createTimeField;
            }
            set
            {
                this.createTimeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.TimeSpan> createTimeRange
        {
            get
            {
                return this.createTimeRangeField;
            }
            set
            {
                this.createTimeRangeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool fromCache
        {
            get
            {
                return this.fromCacheField;
            }
            set
            {
                this.fromCacheField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string jobType
        {
            get
            {
                return this.jobTypeField;
            }
            set
            {
                this.jobTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<DoubleTake.Core.Contract.Connection.SnapshotCreationReason> reason
        {
            get
            {
                return this.reasonField;
            }
            set
            {
                this.reasonField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<DoubleTake.Core.Contract.Snapshot.SnapshotCreationResult> result
        {
            get
            {
                return this.resultField;
            }
            set
            {
                this.resultField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SnapshotRevertOptions", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Snapshot")]
    public partial class SnapshotRevertOptions : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Core.Contract.Snapshot.SnapshotOptions commonOptionsField;
        
        private System.Guid snapshotIdField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Snapshot.SnapshotOptions commonOptions
        {
            get
            {
                return this.commonOptionsField;
            }
            set
            {
                this.commonOptionsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid snapshotId
        {
            get
            {
                return this.snapshotIdField;
            }
            set
            {
                this.snapshotIdField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SnapshotDeleteOptions", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Snapshot")]
    public partial class SnapshotDeleteOptions : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Core.Contract.Snapshot.SnapshotOptions commonOptionsField;
        
        private bool mergeField;
        
        private System.Guid snapshotIdField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Snapshot.SnapshotOptions commonOptions
        {
            get
            {
                return this.commonOptionsField;
            }
            set
            {
                this.commonOptionsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool merge
        {
            get
            {
                return this.mergeField;
            }
            set
            {
                this.mergeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid snapshotId
        {
            get
            {
                return this.snapshotIdField;
            }
            set
            {
                this.snapshotIdField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SnapshotMountOptions", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract.Snapshot")]
    public partial class SnapshotMountOptions : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DoubleTake.Core.Contract.Snapshot.SnapshotOptions commonOptionsField;
        
        private string mountPointField;
        
        private System.Guid snapshotIdField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.Contract.Snapshot.SnapshotOptions commonOptions
        {
            get
            {
                return this.commonOptionsField;
            }
            set
            {
                this.commonOptionsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string mountPoint
        {
            get
            {
                return this.mountPointField;
            }
            set
            {
                this.mountPointField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid snapshotId
        {
            get
            {
                return this.snapshotIdField;
            }
            set
            {
                this.snapshotIdField = value;
            }
        }
    }
}
namespace DoubleTake.Core.Contract1
{
    using System.Runtime.Serialization;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ClusteredResourceState", Namespace="DoubleTake.Core.Contract")]
    public enum ClusteredResourceState : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = -1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Inherited = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Initializing = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Online = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Offline = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Failed = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Pending = 128,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OnlinePending = 129,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OfflinePending = 130,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Added = 200,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Deleted = 201,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ResourceDoesNotExist = 1000,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RebootAction", Namespace="DoubleTake.Core.Contract")]
    public enum RebootAction : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RebootAfterCutover = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DoNotRebootAfterCutover = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DnsLockInfo", Namespace="DoubleTake.Core.Contract")]
    public enum DnsLockInfo : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LockDnsRecords = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UnlockDnsRecords = 2,
    }
}
namespace DoubleTake.Core
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ClusterGroupInfo", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core")]
    public partial class ClusterGroupInfo : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string[] DisksField;
        
        private string GroupField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] Disks
        {
            get
            {
                return this.DisksField;
            }
            set
            {
                this.DisksField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Group
        {
            get
            {
                return this.GroupField;
            }
            set
            {
                this.GroupField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ClusterResourceInfo", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core")]
    public partial class ClusterResourceInfo : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.Nullable<int> ClassField;
        
        private string GroupField;
        
        private bool IsStorageCSVField;
        
        private string NameField;
        
        private string OwnerField;
        
        private string[] PossibleOwnersField;
        
        private string TypeField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> Class
        {
            get
            {
                return this.ClassField;
            }
            set
            {
                this.ClassField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Group
        {
            get
            {
                return this.GroupField;
            }
            set
            {
                this.GroupField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsStorageCSV
        {
            get
            {
                return this.IsStorageCSVField;
            }
            set
            {
                this.IsStorageCSVField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Owner
        {
            get
            {
                return this.OwnerField;
            }
            set
            {
                this.OwnerField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] PossibleOwners
        {
            get
            {
                return this.PossibleOwnersField;
            }
            set
            {
                this.PossibleOwnersField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type
        {
            get
            {
                return this.TypeField;
            }
            set
            {
                this.TypeField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ClusteredVirtualMachinesInfo", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core")]
    public partial class ClusteredVirtualMachinesInfo : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string GroupField;
        
        private string OwningNodeField;
        
        private DoubleTake.Core.VirtualMachine[] VirtualMachineField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Group
        {
            get
            {
                return this.GroupField;
            }
            set
            {
                this.GroupField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OwningNode
        {
            get
            {
                return this.OwningNodeField;
            }
            set
            {
                this.OwningNodeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Core.VirtualMachine[] VirtualMachine
        {
            get
            {
                return this.VirtualMachineField;
            }
            set
            {
                this.VirtualMachineField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VirtualMachine", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core")]
    public partial class VirtualMachine : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string IdField;
        
        private string NameField;
        
        private string OwningNodeField;
        
        private string StoragePathField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OwningNode
        {
            get
            {
                return this.OwningNodeField;
            }
            set
            {
                this.OwningNodeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StoragePath
        {
            get
            {
                return this.StoragePathField;
            }
            set
            {
                this.StoragePathField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StorageInfo", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core")]
    public partial class StorageInfo : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string DiskField;
        
        private long FreeSizeInBytesField;
        
        private string GroupField;
        
        private bool IsAvailableStorageGroupField;
        
        private bool IsQuorumResourceField;
        
        private bool IsSystemVolumeField;
        
        private bool IsVolumeCSVField;
        
        private string NameField;
        
        private string OwningNodeField;
        
        private long TotalSizeInBytesField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Disk
        {
            get
            {
                return this.DiskField;
            }
            set
            {
                this.DiskField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long FreeSizeInBytes
        {
            get
            {
                return this.FreeSizeInBytesField;
            }
            set
            {
                this.FreeSizeInBytesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Group
        {
            get
            {
                return this.GroupField;
            }
            set
            {
                this.GroupField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsAvailableStorageGroup
        {
            get
            {
                return this.IsAvailableStorageGroupField;
            }
            set
            {
                this.IsAvailableStorageGroupField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsQuorumResource
        {
            get
            {
                return this.IsQuorumResourceField;
            }
            set
            {
                this.IsQuorumResourceField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSystemVolume
        {
            get
            {
                return this.IsSystemVolumeField;
            }
            set
            {
                this.IsSystemVolumeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsVolumeCSV
        {
            get
            {
                return this.IsVolumeCSVField;
            }
            set
            {
                this.IsVolumeCSVField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OwningNode
        {
            get
            {
                return this.OwningNodeField;
            }
            set
            {
                this.OwningNodeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long TotalSizeInBytes
        {
            get
            {
                return this.TotalSizeInBytesField;
            }
            set
            {
                this.TotalSizeInBytesField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VirtualMachineResourceInfo", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core")]
    public partial class VirtualMachineResourceInfo : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string VmCfgResourceNameField;
        
        private string VmGuidField;
        
        private string VmResourceNameField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VmCfgResourceName
        {
            get
            {
                return this.VmCfgResourceNameField;
            }
            set
            {
                this.VmCfgResourceNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VmGuid
        {
            get
            {
                return this.VmGuidField;
            }
            set
            {
                this.VmGuidField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VmResourceName
        {
            get
            {
                return this.VmResourceNameField;
            }
            set
            {
                this.VmResourceNameField = value;
            }
        }
    }
}
namespace DoubleTake.Diagnostics.Contract
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DtInfoCollectionStatus", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Diagnostics.Contract")]
    public partial class DtInfoCollectionStatus : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string ArchiveNameField;
        
        private byte[][] DataField;
        
        private string ErrorMessageField;
        
        private DoubleTake.Diagnostics.Contract.DtInfoCollectionProgress ProgressField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ArchiveName
        {
            get
            {
                return this.ArchiveNameField;
            }
            set
            {
                this.ArchiveNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[][] Data
        {
            get
            {
                return this.DataField;
            }
            set
            {
                this.DataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorMessage
        {
            get
            {
                return this.ErrorMessageField;
            }
            set
            {
                this.ErrorMessageField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DoubleTake.Diagnostics.Contract.DtInfoCollectionProgress Progress
        {
            get
            {
                return this.ProgressField;
            }
            set
            {
                this.ProgressField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DtInfoCollectionProgress", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Diagnostics.Contract")]
    public enum DtInfoCollectionProgress : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Generating = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Buffering = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DataAvailable = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Complete = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Error = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Canceled = 5,
    }
}
namespace DoubleTake.Discovery.Contract
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DynamicServiceEndpoint", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Discovery.Contract")]
    public partial class DynamicServiceEndpoint : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private int PortField;
        
        private string[] ProtocolTagsField;
        
        private string RelativeUriField;
        
        private string ServiceTagField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Port
        {
            get
            {
                return this.PortField;
            }
            set
            {
                this.PortField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] ProtocolTags
        {
            get
            {
                return this.ProtocolTagsField;
            }
            set
            {
                this.ProtocolTagsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RelativeUri
        {
            get
            {
                return this.RelativeUriField;
            }
            set
            {
                this.RelativeUriField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServiceTag
        {
            get
            {
                return this.ServiceTagField;
            }
            set
            {
                this.ServiceTagField = value;
            }
        }
    }
}
namespace SplaManagement
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DtProduct", Namespace="http://schemas.datacontract.org/2004/07/SplaManagement")]
    public partial class DtProduct : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private int ProductCodeField;
        
        private string ProductFriendlyNameField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProductCode
        {
            get
            {
                return this.ProductCodeField;
            }
            set
            {
                this.ProductCodeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProductFriendlyName
        {
            get
            {
                return this.ProductFriendlyNameField;
            }
            set
            {
                this.ProductFriendlyNameField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SplaManagementFault", Namespace="http://schemas.datacontract.org/2004/07/SplaManagement")]
    public partial class SplaManagementFault : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private SplaManagement.SplaManagementFaultCode CodeField;
        
        private string MessageField;
        
        private System.TimeSpan RetryCallbackTimeField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SplaManagement.SplaManagementFaultCode Code
        {
            get
            {
                return this.CodeField;
            }
            set
            {
                this.CodeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message
        {
            get
            {
                return this.MessageField;
            }
            set
            {
                this.MessageField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan RetryCallbackTime
        {
            get
            {
                return this.RetryCallbackTimeField;
            }
            set
            {
                this.RetryCallbackTimeField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SplaManagementFaultCode", Namespace="http://schemas.datacontract.org/2004/07/SplaManagement")]
    public enum SplaManagementFaultCode : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Exception = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UserIdNotFound = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UsageReport", Namespace="http://schemas.datacontract.org/2004/07/SplaManagement")]
    public partial class UsageReport : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string HostNetworkIdField;
        
        private System.Guid HostUniqueIdField;
        
        private SplaManagement.JobInventory[] InventoryField;
        
        private System.DateTimeOffset MachineTimeField;
        
        private SplaManagement.ActivationStatus TargetActivationStatusField;
        
        private string UserIdField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HostNetworkId
        {
            get
            {
                return this.HostNetworkIdField;
            }
            set
            {
                this.HostNetworkIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid HostUniqueId
        {
            get
            {
                return this.HostUniqueIdField;
            }
            set
            {
                this.HostUniqueIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SplaManagement.JobInventory[] Inventory
        {
            get
            {
                return this.InventoryField;
            }
            set
            {
                this.InventoryField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTimeOffset MachineTime
        {
            get
            {
                return this.MachineTimeField;
            }
            set
            {
                this.MachineTimeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SplaManagement.ActivationStatus TargetActivationStatus
        {
            get
            {
                return this.TargetActivationStatusField;
            }
            set
            {
                this.TargetActivationStatusField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserId
        {
            get
            {
                return this.UserIdField;
            }
            set
            {
                this.UserIdField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="JobInventory", Namespace="http://schemas.datacontract.org/2004/07/SplaManagement")]
    public partial class JobInventory : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.Guid JobOrConnectionIdField;
        
        private string JobOrConnectionNameField;
        
        private string JobOrConnectionTypeField;
        
        private SplaManagement.JobStatus JobStatusField;
        
        private System.DateTimeOffset[] ObservationsField;
        
        private SplaManagement.ActivationStatus SourceActivationStatusField;
        
        private string SourceNetworkIdField;
        
        private System.Guid SourceUniqueIdField;
        
        private string TargetNetworkIdField;
        
        private System.Guid TargetUniqueIdField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid JobOrConnectionId
        {
            get
            {
                return this.JobOrConnectionIdField;
            }
            set
            {
                this.JobOrConnectionIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string JobOrConnectionName
        {
            get
            {
                return this.JobOrConnectionNameField;
            }
            set
            {
                this.JobOrConnectionNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string JobOrConnectionType
        {
            get
            {
                return this.JobOrConnectionTypeField;
            }
            set
            {
                this.JobOrConnectionTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SplaManagement.JobStatus JobStatus
        {
            get
            {
                return this.JobStatusField;
            }
            set
            {
                this.JobStatusField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTimeOffset[] Observations
        {
            get
            {
                return this.ObservationsField;
            }
            set
            {
                this.ObservationsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SplaManagement.ActivationStatus SourceActivationStatus
        {
            get
            {
                return this.SourceActivationStatusField;
            }
            set
            {
                this.SourceActivationStatusField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceNetworkId
        {
            get
            {
                return this.SourceNetworkIdField;
            }
            set
            {
                this.SourceNetworkIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid SourceUniqueId
        {
            get
            {
                return this.SourceUniqueIdField;
            }
            set
            {
                this.SourceUniqueIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetNetworkId
        {
            get
            {
                return this.TargetNetworkIdField;
            }
            set
            {
                this.TargetNetworkIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid TargetUniqueId
        {
            get
            {
                return this.TargetUniqueIdField;
            }
            set
            {
                this.TargetUniqueIdField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="JobStatus", Namespace="http://schemas.datacontract.org/2004/07/SplaManagement")]
    public enum JobStatus : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Ok = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SourceConnectivityError = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Error = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActivationStatus", Namespace="http://schemas.datacontract.org/2004/07/SplaManagement")]
    public partial class ActivationStatus : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string CodeField;
        
        private bool IsValidField;
        
        private int MajorVersionField;
        
        private int MinorVersionField;
        
        private int ProductCodeField;
        
        private string ProductNameField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code
        {
            get
            {
                return this.CodeField;
            }
            set
            {
                this.CodeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsValid
        {
            get
            {
                return this.IsValidField;
            }
            set
            {
                this.IsValidField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MajorVersion
        {
            get
            {
                return this.MajorVersionField;
            }
            set
            {
                this.MajorVersionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MinorVersion
        {
            get
            {
                return this.MinorVersionField;
            }
            set
            {
                this.MinorVersionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProductCode
        {
            get
            {
                return this.ProductCodeField;
            }
            set
            {
                this.ProductCodeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProductName
        {
            get
            {
                return this.ProductNameField;
            }
            set
            {
                this.ProductNameField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LicenseResponse", Namespace="http://schemas.datacontract.org/2004/07/SplaManagement")]
    public partial class LicenseResponse : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string[] ActivationCodesField;
        
        private System.TimeSpan CallbackTimeField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] ActivationCodes
        {
            get
            {
                return this.ActivationCodesField;
            }
            set
            {
                this.ActivationCodesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan CallbackTime
        {
            get
            {
                return this.CallbackTimeField;
            }
            set
            {
                this.CallbackTimeField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Fault", Namespace="http://schemas.datacontract.org/2004/07/SplaManagement")]
    public partial class Fault : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private int ErrorCodeField;
        
        private string ErrorMessageField;
        
        private string ErrorTypeField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ErrorCode
        {
            get
            {
                return this.ErrorCodeField;
            }
            set
            {
                this.ErrorCodeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorMessage
        {
            get
            {
                return this.ErrorMessageField;
            }
            set
            {
                this.ErrorMessageField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorType
        {
            get
            {
                return this.ErrorTypeField;
            }
            set
            {
                this.ErrorTypeField = value;
            }
        }
    }
}
namespace System.Net.Sockets
{
    using System.Runtime.Serialization;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AddressFamily", Namespace="http://schemas.datacontract.org/2004/07/System.Net.Sockets")]
    public enum AddressFamily : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = -1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unspecified = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unix = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InterNetwork = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ImpLink = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Pup = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Chaos = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NS = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Ipx = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Iso = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Osi = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Ecma = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DataKit = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Ccitt = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Sna = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DecNet = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DataLink = 13,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Lat = 14,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        HyperChannel = 15,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AppleTalk = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NetBios = 17,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        VoiceView = 18,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FireFox = 19,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Banyan = 21,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Atm = 22,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InterNetworkV6 = 23,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Cluster = 24,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Ieee12844 = 25,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Irda = 26,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NetworkDesigners = 28,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Max = 29,
    }
}
namespace System.Net
{
    using System.Runtime.Serialization;
    
    
 /*   [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NetworkCredential", Namespace="http://schemas.datacontract.org/2004/07/System.Net")]
    public partial class NetworkCredential : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string DomainField;
        
        private string PasswordField;
        
        private System.Security.SecureString SecurePasswordField;
        
        private string UserNameField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Domain
        {
            get
            {
                return this.DomainField;
            }
            set
            {
                this.DomainField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password
        {
            get
            {
                return this.PasswordField;
            }
            set
            {
                this.PasswordField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Security.SecureString SecurePassword
        {
            get
            {
                return this.SecurePasswordField;
            }
            set
            {
                this.SecurePasswordField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName
        {
            get
            {
                return this.UserNameField;
            }
            set
            {
                this.UserNameField = value;
            }
        }
    }
  */
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IPAddress", Namespace="http://schemas.datacontract.org/2004/07/System.Net")]
    public partial class IPAddress : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private long m_AddressField;
        
        private System.Net.Sockets.AddressFamily m_FamilyField;
        
        private int m_HashCodeField;
        
        private ushort[] m_NumbersField;
        
        private long m_ScopeIdField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public long m_Address
        {
            get
            {
                return this.m_AddressField;
            }
            set
            {
                this.m_AddressField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Net.Sockets.AddressFamily m_Family
        {
            get
            {
                return this.m_FamilyField;
            }
            set
            {
                this.m_FamilyField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int m_HashCode
        {
            get
            {
                return this.m_HashCodeField;
            }
            set
            {
                this.m_HashCodeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public ushort[] m_Numbers
        {
            get
            {
                return this.m_NumbersField;
            }
            set
            {
                this.m_NumbersField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public long m_ScopeId
        {
            get
            {
                return this.m_ScopeIdField;
            }
            set
            {
                this.m_ScopeIdField = value;
            }
        }
    }
}
namespace www.doubletake.com.Common.Contract
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LogMessage", Namespace="http://www.doubletake.com/Common/Contract")]
    public partial class LogMessage : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private int HashField;
        
        private int IdField;
        
        private int MessageTypeField;
        
        private int ProcessIdField;
        
        private int SequenceField;
        
        private string SourceField;
        
        private string TextField;
        
        private int ThreadIdField;
        
        private System.DateTime TimestampField;
        
        private System.DateTimeOffset TimestampOffsetField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Hash
        {
            get
            {
                return this.HashField;
            }
            set
            {
                this.HashField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MessageType
        {
            get
            {
                return this.MessageTypeField;
            }
            set
            {
                this.MessageTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProcessId
        {
            get
            {
                return this.ProcessIdField;
            }
            set
            {
                this.ProcessIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Sequence
        {
            get
            {
                return this.SequenceField;
            }
            set
            {
                this.SequenceField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Source
        {
            get
            {
                return this.SourceField;
            }
            set
            {
                this.SourceField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Text
        {
            get
            {
                return this.TextField;
            }
            set
            {
                this.TextField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ThreadId
        {
            get
            {
                return this.ThreadIdField;
            }
            set
            {
                this.ThreadIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Timestamp
        {
            get
            {
                return this.TimestampField;
            }
            set
            {
                this.TimestampField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTimeOffset TimestampOffset
        {
            get
            {
                return this.TimestampOffsetField;
            }
            set
            {
                this.TimestampOffsetField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EventLogEntryData2", Namespace="http://www.doubletake.com/Common/Contract")]
    public partial class EventLogEntryData2 : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string CategoryField;
        
        private short CategoryNumberField;
        
        private string EntryTypeField;
        
        private int IndexField;
        
        private long InstanceIdField;
        
        private string MachineNameField;
        
        private string MessageField;
        
        private string[] ReplacementStringsField;
        
        private string SourceField;
        
        private System.DateTimeOffset TimeGeneratedField;
        
        private System.DateTimeOffset TimeWrittenField;
        
        private string UserNameField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Category
        {
            get
            {
                return this.CategoryField;
            }
            set
            {
                this.CategoryField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short CategoryNumber
        {
            get
            {
                return this.CategoryNumberField;
            }
            set
            {
                this.CategoryNumberField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EntryType
        {
            get
            {
                return this.EntryTypeField;
            }
            set
            {
                this.EntryTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Index
        {
            get
            {
                return this.IndexField;
            }
            set
            {
                this.IndexField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long InstanceId
        {
            get
            {
                return this.InstanceIdField;
            }
            set
            {
                this.InstanceIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MachineName
        {
            get
            {
                return this.MachineNameField;
            }
            set
            {
                this.MachineNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message
        {
            get
            {
                return this.MessageField;
            }
            set
            {
                this.MessageField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] ReplacementStrings
        {
            get
            {
                return this.ReplacementStringsField;
            }
            set
            {
                this.ReplacementStringsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Source
        {
            get
            {
                return this.SourceField;
            }
            set
            {
                this.SourceField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTimeOffset TimeGenerated
        {
            get
            {
                return this.TimeGeneratedField;
            }
            set
            {
                this.TimeGeneratedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTimeOffset TimeWritten
        {
            get
            {
                return this.TimeWrittenField;
            }
            set
            {
                this.TimeWrittenField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName
        {
            get
            {
                return this.UserNameField;
            }
            set
            {
                this.UserNameField = value;
            }
        }
    }
}


[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace="DoubleTake.Jobs.Contract", ConfigurationName="IJobManagerPrivate")]
public interface IJobManagerPrivate
{
    
    [System.ServiceModel.OperationContractAttribute(Action="DoubleTake.Jobs.Contract/IJobManagerPrivate/CreateFromExistingJob", ReplyAction="DoubleTake.Jobs.Contract/IJobManagerPrivate/CreateFromExistingJobResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="DoubleTake.Jobs.Contract/IJobManagerPrivate/CreateFromExistingJobCommonFaultFault" +
        "", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void CreateFromExistingJob(DoubleTake.Jobs.Contract.JobInfo info, DoubleTake.Jobs.Contract.JobCredentials credentials);
    
    [System.ServiceModel.OperationContractAttribute(Action="DoubleTake.Jobs.Contract/IJobManagerPrivate/CreateFromExistingJob", ReplyAction="DoubleTake.Jobs.Contract/IJobManagerPrivate/CreateFromExistingJobResponse")]
    System.Threading.Tasks.Task CreateFromExistingJobAsync(DoubleTake.Jobs.Contract.JobInfo info, DoubleTake.Jobs.Contract.JobCredentials credentials);
    
    [System.ServiceModel.OperationContractAttribute(Action="DoubleTake.Jobs.Contract/IJobManagerPrivate/SetCredentials", ReplyAction="DoubleTake.Jobs.Contract/IJobManagerPrivate/SetCredentialsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="DoubleTake.Jobs.Contract/IJobManagerPrivate/SetCredentialsCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void SetCredentials(System.Guid Id, DoubleTake.Jobs.Contract.JobCredentials credentials);
    
    [System.ServiceModel.OperationContractAttribute(Action="DoubleTake.Jobs.Contract/IJobManagerPrivate/SetCredentials", ReplyAction="DoubleTake.Jobs.Contract/IJobManagerPrivate/SetCredentialsResponse")]
    System.Threading.Tasks.Task SetCredentialsAsync(System.Guid Id, DoubleTake.Jobs.Contract.JobCredentials credentials);
    
    [System.ServiceModel.OperationContractAttribute(Action="DoubleTake.Jobs.Contract/IJobManagerPrivate/UpdateCredentials", ReplyAction="DoubleTake.Jobs.Contract/IJobManagerPrivate/UpdateCredentialsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="DoubleTake.Jobs.Contract/IJobManagerPrivate/UpdateCredentialsCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void UpdateCredentials(System.Guid Id, DoubleTake.Jobs.Contract.JobCredentials credentials, DoubleTake.Jobs.Contract.JobOptions jobOptions);
    
    [System.ServiceModel.OperationContractAttribute(Action="DoubleTake.Jobs.Contract/IJobManagerPrivate/UpdateCredentials", ReplyAction="DoubleTake.Jobs.Contract/IJobManagerPrivate/UpdateCredentialsResponse")]
    System.Threading.Tasks.Task UpdateCredentialsAsync(System.Guid Id, DoubleTake.Jobs.Contract.JobCredentials credentials, DoubleTake.Jobs.Contract.JobOptions jobOptions);
    
    [System.ServiceModel.OperationContractAttribute(Action="DoubleTake.Jobs.Contract/IJobManagerPrivate/StartClusteredJob", ReplyAction="DoubleTake.Jobs.Contract/IJobManagerPrivate/StartClusteredJobResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="DoubleTake.Jobs.Contract/IJobManagerPrivate/StartClusteredJobCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void StartClusteredJob(string jobFile);
    
    [System.ServiceModel.OperationContractAttribute(Action="DoubleTake.Jobs.Contract/IJobManagerPrivate/StartClusteredJob", ReplyAction="DoubleTake.Jobs.Contract/IJobManagerPrivate/StartClusteredJobResponse")]
    System.Threading.Tasks.Task StartClusteredJobAsync(string jobFile);
    
    [System.ServiceModel.OperationContractAttribute(Action="DoubleTake.Jobs.Contract/IJobManagerPrivate/WriteDiagnosticToDisk", ReplyAction="DoubleTake.Jobs.Contract/IJobManagerPrivate/WriteDiagnosticToDiskResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="DoubleTake.Jobs.Contract/IJobManagerPrivate/WriteDiagnosticToDiskCommonFaultFault" +
        "", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void WriteDiagnosticToDisk(string[] diagnosticName);
    
    [System.ServiceModel.OperationContractAttribute(Action="DoubleTake.Jobs.Contract/IJobManagerPrivate/WriteDiagnosticToDisk", ReplyAction="DoubleTake.Jobs.Contract/IJobManagerPrivate/WriteDiagnosticToDiskResponse")]
    System.Threading.Tasks.Task WriteDiagnosticToDiskAsync(string[] diagnosticName);
    
    [System.ServiceModel.OperationContractAttribute(Action="DoubleTake.Jobs.Contract/IJobManagerPrivate/TransferUsage", ReplyAction="DoubleTake.Jobs.Contract/IJobManagerPrivate/TransferUsageResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="DoubleTake.Jobs.Contract/IJobManagerPrivate/TransferUsageCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void TransferUsage(DoubleTake.Dtmu.Contract.UsageData usageData);
    
    [System.ServiceModel.OperationContractAttribute(Action="DoubleTake.Jobs.Contract/IJobManagerPrivate/TransferUsage", ReplyAction="DoubleTake.Jobs.Contract/IJobManagerPrivate/TransferUsageResponse")]
    System.Threading.Tasks.Task TransferUsageAsync(DoubleTake.Dtmu.Contract.UsageData usageData);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IJobManagerPrivateChannel : IJobManagerPrivate, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class JobManagerPrivateClient : System.ServiceModel.ClientBase<IJobManagerPrivate>, IJobManagerPrivate
{
    
    public JobManagerPrivateClient()
    {
    }
    
    public JobManagerPrivateClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public JobManagerPrivateClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public JobManagerPrivateClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public JobManagerPrivateClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public void CreateFromExistingJob(DoubleTake.Jobs.Contract.JobInfo info, DoubleTake.Jobs.Contract.JobCredentials credentials)
    {
        base.Channel.CreateFromExistingJob(info, credentials);
    }
    
    public System.Threading.Tasks.Task CreateFromExistingJobAsync(DoubleTake.Jobs.Contract.JobInfo info, DoubleTake.Jobs.Contract.JobCredentials credentials)
    {
        return base.Channel.CreateFromExistingJobAsync(info, credentials);
    }
    
    public void SetCredentials(System.Guid Id, DoubleTake.Jobs.Contract.JobCredentials credentials)
    {
        base.Channel.SetCredentials(Id, credentials);
    }
    
    public System.Threading.Tasks.Task SetCredentialsAsync(System.Guid Id, DoubleTake.Jobs.Contract.JobCredentials credentials)
    {
        return base.Channel.SetCredentialsAsync(Id, credentials);
    }
    
    public void UpdateCredentials(System.Guid Id, DoubleTake.Jobs.Contract.JobCredentials credentials, DoubleTake.Jobs.Contract.JobOptions jobOptions)
    {
        base.Channel.UpdateCredentials(Id, credentials, jobOptions);
    }
    
    public System.Threading.Tasks.Task UpdateCredentialsAsync(System.Guid Id, DoubleTake.Jobs.Contract.JobCredentials credentials, DoubleTake.Jobs.Contract.JobOptions jobOptions)
    {
        return base.Channel.UpdateCredentialsAsync(Id, credentials, jobOptions);
    }
    
    public void StartClusteredJob(string jobFile)
    {
        base.Channel.StartClusteredJob(jobFile);
    }
    
    public System.Threading.Tasks.Task StartClusteredJobAsync(string jobFile)
    {
        return base.Channel.StartClusteredJobAsync(jobFile);
    }
    
    public void WriteDiagnosticToDisk(string[] diagnosticName)
    {
        base.Channel.WriteDiagnosticToDisk(diagnosticName);
    }
    
    public System.Threading.Tasks.Task WriteDiagnosticToDiskAsync(string[] diagnosticName)
    {
        return base.Channel.WriteDiagnosticToDiskAsync(diagnosticName);
    }
    
    public void TransferUsage(DoubleTake.Dtmu.Contract.UsageData usageData)
    {
        base.Channel.TransferUsage(usageData);
    }
    
    public System.Threading.Tasks.Task TransferUsageAsync(DoubleTake.Dtmu.Contract.UsageData usageData)
    {
        return base.Channel.TransferUsageAsync(usageData);
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName="IMonitorManager")]
public interface IMonitorManager
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonitorManager/Create", ReplyAction="http://tempuri.org/IMonitorManager/CreateResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Monitoring.Contract.ValidationFault), Action="http://tempuri.org/IMonitorManager/CreateValidationFaultFault", Name="ValidationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Monitoring.Contract")]
    System.Guid Create(DoubleTake.Monitoring.Contract.MonitorOptions options);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonitorManager/Create", ReplyAction="http://tempuri.org/IMonitorManager/CreateResponse")]
    System.Threading.Tasks.Task<System.Guid> CreateAsync(DoubleTake.Monitoring.Contract.MonitorOptions options);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonitorManager/Delete", ReplyAction="http://tempuri.org/IMonitorManager/DeleteResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault), Action="http://tempuri.org/IMonitorManager/DeleteInvalidOperationFaultFault", Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    bool Delete(System.Guid id);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonitorManager/Delete", ReplyAction="http://tempuri.org/IMonitorManager/DeleteResponse")]
    System.Threading.Tasks.Task<bool> DeleteAsync(System.Guid id);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonitorManager/Start", ReplyAction="http://tempuri.org/IMonitorManager/StartResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault), Action="http://tempuri.org/IMonitorManager/StartInvalidOperationFaultFault", Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://tempuri.org/IMonitorManager/StartArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void Start(System.Guid id);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonitorManager/Start", ReplyAction="http://tempuri.org/IMonitorManager/StartResponse")]
    System.Threading.Tasks.Task StartAsync(System.Guid id);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonitorManager/Stop", ReplyAction="http://tempuri.org/IMonitorManager/StopResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://tempuri.org/IMonitorManager/StopArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault), Action="http://tempuri.org/IMonitorManager/StopInvalidOperationFaultFault", Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void Stop(System.Guid id);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonitorManager/Stop", ReplyAction="http://tempuri.org/IMonitorManager/StopResponse")]
    System.Threading.Tasks.Task StopAsync(System.Guid id);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonitorManager/Edit", ReplyAction="http://tempuri.org/IMonitorManager/EditResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://tempuri.org/IMonitorManager/EditArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault), Action="http://tempuri.org/IMonitorManager/EditInvalidOperationFaultFault", Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void Edit(System.Guid id, DoubleTake.Monitoring.Contract.MonitorOptions newOptions);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonitorManager/Edit", ReplyAction="http://tempuri.org/IMonitorManager/EditResponse")]
    System.Threading.Tasks.Task EditAsync(System.Guid id, DoubleTake.Monitoring.Contract.MonitorOptions newOptions);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonitorManager/GetMonitor", ReplyAction="http://tempuri.org/IMonitorManager/GetMonitorResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://tempuri.org/IMonitorManager/GetMonitorArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Monitoring.Contract.MonitorInfo GetMonitor(System.Guid id);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonitorManager/GetMonitor", ReplyAction="http://tempuri.org/IMonitorManager/GetMonitorResponse")]
    System.Threading.Tasks.Task<DoubleTake.Monitoring.Contract.MonitorInfo> GetMonitorAsync(System.Guid id);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonitorManager/GetSimpleMonitor", ReplyAction="http://tempuri.org/IMonitorManager/GetSimpleMonitorResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://tempuri.org/IMonitorManager/GetSimpleMonitorArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Monitoring.Contract.SimpleMonitorInfo GetSimpleMonitor(System.Guid id);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonitorManager/GetSimpleMonitor", ReplyAction="http://tempuri.org/IMonitorManager/GetSimpleMonitorResponse")]
    System.Threading.Tasks.Task<DoubleTake.Monitoring.Contract.SimpleMonitorInfo> GetSimpleMonitorAsync(System.Guid id);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonitorManager/GetMonitors", ReplyAction="http://tempuri.org/IMonitorManager/GetMonitorsResponse")]
    DoubleTake.Monitoring.Contract.MonitorInfo[] GetMonitors();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonitorManager/GetMonitors", ReplyAction="http://tempuri.org/IMonitorManager/GetMonitorsResponse")]
    System.Threading.Tasks.Task<DoubleTake.Monitoring.Contract.MonitorInfo[]> GetMonitorsAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonitorManager/GetSimpleMonitors", ReplyAction="http://tempuri.org/IMonitorManager/GetSimpleMonitorsResponse")]
    DoubleTake.Monitoring.Contract.SimpleMonitorInfo[] GetSimpleMonitors();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonitorManager/GetSimpleMonitors", ReplyAction="http://tempuri.org/IMonitorManager/GetSimpleMonitorsResponse")]
    System.Threading.Tasks.Task<DoubleTake.Monitoring.Contract.SimpleMonitorInfo[]> GetSimpleMonitorsAsync();
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IMonitorManagerChannel : IMonitorManager, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class MonitorManagerClient : System.ServiceModel.ClientBase<IMonitorManager>, IMonitorManager
{
    
    public MonitorManagerClient()
    {
    }
    
    public MonitorManagerClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public MonitorManagerClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public MonitorManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public MonitorManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public System.Guid Create(DoubleTake.Monitoring.Contract.MonitorOptions options)
    {
        return base.Channel.Create(options);
    }
    
    public System.Threading.Tasks.Task<System.Guid> CreateAsync(DoubleTake.Monitoring.Contract.MonitorOptions options)
    {
        return base.Channel.CreateAsync(options);
    }
    
    public bool Delete(System.Guid id)
    {
        return base.Channel.Delete(id);
    }
    
    public System.Threading.Tasks.Task<bool> DeleteAsync(System.Guid id)
    {
        return base.Channel.DeleteAsync(id);
    }
    
    public void Start(System.Guid id)
    {
        base.Channel.Start(id);
    }
    
    public System.Threading.Tasks.Task StartAsync(System.Guid id)
    {
        return base.Channel.StartAsync(id);
    }
    
    public void Stop(System.Guid id)
    {
        base.Channel.Stop(id);
    }
    
    public System.Threading.Tasks.Task StopAsync(System.Guid id)
    {
        return base.Channel.StopAsync(id);
    }
    
    public void Edit(System.Guid id, DoubleTake.Monitoring.Contract.MonitorOptions newOptions)
    {
        base.Channel.Edit(id, newOptions);
    }
    
    public System.Threading.Tasks.Task EditAsync(System.Guid id, DoubleTake.Monitoring.Contract.MonitorOptions newOptions)
    {
        return base.Channel.EditAsync(id, newOptions);
    }
    
    public DoubleTake.Monitoring.Contract.MonitorInfo GetMonitor(System.Guid id)
    {
        return base.Channel.GetMonitor(id);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Monitoring.Contract.MonitorInfo> GetMonitorAsync(System.Guid id)
    {
        return base.Channel.GetMonitorAsync(id);
    }
    
    public DoubleTake.Monitoring.Contract.SimpleMonitorInfo GetSimpleMonitor(System.Guid id)
    {
        return base.Channel.GetSimpleMonitor(id);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Monitoring.Contract.SimpleMonitorInfo> GetSimpleMonitorAsync(System.Guid id)
    {
        return base.Channel.GetSimpleMonitorAsync(id);
    }
    
    public DoubleTake.Monitoring.Contract.MonitorInfo[] GetMonitors()
    {
        return base.Channel.GetMonitors();
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Monitoring.Contract.MonitorInfo[]> GetMonitorsAsync()
    {
        return base.Channel.GetMonitorsAsync();
    }
    
    public DoubleTake.Monitoring.Contract.SimpleMonitorInfo[] GetSimpleMonitors()
    {
        return base.Channel.GetSimpleMonitors();
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Monitoring.Contract.SimpleMonitorInfo[]> GetSimpleMonitorsAsync()
    {
        return base.Channel.GetSimpleMonitorsAsync();
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName="IMonitorAgentManager")]
public interface IMonitorAgentManager
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonitorAgentManager/ValidateQuery", ReplyAction="http://tempuri.org/IMonitorAgentManager/ValidateQueryResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://tempuri.org/IMonitorAgentManager/ValidateQueryArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void ValidateQuery(string queryName, DoubleTake.Monitoring.Contract.QueryInput queryInput);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonitorAgentManager/ValidateQuery", ReplyAction="http://tempuri.org/IMonitorAgentManager/ValidateQueryResponse")]
    System.Threading.Tasks.Task ValidateQueryAsync(string queryName, DoubleTake.Monitoring.Contract.QueryInput queryInput);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonitorAgentManager/ValidateAction", ReplyAction="http://tempuri.org/IMonitorAgentManager/ValidateActionResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://tempuri.org/IMonitorAgentManager/ValidateActionArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void ValidateAction(string actionName, DoubleTake.Monitoring.Contract.ActionInput actionInput);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonitorAgentManager/ValidateAction", ReplyAction="http://tempuri.org/IMonitorAgentManager/ValidateActionResponse")]
    System.Threading.Tasks.Task ValidateActionAsync(string actionName, DoubleTake.Monitoring.Contract.ActionInput actionInput);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonitorAgentManager/ExecuteQuery", ReplyAction="http://tempuri.org/IMonitorAgentManager/ExecuteQueryResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://tempuri.org/IMonitorAgentManager/ExecuteQueryArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault), Action="http://tempuri.org/IMonitorAgentManager/ExecuteQueryInvalidOperationFaultFault", Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Monitoring.Contract.QueryResult ExecuteQuery(string queryName, DoubleTake.Monitoring.Contract.QueryInput queryInput);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonitorAgentManager/ExecuteQuery", ReplyAction="http://tempuri.org/IMonitorAgentManager/ExecuteQueryResponse")]
    System.Threading.Tasks.Task<DoubleTake.Monitoring.Contract.QueryResult> ExecuteQueryAsync(string queryName, DoubleTake.Monitoring.Contract.QueryInput queryInput);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonitorAgentManager/ExecuteAction", ReplyAction="http://tempuri.org/IMonitorAgentManager/ExecuteActionResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://tempuri.org/IMonitorAgentManager/ExecuteActionArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault), Action="http://tempuri.org/IMonitorAgentManager/ExecuteActionInvalidOperationFaultFault", Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Monitoring.Contract.ActionResult ExecuteAction(string actionName, DoubleTake.Monitoring.Contract.ActionInput actionInput);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonitorAgentManager/ExecuteAction", ReplyAction="http://tempuri.org/IMonitorAgentManager/ExecuteActionResponse")]
    System.Threading.Tasks.Task<DoubleTake.Monitoring.Contract.ActionResult> ExecuteActionAsync(string actionName, DoubleTake.Monitoring.Contract.ActionInput actionInput);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IMonitorAgentManagerChannel : IMonitorAgentManager, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class MonitorAgentManagerClient : System.ServiceModel.ClientBase<IMonitorAgentManager>, IMonitorAgentManager
{
    
    public MonitorAgentManagerClient()
    {
    }
    
    public MonitorAgentManagerClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public MonitorAgentManagerClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public MonitorAgentManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public MonitorAgentManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public void ValidateQuery(string queryName, DoubleTake.Monitoring.Contract.QueryInput queryInput)
    {
        base.Channel.ValidateQuery(queryName, queryInput);
    }
    
    public System.Threading.Tasks.Task ValidateQueryAsync(string queryName, DoubleTake.Monitoring.Contract.QueryInput queryInput)
    {
        return base.Channel.ValidateQueryAsync(queryName, queryInput);
    }
    
    public void ValidateAction(string actionName, DoubleTake.Monitoring.Contract.ActionInput actionInput)
    {
        base.Channel.ValidateAction(actionName, actionInput);
    }
    
    public System.Threading.Tasks.Task ValidateActionAsync(string actionName, DoubleTake.Monitoring.Contract.ActionInput actionInput)
    {
        return base.Channel.ValidateActionAsync(actionName, actionInput);
    }
    
    public DoubleTake.Monitoring.Contract.QueryResult ExecuteQuery(string queryName, DoubleTake.Monitoring.Contract.QueryInput queryInput)
    {
        return base.Channel.ExecuteQuery(queryName, queryInput);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Monitoring.Contract.QueryResult> ExecuteQueryAsync(string queryName, DoubleTake.Monitoring.Contract.QueryInput queryInput)
    {
        return base.Channel.ExecuteQueryAsync(queryName, queryInput);
    }
    
    public DoubleTake.Monitoring.Contract.ActionResult ExecuteAction(string actionName, DoubleTake.Monitoring.Contract.ActionInput actionInput)
    {
        return base.Channel.ExecuteAction(actionName, actionInput);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Monitoring.Contract.ActionResult> ExecuteActionAsync(string actionName, DoubleTake.Monitoring.Contract.ActionInput actionInput)
    {
        return base.Channel.ExecuteActionAsync(actionName, actionInput);
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace="http://VisionSolutions.com", ConfigurationName="ISplaUsageAndLicense")]
public interface ISplaUsageAndLicense
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://VisionSolutions.com/ISplaUsageAndLicense/GetProductsFor", ReplyAction="http://VisionSolutions.com/ISplaUsageAndLicense/GetProductsForResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(SplaManagement.SplaManagementFault), Action="http://VisionSolutions.com/ISplaUsageAndLicense/GetProductsForSplaManagementFault" +
        "Fault", Name="SplaManagementFault", Namespace="http://schemas.datacontract.org/2004/07/SplaManagement")]
    SplaManagement.DtProduct[] GetProductsFor(string os);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://VisionSolutions.com/ISplaUsageAndLicense/GetProductsFor", ReplyAction="http://VisionSolutions.com/ISplaUsageAndLicense/GetProductsForResponse")]
    System.Threading.Tasks.Task<SplaManagement.DtProduct[]> GetProductsForAsync(string os);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://VisionSolutions.com/ISplaUsageAndLicense/RequestLicense", ReplyAction="http://VisionSolutions.com/ISplaUsageAndLicense/RequestLicenseResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(SplaManagement.SplaManagementFault), Action="http://VisionSolutions.com/ISplaUsageAndLicense/RequestLicenseSplaManagementFault" +
        "Fault", Name="SplaManagementFault", Namespace="http://schemas.datacontract.org/2004/07/SplaManagement")]
    SplaManagement.LicenseResponse RequestLicense(SplaManagement.UsageReport report);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://VisionSolutions.com/ISplaUsageAndLicense/RequestLicense", ReplyAction="http://VisionSolutions.com/ISplaUsageAndLicense/RequestLicenseResponse")]
    System.Threading.Tasks.Task<SplaManagement.LicenseResponse> RequestLicenseAsync(SplaManagement.UsageReport report);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://VisionSolutions.com/ISplaUsageAndLicense/ReportActivationFailures", ReplyAction="http://VisionSolutions.com/ISplaUsageAndLicense/ReportActivationFailuresResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(SplaManagement.SplaManagementFault), Action="http://VisionSolutions.com/ISplaUsageAndLicense/ReportActivationFailuresSplaManag" +
        "ementFaultFault", Name="SplaManagementFault", Namespace="http://schemas.datacontract.org/2004/07/SplaManagement")]
    void ReportActivationFailures(System.Guid serverGuid, SplaManagement.Fault[] failures);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://VisionSolutions.com/ISplaUsageAndLicense/ReportActivationFailures", ReplyAction="http://VisionSolutions.com/ISplaUsageAndLicense/ReportActivationFailuresResponse")]
    System.Threading.Tasks.Task ReportActivationFailuresAsync(System.Guid serverGuid, SplaManagement.Fault[] failures);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface ISplaUsageAndLicenseChannel : ISplaUsageAndLicense, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class SplaUsageAndLicenseClient : System.ServiceModel.ClientBase<ISplaUsageAndLicense>, ISplaUsageAndLicense
{
    
    public SplaUsageAndLicenseClient()
    {
    }
    
    public SplaUsageAndLicenseClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public SplaUsageAndLicenseClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public SplaUsageAndLicenseClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public SplaUsageAndLicenseClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public SplaManagement.DtProduct[] GetProductsFor(string os)
    {
        return base.Channel.GetProductsFor(os);
    }
    
    public System.Threading.Tasks.Task<SplaManagement.DtProduct[]> GetProductsForAsync(string os)
    {
        return base.Channel.GetProductsForAsync(os);
    }
    
    public SplaManagement.LicenseResponse RequestLicense(SplaManagement.UsageReport report)
    {
        return base.Channel.RequestLicense(report);
    }
    
    public System.Threading.Tasks.Task<SplaManagement.LicenseResponse> RequestLicenseAsync(SplaManagement.UsageReport report)
    {
        return base.Channel.RequestLicenseAsync(report);
    }
    
    public void ReportActivationFailures(System.Guid serverGuid, SplaManagement.Fault[] failures)
    {
        base.Channel.ReportActivationFailures(serverGuid, failures);
    }
    
    public System.Threading.Tasks.Task ReportActivationFailuresAsync(System.Guid serverGuid, SplaManagement.Fault[] failures)
    {
        return base.Channel.ReportActivationFailuresAsync(serverGuid, failures);
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace="http://www.doubletake.com/Common/Contract/CollectorConfiguration", ConfigurationName="ICollectorConfiguration")]
public interface ICollectorConfiguration
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/CollectorConfiguration/ICollectorConfig" +
        "uration/GetCollectorInfo", ReplyAction="http://www.doubletake.com/Common/Contract/CollectorConfiguration/ICollectorConfig" +
        "uration/GetCollectorInfoResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Common/Contract/CollectorConfiguration/ICollectorConfig" +
        "uration/GetCollectorInfoAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Common.Contract.CollectorInfo GetCollectorInfo();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/CollectorConfiguration/ICollectorConfig" +
        "uration/GetCollectorInfo", ReplyAction="http://www.doubletake.com/Common/Contract/CollectorConfiguration/ICollectorConfig" +
        "uration/GetCollectorInfoResponse")]
    System.Threading.Tasks.Task<DoubleTake.Common.Contract.CollectorInfo> GetCollectorInfoAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/CollectorConfiguration/ICollectorConfig" +
        "uration/SetCollectorInfo", ReplyAction="http://www.doubletake.com/Common/Contract/CollectorConfiguration/ICollectorConfig" +
        "uration/SetCollectorInfoResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Common/Contract/CollectorConfiguration/ICollectorConfig" +
        "uration/SetCollectorInfoAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Common/Contract/CollectorConfiguration/ICollectorConfig" +
        "uration/SetCollectorInfoArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void SetCollectorInfo(DoubleTake.Common.Contract.CollectorConfigurationInfo collectorConfigInfo, DoubleTake.Core.Contract.CollectedServer[] addServers, DoubleTake.Core.Contract.CollectedServer[] removeServers, DoubleTake.Core.Contract.CollectedServer[] updateServers);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/CollectorConfiguration/ICollectorConfig" +
        "uration/SetCollectorInfo", ReplyAction="http://www.doubletake.com/Common/Contract/CollectorConfiguration/ICollectorConfig" +
        "uration/SetCollectorInfoResponse")]
    System.Threading.Tasks.Task SetCollectorInfoAsync(DoubleTake.Common.Contract.CollectorConfigurationInfo collectorConfigInfo, DoubleTake.Core.Contract.CollectedServer[] addServers, DoubleTake.Core.Contract.CollectedServer[] removeServers, DoubleTake.Core.Contract.CollectedServer[] updateServers);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/CollectorConfiguration/ICollectorConfig" +
        "uration/GetConfigurationInfo", ReplyAction="http://www.doubletake.com/Common/Contract/CollectorConfiguration/ICollectorConfig" +
        "uration/GetConfigurationInfoResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Common/Contract/CollectorConfiguration/ICollectorConfig" +
        "uration/GetConfigurationInfoAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Common.Contract.CollectorConfigurationInfo GetConfigurationInfo();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/CollectorConfiguration/ICollectorConfig" +
        "uration/GetConfigurationInfo", ReplyAction="http://www.doubletake.com/Common/Contract/CollectorConfiguration/ICollectorConfig" +
        "uration/GetConfigurationInfoResponse")]
    System.Threading.Tasks.Task<DoubleTake.Common.Contract.CollectorConfigurationInfo> GetConfigurationInfoAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/CollectorConfiguration/ICollectorConfig" +
        "uration/SetConfigurationInfo", ReplyAction="http://www.doubletake.com/Common/Contract/CollectorConfiguration/ICollectorConfig" +
        "uration/SetConfigurationInfoResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Common/Contract/CollectorConfiguration/ICollectorConfig" +
        "uration/SetConfigurationInfoAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Common/Contract/CollectorConfiguration/ICollectorConfig" +
        "uration/SetConfigurationInfoArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void SetConfigurationInfo(DoubleTake.Common.Contract.CollectorConfigurationInfo collectorConfigInfo);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/CollectorConfiguration/ICollectorConfig" +
        "uration/SetConfigurationInfo", ReplyAction="http://www.doubletake.com/Common/Contract/CollectorConfiguration/ICollectorConfig" +
        "uration/SetConfigurationInfoResponse")]
    System.Threading.Tasks.Task SetConfigurationInfoAsync(DoubleTake.Common.Contract.CollectorConfigurationInfo collectorConfigInfo);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/CollectorConfiguration/ICollectorConfig" +
        "uration/GetCollectedServers", ReplyAction="http://www.doubletake.com/Common/Contract/CollectorConfiguration/ICollectorConfig" +
        "uration/GetCollectedServersResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Common/Contract/CollectorConfiguration/ICollectorConfig" +
        "uration/GetCollectedServersAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Core.Contract.CollectedServer[] GetCollectedServers();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/CollectorConfiguration/ICollectorConfig" +
        "uration/GetCollectedServers", ReplyAction="http://www.doubletake.com/Common/Contract/CollectorConfiguration/ICollectorConfig" +
        "uration/GetCollectedServersResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.CollectedServer[]> GetCollectedServersAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/CollectorConfiguration/ICollectorConfig" +
        "uration/AddCollectedServers", ReplyAction="http://www.doubletake.com/Common/Contract/CollectorConfiguration/ICollectorConfig" +
        "uration/AddCollectedServersResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Common/Contract/CollectorConfiguration/ICollectorConfig" +
        "uration/AddCollectedServersArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Common/Contract/CollectorConfiguration/ICollectorConfig" +
        "uration/AddCollectedServersAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void AddCollectedServers(DoubleTake.Core.Contract.CollectedServer[] collectedServers);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/CollectorConfiguration/ICollectorConfig" +
        "uration/AddCollectedServers", ReplyAction="http://www.doubletake.com/Common/Contract/CollectorConfiguration/ICollectorConfig" +
        "uration/AddCollectedServersResponse")]
    System.Threading.Tasks.Task AddCollectedServersAsync(DoubleTake.Core.Contract.CollectedServer[] collectedServers);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/CollectorConfiguration/ICollectorConfig" +
        "uration/RemoveCollectedServers", ReplyAction="http://www.doubletake.com/Common/Contract/CollectorConfiguration/ICollectorConfig" +
        "uration/RemoveCollectedServersResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Common/Contract/CollectorConfiguration/ICollectorConfig" +
        "uration/RemoveCollectedServersAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Common/Contract/CollectorConfiguration/ICollectorConfig" +
        "uration/RemoveCollectedServersArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void RemoveCollectedServers(DoubleTake.Core.Contract.CollectedServer[] collectedServers);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/CollectorConfiguration/ICollectorConfig" +
        "uration/RemoveCollectedServers", ReplyAction="http://www.doubletake.com/Common/Contract/CollectorConfiguration/ICollectorConfig" +
        "uration/RemoveCollectedServersResponse")]
    System.Threading.Tasks.Task RemoveCollectedServersAsync(DoubleTake.Core.Contract.CollectedServer[] collectedServers);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/CollectorConfiguration/ICollectorConfig" +
        "uration/UpdateCollectedServers", ReplyAction="http://www.doubletake.com/Common/Contract/CollectorConfiguration/ICollectorConfig" +
        "uration/UpdateCollectedServersResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Common/Contract/CollectorConfiguration/ICollectorConfig" +
        "uration/UpdateCollectedServersArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Common/Contract/CollectorConfiguration/ICollectorConfig" +
        "uration/UpdateCollectedServersAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void UpdateCollectedServers(DoubleTake.Core.Contract.CollectedServer[] collectedServers);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/CollectorConfiguration/ICollectorConfig" +
        "uration/UpdateCollectedServers", ReplyAction="http://www.doubletake.com/Common/Contract/CollectorConfiguration/ICollectorConfig" +
        "uration/UpdateCollectedServersResponse")]
    System.Threading.Tasks.Task UpdateCollectedServersAsync(DoubleTake.Core.Contract.CollectedServer[] collectedServers);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/CollectorConfiguration/ICollectorConfig" +
        "uration/TestDatabaseAccess", ReplyAction="http://www.doubletake.com/Common/Contract/CollectorConfiguration/ICollectorConfig" +
        "uration/TestDatabaseAccessResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Common/Contract/CollectorConfiguration/ICollectorConfig" +
        "uration/TestDatabaseAccessAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Core.Contract.CollectorDatabaseStatus TestDatabaseAccess(string databaseServerName, string databaseName, string databaseInstanceName, DoubleTake.Core.Contract.Credentials credentials, DoubleTake.Core.Contract.CredentialsType credentialsType);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/CollectorConfiguration/ICollectorConfig" +
        "uration/TestDatabaseAccess", ReplyAction="http://www.doubletake.com/Common/Contract/CollectorConfiguration/ICollectorConfig" +
        "uration/TestDatabaseAccessResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.CollectorDatabaseStatus> TestDatabaseAccessAsync(string databaseServerName, string databaseName, string databaseInstanceName, DoubleTake.Core.Contract.Credentials credentials, DoubleTake.Core.Contract.CredentialsType credentialsType);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface ICollectorConfigurationChannel : ICollectorConfiguration, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class CollectorConfigurationClient : System.ServiceModel.ClientBase<ICollectorConfiguration>, ICollectorConfiguration
{
    
    public CollectorConfigurationClient()
    {
    }
    
    public CollectorConfigurationClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public CollectorConfigurationClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public CollectorConfigurationClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public CollectorConfigurationClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public DoubleTake.Common.Contract.CollectorInfo GetCollectorInfo()
    {
        return base.Channel.GetCollectorInfo();
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Common.Contract.CollectorInfo> GetCollectorInfoAsync()
    {
        return base.Channel.GetCollectorInfoAsync();
    }
    
    public void SetCollectorInfo(DoubleTake.Common.Contract.CollectorConfigurationInfo collectorConfigInfo, DoubleTake.Core.Contract.CollectedServer[] addServers, DoubleTake.Core.Contract.CollectedServer[] removeServers, DoubleTake.Core.Contract.CollectedServer[] updateServers)
    {
        base.Channel.SetCollectorInfo(collectorConfigInfo, addServers, removeServers, updateServers);
    }
    
    public System.Threading.Tasks.Task SetCollectorInfoAsync(DoubleTake.Common.Contract.CollectorConfigurationInfo collectorConfigInfo, DoubleTake.Core.Contract.CollectedServer[] addServers, DoubleTake.Core.Contract.CollectedServer[] removeServers, DoubleTake.Core.Contract.CollectedServer[] updateServers)
    {
        return base.Channel.SetCollectorInfoAsync(collectorConfigInfo, addServers, removeServers, updateServers);
    }
    
    public DoubleTake.Common.Contract.CollectorConfigurationInfo GetConfigurationInfo()
    {
        return base.Channel.GetConfigurationInfo();
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Common.Contract.CollectorConfigurationInfo> GetConfigurationInfoAsync()
    {
        return base.Channel.GetConfigurationInfoAsync();
    }
    
    public void SetConfigurationInfo(DoubleTake.Common.Contract.CollectorConfigurationInfo collectorConfigInfo)
    {
        base.Channel.SetConfigurationInfo(collectorConfigInfo);
    }
    
    public System.Threading.Tasks.Task SetConfigurationInfoAsync(DoubleTake.Common.Contract.CollectorConfigurationInfo collectorConfigInfo)
    {
        return base.Channel.SetConfigurationInfoAsync(collectorConfigInfo);
    }
    
    public DoubleTake.Core.Contract.CollectedServer[] GetCollectedServers()
    {
        return base.Channel.GetCollectedServers();
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.CollectedServer[]> GetCollectedServersAsync()
    {
        return base.Channel.GetCollectedServersAsync();
    }
    
    public void AddCollectedServers(DoubleTake.Core.Contract.CollectedServer[] collectedServers)
    {
        base.Channel.AddCollectedServers(collectedServers);
    }
    
    public System.Threading.Tasks.Task AddCollectedServersAsync(DoubleTake.Core.Contract.CollectedServer[] collectedServers)
    {
        return base.Channel.AddCollectedServersAsync(collectedServers);
    }
    
    public void RemoveCollectedServers(DoubleTake.Core.Contract.CollectedServer[] collectedServers)
    {
        base.Channel.RemoveCollectedServers(collectedServers);
    }
    
    public System.Threading.Tasks.Task RemoveCollectedServersAsync(DoubleTake.Core.Contract.CollectedServer[] collectedServers)
    {
        return base.Channel.RemoveCollectedServersAsync(collectedServers);
    }
    
    public void UpdateCollectedServers(DoubleTake.Core.Contract.CollectedServer[] collectedServers)
    {
        base.Channel.UpdateCollectedServers(collectedServers);
    }
    
    public System.Threading.Tasks.Task UpdateCollectedServersAsync(DoubleTake.Core.Contract.CollectedServer[] collectedServers)
    {
        return base.Channel.UpdateCollectedServersAsync(collectedServers);
    }
    
    public DoubleTake.Core.Contract.CollectorDatabaseStatus TestDatabaseAccess(string databaseServerName, string databaseName, string databaseInstanceName, DoubleTake.Core.Contract.Credentials credentials, DoubleTake.Core.Contract.CredentialsType credentialsType)
    {
        return base.Channel.TestDatabaseAccess(databaseServerName, databaseName, databaseInstanceName, credentials, credentialsType);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.CollectorDatabaseStatus> TestDatabaseAccessAsync(string databaseServerName, string databaseName, string databaseInstanceName, DoubleTake.Core.Contract.Credentials credentials, DoubleTake.Core.Contract.CredentialsType credentialsType)
    {
        return base.Channel.TestDatabaseAccessAsync(databaseServerName, databaseName, databaseInstanceName, credentials, credentialsType);
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace="http://www.doubletake.com/Common/Contract/ManagmentService", ConfigurationName="IManagementService")]
public interface IManagementService
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "Images", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "ImagesResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "ImagesAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Core.Contract.ImageInfo[] GetImages(System.Guid[] imageIds);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "Images", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "ImagesResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.ImageInfo[]> GetImagesAsync(System.Guid[] imageIds);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Upd" +
        "ateImageInfo", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Upd" +
        "ateImageInfoResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Upd" +
        "ateImageInfoAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void UpdateImageInfo(DoubleTake.Core.Contract.ImageInfo imageInfo, DoubleTake.Core.Contract.ImageEditedProperties editedProperties);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Upd" +
        "ateImageInfo", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Upd" +
        "ateImageInfoResponse")]
    System.Threading.Tasks.Task UpdateImageInfoAsync(DoubleTake.Core.Contract.ImageInfo imageInfo, DoubleTake.Core.Contract.ImageEditedProperties editedProperties);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Del" +
        "eteImages", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Del" +
        "eteImagesResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Del" +
        "eteImagesCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Del" +
        "eteImagesAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Core.Contract.ImageInfo[] DeleteImages(DoubleTake.Core.Contract.ImageDeleteInfo[] deleteInfos);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Del" +
        "eteImages", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Del" +
        "eteImagesResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.ImageInfo[]> DeleteImagesAsync(DoubleTake.Core.Contract.ImageDeleteInfo[] deleteInfos);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Del" +
        "eteImageSnapshots", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Del" +
        "eteImageSnapshotsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Del" +
        "eteImageSnapshotsCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Del" +
        "eteImageSnapshotsAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Core.Contract.ImageInfo[] DeleteImageSnapshots(System.Guid imageId, System.Guid[] snapshotIds);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Del" +
        "eteImageSnapshots", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Del" +
        "eteImageSnapshotsResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.ImageInfo[]> DeleteImageSnapshotsAsync(System.Guid imageId, System.Guid[] snapshotIds);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Loa" +
        "dImage", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Loa" +
        "dImageResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Loa" +
        "dImageCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Loa" +
        "dImageAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void LoadImage(System.Guid imageId, string ownerId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Loa" +
        "dImage", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Loa" +
        "dImageResponse")]
    System.Threading.Tasks.Task LoadImageAsync(System.Guid imageId, string ownerId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Loa" +
        "dImageSnapshot", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Loa" +
        "dImageSnapshotResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Loa" +
        "dImageSnapshotAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Loa" +
        "dImageSnapshotCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void LoadImageSnapshot(System.Guid imageId, System.Guid snapshotSetId, string ownerId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Loa" +
        "dImageSnapshot", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Loa" +
        "dImageSnapshotResponse")]
    System.Threading.Tasks.Task LoadImageSnapshotAsync(System.Guid imageId, System.Guid snapshotSetId, string ownerId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Unl" +
        "oadImage", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Unl" +
        "oadImageResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Unl" +
        "oadImageAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Unl" +
        "oadImageCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void UnloadImage(System.Guid imageId, string ownerId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Unl" +
        "oadImage", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Unl" +
        "oadImageResponse")]
    System.Threading.Tasks.Task UnloadImageAsync(System.Guid imageId, string ownerId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Unl" +
        "oadImageSnapshot", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Unl" +
        "oadImageSnapshotResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Unl" +
        "oadImageSnapshotAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Unl" +
        "oadImageSnapshotCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void UnloadImageSnapshot(System.Guid imageId, System.Guid snapshotSetId, string ownerId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Unl" +
        "oadImageSnapshot", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Unl" +
        "oadImageSnapshotResponse")]
    System.Threading.Tasks.Task UnloadImageSnapshotAsync(System.Guid imageId, System.Guid snapshotSetId, string ownerId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "IntegerOption", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "IntegerOptionResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "IntegerOptionEngineCommandFailedFaultFault", Name="EngineCommandFailedFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "IntegerOptionArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "IntegerOptionEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "IntegerOptionAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    long GetIntegerOption(string optionName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "IntegerOption", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "IntegerOptionResponse")]
    System.Threading.Tasks.Task<long> GetIntegerOptionAsync(string optionName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "StringOption", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "StringOptionResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "StringOptionEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "StringOptionArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "StringOptionEngineCommandFailedFaultFault", Name="EngineCommandFailedFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "StringOptionAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    string GetStringOption(string optionName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "StringOption", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "StringOptionResponse")]
    System.Threading.Tasks.Task<string> GetStringOptionAsync(string optionName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "MultiStringOption", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "MultiStringOptionResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "MultiStringOptionArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "MultiStringOptionEngineCommandFailedFaultFault", Name="EngineCommandFailedFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "MultiStringOptionAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "MultiStringOptionEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    string[] GetMultiStringOption(string optionName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "MultiStringOption", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "MultiStringOptionResponse")]
    System.Threading.Tasks.Task<string[]> GetMultiStringOptionAsync(string optionName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "Options", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "OptionsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "OptionsArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "OptionsAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "OptionsEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "OptionsEngineCommandFailedFaultFault", Name="EngineCommandFailedFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Common.Contract.PropertyBag GetOptions(string[] optionNames);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "Options", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "OptionsResponse")]
    System.Threading.Tasks.Task<DoubleTake.Common.Contract.PropertyBag> GetOptionsAsync(string[] optionNames);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Set" +
        "Options", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Set" +
        "OptionsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Set" +
        "OptionsAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Set" +
        "OptionsArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Set" +
        "OptionsEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Set" +
        "OptionsEngineCommandFailedFaultFault", Name="EngineCommandFailedFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void SetOptions(DoubleTake.Common.Contract.PropertyBag options);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Set" +
        "Options", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Set" +
        "OptionsResponse")]
    System.Threading.Tasks.Task SetOptionsAsync(DoubleTake.Common.Contract.PropertyBag options);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Val" +
        "idateActivationParameters", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Val" +
        "idateActivationParametersResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Val" +
        "idateActivationParametersEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Val" +
        "idateActivationParametersEngineCommandFailedFaultFault", Name="EngineCommandFailedFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Val" +
        "idateActivationParametersAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Val" +
        "idateActivationParametersArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Core.Contract.ActivationStatus ValidateActivationParameters(string[] activationCodes, string[] additionalCodes);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Val" +
        "idateActivationParameters", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Val" +
        "idateActivationParametersResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.ActivationStatus> ValidateActivationParametersAsync(string[] activationCodes, string[] additionalCodes);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Set" +
        "ActivationParameters", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Set" +
        "ActivationParametersResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Set" +
        "ActivationParametersAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Set" +
        "ActivationParametersEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Set" +
        "ActivationParametersArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Set" +
        "ActivationParametersEngineCommandFailedFaultFault", Name="EngineCommandFailedFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Core.Contract.ActivationStatus SetActivationParameters(string[] activationCodes, string[] additionalCodes);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Set" +
        "ActivationParameters", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Set" +
        "ActivationParametersResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.ActivationStatus> SetActivationParametersAsync(string[] activationCodes, string[] additionalCodes);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "PhysicalItems", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "PhysicalItemsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "PhysicalItemsArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "PhysicalItemsAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Core.Contract.ProtectableItem[] GetPhysicalItems(DoubleTake.Core.Contract.ProtectableItem referenceItem);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "PhysicalItems", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "PhysicalItemsResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.ProtectableItem[]> GetPhysicalItemsAsync(DoubleTake.Core.Contract.ProtectableItem referenceItem);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "EventLogEntries", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "EventLogEntriesResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "EventLogEntriesCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "EventLogEntriesAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    www.doubletake.com.Common.Contract.EventLogEntryData2[] GetEventLogEntries(int chunkSize, int lastIndex);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "EventLogEntries", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "EventLogEntriesResponse")]
    System.Threading.Tasks.Task<www.doubletake.com.Common.Contract.EventLogEntryData2[]> GetEventLogEntriesAsync(int chunkSize, int lastIndex);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "LogMessages", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "LogMessagesResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "LogMessagesAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "LogMessagesCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    www.doubletake.com.Common.Contract.LogMessage[] GetLogMessages(int chunkSize, string source, int hash, System.DateTimeOffset lastTimestamp);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "LogMessages", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "LogMessagesResponse")]
    System.Threading.Tasks.Task<www.doubletake.com.Common.Contract.LogMessage[]> GetLogMessagesAsync(int chunkSize, string source, int hash, System.DateTimeOffset lastTimestamp);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "DashboardEngineOptions", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "DashboardEngineOptionsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "DashboardEngineOptionsCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "DashboardEngineOptionsAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Common.Contract.DashboardEngineOptions GetDashboardEngineOptions();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "DashboardEngineOptions", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "DashboardEngineOptionsResponse")]
    System.Threading.Tasks.Task<DoubleTake.Common.Contract.DashboardEngineOptions> GetDashboardEngineOptionsAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Set" +
        "DashboardEngineOptions", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Set" +
        "DashboardEngineOptionsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Set" +
        "DashboardEngineOptionsArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Set" +
        "DashboardEngineOptionsCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Set" +
        "DashboardEngineOptionsAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void SetDashboardEngineOptions(DoubleTake.Common.Contract.DashboardEngineOptions options);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Set" +
        "DashboardEngineOptions", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Set" +
        "DashboardEngineOptionsResponse")]
    System.Threading.Tasks.Task SetDashboardEngineOptionsAsync(DoubleTake.Common.Contract.DashboardEngineOptions options);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "EmailNotificationOptions", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "EmailNotificationOptionsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "EmailNotificationOptionsAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "EmailNotificationOptionsCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Common.Contract.EmailNotificationOptions GetEmailNotificationOptions();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "EmailNotificationOptions", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "EmailNotificationOptionsResponse")]
    System.Threading.Tasks.Task<DoubleTake.Common.Contract.EmailNotificationOptions> GetEmailNotificationOptionsAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Set" +
        "EmailNotificationOptions", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Set" +
        "EmailNotificationOptionsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Set" +
        "EmailNotificationOptionsAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Set" +
        "EmailNotificationOptionsArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Set" +
        "EmailNotificationOptionsCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void SetEmailNotificationOptions(DoubleTake.Common.Contract.EmailNotificationOptions options);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Set" +
        "EmailNotificationOptions", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Set" +
        "EmailNotificationOptionsResponse")]
    System.Threading.Tasks.Task SetEmailNotificationOptionsAsync(DoubleTake.Common.Contract.EmailNotificationOptions options);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Tes" +
        "tEmailNotification", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Tes" +
        "tEmailNotificationResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Tes" +
        "tEmailNotificationCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.InvalidEmailAddressFormatFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Tes" +
        "tEmailNotificationInvalidEmailAddressFormatFaultFault", Name="InvalidEmailAddressFormatFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Tes" +
        "tEmailNotificationArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Tes" +
        "tEmailNotificationAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void TestEmailNotification(DoubleTake.Common.Contract.EmailNotificationOptions options, string to, string body);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Tes" +
        "tEmailNotification", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Tes" +
        "tEmailNotificationResponse")]
    System.Threading.Tasks.Task TestEmailNotificationAsync(DoubleTake.Common.Contract.EmailNotificationOptions options, string to, string body);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Shu" +
        "tdown", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Shu" +
        "tdownResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Shu" +
        "tdownEngineCommandFailedFaultFault", Name="EngineCommandFailedFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Shu" +
        "tdownAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Shu" +
        "tdownEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void Shutdown(DoubleTake.Core.Contract.ShutdownOption shutdownOption);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Shu" +
        "tdown", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Shu" +
        "tdownResponse")]
    System.Threading.Tasks.Task ShutdownAsync(DoubleTake.Core.Contract.ShutdownOption shutdownOption);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Pau" +
        "seTarget", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Pau" +
        "seTargetResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Pau" +
        "seTargetEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Pau" +
        "seTargetEngineCommandFailedFaultFault", Name="EngineCommandFailedFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Pau" +
        "seTargetAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void PauseTarget();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Pau" +
        "seTarget", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Pau" +
        "seTargetResponse")]
    System.Threading.Tasks.Task PauseTargetAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Res" +
        "umeTarget", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Res" +
        "umeTargetResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Res" +
        "umeTargetEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Res" +
        "umeTargetEngineCommandFailedFaultFault", Name="EngineCommandFailedFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Res" +
        "umeTargetAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void ResumeTarget();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Res" +
        "umeTarget", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Res" +
        "umeTargetResponse")]
    System.Threading.Tasks.Task ResumeTargetAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Tes" +
        "tScript", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Tes" +
        "tScriptResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Tes" +
        "tScriptEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Tes" +
        "tScriptAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Tes" +
        "tScriptArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    int TestScript(string path, string arguments, DoubleTake.Core.Contract.DesktopInteractionMode interactionMode);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Tes" +
        "tScript", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Tes" +
        "tScriptResponse")]
    System.Threading.Tasks.Task<int> TestScriptAsync(string path, string arguments, DoubleTake.Core.Contract.DesktopInteractionMode interactionMode);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "ScriptCredentials", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "ScriptCredentialsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "ScriptCredentialsEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "ScriptCredentialsAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "ScriptCredentialsArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Core.Contract.Credentials GetScriptCredentials();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "ScriptCredentials", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "ScriptCredentialsResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.Credentials> GetScriptCredentialsAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Set" +
        "ScriptCredentials", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Set" +
        "ScriptCredentialsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Set" +
        "ScriptCredentialsEngineCommandFailedFaultFault", Name="EngineCommandFailedFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Set" +
        "ScriptCredentialsAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Set" +
        "ScriptCredentialsArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Set" +
        "ScriptCredentialsEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void SetScriptCredentials(DoubleTake.Core.Contract.Credentials credentials);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Set" +
        "ScriptCredentials", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Set" +
        "ScriptCredentialsResponse")]
    System.Threading.Tasks.Task SetScriptCredentialsAsync(DoubleTake.Core.Contract.Credentials credentials);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Val" +
        "idateScriptCredentials", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Val" +
        "idateScriptCredentialsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Val" +
        "idateScriptCredentialsAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Val" +
        "idateScriptCredentialsEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Val" +
        "idateScriptCredentialsArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    bool ValidateScriptCredentials(DoubleTake.Core.Contract.Credentials credentials);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Val" +
        "idateScriptCredentials", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Val" +
        "idateScriptCredentialsResponse")]
    System.Threading.Tasks.Task<bool> ValidateScriptCredentialsAsync(DoubleTake.Core.Contract.Credentials credentials);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Run" +
        "Script", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Run" +
        "ScriptResponse")]
    void RunScript(string script, string arguments, DoubleTake.Core.Contract.Credentials credentials);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Run" +
        "Script", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Run" +
        "ScriptResponse")]
    System.Threading.Tasks.Task RunScriptAsync(string script, string arguments, DoubleTake.Core.Contract.Credentials credentials);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Val" +
        "idateActiveDirectoryCredentials", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Val" +
        "idateActiveDirectoryCredentialsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Val" +
        "idateActiveDirectoryCredentialsArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Val" +
        "idateActiveDirectoryCredentialsEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Val" +
        "idateActiveDirectoryCredentialsAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    bool ValidateActiveDirectoryCredentials(DoubleTake.Core.Contract.Credentials credentials);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Val" +
        "idateActiveDirectoryCredentials", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Val" +
        "idateActiveDirectoryCredentialsResponse")]
    System.Threading.Tasks.Task<bool> ValidateActiveDirectoryCredentialsAsync(DoubleTake.Core.Contract.Credentials credentials);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Val" +
        "idateActiveDirectoryCredentials2", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Val" +
        "idateActiveDirectoryCredentials2Response")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Val" +
        "idateActiveDirectoryCredentials2AccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Val" +
        "idateActiveDirectoryCredentials2EngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Val" +
        "idateActiveDirectoryCredentials2ArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    bool ValidateActiveDirectoryCredentials2(DoubleTake.Core.Contract.Credentials credentials, DoubleTake.Common.Alternate.TupleOfstringstring[] computers);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Val" +
        "idateActiveDirectoryCredentials2", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Val" +
        "idateActiveDirectoryCredentials2Response")]
    System.Threading.Tasks.Task<bool> ValidateActiveDirectoryCredentials2Async(DoubleTake.Core.Contract.Credentials credentials, DoubleTake.Common.Alternate.TupleOfstringstring[] computers);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "PathBlockingEntries", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "PathBlockingEntriesResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "PathBlockingEntriesEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "PathBlockingEntriesAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Core.Contract.PathBlockingEntry[] GetPathBlockingEntries();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "PathBlockingEntries", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "PathBlockingEntriesResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.PathBlockingEntry[]> GetPathBlockingEntriesAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Set" +
        "PathBlocking", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Set" +
        "PathBlockingResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Set" +
        "PathBlockingArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Set" +
        "PathBlockingEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Set" +
        "PathBlockingAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void SetPathBlocking(string sourceAddress, DoubleTake.Core.Contract.PathBlockingMode blockingMode);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Set" +
        "PathBlocking", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Set" +
        "PathBlockingResponse")]
    System.Threading.Tasks.Task SetPathBlockingAsync(string sourceAddress, DoubleTake.Core.Contract.PathBlockingMode blockingMode);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "DomainRole", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "DomainRoleResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "DomainRoleCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    int GetDomainRole();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "DomainRole", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "DomainRoleResponse")]
    System.Threading.Tasks.Task<int> GetDomainRoleAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Col" +
        "lectDtInfo", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Col" +
        "lectDtInfoResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Col" +
        "lectDtInfoCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Col" +
        "lectDtInfoAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    System.Guid CollectDtInfo();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Col" +
        "lectDtInfo", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Col" +
        "lectDtInfoResponse")]
    System.Threading.Tasks.Task<System.Guid> CollectDtInfoAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "DtInfoCollectionStatus", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "DtInfoCollectionStatusResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "DtInfoCollectionStatusAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "DtInfoCollectionStatusCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Diagnostics.Contract.DtInfoCollectionStatus GetDtInfoCollectionStatus(System.Guid collectionId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "DtInfoCollectionStatus", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "DtInfoCollectionStatusResponse")]
    System.Threading.Tasks.Task<DoubleTake.Diagnostics.Contract.DtInfoCollectionStatus> GetDtInfoCollectionStatusAsync(System.Guid collectionId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Can" +
        "celDtInfoCollection", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Can" +
        "celDtInfoCollectionResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Can" +
        "celDtInfoCollectionAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Can" +
        "celDtInfoCollectionCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void CancelDtInfoCollection(System.Guid collectionId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Can" +
        "celDtInfoCollection", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Can" +
        "celDtInfoCollectionResponse")]
    System.Threading.Tasks.Task CancelDtInfoCollectionAsync(System.Guid collectionId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Lis" +
        "tActiveDtInfoCollections", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Lis" +
        "tActiveDtInfoCollectionsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Lis" +
        "tActiveDtInfoCollectionsCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Lis" +
        "tActiveDtInfoCollectionsAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    System.Guid[] ListActiveDtInfoCollections();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Lis" +
        "tActiveDtInfoCollections", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Lis" +
        "tActiveDtInfoCollectionsResponse")]
    System.Threading.Tasks.Task<System.Guid[]> ListActiveDtInfoCollectionsAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Shu" +
        "tdownRemoteServer", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Shu" +
        "tdownRemoteServerResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Shu" +
        "tdownRemoteServerAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Shu" +
        "tdownRemoteServerCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void ShutdownRemoteServer(System.Guid jobId, string networkId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Shu" +
        "tdownRemoteServer", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Shu" +
        "tdownRemoteServerResponse")]
    System.Threading.Tasks.Task ShutdownRemoteServerAsync(System.Guid jobId, string networkId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "AccessLevel", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "AccessLevelResponse")]
    DoubleTake.Core.Contract.AccessLevel GetAccessLevel();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "AccessLevel", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "AccessLevelResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.AccessLevel> GetAccessLevelAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "ServerInfo", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "ServerInfoResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "ServerInfoAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Core.Contract.ServerInfo GetServerInfo();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "ServerInfo", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "ServerInfoResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.ServerInfo> GetServerInfoAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "NetworkInterfaceInfo", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "NetworkInterfaceInfoResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "NetworkInterfaceInfoAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Core.Contract.NetworkInterfaceInfo[] GetNetworkInterfaceInfo();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "NetworkInterfaceInfo", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "NetworkInterfaceInfoResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.NetworkInterfaceInfo[]> GetNetworkInterfaceInfoAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "ProductInfo", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "ProductInfoResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "ProductInfoEngineCommandFailedFaultFault", Name="EngineCommandFailedFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "ProductInfoAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "ProductInfoEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Core.Contract.ProductInfo GetProductInfo();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "ProductInfo", ReplyAction="http://www.doubletake.com/Common/Contract/ManagmentService/IManagementService/Get" +
        "ProductInfoResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.ProductInfo> GetProductInfoAsync();
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IManagementServiceChannel : IManagementService, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class ManagementServiceClient : System.ServiceModel.ClientBase<IManagementService>, IManagementService
{
    
    public ManagementServiceClient()
    {
    }
    
    public ManagementServiceClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public ManagementServiceClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public ManagementServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public ManagementServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public DoubleTake.Core.Contract.ImageInfo[] GetImages(System.Guid[] imageIds)
    {
        return base.Channel.GetImages(imageIds);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.ImageInfo[]> GetImagesAsync(System.Guid[] imageIds)
    {
        return base.Channel.GetImagesAsync(imageIds);
    }
    
    public void UpdateImageInfo(DoubleTake.Core.Contract.ImageInfo imageInfo, DoubleTake.Core.Contract.ImageEditedProperties editedProperties)
    {
        base.Channel.UpdateImageInfo(imageInfo, editedProperties);
    }
    
    public System.Threading.Tasks.Task UpdateImageInfoAsync(DoubleTake.Core.Contract.ImageInfo imageInfo, DoubleTake.Core.Contract.ImageEditedProperties editedProperties)
    {
        return base.Channel.UpdateImageInfoAsync(imageInfo, editedProperties);
    }
    
    public DoubleTake.Core.Contract.ImageInfo[] DeleteImages(DoubleTake.Core.Contract.ImageDeleteInfo[] deleteInfos)
    {
        return base.Channel.DeleteImages(deleteInfos);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.ImageInfo[]> DeleteImagesAsync(DoubleTake.Core.Contract.ImageDeleteInfo[] deleteInfos)
    {
        return base.Channel.DeleteImagesAsync(deleteInfos);
    }
    
    public DoubleTake.Core.Contract.ImageInfo[] DeleteImageSnapshots(System.Guid imageId, System.Guid[] snapshotIds)
    {
        return base.Channel.DeleteImageSnapshots(imageId, snapshotIds);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.ImageInfo[]> DeleteImageSnapshotsAsync(System.Guid imageId, System.Guid[] snapshotIds)
    {
        return base.Channel.DeleteImageSnapshotsAsync(imageId, snapshotIds);
    }
    
    public void LoadImage(System.Guid imageId, string ownerId)
    {
        base.Channel.LoadImage(imageId, ownerId);
    }
    
    public System.Threading.Tasks.Task LoadImageAsync(System.Guid imageId, string ownerId)
    {
        return base.Channel.LoadImageAsync(imageId, ownerId);
    }
    
    public void LoadImageSnapshot(System.Guid imageId, System.Guid snapshotSetId, string ownerId)
    {
        base.Channel.LoadImageSnapshot(imageId, snapshotSetId, ownerId);
    }
    
    public System.Threading.Tasks.Task LoadImageSnapshotAsync(System.Guid imageId, System.Guid snapshotSetId, string ownerId)
    {
        return base.Channel.LoadImageSnapshotAsync(imageId, snapshotSetId, ownerId);
    }
    
    public void UnloadImage(System.Guid imageId, string ownerId)
    {
        base.Channel.UnloadImage(imageId, ownerId);
    }
    
    public System.Threading.Tasks.Task UnloadImageAsync(System.Guid imageId, string ownerId)
    {
        return base.Channel.UnloadImageAsync(imageId, ownerId);
    }
    
    public void UnloadImageSnapshot(System.Guid imageId, System.Guid snapshotSetId, string ownerId)
    {
        base.Channel.UnloadImageSnapshot(imageId, snapshotSetId, ownerId);
    }
    
    public System.Threading.Tasks.Task UnloadImageSnapshotAsync(System.Guid imageId, System.Guid snapshotSetId, string ownerId)
    {
        return base.Channel.UnloadImageSnapshotAsync(imageId, snapshotSetId, ownerId);
    }
    
    public long GetIntegerOption(string optionName)
    {
        return base.Channel.GetIntegerOption(optionName);
    }
    
    public System.Threading.Tasks.Task<long> GetIntegerOptionAsync(string optionName)
    {
        return base.Channel.GetIntegerOptionAsync(optionName);
    }
    
    public string GetStringOption(string optionName)
    {
        return base.Channel.GetStringOption(optionName);
    }
    
    public System.Threading.Tasks.Task<string> GetStringOptionAsync(string optionName)
    {
        return base.Channel.GetStringOptionAsync(optionName);
    }
    
    public string[] GetMultiStringOption(string optionName)
    {
        return base.Channel.GetMultiStringOption(optionName);
    }
    
    public System.Threading.Tasks.Task<string[]> GetMultiStringOptionAsync(string optionName)
    {
        return base.Channel.GetMultiStringOptionAsync(optionName);
    }
    
    public DoubleTake.Common.Contract.PropertyBag GetOptions(string[] optionNames)
    {
        return base.Channel.GetOptions(optionNames);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Common.Contract.PropertyBag> GetOptionsAsync(string[] optionNames)
    {
        return base.Channel.GetOptionsAsync(optionNames);
    }
    
    public void SetOptions(DoubleTake.Common.Contract.PropertyBag options)
    {
        base.Channel.SetOptions(options);
    }
    
    public System.Threading.Tasks.Task SetOptionsAsync(DoubleTake.Common.Contract.PropertyBag options)
    {
        return base.Channel.SetOptionsAsync(options);
    }
    
    public DoubleTake.Core.Contract.ActivationStatus ValidateActivationParameters(string[] activationCodes, string[] additionalCodes)
    {
        return base.Channel.ValidateActivationParameters(activationCodes, additionalCodes);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.ActivationStatus> ValidateActivationParametersAsync(string[] activationCodes, string[] additionalCodes)
    {
        return base.Channel.ValidateActivationParametersAsync(activationCodes, additionalCodes);
    }
    
    public DoubleTake.Core.Contract.ActivationStatus SetActivationParameters(string[] activationCodes, string[] additionalCodes)
    {
        return base.Channel.SetActivationParameters(activationCodes, additionalCodes);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.ActivationStatus> SetActivationParametersAsync(string[] activationCodes, string[] additionalCodes)
    {
        return base.Channel.SetActivationParametersAsync(activationCodes, additionalCodes);
    }
    
    public DoubleTake.Core.Contract.ProtectableItem[] GetPhysicalItems(DoubleTake.Core.Contract.ProtectableItem referenceItem)
    {
        return base.Channel.GetPhysicalItems(referenceItem);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.ProtectableItem[]> GetPhysicalItemsAsync(DoubleTake.Core.Contract.ProtectableItem referenceItem)
    {
        return base.Channel.GetPhysicalItemsAsync(referenceItem);
    }
    
    public www.doubletake.com.Common.Contract.EventLogEntryData2[] GetEventLogEntries(int chunkSize, int lastIndex)
    {
        return base.Channel.GetEventLogEntries(chunkSize, lastIndex);
    }
    
    public System.Threading.Tasks.Task<www.doubletake.com.Common.Contract.EventLogEntryData2[]> GetEventLogEntriesAsync(int chunkSize, int lastIndex)
    {
        return base.Channel.GetEventLogEntriesAsync(chunkSize, lastIndex);
    }
    
    public www.doubletake.com.Common.Contract.LogMessage[] GetLogMessages(int chunkSize, string source, int hash, System.DateTimeOffset lastTimestamp)
    {
        return base.Channel.GetLogMessages(chunkSize, source, hash, lastTimestamp);
    }
    
    public System.Threading.Tasks.Task<www.doubletake.com.Common.Contract.LogMessage[]> GetLogMessagesAsync(int chunkSize, string source, int hash, System.DateTimeOffset lastTimestamp)
    {
        return base.Channel.GetLogMessagesAsync(chunkSize, source, hash, lastTimestamp);
    }
    
    public DoubleTake.Common.Contract.DashboardEngineOptions GetDashboardEngineOptions()
    {
        return base.Channel.GetDashboardEngineOptions();
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Common.Contract.DashboardEngineOptions> GetDashboardEngineOptionsAsync()
    {
        return base.Channel.GetDashboardEngineOptionsAsync();
    }
    
    public void SetDashboardEngineOptions(DoubleTake.Common.Contract.DashboardEngineOptions options)
    {
        base.Channel.SetDashboardEngineOptions(options);
    }
    
    public System.Threading.Tasks.Task SetDashboardEngineOptionsAsync(DoubleTake.Common.Contract.DashboardEngineOptions options)
    {
        return base.Channel.SetDashboardEngineOptionsAsync(options);
    }
    
    public DoubleTake.Common.Contract.EmailNotificationOptions GetEmailNotificationOptions()
    {
        return base.Channel.GetEmailNotificationOptions();
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Common.Contract.EmailNotificationOptions> GetEmailNotificationOptionsAsync()
    {
        return base.Channel.GetEmailNotificationOptionsAsync();
    }
    
    public void SetEmailNotificationOptions(DoubleTake.Common.Contract.EmailNotificationOptions options)
    {
        base.Channel.SetEmailNotificationOptions(options);
    }
    
    public System.Threading.Tasks.Task SetEmailNotificationOptionsAsync(DoubleTake.Common.Contract.EmailNotificationOptions options)
    {
        return base.Channel.SetEmailNotificationOptionsAsync(options);
    }
    
    public void TestEmailNotification(DoubleTake.Common.Contract.EmailNotificationOptions options, string to, string body)
    {
        base.Channel.TestEmailNotification(options, to, body);
    }
    
    public System.Threading.Tasks.Task TestEmailNotificationAsync(DoubleTake.Common.Contract.EmailNotificationOptions options, string to, string body)
    {
        return base.Channel.TestEmailNotificationAsync(options, to, body);
    }
    
    public void Shutdown(DoubleTake.Core.Contract.ShutdownOption shutdownOption)
    {
        base.Channel.Shutdown(shutdownOption);
    }
    
    public System.Threading.Tasks.Task ShutdownAsync(DoubleTake.Core.Contract.ShutdownOption shutdownOption)
    {
        return base.Channel.ShutdownAsync(shutdownOption);
    }
    
    public void PauseTarget()
    {
        base.Channel.PauseTarget();
    }
    
    public System.Threading.Tasks.Task PauseTargetAsync()
    {
        return base.Channel.PauseTargetAsync();
    }
    
    public void ResumeTarget()
    {
        base.Channel.ResumeTarget();
    }
    
    public System.Threading.Tasks.Task ResumeTargetAsync()
    {
        return base.Channel.ResumeTargetAsync();
    }
    
    public int TestScript(string path, string arguments, DoubleTake.Core.Contract.DesktopInteractionMode interactionMode)
    {
        return base.Channel.TestScript(path, arguments, interactionMode);
    }
    
    public System.Threading.Tasks.Task<int> TestScriptAsync(string path, string arguments, DoubleTake.Core.Contract.DesktopInteractionMode interactionMode)
    {
        return base.Channel.TestScriptAsync(path, arguments, interactionMode);
    }
    
    public DoubleTake.Core.Contract.Credentials GetScriptCredentials()
    {
        return base.Channel.GetScriptCredentials();
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.Credentials> GetScriptCredentialsAsync()
    {
        return base.Channel.GetScriptCredentialsAsync();
    }
    
    public void SetScriptCredentials(DoubleTake.Core.Contract.Credentials credentials)
    {
        base.Channel.SetScriptCredentials(credentials);
    }
    
    public System.Threading.Tasks.Task SetScriptCredentialsAsync(DoubleTake.Core.Contract.Credentials credentials)
    {
        return base.Channel.SetScriptCredentialsAsync(credentials);
    }
    
    public bool ValidateScriptCredentials(DoubleTake.Core.Contract.Credentials credentials)
    {
        return base.Channel.ValidateScriptCredentials(credentials);
    }
    
    public System.Threading.Tasks.Task<bool> ValidateScriptCredentialsAsync(DoubleTake.Core.Contract.Credentials credentials)
    {
        return base.Channel.ValidateScriptCredentialsAsync(credentials);
    }
    
    public void RunScript(string script, string arguments, DoubleTake.Core.Contract.Credentials credentials)
    {
        base.Channel.RunScript(script, arguments, credentials);
    }
    
    public System.Threading.Tasks.Task RunScriptAsync(string script, string arguments, DoubleTake.Core.Contract.Credentials credentials)
    {
        return base.Channel.RunScriptAsync(script, arguments, credentials);
    }
    
    public bool ValidateActiveDirectoryCredentials(DoubleTake.Core.Contract.Credentials credentials)
    {
        return base.Channel.ValidateActiveDirectoryCredentials(credentials);
    }
    
    public System.Threading.Tasks.Task<bool> ValidateActiveDirectoryCredentialsAsync(DoubleTake.Core.Contract.Credentials credentials)
    {
        return base.Channel.ValidateActiveDirectoryCredentialsAsync(credentials);
    }
    
    public bool ValidateActiveDirectoryCredentials2(DoubleTake.Core.Contract.Credentials credentials, DoubleTake.Common.Alternate.TupleOfstringstring[] computers)
    {
        return base.Channel.ValidateActiveDirectoryCredentials2(credentials, computers);
    }
    
    public System.Threading.Tasks.Task<bool> ValidateActiveDirectoryCredentials2Async(DoubleTake.Core.Contract.Credentials credentials, DoubleTake.Common.Alternate.TupleOfstringstring[] computers)
    {
        return base.Channel.ValidateActiveDirectoryCredentials2Async(credentials, computers);
    }
    
    public DoubleTake.Core.Contract.PathBlockingEntry[] GetPathBlockingEntries()
    {
        return base.Channel.GetPathBlockingEntries();
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.PathBlockingEntry[]> GetPathBlockingEntriesAsync()
    {
        return base.Channel.GetPathBlockingEntriesAsync();
    }
    
    public void SetPathBlocking(string sourceAddress, DoubleTake.Core.Contract.PathBlockingMode blockingMode)
    {
        base.Channel.SetPathBlocking(sourceAddress, blockingMode);
    }
    
    public System.Threading.Tasks.Task SetPathBlockingAsync(string sourceAddress, DoubleTake.Core.Contract.PathBlockingMode blockingMode)
    {
        return base.Channel.SetPathBlockingAsync(sourceAddress, blockingMode);
    }
    
    public int GetDomainRole()
    {
        return base.Channel.GetDomainRole();
    }
    
    public System.Threading.Tasks.Task<int> GetDomainRoleAsync()
    {
        return base.Channel.GetDomainRoleAsync();
    }
    
    public System.Guid CollectDtInfo()
    {
        return base.Channel.CollectDtInfo();
    }
    
    public System.Threading.Tasks.Task<System.Guid> CollectDtInfoAsync()
    {
        return base.Channel.CollectDtInfoAsync();
    }
    
    public DoubleTake.Diagnostics.Contract.DtInfoCollectionStatus GetDtInfoCollectionStatus(System.Guid collectionId)
    {
        return base.Channel.GetDtInfoCollectionStatus(collectionId);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Diagnostics.Contract.DtInfoCollectionStatus> GetDtInfoCollectionStatusAsync(System.Guid collectionId)
    {
        return base.Channel.GetDtInfoCollectionStatusAsync(collectionId);
    }
    
    public void CancelDtInfoCollection(System.Guid collectionId)
    {
        base.Channel.CancelDtInfoCollection(collectionId);
    }
    
    public System.Threading.Tasks.Task CancelDtInfoCollectionAsync(System.Guid collectionId)
    {
        return base.Channel.CancelDtInfoCollectionAsync(collectionId);
    }
    
    public System.Guid[] ListActiveDtInfoCollections()
    {
        return base.Channel.ListActiveDtInfoCollections();
    }
    
    public System.Threading.Tasks.Task<System.Guid[]> ListActiveDtInfoCollectionsAsync()
    {
        return base.Channel.ListActiveDtInfoCollectionsAsync();
    }
    
    public void ShutdownRemoteServer(System.Guid jobId, string networkId)
    {
        base.Channel.ShutdownRemoteServer(jobId, networkId);
    }
    
    public System.Threading.Tasks.Task ShutdownRemoteServerAsync(System.Guid jobId, string networkId)
    {
        return base.Channel.ShutdownRemoteServerAsync(jobId, networkId);
    }
    
    public DoubleTake.Core.Contract.AccessLevel GetAccessLevel()
    {
        return base.Channel.GetAccessLevel();
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.AccessLevel> GetAccessLevelAsync()
    {
        return base.Channel.GetAccessLevelAsync();
    }
    
    public DoubleTake.Core.Contract.ServerInfo GetServerInfo()
    {
        return base.Channel.GetServerInfo();
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.ServerInfo> GetServerInfoAsync()
    {
        return base.Channel.GetServerInfoAsync();
    }
    
    public DoubleTake.Core.Contract.NetworkInterfaceInfo[] GetNetworkInterfaceInfo()
    {
        return base.Channel.GetNetworkInterfaceInfo();
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.NetworkInterfaceInfo[]> GetNetworkInterfaceInfoAsync()
    {
        return base.Channel.GetNetworkInterfaceInfoAsync();
    }
    
    public DoubleTake.Core.Contract.ProductInfo GetProductInfo()
    {
        return base.Channel.GetProductInfo();
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.ProductInfo> GetProductInfoAsync()
    {
        return base.Channel.GetProductInfoAsync();
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace="http://www.doubletake.com/Common/Contract/ProxiedManagmentService", ConfigurationName="IProxiedManagementService")]
public interface IProxiedManagementService
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/GetLogMessages", ReplyAction="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/GetLogMessagesResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/GetLogMessagesAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/GetLogMessagesCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    www.doubletake.com.Common.Contract.LogMessage[] GetLogMessages(DoubleTake.Communication.ServiceConnectionParameters serviceConnectionParameters, int chunkSize, string source, int hash, System.DateTimeOffset lastTimestamp);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/GetLogMessages", ReplyAction="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/GetLogMessagesResponse")]
    System.Threading.Tasks.Task<www.doubletake.com.Common.Contract.LogMessage[]> GetLogMessagesAsync(DoubleTake.Communication.ServiceConnectionParameters serviceConnectionParameters, int chunkSize, string source, int hash, System.DateTimeOffset lastTimestamp);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/GetEventLogEntries", ReplyAction="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/GetEventLogEntriesResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/GetEventLogEntriesAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/GetEventLogEntriesCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    www.doubletake.com.Common.Contract.EventLogEntryData2[] GetEventLogEntries(DoubleTake.Communication.ServiceConnectionParameters serviceConnectionParameters, int chunkSize, int lastIndex);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/GetEventLogEntries", ReplyAction="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/GetEventLogEntriesResponse")]
    System.Threading.Tasks.Task<www.doubletake.com.Common.Contract.EventLogEntryData2[]> GetEventLogEntriesAsync(DoubleTake.Communication.ServiceConnectionParameters serviceConnectionParameters, int chunkSize, int lastIndex);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/GetServerUUID", ReplyAction="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/GetServerUUIDResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Core.Contract.CoreFault), Action="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/GetServerUUIDCoreFaultFault", Name="CoreFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    System.Guid GetServerUUID(DoubleTake.Communication.ServiceConnectionParameters serviceConnectionParameters);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/GetServerUUID", ReplyAction="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/GetServerUUIDResponse")]
    System.Threading.Tasks.Task<System.Guid> GetServerUUIDAsync(DoubleTake.Communication.ServiceConnectionParameters serviceConnectionParameters);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/GetServerInfo", ReplyAction="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/GetServerInfoResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Core.Contract.CoreFault), Action="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/GetServerInfoCoreFaultFault", Name="CoreFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    DoubleTake.Core.Contract.ServerInfo GetServerInfo(DoubleTake.Communication.ServiceConnectionParameters serviceConnectionParameters);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/GetServerInfo", ReplyAction="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/GetServerInfoResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.ServerInfo> GetServerInfoAsync(DoubleTake.Communication.ServiceConnectionParameters serviceConnectionParameters);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/GetProductInfo", ReplyAction="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/GetProductInfoResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Core.Contract.CoreFault), Action="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/GetProductInfoCoreFaultFault", Name="CoreFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    DoubleTake.Core.Contract.ProductInfo GetProductInfo(DoubleTake.Communication.ServiceConnectionParameters serviceConnectionParameters);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/GetProductInfo", ReplyAction="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/GetProductInfoResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.ProductInfo> GetProductInfoAsync(DoubleTake.Communication.ServiceConnectionParameters serviceConnectionParameters);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/ValidateActivationParameters", ReplyAction="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/ValidateActivationParametersResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/ValidateActivationParametersAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/ValidateActivationParametersArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/ValidateActivationParametersEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault), Action="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/ValidateActivationParametersEngineCommandFailedFaultFault", Name="EngineCommandFailedFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Core.Contract.ActivationStatus ValidateActivationParameters(DoubleTake.Communication.ServiceConnectionParameters serviceConnectionParameters, string[] activationCodes, string[] additionalCodes);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/ValidateActivationParameters", ReplyAction="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/ValidateActivationParametersResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.ActivationStatus> ValidateActivationParametersAsync(DoubleTake.Communication.ServiceConnectionParameters serviceConnectionParameters, string[] activationCodes, string[] additionalCodes);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/SetActivationParameters", ReplyAction="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/SetActivationParametersResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/SetActivationParametersEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/SetActivationParametersArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault), Action="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/SetActivationParametersEngineCommandFailedFaultFault", Name="EngineCommandFailedFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/SetActivationParametersAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Core.Contract.ActivationStatus SetActivationParameters(DoubleTake.Communication.ServiceConnectionParameters serviceConnectionParameters, string[] activationCodes, string[] additionalCodes);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/SetActivationParameters", ReplyAction="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/SetActivationParametersResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.ActivationStatus> SetActivationParametersAsync(DoubleTake.Communication.ServiceConnectionParameters serviceConnectionParameters, string[] activationCodes, string[] additionalCodes);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/GetOptions", ReplyAction="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/GetOptionsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault), Action="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/GetOptionsEngineCommandFailedFaultFault", Name="EngineCommandFailedFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/GetOptionsArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/GetOptionsAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/GetOptionsEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Common.Contract.PropertyBag GetOptions(DoubleTake.Communication.ServiceConnectionParameters serviceConnectionParameters, string[] optionNames);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/GetOptions", ReplyAction="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/GetOptionsResponse")]
    System.Threading.Tasks.Task<DoubleTake.Common.Contract.PropertyBag> GetOptionsAsync(DoubleTake.Communication.ServiceConnectionParameters serviceConnectionParameters, string[] optionNames);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/SetOptions", ReplyAction="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/SetOptionsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault), Action="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/SetOptionsEngineCommandFailedFaultFault", Name="EngineCommandFailedFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/SetOptionsArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/SetOptionsAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/SetOptionsEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void SetOptions(DoubleTake.Communication.ServiceConnectionParameters serviceConnectionParameters, DoubleTake.Common.Contract.PropertyBag options);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/SetOptions", ReplyAction="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/SetOptionsResponse")]
    System.Threading.Tasks.Task SetOptionsAsync(DoubleTake.Communication.ServiceConnectionParameters serviceConnectionParameters, DoubleTake.Common.Contract.PropertyBag options);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/CollectDtInfo", ReplyAction="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/CollectDtInfoResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/CollectDtInfoAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/CollectDtInfoCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    System.Guid CollectDtInfo(DoubleTake.Communication.ServiceConnectionParameters serviceConnectionParameters);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/CollectDtInfo", ReplyAction="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/CollectDtInfoResponse")]
    System.Threading.Tasks.Task<System.Guid> CollectDtInfoAsync(DoubleTake.Communication.ServiceConnectionParameters serviceConnectionParameters);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/GetDtInfoCollectionStatus", ReplyAction="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/GetDtInfoCollectionStatusResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/GetDtInfoCollectionStatusCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/GetDtInfoCollectionStatusAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Diagnostics.Contract.DtInfoCollectionStatus GetDtInfoCollectionStatus(DoubleTake.Communication.ServiceConnectionParameters serviceConnectionParameters, System.Guid collectionId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/GetDtInfoCollectionStatus", ReplyAction="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/GetDtInfoCollectionStatusResponse")]
    System.Threading.Tasks.Task<DoubleTake.Diagnostics.Contract.DtInfoCollectionStatus> GetDtInfoCollectionStatusAsync(DoubleTake.Communication.ServiceConnectionParameters serviceConnectionParameters, System.Guid collectionId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/CancelDtInfoCollection", ReplyAction="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/CancelDtInfoCollectionResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/CancelDtInfoCollectionAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/CancelDtInfoCollectionCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void CancelDtInfoCollection(DoubleTake.Communication.ServiceConnectionParameters serviceConnectionParameters, System.Guid collectionId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/CancelDtInfoCollection", ReplyAction="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/CancelDtInfoCollectionResponse")]
    System.Threading.Tasks.Task CancelDtInfoCollectionAsync(DoubleTake.Communication.ServiceConnectionParameters serviceConnectionParameters, System.Guid collectionId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/ListActiveDtInfoCollections", ReplyAction="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/ListActiveDtInfoCollectionsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/ListActiveDtInfoCollectionsCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/ListActiveDtInfoCollectionsAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    System.Guid[] ListActiveDtInfoCollections(DoubleTake.Communication.ServiceConnectionParameters serviceConnectionParameters);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/ListActiveDtInfoCollections", ReplyAction="http://www.doubletake.com/Common/Contract/ProxiedManagmentService/IProxiedManagem" +
        "entService/ListActiveDtInfoCollectionsResponse")]
    System.Threading.Tasks.Task<System.Guid[]> ListActiveDtInfoCollectionsAsync(DoubleTake.Communication.ServiceConnectionParameters serviceConnectionParameters);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IProxiedManagementServiceChannel : IProxiedManagementService, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class ProxiedManagementServiceClient : System.ServiceModel.ClientBase<IProxiedManagementService>, IProxiedManagementService
{
    
    public ProxiedManagementServiceClient()
    {
    }
    
    public ProxiedManagementServiceClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public ProxiedManagementServiceClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public ProxiedManagementServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public ProxiedManagementServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public www.doubletake.com.Common.Contract.LogMessage[] GetLogMessages(DoubleTake.Communication.ServiceConnectionParameters serviceConnectionParameters, int chunkSize, string source, int hash, System.DateTimeOffset lastTimestamp)
    {
        return base.Channel.GetLogMessages(serviceConnectionParameters, chunkSize, source, hash, lastTimestamp);
    }
    
    public System.Threading.Tasks.Task<www.doubletake.com.Common.Contract.LogMessage[]> GetLogMessagesAsync(DoubleTake.Communication.ServiceConnectionParameters serviceConnectionParameters, int chunkSize, string source, int hash, System.DateTimeOffset lastTimestamp)
    {
        return base.Channel.GetLogMessagesAsync(serviceConnectionParameters, chunkSize, source, hash, lastTimestamp);
    }
    
    public www.doubletake.com.Common.Contract.EventLogEntryData2[] GetEventLogEntries(DoubleTake.Communication.ServiceConnectionParameters serviceConnectionParameters, int chunkSize, int lastIndex)
    {
        return base.Channel.GetEventLogEntries(serviceConnectionParameters, chunkSize, lastIndex);
    }
    
    public System.Threading.Tasks.Task<www.doubletake.com.Common.Contract.EventLogEntryData2[]> GetEventLogEntriesAsync(DoubleTake.Communication.ServiceConnectionParameters serviceConnectionParameters, int chunkSize, int lastIndex)
    {
        return base.Channel.GetEventLogEntriesAsync(serviceConnectionParameters, chunkSize, lastIndex);
    }
    
    public System.Guid GetServerUUID(DoubleTake.Communication.ServiceConnectionParameters serviceConnectionParameters)
    {
        return base.Channel.GetServerUUID(serviceConnectionParameters);
    }
    
    public System.Threading.Tasks.Task<System.Guid> GetServerUUIDAsync(DoubleTake.Communication.ServiceConnectionParameters serviceConnectionParameters)
    {
        return base.Channel.GetServerUUIDAsync(serviceConnectionParameters);
    }
    
    public DoubleTake.Core.Contract.ServerInfo GetServerInfo(DoubleTake.Communication.ServiceConnectionParameters serviceConnectionParameters)
    {
        return base.Channel.GetServerInfo(serviceConnectionParameters);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.ServerInfo> GetServerInfoAsync(DoubleTake.Communication.ServiceConnectionParameters serviceConnectionParameters)
    {
        return base.Channel.GetServerInfoAsync(serviceConnectionParameters);
    }
    
    public DoubleTake.Core.Contract.ProductInfo GetProductInfo(DoubleTake.Communication.ServiceConnectionParameters serviceConnectionParameters)
    {
        return base.Channel.GetProductInfo(serviceConnectionParameters);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.ProductInfo> GetProductInfoAsync(DoubleTake.Communication.ServiceConnectionParameters serviceConnectionParameters)
    {
        return base.Channel.GetProductInfoAsync(serviceConnectionParameters);
    }
    
    public DoubleTake.Core.Contract.ActivationStatus ValidateActivationParameters(DoubleTake.Communication.ServiceConnectionParameters serviceConnectionParameters, string[] activationCodes, string[] additionalCodes)
    {
        return base.Channel.ValidateActivationParameters(serviceConnectionParameters, activationCodes, additionalCodes);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.ActivationStatus> ValidateActivationParametersAsync(DoubleTake.Communication.ServiceConnectionParameters serviceConnectionParameters, string[] activationCodes, string[] additionalCodes)
    {
        return base.Channel.ValidateActivationParametersAsync(serviceConnectionParameters, activationCodes, additionalCodes);
    }
    
    public DoubleTake.Core.Contract.ActivationStatus SetActivationParameters(DoubleTake.Communication.ServiceConnectionParameters serviceConnectionParameters, string[] activationCodes, string[] additionalCodes)
    {
        return base.Channel.SetActivationParameters(serviceConnectionParameters, activationCodes, additionalCodes);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.ActivationStatus> SetActivationParametersAsync(DoubleTake.Communication.ServiceConnectionParameters serviceConnectionParameters, string[] activationCodes, string[] additionalCodes)
    {
        return base.Channel.SetActivationParametersAsync(serviceConnectionParameters, activationCodes, additionalCodes);
    }
    
    public DoubleTake.Common.Contract.PropertyBag GetOptions(DoubleTake.Communication.ServiceConnectionParameters serviceConnectionParameters, string[] optionNames)
    {
        return base.Channel.GetOptions(serviceConnectionParameters, optionNames);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Common.Contract.PropertyBag> GetOptionsAsync(DoubleTake.Communication.ServiceConnectionParameters serviceConnectionParameters, string[] optionNames)
    {
        return base.Channel.GetOptionsAsync(serviceConnectionParameters, optionNames);
    }
    
    public void SetOptions(DoubleTake.Communication.ServiceConnectionParameters serviceConnectionParameters, DoubleTake.Common.Contract.PropertyBag options)
    {
        base.Channel.SetOptions(serviceConnectionParameters, options);
    }
    
    public System.Threading.Tasks.Task SetOptionsAsync(DoubleTake.Communication.ServiceConnectionParameters serviceConnectionParameters, DoubleTake.Common.Contract.PropertyBag options)
    {
        return base.Channel.SetOptionsAsync(serviceConnectionParameters, options);
    }
    
    public System.Guid CollectDtInfo(DoubleTake.Communication.ServiceConnectionParameters serviceConnectionParameters)
    {
        return base.Channel.CollectDtInfo(serviceConnectionParameters);
    }
    
    public System.Threading.Tasks.Task<System.Guid> CollectDtInfoAsync(DoubleTake.Communication.ServiceConnectionParameters serviceConnectionParameters)
    {
        return base.Channel.CollectDtInfoAsync(serviceConnectionParameters);
    }
    
    public DoubleTake.Diagnostics.Contract.DtInfoCollectionStatus GetDtInfoCollectionStatus(DoubleTake.Communication.ServiceConnectionParameters serviceConnectionParameters, System.Guid collectionId)
    {
        return base.Channel.GetDtInfoCollectionStatus(serviceConnectionParameters, collectionId);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Diagnostics.Contract.DtInfoCollectionStatus> GetDtInfoCollectionStatusAsync(DoubleTake.Communication.ServiceConnectionParameters serviceConnectionParameters, System.Guid collectionId)
    {
        return base.Channel.GetDtInfoCollectionStatusAsync(serviceConnectionParameters, collectionId);
    }
    
    public void CancelDtInfoCollection(DoubleTake.Communication.ServiceConnectionParameters serviceConnectionParameters, System.Guid collectionId)
    {
        base.Channel.CancelDtInfoCollection(serviceConnectionParameters, collectionId);
    }
    
    public System.Threading.Tasks.Task CancelDtInfoCollectionAsync(DoubleTake.Communication.ServiceConnectionParameters serviceConnectionParameters, System.Guid collectionId)
    {
        return base.Channel.CancelDtInfoCollectionAsync(serviceConnectionParameters, collectionId);
    }
    
    public System.Guid[] ListActiveDtInfoCollections(DoubleTake.Communication.ServiceConnectionParameters serviceConnectionParameters)
    {
        return base.Channel.ListActiveDtInfoCollections(serviceConnectionParameters);
    }
    
    public System.Threading.Tasks.Task<System.Guid[]> ListActiveDtInfoCollectionsAsync(DoubleTake.Communication.ServiceConnectionParameters serviceConnectionParameters)
    {
        return base.Channel.ListActiveDtInfoCollectionsAsync(serviceConnectionParameters);
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace="http://www.doubletake.com/Common/Contract/ServicesManager", ConfigurationName="IServicesManager")]
public interface IServicesManager
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ServicesManager/IServicesManager/GetSer" +
        "viceInfo", ReplyAction="http://www.doubletake.com/Common/Contract/ServicesManager/IServicesManager/GetSer" +
        "viceInfoResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Common/Contract/ServicesManager/IServicesManager/GetSer" +
        "viceInfoCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Common.Contract.ServiceInfo[] GetServiceInfo(string[] services);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ServicesManager/IServicesManager/GetSer" +
        "viceInfo", ReplyAction="http://www.doubletake.com/Common/Contract/ServicesManager/IServicesManager/GetSer" +
        "viceInfoResponse")]
    System.Threading.Tasks.Task<DoubleTake.Common.Contract.ServiceInfo[]> GetServiceInfoAsync(string[] services);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ServicesManager/IServicesManager/SetSta" +
        "rtMode", ReplyAction="http://www.doubletake.com/Common/Contract/ServicesManager/IServicesManager/SetSta" +
        "rtModeResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Common/Contract/ServicesManager/IServicesManager/SetSta" +
        "rtModeCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void SetStartMode(string service, DoubleTake.Common.Contract.ServicesStartMode startMode);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ServicesManager/IServicesManager/SetSta" +
        "rtMode", ReplyAction="http://www.doubletake.com/Common/Contract/ServicesManager/IServicesManager/SetSta" +
        "rtModeResponse")]
    System.Threading.Tasks.Task SetStartModeAsync(string service, DoubleTake.Common.Contract.ServicesStartMode startMode);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ServicesManager/IServicesManager/Start", ReplyAction="http://www.doubletake.com/Common/Contract/ServicesManager/IServicesManager/StartR" +
        "esponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Common/Contract/ServicesManager/IServicesManager/StartC" +
        "ommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void Start(string[] services, bool waitOnPreviousService);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ServicesManager/IServicesManager/Start", ReplyAction="http://www.doubletake.com/Common/Contract/ServicesManager/IServicesManager/StartR" +
        "esponse")]
    System.Threading.Tasks.Task StartAsync(string[] services, bool waitOnPreviousService);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ServicesManager/IServicesManager/Stop", ReplyAction="http://www.doubletake.com/Common/Contract/ServicesManager/IServicesManager/StopRe" +
        "sponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Common/Contract/ServicesManager/IServicesManager/StopCo" +
        "mmonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void Stop(string[] services, bool waitOnPreviousService);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/ServicesManager/IServicesManager/Stop", ReplyAction="http://www.doubletake.com/Common/Contract/ServicesManager/IServicesManager/StopRe" +
        "sponse")]
    System.Threading.Tasks.Task StopAsync(string[] services, bool waitOnPreviousService);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IServicesManagerChannel : IServicesManager, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class ServicesManagerClient : System.ServiceModel.ClientBase<IServicesManager>, IServicesManager
{
    
    public ServicesManagerClient()
    {
    }
    
    public ServicesManagerClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public ServicesManagerClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public ServicesManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public ServicesManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public DoubleTake.Common.Contract.ServiceInfo[] GetServiceInfo(string[] services)
    {
        return base.Channel.GetServiceInfo(services);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Common.Contract.ServiceInfo[]> GetServiceInfoAsync(string[] services)
    {
        return base.Channel.GetServiceInfoAsync(services);
    }
    
    public void SetStartMode(string service, DoubleTake.Common.Contract.ServicesStartMode startMode)
    {
        base.Channel.SetStartMode(service, startMode);
    }
    
    public System.Threading.Tasks.Task SetStartModeAsync(string service, DoubleTake.Common.Contract.ServicesStartMode startMode)
    {
        return base.Channel.SetStartModeAsync(service, startMode);
    }
    
    public void Start(string[] services, bool waitOnPreviousService)
    {
        base.Channel.Start(services, waitOnPreviousService);
    }
    
    public System.Threading.Tasks.Task StartAsync(string[] services, bool waitOnPreviousService)
    {
        return base.Channel.StartAsync(services, waitOnPreviousService);
    }
    
    public void Stop(string[] services, bool waitOnPreviousService)
    {
        base.Channel.Stop(services, waitOnPreviousService);
    }
    
    public System.Threading.Tasks.Task StopAsync(string[] services, bool waitOnPreviousService)
    {
        return base.Channel.StopAsync(services, waitOnPreviousService);
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace="http://www.doubletake.com/Common/Contract/SnapshotManagerOperations", ConfigurationName="ISnapshotManager")]
public interface ISnapshotManager
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/SnapshotManagerOperations/ISnapshotMana" +
        "ger/GetActionStatus", ReplyAction="http://www.doubletake.com/Common/Contract/SnapshotManagerOperations/ISnapshotMana" +
        "ger/GetActionStatusResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Common/Contract/SnapshotManagerOperations/ISnapshotMana" +
        "ger/GetActionStatusArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Common/Contract/SnapshotManagerOperations/ISnapshotMana" +
        "ger/GetActionStatusAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Common/Contract/SnapshotManagerOperations/ISnapshotMana" +
        "ger/GetActionStatusCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Core.Contract.Snapshot.SnapshotActivityStatus GetActionStatus(DoubleTake.Common.Tasks.ActivityToken taskToken);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/SnapshotManagerOperations/ISnapshotMana" +
        "ger/GetActionStatus", ReplyAction="http://www.doubletake.com/Common/Contract/SnapshotManagerOperations/ISnapshotMana" +
        "ger/GetActionStatusResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.Snapshot.SnapshotActivityStatus> GetActionStatusAsync(DoubleTake.Common.Tasks.ActivityToken taskToken);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/SnapshotManagerOperations/ISnapshotMana" +
        "ger/create", ReplyAction="http://www.doubletake.com/Common/Contract/SnapshotManagerOperations/ISnapshotMana" +
        "ger/createResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault), Action="http://www.doubletake.com/Common/Contract/SnapshotManagerOperations/ISnapshotMana" +
        "ger/createInvalidOperationFaultFault", Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Common/Contract/SnapshotManagerOperations/ISnapshotMana" +
        "ger/createAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Common/Contract/SnapshotManagerOperations/ISnapshotMana" +
        "ger/createArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Common/Contract/SnapshotManagerOperations/ISnapshotMana" +
        "ger/createCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Common.Tasks.ActivityToken create(DoubleTake.Core.Contract.Snapshot.SnapshotCreateOptions createOptions);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/SnapshotManagerOperations/ISnapshotMana" +
        "ger/create", ReplyAction="http://www.doubletake.com/Common/Contract/SnapshotManagerOperations/ISnapshotMana" +
        "ger/createResponse")]
    System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> createAsync(DoubleTake.Core.Contract.Snapshot.SnapshotCreateOptions createOptions);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/SnapshotManagerOperations/ISnapshotMana" +
        "ger/list", ReplyAction="http://www.doubletake.com/Common/Contract/SnapshotManagerOperations/ISnapshotMana" +
        "ger/listResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault), Action="http://www.doubletake.com/Common/Contract/SnapshotManagerOperations/ISnapshotMana" +
        "ger/listInvalidOperationFaultFault", Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Common/Contract/SnapshotManagerOperations/ISnapshotMana" +
        "ger/listArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Common/Contract/SnapshotManagerOperations/ISnapshotMana" +
        "ger/listCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Common/Contract/SnapshotManagerOperations/ISnapshotMana" +
        "ger/listAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Common.Tasks.ActivityToken list(DoubleTake.Core.Contract.Snapshot.SnapshotListOptions listOptions);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/SnapshotManagerOperations/ISnapshotMana" +
        "ger/list", ReplyAction="http://www.doubletake.com/Common/Contract/SnapshotManagerOperations/ISnapshotMana" +
        "ger/listResponse")]
    System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> listAsync(DoubleTake.Core.Contract.Snapshot.SnapshotListOptions listOptions);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/SnapshotManagerOperations/ISnapshotMana" +
        "ger/revert", ReplyAction="http://www.doubletake.com/Common/Contract/SnapshotManagerOperations/ISnapshotMana" +
        "ger/revertResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Common/Contract/SnapshotManagerOperations/ISnapshotMana" +
        "ger/revertAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault), Action="http://www.doubletake.com/Common/Contract/SnapshotManagerOperations/ISnapshotMana" +
        "ger/revertInvalidOperationFaultFault", Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Common/Contract/SnapshotManagerOperations/ISnapshotMana" +
        "ger/revertCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Common/Contract/SnapshotManagerOperations/ISnapshotMana" +
        "ger/revertArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Common.Tasks.ActivityToken revert(DoubleTake.Core.Contract.Snapshot.SnapshotRevertOptions revertOptions);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/SnapshotManagerOperations/ISnapshotMana" +
        "ger/revert", ReplyAction="http://www.doubletake.com/Common/Contract/SnapshotManagerOperations/ISnapshotMana" +
        "ger/revertResponse")]
    System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> revertAsync(DoubleTake.Core.Contract.Snapshot.SnapshotRevertOptions revertOptions);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/SnapshotManagerOperations/ISnapshotMana" +
        "ger/delete", ReplyAction="http://www.doubletake.com/Common/Contract/SnapshotManagerOperations/ISnapshotMana" +
        "ger/deleteResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Common/Contract/SnapshotManagerOperations/ISnapshotMana" +
        "ger/deleteCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault), Action="http://www.doubletake.com/Common/Contract/SnapshotManagerOperations/ISnapshotMana" +
        "ger/deleteInvalidOperationFaultFault", Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Common/Contract/SnapshotManagerOperations/ISnapshotMana" +
        "ger/deleteAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Common/Contract/SnapshotManagerOperations/ISnapshotMana" +
        "ger/deleteArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Common.Tasks.ActivityToken delete(DoubleTake.Core.Contract.Snapshot.SnapshotDeleteOptions deleteOptions);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/SnapshotManagerOperations/ISnapshotMana" +
        "ger/delete", ReplyAction="http://www.doubletake.com/Common/Contract/SnapshotManagerOperations/ISnapshotMana" +
        "ger/deleteResponse")]
    System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> deleteAsync(DoubleTake.Core.Contract.Snapshot.SnapshotDeleteOptions deleteOptions);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/SnapshotManagerOperations/ISnapshotMana" +
        "ger/mount", ReplyAction="http://www.doubletake.com/Common/Contract/SnapshotManagerOperations/ISnapshotMana" +
        "ger/mountResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault), Action="http://www.doubletake.com/Common/Contract/SnapshotManagerOperations/ISnapshotMana" +
        "ger/mountInvalidOperationFaultFault", Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Common/Contract/SnapshotManagerOperations/ISnapshotMana" +
        "ger/mountCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Common/Contract/SnapshotManagerOperations/ISnapshotMana" +
        "ger/mountAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Common/Contract/SnapshotManagerOperations/ISnapshotMana" +
        "ger/mountArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Common.Tasks.ActivityToken mount(DoubleTake.Core.Contract.Snapshot.SnapshotMountOptions mountOptions);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/SnapshotManagerOperations/ISnapshotMana" +
        "ger/mount", ReplyAction="http://www.doubletake.com/Common/Contract/SnapshotManagerOperations/ISnapshotMana" +
        "ger/mountResponse")]
    System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> mountAsync(DoubleTake.Core.Contract.Snapshot.SnapshotMountOptions mountOptions);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface ISnapshotManagerChannel : ISnapshotManager, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class SnapshotManagerClient : System.ServiceModel.ClientBase<ISnapshotManager>, ISnapshotManager
{
    
    public SnapshotManagerClient()
    {
    }
    
    public SnapshotManagerClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public SnapshotManagerClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public SnapshotManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public SnapshotManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public DoubleTake.Core.Contract.Snapshot.SnapshotActivityStatus GetActionStatus(DoubleTake.Common.Tasks.ActivityToken taskToken)
    {
        return base.Channel.GetActionStatus(taskToken);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.Snapshot.SnapshotActivityStatus> GetActionStatusAsync(DoubleTake.Common.Tasks.ActivityToken taskToken)
    {
        return base.Channel.GetActionStatusAsync(taskToken);
    }
    
    public DoubleTake.Common.Tasks.ActivityToken create(DoubleTake.Core.Contract.Snapshot.SnapshotCreateOptions createOptions)
    {
        return base.Channel.create(createOptions);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> createAsync(DoubleTake.Core.Contract.Snapshot.SnapshotCreateOptions createOptions)
    {
        return base.Channel.createAsync(createOptions);
    }
    
    public DoubleTake.Common.Tasks.ActivityToken list(DoubleTake.Core.Contract.Snapshot.SnapshotListOptions listOptions)
    {
        return base.Channel.list(listOptions);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> listAsync(DoubleTake.Core.Contract.Snapshot.SnapshotListOptions listOptions)
    {
        return base.Channel.listAsync(listOptions);
    }
    
    public DoubleTake.Common.Tasks.ActivityToken revert(DoubleTake.Core.Contract.Snapshot.SnapshotRevertOptions revertOptions)
    {
        return base.Channel.revert(revertOptions);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> revertAsync(DoubleTake.Core.Contract.Snapshot.SnapshotRevertOptions revertOptions)
    {
        return base.Channel.revertAsync(revertOptions);
    }
    
    public DoubleTake.Common.Tasks.ActivityToken delete(DoubleTake.Core.Contract.Snapshot.SnapshotDeleteOptions deleteOptions)
    {
        return base.Channel.delete(deleteOptions);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> deleteAsync(DoubleTake.Core.Contract.Snapshot.SnapshotDeleteOptions deleteOptions)
    {
        return base.Channel.deleteAsync(deleteOptions);
    }
    
    public DoubleTake.Common.Tasks.ActivityToken mount(DoubleTake.Core.Contract.Snapshot.SnapshotMountOptions mountOptions)
    {
        return base.Channel.mount(mountOptions);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> mountAsync(DoubleTake.Core.Contract.Snapshot.SnapshotMountOptions mountOptions)
    {
        return base.Channel.mountAsync(mountOptions);
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations", ConfigurationName="IWorkloadManager")]
public interface IWorkloadManager
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/GetWorkloadTypes", ReplyAction="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/GetWorkloadTypesResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/GetWorkloadTypesCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Common.Contract.WorkloadType[] GetWorkloadTypes(DoubleTake.Core.Contract.ActivationStatus sourceActivationStatus, DoubleTake.Core.Contract.ActivationStatus targetActivationStatus);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/GetWorkloadTypes", ReplyAction="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/GetWorkloadTypesResponse")]
    System.Threading.Tasks.Task<DoubleTake.Common.Contract.WorkloadType[]> GetWorkloadTypesAsync(DoubleTake.Core.Contract.ActivationStatus sourceActivationStatus, DoubleTake.Core.Contract.ActivationStatus targetActivationStatus);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/Create", ReplyAction="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/CreateResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/CreateCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    System.Guid Create(string workloadTypeName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/Create", ReplyAction="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/CreateResponse")]
    System.Threading.Tasks.Task<System.Guid> CreateAsync(string workloadTypeName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/CreateWithDelegation", ReplyAction="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/CreateWithDelegationResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/CreateWithDelegationCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    System.Guid CreateWithDelegation(string workloadTypeName, System.Uri hostUri);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/CreateWithDelegation", ReplyAction="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/CreateWithDelegationResponse")]
    System.Threading.Tasks.Task<System.Guid> CreateWithDelegationAsync(string workloadTypeName, System.Uri hostUri);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/CreateFrom", ReplyAction="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/CreateFromResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/CreateFromCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    System.Guid CreateFrom(DoubleTake.Common.Contract.Workload workload);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/CreateFrom", ReplyAction="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/CreateFromResponse")]
    System.Threading.Tasks.Task<System.Guid> CreateFromAsync(DoubleTake.Common.Contract.Workload workload);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/CreateFromWithDelegation", ReplyAction="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/CreateFromWithDelegationResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/CreateFromWithDelegationCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    System.Guid CreateFromWithDelegation(DoubleTake.Common.Contract.Workload workload, System.Uri hostUri);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/CreateFromWithDelegation", ReplyAction="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/CreateFromWithDelegationResponse")]
    System.Threading.Tasks.Task<System.Guid> CreateFromWithDelegationAsync(DoubleTake.Common.Contract.Workload workload, System.Uri hostUri);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/CreateUsingImage", ReplyAction="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/CreateUsingImageResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/CreateUsingImageCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    System.Guid CreateUsingImage(string workloadTypeName, System.Guid imageId, System.Guid snapshotId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/CreateUsingImage", ReplyAction="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/CreateUsingImageResponse")]
    System.Threading.Tasks.Task<System.Guid> CreateUsingImageAsync(string workloadTypeName, System.Guid imageId, System.Guid snapshotId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/CreateUsingImageWithDelegation", ReplyAction="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/CreateUsingImageWithDelegationResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/CreateUsingImageWithDelegationCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    System.Guid CreateUsingImageWithDelegation(string workloadTypeName, System.Uri hostUri, System.Guid imageId, System.Guid snapshotId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/CreateUsingImageWithDelegation", ReplyAction="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/CreateUsingImageWithDelegationResponse")]
    System.Threading.Tasks.Task<System.Guid> CreateUsingImageWithDelegationAsync(string workloadTypeName, System.Uri hostUri, System.Guid imageId, System.Guid snapshotId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/GetWorkload", ReplyAction="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/GetWorkloadResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/GetWorkloadCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Common.Contract.Workload GetWorkload(System.Guid workloadId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/GetWorkload", ReplyAction="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/GetWorkloadResponse")]
    System.Threading.Tasks.Task<DoubleTake.Common.Contract.Workload> GetWorkloadAsync(System.Guid workloadId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/GetWorkloads", ReplyAction="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/GetWorkloadsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/GetWorkloadsCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Common.Contract.Workload[] GetWorkloads();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/GetWorkloads", ReplyAction="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/GetWorkloadsResponse")]
    System.Threading.Tasks.Task<DoubleTake.Common.Contract.Workload[]> GetWorkloadsAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/Close", ReplyAction="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/CloseResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/CloseCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void Close(System.Guid workloadId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/Close", ReplyAction="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/CloseResponse")]
    System.Threading.Tasks.Task CloseAsync(System.Guid workloadId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/GetPhysicalItems", ReplyAction="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/GetPhysicalItemsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/GetPhysicalItemsCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Core.Contract.ProtectableItem[] GetPhysicalItems(System.Guid workloadId, DoubleTake.Core.Contract.ProtectableItem referenceItem);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/GetPhysicalItems", ReplyAction="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/GetPhysicalItemsResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.ProtectableItem[]> GetPhysicalItemsAsync(System.Guid workloadId, DoubleTake.Core.Contract.ProtectableItem referenceItem);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/GetLogicalItems", ReplyAction="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/GetLogicalItemsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/GetLogicalItemsCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Common.Contract.LogicalItem[] GetLogicalItems(System.Guid workloadId, DoubleTake.Common.Contract.LogicalItem referenceItem);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/GetLogicalItems", ReplyAction="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/GetLogicalItemsResponse")]
    System.Threading.Tasks.Task<DoubleTake.Common.Contract.LogicalItem[]> GetLogicalItemsAsync(System.Guid workloadId, DoubleTake.Common.Contract.LogicalItem referenceItem);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/AddPhysicalRule", ReplyAction="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/AddPhysicalRuleResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/AddPhysicalRuleCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Common.Contract.ChangedItems AddPhysicalRule(System.Guid workloadId, DoubleTake.Core.Contract.PhysicalRule physicalRule);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/AddPhysicalRule", ReplyAction="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/AddPhysicalRuleResponse")]
    System.Threading.Tasks.Task<DoubleTake.Common.Contract.ChangedItems> AddPhysicalRuleAsync(System.Guid workloadId, DoubleTake.Core.Contract.PhysicalRule physicalRule);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/RemovePhysicalRule", ReplyAction="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/RemovePhysicalRuleResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/RemovePhysicalRuleCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Common.Contract.ChangedItems RemovePhysicalRule(System.Guid workloadId, DoubleTake.Core.Contract.PhysicalRule physicalRule);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/RemovePhysicalRule", ReplyAction="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/RemovePhysicalRuleResponse")]
    System.Threading.Tasks.Task<DoubleTake.Common.Contract.ChangedItems> RemovePhysicalRuleAsync(System.Guid workloadId, DoubleTake.Core.Contract.PhysicalRule physicalRule);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/SelectLogicalItem", ReplyAction="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/SelectLogicalItemResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/SelectLogicalItemCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Common.Contract.ChangedItems SelectLogicalItem(System.Guid workloadId, string logicalItemPath);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/SelectLogicalItem", ReplyAction="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/SelectLogicalItemResponse")]
    System.Threading.Tasks.Task<DoubleTake.Common.Contract.ChangedItems> SelectLogicalItemAsync(System.Guid workloadId, string logicalItemPath);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/UnselectLogicalItem", ReplyAction="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/UnselectLogicalItemResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/UnselectLogicalItemCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Common.Contract.ChangedItems UnselectLogicalItem(System.Guid workloadId, string logicalItemPath);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/UnselectLogicalItem", ReplyAction="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/UnselectLogicalItemResponse")]
    System.Threading.Tasks.Task<DoubleTake.Common.Contract.ChangedItems> UnselectLogicalItemAsync(System.Guid workloadId, string logicalItemPath);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/GetRecommendedPathTransformations", ReplyAction="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/GetRecommendedPathTransformationsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/GetRecommendedPathTransformationsCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Core.Contract.PathTransformation[] GetRecommendedPathTransformations(System.Guid workloadId, string basePath);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/GetRecommendedPathTransformations", ReplyAction="http://www.doubletake.com/Common/Contract/WorkloadManagerOperations/IWorkloadMana" +
        "ger/GetRecommendedPathTransformationsResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.PathTransformation[]> GetRecommendedPathTransformationsAsync(System.Guid workloadId, string basePath);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IWorkloadManagerChannel : IWorkloadManager, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class WorkloadManagerClient : System.ServiceModel.ClientBase<IWorkloadManager>, IWorkloadManager
{
    
    public WorkloadManagerClient()
    {
    }
    
    public WorkloadManagerClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public WorkloadManagerClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public WorkloadManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public WorkloadManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public DoubleTake.Common.Contract.WorkloadType[] GetWorkloadTypes(DoubleTake.Core.Contract.ActivationStatus sourceActivationStatus, DoubleTake.Core.Contract.ActivationStatus targetActivationStatus)
    {
        return base.Channel.GetWorkloadTypes(sourceActivationStatus, targetActivationStatus);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Common.Contract.WorkloadType[]> GetWorkloadTypesAsync(DoubleTake.Core.Contract.ActivationStatus sourceActivationStatus, DoubleTake.Core.Contract.ActivationStatus targetActivationStatus)
    {
        return base.Channel.GetWorkloadTypesAsync(sourceActivationStatus, targetActivationStatus);
    }
    
    public System.Guid Create(string workloadTypeName)
    {
        return base.Channel.Create(workloadTypeName);
    }
    
    public System.Threading.Tasks.Task<System.Guid> CreateAsync(string workloadTypeName)
    {
        return base.Channel.CreateAsync(workloadTypeName);
    }
    
    public System.Guid CreateWithDelegation(string workloadTypeName, System.Uri hostUri)
    {
        return base.Channel.CreateWithDelegation(workloadTypeName, hostUri);
    }
    
    public System.Threading.Tasks.Task<System.Guid> CreateWithDelegationAsync(string workloadTypeName, System.Uri hostUri)
    {
        return base.Channel.CreateWithDelegationAsync(workloadTypeName, hostUri);
    }
    
    public System.Guid CreateFrom(DoubleTake.Common.Contract.Workload workload)
    {
        return base.Channel.CreateFrom(workload);
    }
    
    public System.Threading.Tasks.Task<System.Guid> CreateFromAsync(DoubleTake.Common.Contract.Workload workload)
    {
        return base.Channel.CreateFromAsync(workload);
    }
    
    public System.Guid CreateFromWithDelegation(DoubleTake.Common.Contract.Workload workload, System.Uri hostUri)
    {
        return base.Channel.CreateFromWithDelegation(workload, hostUri);
    }
    
    public System.Threading.Tasks.Task<System.Guid> CreateFromWithDelegationAsync(DoubleTake.Common.Contract.Workload workload, System.Uri hostUri)
    {
        return base.Channel.CreateFromWithDelegationAsync(workload, hostUri);
    }
    
    public System.Guid CreateUsingImage(string workloadTypeName, System.Guid imageId, System.Guid snapshotId)
    {
        return base.Channel.CreateUsingImage(workloadTypeName, imageId, snapshotId);
    }
    
    public System.Threading.Tasks.Task<System.Guid> CreateUsingImageAsync(string workloadTypeName, System.Guid imageId, System.Guid snapshotId)
    {
        return base.Channel.CreateUsingImageAsync(workloadTypeName, imageId, snapshotId);
    }
    
    public System.Guid CreateUsingImageWithDelegation(string workloadTypeName, System.Uri hostUri, System.Guid imageId, System.Guid snapshotId)
    {
        return base.Channel.CreateUsingImageWithDelegation(workloadTypeName, hostUri, imageId, snapshotId);
    }
    
    public System.Threading.Tasks.Task<System.Guid> CreateUsingImageWithDelegationAsync(string workloadTypeName, System.Uri hostUri, System.Guid imageId, System.Guid snapshotId)
    {
        return base.Channel.CreateUsingImageWithDelegationAsync(workloadTypeName, hostUri, imageId, snapshotId);
    }
    
    public DoubleTake.Common.Contract.Workload GetWorkload(System.Guid workloadId)
    {
        return base.Channel.GetWorkload(workloadId);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Common.Contract.Workload> GetWorkloadAsync(System.Guid workloadId)
    {
        return base.Channel.GetWorkloadAsync(workloadId);
    }
    
    public DoubleTake.Common.Contract.Workload[] GetWorkloads()
    {
        return base.Channel.GetWorkloads();
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Common.Contract.Workload[]> GetWorkloadsAsync()
    {
        return base.Channel.GetWorkloadsAsync();
    }
    
    public void Close(System.Guid workloadId)
    {
        base.Channel.Close(workloadId);
    }
    
    public System.Threading.Tasks.Task CloseAsync(System.Guid workloadId)
    {
        return base.Channel.CloseAsync(workloadId);
    }
    
    public DoubleTake.Core.Contract.ProtectableItem[] GetPhysicalItems(System.Guid workloadId, DoubleTake.Core.Contract.ProtectableItem referenceItem)
    {
        return base.Channel.GetPhysicalItems(workloadId, referenceItem);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.ProtectableItem[]> GetPhysicalItemsAsync(System.Guid workloadId, DoubleTake.Core.Contract.ProtectableItem referenceItem)
    {
        return base.Channel.GetPhysicalItemsAsync(workloadId, referenceItem);
    }
    
    public DoubleTake.Common.Contract.LogicalItem[] GetLogicalItems(System.Guid workloadId, DoubleTake.Common.Contract.LogicalItem referenceItem)
    {
        return base.Channel.GetLogicalItems(workloadId, referenceItem);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Common.Contract.LogicalItem[]> GetLogicalItemsAsync(System.Guid workloadId, DoubleTake.Common.Contract.LogicalItem referenceItem)
    {
        return base.Channel.GetLogicalItemsAsync(workloadId, referenceItem);
    }
    
    public DoubleTake.Common.Contract.ChangedItems AddPhysicalRule(System.Guid workloadId, DoubleTake.Core.Contract.PhysicalRule physicalRule)
    {
        return base.Channel.AddPhysicalRule(workloadId, physicalRule);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Common.Contract.ChangedItems> AddPhysicalRuleAsync(System.Guid workloadId, DoubleTake.Core.Contract.PhysicalRule physicalRule)
    {
        return base.Channel.AddPhysicalRuleAsync(workloadId, physicalRule);
    }
    
    public DoubleTake.Common.Contract.ChangedItems RemovePhysicalRule(System.Guid workloadId, DoubleTake.Core.Contract.PhysicalRule physicalRule)
    {
        return base.Channel.RemovePhysicalRule(workloadId, physicalRule);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Common.Contract.ChangedItems> RemovePhysicalRuleAsync(System.Guid workloadId, DoubleTake.Core.Contract.PhysicalRule physicalRule)
    {
        return base.Channel.RemovePhysicalRuleAsync(workloadId, physicalRule);
    }
    
    public DoubleTake.Common.Contract.ChangedItems SelectLogicalItem(System.Guid workloadId, string logicalItemPath)
    {
        return base.Channel.SelectLogicalItem(workloadId, logicalItemPath);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Common.Contract.ChangedItems> SelectLogicalItemAsync(System.Guid workloadId, string logicalItemPath)
    {
        return base.Channel.SelectLogicalItemAsync(workloadId, logicalItemPath);
    }
    
    public DoubleTake.Common.Contract.ChangedItems UnselectLogicalItem(System.Guid workloadId, string logicalItemPath)
    {
        return base.Channel.UnselectLogicalItem(workloadId, logicalItemPath);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Common.Contract.ChangedItems> UnselectLogicalItemAsync(System.Guid workloadId, string logicalItemPath)
    {
        return base.Channel.UnselectLogicalItemAsync(workloadId, logicalItemPath);
    }
    
    public DoubleTake.Core.Contract.PathTransformation[] GetRecommendedPathTransformations(System.Guid workloadId, string basePath)
    {
        return base.Channel.GetRecommendedPathTransformations(workloadId, basePath);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.PathTransformation[]> GetRecommendedPathTransformationsAsync(System.Guid workloadId, string basePath)
    {
        return base.Channel.GetRecommendedPathTransformationsAsync(workloadId, basePath);
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace="http://www.doubletake.com/Core/Contract/CloudLicenseServiceOperations", ConfigurationName="CloudLicenseService")]
public interface CloudLicenseService
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/CloudLicenseServiceOperations/CloudLicens" +
        "eService/SetBillingInformation", ReplyAction="http://www.doubletake.com/Core/Contract/CloudLicenseServiceOperations/CloudLicens" +
        "eService/SetBillingInformationResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Core.Contract.CoreFault), Action="http://www.doubletake.com/Core/Contract/CloudLicenseServiceOperations/CloudLicens" +
        "eService/SetBillingInformationCoreFaultFault", Name="CoreFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    void SetBillingInformation(DoubleTake.Core.Contract.CloudBillingInformation information);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/CloudLicenseServiceOperations/CloudLicens" +
        "eService/SetBillingInformation", ReplyAction="http://www.doubletake.com/Core/Contract/CloudLicenseServiceOperations/CloudLicens" +
        "eService/SetBillingInformationResponse")]
    System.Threading.Tasks.Task SetBillingInformationAsync(DoubleTake.Core.Contract.CloudBillingInformation information);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/CloudLicenseServiceOperations/CloudLicens" +
        "eService/GetBillingInformation", ReplyAction="http://www.doubletake.com/Core/Contract/CloudLicenseServiceOperations/CloudLicens" +
        "eService/GetBillingInformationResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Core.Contract.CoreFault), Action="http://www.doubletake.com/Core/Contract/CloudLicenseServiceOperations/CloudLicens" +
        "eService/GetBillingInformationCoreFaultFault", Name="CoreFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    DoubleTake.Core.Contract.CloudBillingInformation GetBillingInformation();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/CloudLicenseServiceOperations/CloudLicens" +
        "eService/GetBillingInformation", ReplyAction="http://www.doubletake.com/Core/Contract/CloudLicenseServiceOperations/CloudLicens" +
        "eService/GetBillingInformationResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.CloudBillingInformation> GetBillingInformationAsync();
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface CloudLicenseServiceChannel : CloudLicenseService, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class CloudLicenseServiceClient : System.ServiceModel.ClientBase<CloudLicenseService>, CloudLicenseService
{
    
    public CloudLicenseServiceClient()
    {
    }
    
    public CloudLicenseServiceClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public CloudLicenseServiceClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public CloudLicenseServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public CloudLicenseServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public void SetBillingInformation(DoubleTake.Core.Contract.CloudBillingInformation information)
    {
        base.Channel.SetBillingInformation(information);
    }
    
    public System.Threading.Tasks.Task SetBillingInformationAsync(DoubleTake.Core.Contract.CloudBillingInformation information)
    {
        return base.Channel.SetBillingInformationAsync(information);
    }
    
    public DoubleTake.Core.Contract.CloudBillingInformation GetBillingInformation()
    {
        return base.Channel.GetBillingInformation();
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.CloudBillingInformation> GetBillingInformationAsync()
    {
        return base.Channel.GetBillingInformationAsync();
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace="http://www.doubletake.com/Core/Contract/ClusterOperations", ConfigurationName="ClusterService")]
public interface ClusterService
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ClusterOperations/ClusterService/GetStand" +
        "aloneConnectionInfo", ReplyAction="http://www.doubletake.com/Core/Contract/ClusterOperations/ClusterService/GetStand" +
        "aloneConnectionInfoResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Core.Contract.CoreFault), Action="http://www.doubletake.com/Core/Contract/ClusterOperations/ClusterService/GetStand" +
        "aloneConnectionInfoCoreFaultFault", Name="CoreFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    DoubleTake.Core.Contract.Connection.ConnectionInfo[] GetStandaloneConnectionInfo(System.Nullable<System.Guid> connectionGuid);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ClusterOperations/ClusterService/GetStand" +
        "aloneConnectionInfo", ReplyAction="http://www.doubletake.com/Core/Contract/ClusterOperations/ClusterService/GetStand" +
        "aloneConnectionInfoResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.Connection.ConnectionInfo[]> GetStandaloneConnectionInfoAsync(System.Nullable<System.Guid> connectionGuid);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ClusterOperations/ClusterService/GetClust" +
        "erConnectionInfo", ReplyAction="http://www.doubletake.com/Core/Contract/ClusterOperations/ClusterService/GetClust" +
        "erConnectionInfoResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Core.Contract.CoreFault), Action="http://www.doubletake.com/Core/Contract/ClusterOperations/ClusterService/GetClust" +
        "erConnectionInfoCoreFaultFault", Name="CoreFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    DoubleTake.Core.Contract.Connection.ConnectionInfo[] GetClusterConnectionInfo(System.Nullable<System.Guid> connectionGuid, DoubleTake.Core.Contract.Job.JobCredentials credentials);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ClusterOperations/ClusterService/GetClust" +
        "erConnectionInfo", ReplyAction="http://www.doubletake.com/Core/Contract/ClusterOperations/ClusterService/GetClust" +
        "erConnectionInfoResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.Connection.ConnectionInfo[]> GetClusterConnectionInfoAsync(System.Nullable<System.Guid> connectionGuid, DoubleTake.Core.Contract.Job.JobCredentials credentials);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ClusterOperations/ClusterService/GetClust" +
        "erAddressInfo", ReplyAction="http://www.doubletake.com/Core/Contract/ClusterOperations/ClusterService/GetClust" +
        "erAddressInfoResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Core.Contract.CoreFault), Action="http://www.doubletake.com/Core/Contract/ClusterOperations/ClusterService/GetClust" +
        "erAddressInfoCoreFaultFault", Name="CoreFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    DoubleTake.Core.Contract.ClusterAddressInfo GetClusterAddressInfo(string serverAddress);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ClusterOperations/ClusterService/GetClust" +
        "erAddressInfo", ReplyAction="http://www.doubletake.com/Core/Contract/ClusterOperations/ClusterService/GetClust" +
        "erAddressInfoResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.ClusterAddressInfo> GetClusterAddressInfoAsync(string serverAddress);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ClusterOperations/ClusterService/GetClust" +
        "erUniqueId", ReplyAction="http://www.doubletake.com/Core/Contract/ClusterOperations/ClusterService/GetClust" +
        "erUniqueIdResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Core.Contract.CoreFault), Action="http://www.doubletake.com/Core/Contract/ClusterOperations/ClusterService/GetClust" +
        "erUniqueIdCoreFaultFault", Name="CoreFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    string GetClusterUniqueId();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ClusterOperations/ClusterService/GetClust" +
        "erUniqueId", ReplyAction="http://www.doubletake.com/Core/Contract/ClusterOperations/ClusterService/GetClust" +
        "erUniqueIdResponse")]
    System.Threading.Tasks.Task<string> GetClusterUniqueIdAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ClusterOperations/ClusterService/GetCoreC" +
        "lusterInfo", ReplyAction="http://www.doubletake.com/Core/Contract/ClusterOperations/ClusterService/GetCoreC" +
        "lusterInfoResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Core.Contract.CoreFault), Action="http://www.doubletake.com/Core/Contract/ClusterOperations/ClusterService/GetCoreC" +
        "lusterInfoCoreFaultFault", Name="CoreFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    DoubleTake.Core.Contract.CoreClusterInfo GetCoreClusterInfo();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ClusterOperations/ClusterService/GetCoreC" +
        "lusterInfo", ReplyAction="http://www.doubletake.com/Core/Contract/ClusterOperations/ClusterService/GetCoreC" +
        "lusterInfoResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.CoreClusterInfo> GetCoreClusterInfoAsync();
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface ClusterServiceChannel : ClusterService, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class ClusterServiceClient : System.ServiceModel.ClientBase<ClusterService>, ClusterService
{
    
    public ClusterServiceClient()
    {
    }
    
    public ClusterServiceClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public ClusterServiceClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public ClusterServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public ClusterServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public DoubleTake.Core.Contract.Connection.ConnectionInfo[] GetStandaloneConnectionInfo(System.Nullable<System.Guid> connectionGuid)
    {
        return base.Channel.GetStandaloneConnectionInfo(connectionGuid);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.Connection.ConnectionInfo[]> GetStandaloneConnectionInfoAsync(System.Nullable<System.Guid> connectionGuid)
    {
        return base.Channel.GetStandaloneConnectionInfoAsync(connectionGuid);
    }
    
    public DoubleTake.Core.Contract.Connection.ConnectionInfo[] GetClusterConnectionInfo(System.Nullable<System.Guid> connectionGuid, DoubleTake.Core.Contract.Job.JobCredentials credentials)
    {
        return base.Channel.GetClusterConnectionInfo(connectionGuid, credentials);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.Connection.ConnectionInfo[]> GetClusterConnectionInfoAsync(System.Nullable<System.Guid> connectionGuid, DoubleTake.Core.Contract.Job.JobCredentials credentials)
    {
        return base.Channel.GetClusterConnectionInfoAsync(connectionGuid, credentials);
    }
    
    public DoubleTake.Core.Contract.ClusterAddressInfo GetClusterAddressInfo(string serverAddress)
    {
        return base.Channel.GetClusterAddressInfo(serverAddress);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.ClusterAddressInfo> GetClusterAddressInfoAsync(string serverAddress)
    {
        return base.Channel.GetClusterAddressInfoAsync(serverAddress);
    }
    
    public string GetClusterUniqueId()
    {
        return base.Channel.GetClusterUniqueId();
    }
    
    public System.Threading.Tasks.Task<string> GetClusterUniqueIdAsync()
    {
        return base.Channel.GetClusterUniqueIdAsync();
    }
    
    public DoubleTake.Core.Contract.CoreClusterInfo GetCoreClusterInfo()
    {
        return base.Channel.GetCoreClusterInfo();
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.CoreClusterInfo> GetCoreClusterInfoAsync()
    {
        return base.Channel.GetCoreClusterInfoAsync();
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace="http://www.doubletake.com/Core/Contract/DnsOperations", ConfigurationName="IDns")]
public interface IDns
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/DnsOperations/IDns/GetDomains", ReplyAction="http://www.doubletake.com/Core/Contract/DnsOperations/IDns/GetDomainsResponse")]
    DoubleTake.Core.Contract.DnsDomainDetailsPrototype[] GetDomains();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/DnsOperations/IDns/GetDomains", ReplyAction="http://www.doubletake.com/Core/Contract/DnsOperations/IDns/GetDomainsResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.DnsDomainDetailsPrototype[]> GetDomainsAsync();
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IDnsChannel : IDns, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class DnsClient : System.ServiceModel.ClientBase<IDns>, IDns
{
    
    public DnsClient()
    {
    }
    
    public DnsClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public DnsClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public DnsClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public DnsClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public DoubleTake.Core.Contract.DnsDomainDetailsPrototype[] GetDomains()
    {
        return base.Channel.GetDomains();
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.DnsDomainDetailsPrototype[]> GetDomainsAsync()
    {
        return base.Channel.GetDomainsAsync();
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace="http://www.doubletake.com/Core/Contract/ServiceOperations", ConfigurationName="CoreService")]
public interface CoreService
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/GetAccessLe" +
        "vel", ReplyAction="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/GetAccessLe" +
        "velResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Core.Contract.CoreFault), Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/GetAccessLe" +
        "velCoreFaultFault", Name="CoreFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    DoubleTake.Core.Contract.AccessLevel GetAccessLevel();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/GetAccessLe" +
        "vel", ReplyAction="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/GetAccessLe" +
        "velResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.AccessLevel> GetAccessLevelAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/GetServerIn" +
        "fo", ReplyAction="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/GetServerIn" +
        "foResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Core.Contract.CoreFault), Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/GetServerIn" +
        "foCoreFaultFault", Name="CoreFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    DoubleTake.Core.Contract.ServerInfo GetServerInfo();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/GetServerIn" +
        "fo", ReplyAction="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/GetServerIn" +
        "foResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.ServerInfo> GetServerInfoAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/GetNetworkI" +
        "nterfaceInfo", ReplyAction="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/GetNetworkI" +
        "nterfaceInfoResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Core.Contract.CoreFault), Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/GetNetworkI" +
        "nterfaceInfoCoreFaultFault", Name="CoreFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    DoubleTake.Core.Contract.NetworkInterfaceInfo[] GetNetworkInterfaceInfo();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/GetNetworkI" +
        "nterfaceInfo", ReplyAction="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/GetNetworkI" +
        "nterfaceInfoResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.NetworkInterfaceInfo[]> GetNetworkInterfaceInfoAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/GetProductI" +
        "nfo", ReplyAction="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/GetProductI" +
        "nfoResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Core.Contract.CoreFault), Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/GetProductI" +
        "nfoCoreFaultFault", Name="CoreFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    DoubleTake.Core.Contract.ProductInfo GetProductInfo();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/GetProductI" +
        "nfo", ReplyAction="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/GetProductI" +
        "nfoResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.ProductInfo> GetProductInfoAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/GetProductS" +
        "ettings", ReplyAction="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/GetProductS" +
        "ettingsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Core.Contract.CoreFault), Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/GetProductS" +
        "ettingsCoreFaultFault", Name="CoreFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    DoubleTake.Core.Contract.NamedSetting[] GetProductSettings(string[] names);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/GetProductS" +
        "ettings", ReplyAction="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/GetProductS" +
        "ettingsResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.NamedSetting[]> GetProductSettingsAsync(string[] names);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/ApplyProduc" +
        "tSettings", ReplyAction="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/ApplyProduc" +
        "tSettingsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Core.Contract.CoreFault), Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/ApplyProduc" +
        "tSettingsCoreFaultFault", Name="CoreFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    void ApplyProductSettings(DoubleTake.Core.Contract.NamedSetting[] settings);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/ApplyProduc" +
        "tSettings", ReplyAction="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/ApplyProduc" +
        "tSettingsResponse")]
    System.Threading.Tasks.Task ApplyProductSettingsAsync(DoubleTake.Core.Contract.NamedSetting[] settings);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/ShutdownSer" +
        "vice", ReplyAction="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/ShutdownSer" +
        "viceResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Core.Contract.CoreFault), Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/ShutdownSer" +
        "viceCoreFaultFault", Name="CoreFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    void ShutdownService(DoubleTake.Core.Contract.ShutdownOption shutdownOption);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/ShutdownSer" +
        "vice", ReplyAction="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/ShutdownSer" +
        "viceResponse")]
    System.Threading.Tasks.Task ShutdownServiceAsync(DoubleTake.Core.Contract.ShutdownOption shutdownOption);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/ValidateAct" +
        "ivationParameters", ReplyAction="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/ValidateAct" +
        "ivationParametersResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Core.Contract.CoreFault), Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/ValidateAct" +
        "ivationParametersCoreFaultFault", Name="CoreFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    DoubleTake.Core.Contract.ActivationStatus ValidateActivationParameters(string[] codes, string[] addOnCodes);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/ValidateAct" +
        "ivationParameters", ReplyAction="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/ValidateAct" +
        "ivationParametersResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.ActivationStatus> ValidateActivationParametersAsync(string[] codes, string[] addOnCodes);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/ApplyActiva" +
        "tionParameters", ReplyAction="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/ApplyActiva" +
        "tionParametersResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Core.Contract.CoreFault), Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/ApplyActiva" +
        "tionParametersCoreFaultFault", Name="CoreFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    DoubleTake.Core.Contract.ActivationStatus ApplyActivationParameters(string[] codes, string[] addOnCodes);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/ApplyActiva" +
        "tionParameters", ReplyAction="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/ApplyActiva" +
        "tionParametersResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.ActivationStatus> ApplyActivationParametersAsync(string[] codes, string[] addOnCodes);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/GetProtecta" +
        "bleItems", ReplyAction="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/GetProtecta" +
        "bleItemsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Core.Contract.CoreFault), Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/GetProtecta" +
        "bleItemsCoreFaultFault", Name="CoreFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    DoubleTake.Core.Contract.ProtectableItem[] GetProtectableItems(DoubleTake.Core.Contract.ProtectableItem reference);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/GetProtecta" +
        "bleItems", ReplyAction="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/GetProtecta" +
        "bleItemsResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.ProtectableItem[]> GetProtectableItemsAsync(DoubleTake.Core.Contract.ProtectableItem reference);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/GetWorkload" +
        "s", ReplyAction="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/GetWorkload" +
        "sResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Core.Contract.CoreFault), Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/GetWorkload" +
        "sCoreFaultFault", Name="CoreFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    string[] GetWorkloads();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/GetWorkload" +
        "s", ReplyAction="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/GetWorkload" +
        "sResponse")]
    System.Threading.Tasks.Task<string[]> GetWorkloadsAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/GetConnecti" +
        "ons", ReplyAction="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/GetConnecti" +
        "onsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Core.Contract.CoreFault), Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/GetConnecti" +
        "onsCoreFaultFault", Name="CoreFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    DoubleTake.Core.Contract.Connection.ConnectionInfo[] GetConnections();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/GetConnecti" +
        "ons", ReplyAction="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/GetConnecti" +
        "onsResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.Connection.ConnectionInfo[]> GetConnectionsAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/QualifyConn" +
        "ection", ReplyAction="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/QualifyConn" +
        "ectionResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Core.Contract.CoreFault), Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/QualifyConn" +
        "ectionCoreFaultFault", Name="CoreFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    DoubleTake.Core.Contract.Connection.ConnectionQualificationResult QualifyConnection(DoubleTake.Core.Contract.UnicastIPAddressInfo[] targetAddresses, DoubleTake.Core.Contract.Credentials targetCredentials);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/QualifyConn" +
        "ection", ReplyAction="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/QualifyConn" +
        "ectionResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.Connection.ConnectionQualificationResult> QualifyConnectionAsync(DoubleTake.Core.Contract.UnicastIPAddressInfo[] targetAddresses, DoubleTake.Core.Contract.Credentials targetCredentials);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/QualifyMoni" +
        "tor", ReplyAction="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/QualifyMoni" +
        "torResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Core.Contract.CoreFault), Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/QualifyMoni" +
        "torCoreFaultFault", Name="CoreFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    DoubleTake.Core.Contract.Monitor.MonitorQualificationResult QualifyMonitor(string sourceNameOrIP, DoubleTake.Core.Contract.Credentials sourceCredentials);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/QualifyMoni" +
        "tor", ReplyAction="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/QualifyMoni" +
        "torResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.Monitor.MonitorQualificationResult> QualifyMonitorAsync(string sourceNameOrIP, DoubleTake.Core.Contract.Credentials sourceCredentials);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/GetMonitors" +
        "", ReplyAction="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/GetMonitors" +
        "Response")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Core.Contract.CoreFault), Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/GetMonitors" +
        "CoreFaultFault", Name="CoreFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    DoubleTake.Core.Contract.Monitor.MonitorConfiguration[] GetMonitors();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/GetMonitors" +
        "", ReplyAction="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/GetMonitors" +
        "Response")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.Monitor.MonitorConfiguration[]> GetMonitorsAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/SetMonitors" +
        "", ReplyAction="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/SetMonitors" +
        "Response")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Core.Contract.CoreFault), Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/SetMonitors" +
        "CoreFaultFault", Name="CoreFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    void SetMonitors(DoubleTake.Core.Contract.Monitor.MonitorConfiguration[] monitors);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/SetMonitors" +
        "", ReplyAction="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/SetMonitors" +
        "Response")]
    System.Threading.Tasks.Task SetMonitorsAsync(DoubleTake.Core.Contract.Monitor.MonitorConfiguration[] monitors);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/RemoveMonit" +
        "or", ReplyAction="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/RemoveMonit" +
        "orResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Core.Contract.CoreFault), Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/RemoveMonit" +
        "orCoreFaultFault", Name="CoreFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    void RemoveMonitor(DoubleTake.Core.Contract.Monitor.MonitorConfiguration monitor);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/RemoveMonit" +
        "or", ReplyAction="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/RemoveMonit" +
        "orResponse")]
    System.Threading.Tasks.Task RemoveMonitorAsync(DoubleTake.Core.Contract.Monitor.MonitorConfiguration monitor);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/UpdateFileS" +
        "hares", ReplyAction="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/UpdateFileS" +
        "haresResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Core.Contract.CoreFault), Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/UpdateFileS" +
        "haresCoreFaultFault", Name="CoreFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    void UpdateFileShares(DoubleTake.Core.Contract.Monitor.MonitorConfiguration monitor);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/UpdateFileS" +
        "hares", ReplyAction="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/UpdateFileS" +
        "haresResponse")]
    System.Threading.Tasks.Task UpdateFileSharesAsync(DoubleTake.Core.Contract.Monitor.MonitorConfiguration monitor);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/Failover", ReplyAction="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/FailoverRes" +
        "ponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Core.Contract.CoreFault), Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/FailoverCor" +
        "eFaultFault", Name="CoreFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    void Failover(DoubleTake.Core.Contract.Monitor.MonitorConfiguration monitor, DoubleTake.Core.Contract.Monitor.FailoverDataAction action);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/Failover", ReplyAction="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/FailoverRes" +
        "ponse")]
    System.Threading.Tasks.Task FailoverAsync(DoubleTake.Core.Contract.Monitor.MonitorConfiguration monitor, DoubleTake.Core.Contract.Monitor.FailoverDataAction action);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/Failback", ReplyAction="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/FailbackRes" +
        "ponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Core.Contract.CoreFault), Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/FailbackCor" +
        "eFaultFault", Name="CoreFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    void Failback(DoubleTake.Core.Contract.Monitor.MonitorConfiguration monitor, DoubleTake.Core.Contract.Monitor.FailbackOption failbackOption);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/Failback", ReplyAction="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/FailbackRes" +
        "ponse")]
    System.Threading.Tasks.Task FailbackAsync(DoubleTake.Core.Contract.Monitor.MonitorConfiguration monitor, DoubleTake.Core.Contract.Monitor.FailbackOption failbackOption);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/GetLogMessa" +
        "ges", ReplyAction="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/GetLogMessa" +
        "gesResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Core.Contract.CoreFault), Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/GetLogMessa" +
        "gesCoreFaultFault", Name="CoreFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    DoubleTake.Core.Contract.LogMessage[] GetLogMessages();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/GetLogMessa" +
        "ges", ReplyAction="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/GetLogMessa" +
        "gesResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.LogMessage[]> GetLogMessagesAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/GetEmailSet" +
        "tings", ReplyAction="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/GetEmailSet" +
        "tingsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Core.Contract.CoreFault), Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/GetEmailSet" +
        "tingsCoreFaultFault", Name="CoreFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    DoubleTake.Core.Contract.EmailNotificationSettings GetEmailSettings();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/GetEmailSet" +
        "tings", ReplyAction="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/GetEmailSet" +
        "tingsResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.EmailNotificationSettings> GetEmailSettingsAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/ApplyEmailS" +
        "ettings", ReplyAction="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/ApplyEmailS" +
        "ettingsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Core.Contract.CoreFault), Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/ApplyEmailS" +
        "ettingsCoreFaultFault", Name="CoreFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    void ApplyEmailSettings(DoubleTake.Core.Contract.EmailNotificationSettings settings);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/ApplyEmailS" +
        "ettings", ReplyAction="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/ApplyEmailS" +
        "ettingsResponse")]
    System.Threading.Tasks.Task ApplyEmailSettingsAsync(DoubleTake.Core.Contract.EmailNotificationSettings settings);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/TestEmailNo" +
        "tification", ReplyAction="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/TestEmailNo" +
        "tificationResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Core.Contract.CoreFault), Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/TestEmailNo" +
        "tificationCoreFaultFault", Name="CoreFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    void TestEmailNotification(DoubleTake.Core.Contract.EmailNotificationTestParameters parameters);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/TestEmailNo" +
        "tification", ReplyAction="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/TestEmailNo" +
        "tificationResponse")]
    System.Threading.Tasks.Task TestEmailNotificationAsync(DoubleTake.Core.Contract.EmailNotificationTestParameters parameters);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/Restore", ReplyAction="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/RestoreResp" +
        "onse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Core.Contract.CoreFault), Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/RestoreCore" +
        "FaultFault", Name="CoreFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    System.Guid Restore(System.Guid connectionGuid, DoubleTake.Core.Contract.Connection.RestoreParameters parameters, DoubleTake.Core.Contract.Credentials sourceCredentials);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/Restore", ReplyAction="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/RestoreResp" +
        "onse")]
    System.Threading.Tasks.Task<System.Guid> RestoreAsync(System.Guid connectionGuid, DoubleTake.Core.Contract.Connection.RestoreParameters parameters, DoubleTake.Core.Contract.Credentials sourceCredentials);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/TestScript", ReplyAction="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/TestScriptR" +
        "esponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Core.Contract.CoreFault), Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/TestScriptC" +
        "oreFaultFault", Name="CoreFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    int TestScript(string path, string arguments, DoubleTake.Core.Contract.DesktopInteractionMode interactionMode);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/TestScript", ReplyAction="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/TestScriptR" +
        "esponse")]
    System.Threading.Tasks.Task<int> TestScriptAsync(string path, string arguments, DoubleTake.Core.Contract.DesktopInteractionMode interactionMode);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/GetScriptCr" +
        "edentials", ReplyAction="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/GetScriptCr" +
        "edentialsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Core.Contract.CoreFault), Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/GetScriptCr" +
        "edentialsCoreFaultFault", Name="CoreFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    DoubleTake.Core.Contract.Credentials GetScriptCredentials();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/GetScriptCr" +
        "edentials", ReplyAction="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/GetScriptCr" +
        "edentialsResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.Credentials> GetScriptCredentialsAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/SetScriptCr" +
        "edentials", ReplyAction="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/SetScriptCr" +
        "edentialsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Core.Contract.CoreFault), Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/SetScriptCr" +
        "edentialsCoreFaultFault", Name="CoreFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    void SetScriptCredentials(DoubleTake.Core.Contract.Credentials credentials);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/SetScriptCr" +
        "edentials", ReplyAction="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/SetScriptCr" +
        "edentialsResponse")]
    System.Threading.Tasks.Task SetScriptCredentialsAsync(DoubleTake.Core.Contract.Credentials credentials);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/ValidateScr" +
        "iptCredentials", ReplyAction="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/ValidateScr" +
        "iptCredentialsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Core.Contract.CoreFault), Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/ValidateScr" +
        "iptCredentialsCoreFaultFault", Name="CoreFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    bool ValidateScriptCredentials(DoubleTake.Core.Contract.Credentials credentials);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/ValidateScr" +
        "iptCredentials", ReplyAction="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/ValidateScr" +
        "iptCredentialsResponse")]
    System.Threading.Tasks.Task<bool> ValidateScriptCredentialsAsync(DoubleTake.Core.Contract.Credentials credentials);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/ValidateAct" +
        "iveDirectoryCredentials", ReplyAction="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/ValidateAct" +
        "iveDirectoryCredentialsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Core.Contract.CoreFault), Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/ValidateAct" +
        "iveDirectoryCredentialsCoreFaultFault", Name="CoreFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    bool ValidateActiveDirectoryCredentials(DoubleTake.Core.Contract.Credentials credentials);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/ValidateAct" +
        "iveDirectoryCredentials", ReplyAction="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/ValidateAct" +
        "iveDirectoryCredentialsResponse")]
    System.Threading.Tasks.Task<bool> ValidateActiveDirectoryCredentialsAsync(DoubleTake.Core.Contract.Credentials credentials);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/GetPathBloc" +
        "kingEntries", ReplyAction="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/GetPathBloc" +
        "kingEntriesResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Core.Contract.CoreFault), Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/GetPathBloc" +
        "kingEntriesCoreFaultFault", Name="CoreFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    DoubleTake.Core.Contract.PathBlockingEntry[] GetPathBlockingEntries();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/GetPathBloc" +
        "kingEntries", ReplyAction="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/GetPathBloc" +
        "kingEntriesResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.PathBlockingEntry[]> GetPathBlockingEntriesAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/SetPathBloc" +
        "king", ReplyAction="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/SetPathBloc" +
        "kingResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Core.Contract.CoreFault), Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/SetPathBloc" +
        "kingCoreFaultFault", Name="CoreFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    void SetPathBlocking(string sourceAddress, DoubleTake.Core.Contract.PathBlockingMode blockingMode);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/SetPathBloc" +
        "king", ReplyAction="http://www.doubletake.com/Core/Contract/ServiceOperations/CoreService/SetPathBloc" +
        "kingResponse")]
    System.Threading.Tasks.Task SetPathBlockingAsync(string sourceAddress, DoubleTake.Core.Contract.PathBlockingMode blockingMode);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface CoreServiceChannel : CoreService, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class CoreServiceClient : System.ServiceModel.ClientBase<CoreService>, CoreService
{
    
    public CoreServiceClient()
    {
    }
    
    public CoreServiceClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public CoreServiceClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public CoreServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public CoreServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public DoubleTake.Core.Contract.AccessLevel GetAccessLevel()
    {
        return base.Channel.GetAccessLevel();
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.AccessLevel> GetAccessLevelAsync()
    {
        return base.Channel.GetAccessLevelAsync();
    }
    
    public DoubleTake.Core.Contract.ServerInfo GetServerInfo()
    {
        return base.Channel.GetServerInfo();
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.ServerInfo> GetServerInfoAsync()
    {
        return base.Channel.GetServerInfoAsync();
    }
    
    public DoubleTake.Core.Contract.NetworkInterfaceInfo[] GetNetworkInterfaceInfo()
    {
        return base.Channel.GetNetworkInterfaceInfo();
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.NetworkInterfaceInfo[]> GetNetworkInterfaceInfoAsync()
    {
        return base.Channel.GetNetworkInterfaceInfoAsync();
    }
    
    public DoubleTake.Core.Contract.ProductInfo GetProductInfo()
    {
        return base.Channel.GetProductInfo();
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.ProductInfo> GetProductInfoAsync()
    {
        return base.Channel.GetProductInfoAsync();
    }
    
    public DoubleTake.Core.Contract.NamedSetting[] GetProductSettings(string[] names)
    {
        return base.Channel.GetProductSettings(names);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.NamedSetting[]> GetProductSettingsAsync(string[] names)
    {
        return base.Channel.GetProductSettingsAsync(names);
    }
    
    public void ApplyProductSettings(DoubleTake.Core.Contract.NamedSetting[] settings)
    {
        base.Channel.ApplyProductSettings(settings);
    }
    
    public System.Threading.Tasks.Task ApplyProductSettingsAsync(DoubleTake.Core.Contract.NamedSetting[] settings)
    {
        return base.Channel.ApplyProductSettingsAsync(settings);
    }
    
    public void ShutdownService(DoubleTake.Core.Contract.ShutdownOption shutdownOption)
    {
        base.Channel.ShutdownService(shutdownOption);
    }
    
    public System.Threading.Tasks.Task ShutdownServiceAsync(DoubleTake.Core.Contract.ShutdownOption shutdownOption)
    {
        return base.Channel.ShutdownServiceAsync(shutdownOption);
    }
    
    public DoubleTake.Core.Contract.ActivationStatus ValidateActivationParameters(string[] codes, string[] addOnCodes)
    {
        return base.Channel.ValidateActivationParameters(codes, addOnCodes);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.ActivationStatus> ValidateActivationParametersAsync(string[] codes, string[] addOnCodes)
    {
        return base.Channel.ValidateActivationParametersAsync(codes, addOnCodes);
    }
    
    public DoubleTake.Core.Contract.ActivationStatus ApplyActivationParameters(string[] codes, string[] addOnCodes)
    {
        return base.Channel.ApplyActivationParameters(codes, addOnCodes);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.ActivationStatus> ApplyActivationParametersAsync(string[] codes, string[] addOnCodes)
    {
        return base.Channel.ApplyActivationParametersAsync(codes, addOnCodes);
    }
    
    public DoubleTake.Core.Contract.ProtectableItem[] GetProtectableItems(DoubleTake.Core.Contract.ProtectableItem reference)
    {
        return base.Channel.GetProtectableItems(reference);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.ProtectableItem[]> GetProtectableItemsAsync(DoubleTake.Core.Contract.ProtectableItem reference)
    {
        return base.Channel.GetProtectableItemsAsync(reference);
    }
    
    public string[] GetWorkloads()
    {
        return base.Channel.GetWorkloads();
    }
    
    public System.Threading.Tasks.Task<string[]> GetWorkloadsAsync()
    {
        return base.Channel.GetWorkloadsAsync();
    }
    
    public DoubleTake.Core.Contract.Connection.ConnectionInfo[] GetConnections()
    {
        return base.Channel.GetConnections();
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.Connection.ConnectionInfo[]> GetConnectionsAsync()
    {
        return base.Channel.GetConnectionsAsync();
    }
    
    public DoubleTake.Core.Contract.Connection.ConnectionQualificationResult QualifyConnection(DoubleTake.Core.Contract.UnicastIPAddressInfo[] targetAddresses, DoubleTake.Core.Contract.Credentials targetCredentials)
    {
        return base.Channel.QualifyConnection(targetAddresses, targetCredentials);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.Connection.ConnectionQualificationResult> QualifyConnectionAsync(DoubleTake.Core.Contract.UnicastIPAddressInfo[] targetAddresses, DoubleTake.Core.Contract.Credentials targetCredentials)
    {
        return base.Channel.QualifyConnectionAsync(targetAddresses, targetCredentials);
    }
    
    public DoubleTake.Core.Contract.Monitor.MonitorQualificationResult QualifyMonitor(string sourceNameOrIP, DoubleTake.Core.Contract.Credentials sourceCredentials)
    {
        return base.Channel.QualifyMonitor(sourceNameOrIP, sourceCredentials);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.Monitor.MonitorQualificationResult> QualifyMonitorAsync(string sourceNameOrIP, DoubleTake.Core.Contract.Credentials sourceCredentials)
    {
        return base.Channel.QualifyMonitorAsync(sourceNameOrIP, sourceCredentials);
    }
    
    public DoubleTake.Core.Contract.Monitor.MonitorConfiguration[] GetMonitors()
    {
        return base.Channel.GetMonitors();
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.Monitor.MonitorConfiguration[]> GetMonitorsAsync()
    {
        return base.Channel.GetMonitorsAsync();
    }
    
    public void SetMonitors(DoubleTake.Core.Contract.Monitor.MonitorConfiguration[] monitors)
    {
        base.Channel.SetMonitors(monitors);
    }
    
    public System.Threading.Tasks.Task SetMonitorsAsync(DoubleTake.Core.Contract.Monitor.MonitorConfiguration[] monitors)
    {
        return base.Channel.SetMonitorsAsync(monitors);
    }
    
    public void RemoveMonitor(DoubleTake.Core.Contract.Monitor.MonitorConfiguration monitor)
    {
        base.Channel.RemoveMonitor(monitor);
    }
    
    public System.Threading.Tasks.Task RemoveMonitorAsync(DoubleTake.Core.Contract.Monitor.MonitorConfiguration monitor)
    {
        return base.Channel.RemoveMonitorAsync(monitor);
    }
    
    public void UpdateFileShares(DoubleTake.Core.Contract.Monitor.MonitorConfiguration monitor)
    {
        base.Channel.UpdateFileShares(monitor);
    }
    
    public System.Threading.Tasks.Task UpdateFileSharesAsync(DoubleTake.Core.Contract.Monitor.MonitorConfiguration monitor)
    {
        return base.Channel.UpdateFileSharesAsync(monitor);
    }
    
    public void Failover(DoubleTake.Core.Contract.Monitor.MonitorConfiguration monitor, DoubleTake.Core.Contract.Monitor.FailoverDataAction action)
    {
        base.Channel.Failover(monitor, action);
    }
    
    public System.Threading.Tasks.Task FailoverAsync(DoubleTake.Core.Contract.Monitor.MonitorConfiguration monitor, DoubleTake.Core.Contract.Monitor.FailoverDataAction action)
    {
        return base.Channel.FailoverAsync(monitor, action);
    }
    
    public void Failback(DoubleTake.Core.Contract.Monitor.MonitorConfiguration monitor, DoubleTake.Core.Contract.Monitor.FailbackOption failbackOption)
    {
        base.Channel.Failback(monitor, failbackOption);
    }
    
    public System.Threading.Tasks.Task FailbackAsync(DoubleTake.Core.Contract.Monitor.MonitorConfiguration monitor, DoubleTake.Core.Contract.Monitor.FailbackOption failbackOption)
    {
        return base.Channel.FailbackAsync(monitor, failbackOption);
    }
    
    public DoubleTake.Core.Contract.LogMessage[] GetLogMessages()
    {
        return base.Channel.GetLogMessages();
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.LogMessage[]> GetLogMessagesAsync()
    {
        return base.Channel.GetLogMessagesAsync();
    }
    
    public DoubleTake.Core.Contract.EmailNotificationSettings GetEmailSettings()
    {
        return base.Channel.GetEmailSettings();
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.EmailNotificationSettings> GetEmailSettingsAsync()
    {
        return base.Channel.GetEmailSettingsAsync();
    }
    
    public void ApplyEmailSettings(DoubleTake.Core.Contract.EmailNotificationSettings settings)
    {
        base.Channel.ApplyEmailSettings(settings);
    }
    
    public System.Threading.Tasks.Task ApplyEmailSettingsAsync(DoubleTake.Core.Contract.EmailNotificationSettings settings)
    {
        return base.Channel.ApplyEmailSettingsAsync(settings);
    }
    
    public void TestEmailNotification(DoubleTake.Core.Contract.EmailNotificationTestParameters parameters)
    {
        base.Channel.TestEmailNotification(parameters);
    }
    
    public System.Threading.Tasks.Task TestEmailNotificationAsync(DoubleTake.Core.Contract.EmailNotificationTestParameters parameters)
    {
        return base.Channel.TestEmailNotificationAsync(parameters);
    }
    
    public System.Guid Restore(System.Guid connectionGuid, DoubleTake.Core.Contract.Connection.RestoreParameters parameters, DoubleTake.Core.Contract.Credentials sourceCredentials)
    {
        return base.Channel.Restore(connectionGuid, parameters, sourceCredentials);
    }
    
    public System.Threading.Tasks.Task<System.Guid> RestoreAsync(System.Guid connectionGuid, DoubleTake.Core.Contract.Connection.RestoreParameters parameters, DoubleTake.Core.Contract.Credentials sourceCredentials)
    {
        return base.Channel.RestoreAsync(connectionGuid, parameters, sourceCredentials);
    }
    
    public int TestScript(string path, string arguments, DoubleTake.Core.Contract.DesktopInteractionMode interactionMode)
    {
        return base.Channel.TestScript(path, arguments, interactionMode);
    }
    
    public System.Threading.Tasks.Task<int> TestScriptAsync(string path, string arguments, DoubleTake.Core.Contract.DesktopInteractionMode interactionMode)
    {
        return base.Channel.TestScriptAsync(path, arguments, interactionMode);
    }
    
    public DoubleTake.Core.Contract.Credentials GetScriptCredentials()
    {
        return base.Channel.GetScriptCredentials();
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.Credentials> GetScriptCredentialsAsync()
    {
        return base.Channel.GetScriptCredentialsAsync();
    }
    
    public void SetScriptCredentials(DoubleTake.Core.Contract.Credentials credentials)
    {
        base.Channel.SetScriptCredentials(credentials);
    }
    
    public System.Threading.Tasks.Task SetScriptCredentialsAsync(DoubleTake.Core.Contract.Credentials credentials)
    {
        return base.Channel.SetScriptCredentialsAsync(credentials);
    }
    
    public bool ValidateScriptCredentials(DoubleTake.Core.Contract.Credentials credentials)
    {
        return base.Channel.ValidateScriptCredentials(credentials);
    }
    
    public System.Threading.Tasks.Task<bool> ValidateScriptCredentialsAsync(DoubleTake.Core.Contract.Credentials credentials)
    {
        return base.Channel.ValidateScriptCredentialsAsync(credentials);
    }
    
    public bool ValidateActiveDirectoryCredentials(DoubleTake.Core.Contract.Credentials credentials)
    {
        return base.Channel.ValidateActiveDirectoryCredentials(credentials);
    }
    
    public System.Threading.Tasks.Task<bool> ValidateActiveDirectoryCredentialsAsync(DoubleTake.Core.Contract.Credentials credentials)
    {
        return base.Channel.ValidateActiveDirectoryCredentialsAsync(credentials);
    }
    
    public DoubleTake.Core.Contract.PathBlockingEntry[] GetPathBlockingEntries()
    {
        return base.Channel.GetPathBlockingEntries();
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.PathBlockingEntry[]> GetPathBlockingEntriesAsync()
    {
        return base.Channel.GetPathBlockingEntriesAsync();
    }
    
    public void SetPathBlocking(string sourceAddress, DoubleTake.Core.Contract.PathBlockingMode blockingMode)
    {
        base.Channel.SetPathBlocking(sourceAddress, blockingMode);
    }
    
    public System.Threading.Tasks.Task SetPathBlockingAsync(string sourceAddress, DoubleTake.Core.Contract.PathBlockingMode blockingMode)
    {
        return base.Channel.SetPathBlockingAsync(sourceAddress, blockingMode);
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace="http://www.doubletake.com/Core/Contract/ShareMonitorControlOperations", ConfigurationName="IShareMonitorControl")]
public interface IShareMonitorControl
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ShareMonitorControlOperations/IShareMonit" +
        "orControl/StartMonitoringShares", ReplyAction="http://www.doubletake.com/Core/Contract/ShareMonitorControlOperations/IShareMonit" +
        "orControl/StartMonitoringSharesResponse")]
    void StartMonitoringShares(System.Uri target, System.Guid idJob, DoubleTake.Core.Contract.PhysicalRule[] rules);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ShareMonitorControlOperations/IShareMonit" +
        "orControl/StartMonitoringShares", ReplyAction="http://www.doubletake.com/Core/Contract/ShareMonitorControlOperations/IShareMonit" +
        "orControl/StartMonitoringSharesResponse")]
    System.Threading.Tasks.Task StartMonitoringSharesAsync(System.Uri target, System.Guid idJob, DoubleTake.Core.Contract.PhysicalRule[] rules);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ShareMonitorControlOperations/IShareMonit" +
        "orControl/StopMonitoringShares", ReplyAction="http://www.doubletake.com/Core/Contract/ShareMonitorControlOperations/IShareMonit" +
        "orControl/StopMonitoringSharesResponse")]
    void StopMonitoringShares(System.Guid idJob);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ShareMonitorControlOperations/IShareMonit" +
        "orControl/StopMonitoringShares", ReplyAction="http://www.doubletake.com/Core/Contract/ShareMonitorControlOperations/IShareMonit" +
        "orControl/StopMonitoringSharesResponse")]
    System.Threading.Tasks.Task StopMonitoringSharesAsync(System.Guid idJob);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ShareMonitorControlOperations/IShareMonit" +
        "orControl/PublishShares", ReplyAction="http://www.doubletake.com/Core/Contract/ShareMonitorControlOperations/IShareMonit" +
        "orControl/PublishSharesResponse")]
    void PublishShares(System.Uri target, System.Guid idJob, DoubleTake.Core.Contract.PhysicalRule[] rules);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/ShareMonitorControlOperations/IShareMonit" +
        "orControl/PublishShares", ReplyAction="http://www.doubletake.com/Core/Contract/ShareMonitorControlOperations/IShareMonit" +
        "orControl/PublishSharesResponse")]
    System.Threading.Tasks.Task PublishSharesAsync(System.Uri target, System.Guid idJob, DoubleTake.Core.Contract.PhysicalRule[] rules);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IShareMonitorControlChannel : IShareMonitorControl, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class ShareMonitorControlClient : System.ServiceModel.ClientBase<IShareMonitorControl>, IShareMonitorControl
{
    
    public ShareMonitorControlClient()
    {
    }
    
    public ShareMonitorControlClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public ShareMonitorControlClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public ShareMonitorControlClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public ShareMonitorControlClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public void StartMonitoringShares(System.Uri target, System.Guid idJob, DoubleTake.Core.Contract.PhysicalRule[] rules)
    {
        base.Channel.StartMonitoringShares(target, idJob, rules);
    }
    
    public System.Threading.Tasks.Task StartMonitoringSharesAsync(System.Uri target, System.Guid idJob, DoubleTake.Core.Contract.PhysicalRule[] rules)
    {
        return base.Channel.StartMonitoringSharesAsync(target, idJob, rules);
    }
    
    public void StopMonitoringShares(System.Guid idJob)
    {
        base.Channel.StopMonitoringShares(idJob);
    }
    
    public System.Threading.Tasks.Task StopMonitoringSharesAsync(System.Guid idJob)
    {
        return base.Channel.StopMonitoringSharesAsync(idJob);
    }
    
    public void PublishShares(System.Uri target, System.Guid idJob, DoubleTake.Core.Contract.PhysicalRule[] rules)
    {
        base.Channel.PublishShares(target, idJob, rules);
    }
    
    public System.Threading.Tasks.Task PublishSharesAsync(System.Uri target, System.Guid idJob, DoubleTake.Core.Contract.PhysicalRule[] rules)
    {
        return base.Channel.PublishSharesAsync(target, idJob, rules);
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace="http://www.doubletake.com/Core/Contract/StatusOperations", ConfigurationName="CoreStatus")]
public interface CoreStatus
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/StatusOperations/CoreStatus/GetConnection" +
        "Info", ReplyAction="http://www.doubletake.com/Core/Contract/StatusOperations/CoreStatus/GetConnection" +
        "InfoResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Core.Contract.CoreFault), Action="http://www.doubletake.com/Core/Contract/StatusOperations/CoreStatus/GetConnection" +
        "InfoCoreFaultFault", Name="CoreFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    DoubleTake.Core.Contract.Connection.ConnectionInfo[] GetConnectionInfo(System.Nullable<System.Guid> connectionGuid);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/StatusOperations/CoreStatus/GetConnection" +
        "Info", ReplyAction="http://www.doubletake.com/Core/Contract/StatusOperations/CoreStatus/GetConnection" +
        "InfoResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.Connection.ConnectionInfo[]> GetConnectionInfoAsync(System.Nullable<System.Guid> connectionGuid);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/StatusOperations/CoreStatus/GetMonitorInf" +
        "o", ReplyAction="http://www.doubletake.com/Core/Contract/StatusOperations/CoreStatus/GetMonitorInf" +
        "oResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Core.Contract.CoreFault), Action="http://www.doubletake.com/Core/Contract/StatusOperations/CoreStatus/GetMonitorInf" +
        "oCoreFaultFault", Name="CoreFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    DoubleTake.Core.Contract.Monitor.MonitorInfo[] GetMonitorInfo();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/StatusOperations/CoreStatus/GetMonitorInf" +
        "o", ReplyAction="http://www.doubletake.com/Core/Contract/StatusOperations/CoreStatus/GetMonitorInf" +
        "oResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.Monitor.MonitorInfo[]> GetMonitorInfoAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/StatusOperations/CoreStatus/GetJobSourceI" +
        "nfo", ReplyAction="http://www.doubletake.com/Core/Contract/StatusOperations/CoreStatus/GetJobSourceI" +
        "nfoResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Core.Contract.CoreFault), Action="http://www.doubletake.com/Core/Contract/StatusOperations/CoreStatus/GetJobSourceI" +
        "nfoCoreFaultFault", Name="CoreFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    DoubleTake.Core.Contract.Job.JobSourceInfo[] GetJobSourceInfo();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/StatusOperations/CoreStatus/GetJobSourceI" +
        "nfo", ReplyAction="http://www.doubletake.com/Core/Contract/StatusOperations/CoreStatus/GetJobSourceI" +
        "nfoResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.Job.JobSourceInfo[]> GetJobSourceInfoAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/StatusOperations/CoreStatus/GetTargetStat" +
        "es", ReplyAction="http://www.doubletake.com/Core/Contract/StatusOperations/CoreStatus/GetTargetStat" +
        "esResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Core.Contract.CoreFault), Action="http://www.doubletake.com/Core/Contract/StatusOperations/CoreStatus/GetTargetStat" +
        "esCoreFaultFault", Name="CoreFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    DoubleTake.Core.Contract.Connection.TargetStateInfo[] GetTargetStates();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/StatusOperations/CoreStatus/GetTargetStat" +
        "es", ReplyAction="http://www.doubletake.com/Core/Contract/StatusOperations/CoreStatus/GetTargetStat" +
        "esResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.Connection.TargetStateInfo[]> GetTargetStatesAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/StatusOperations/CoreStatus/GetJobInfo", ReplyAction="http://www.doubletake.com/Core/Contract/StatusOperations/CoreStatus/GetJobInfoRes" +
        "ponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Core.Contract.CoreFault), Action="http://www.doubletake.com/Core/Contract/StatusOperations/CoreStatus/GetJobInfoCor" +
        "eFaultFault", Name="CoreFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    DoubleTake.Core.Contract.Job.JobInfo[] GetJobInfo();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/StatusOperations/CoreStatus/GetJobInfo", ReplyAction="http://www.doubletake.com/Core/Contract/StatusOperations/CoreStatus/GetJobInfoRes" +
        "ponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.Job.JobInfo[]> GetJobInfoAsync();
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface CoreStatusChannel : CoreStatus, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class CoreStatusClient : System.ServiceModel.ClientBase<CoreStatus>, CoreStatus
{
    
    public CoreStatusClient()
    {
    }
    
    public CoreStatusClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public CoreStatusClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public CoreStatusClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public CoreStatusClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public DoubleTake.Core.Contract.Connection.ConnectionInfo[] GetConnectionInfo(System.Nullable<System.Guid> connectionGuid)
    {
        return base.Channel.GetConnectionInfo(connectionGuid);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.Connection.ConnectionInfo[]> GetConnectionInfoAsync(System.Nullable<System.Guid> connectionGuid)
    {
        return base.Channel.GetConnectionInfoAsync(connectionGuid);
    }
    
    public DoubleTake.Core.Contract.Monitor.MonitorInfo[] GetMonitorInfo()
    {
        return base.Channel.GetMonitorInfo();
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.Monitor.MonitorInfo[]> GetMonitorInfoAsync()
    {
        return base.Channel.GetMonitorInfoAsync();
    }
    
    public DoubleTake.Core.Contract.Job.JobSourceInfo[] GetJobSourceInfo()
    {
        return base.Channel.GetJobSourceInfo();
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.Job.JobSourceInfo[]> GetJobSourceInfoAsync()
    {
        return base.Channel.GetJobSourceInfoAsync();
    }
    
    public DoubleTake.Core.Contract.Connection.TargetStateInfo[] GetTargetStates()
    {
        return base.Channel.GetTargetStates();
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.Connection.TargetStateInfo[]> GetTargetStatesAsync()
    {
        return base.Channel.GetTargetStatesAsync();
    }
    
    public DoubleTake.Core.Contract.Job.JobInfo[] GetJobInfo()
    {
        return base.Channel.GetJobInfo();
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.Job.JobInfo[]> GetJobInfoAsync()
    {
        return base.Channel.GetJobInfoAsync();
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace="http://www.doubletake.com/Core/Contract/SystemStateOperations", ConfigurationName="CoreSystemState")]
public interface CoreSystemState
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "SystemStateDefinition", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "SystemStateDefinitionResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "SystemStateDefinitionCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    string GetSystemStateDefinition();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "SystemStateDefinition", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "SystemStateDefinitionResponse")]
    System.Threading.Tasks.Task<string> GetSystemStateDefinitionAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "SystemStateDefinitionFromImage", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "SystemStateDefinitionFromImageResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "SystemStateDefinitionFromImageCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    string GetSystemStateDefinitionFromImage(System.Guid imageId, System.Guid snapshotSetId, string imagePath);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "SystemStateDefinitionFromImage", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "SystemStateDefinitionFromImageResponse")]
    System.Threading.Tasks.Task<string> GetSystemStateDefinitionFromImageAsync(System.Guid imageId, System.Guid snapshotSetId, string imagePath);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "SystemStateVolumes", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "SystemStateVolumesResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "SystemStateVolumesCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    string[] GetSystemStateVolumes();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "SystemStateVolumes", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "SystemStateVolumesResponse")]
    System.Threading.Tasks.Task<string[]> GetSystemStateVolumesAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "SystemStateDirectories", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "SystemStateDirectoriesResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "SystemStateDirectoriesCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    string[] GetSystemStateDirectories();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "SystemStateDirectories", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "SystemStateDirectoriesResponse")]
    System.Threading.Tasks.Task<string[]> GetSystemStateDirectoriesAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "ImageProperty", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "ImagePropertyResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "ImagePropertyCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    string GetImageProperty(System.Guid imageId, string propertyName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "ImageProperty", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "ImagePropertyResponse")]
    System.Threading.Tasks.Task<string> GetImagePropertyAsync(System.Guid imageId, string propertyName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "ClearMonitor", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "ClearMonitorResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "ClearMonitorCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    bool GetClearMonitor();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "ClearMonitor", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "ClearMonitorResponse")]
    System.Threading.Tasks.Task<bool> GetClearMonitorAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Set" +
        "ClearMonitor", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Set" +
        "ClearMonitorResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Set" +
        "ClearMonitorCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void SetClearMonitor(bool clearMonitor);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Set" +
        "ClearMonitor", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Set" +
        "ClearMonitorResponse")]
    System.Threading.Tasks.Task SetClearMonitorAsync(bool clearMonitor);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Bui" +
        "ldSystemStateConfiguration", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Bui" +
        "ldSystemStateConfigurationResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Bui" +
        "ldSystemStateConfigurationCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void BuildSystemStateConfiguration(string sourceSystemStateDef, string targetSystemStateDef);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Bui" +
        "ldSystemStateConfiguration", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Bui" +
        "ldSystemStateConfigurationResponse")]
    System.Threading.Tasks.Task BuildSystemStateConfigurationAsync(string sourceSystemStateDef, string targetSystemStateDef);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Ver" +
        "ifySystemStateConfiguration", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Ver" +
        "ifySystemStateConfigurationResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Ver" +
        "ifySystemStateConfigurationCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Core.Contract.SystemStateVerificationResult VerifySystemStateConfiguration(DoubleTake.Core.Contract.FullServerJobType jobType);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Ver" +
        "ifySystemStateConfiguration", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Ver" +
        "ifySystemStateConfigurationResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.SystemStateVerificationResult> VerifySystemStateConfigurationAsync(DoubleTake.Core.Contract.FullServerJobType jobType);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "SystemStateRules", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "SystemStateRulesResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "SystemStateRulesCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Core.Contract.PhysicalRule[] GetSystemStateRules();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "SystemStateRules", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "SystemStateRulesResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.PhysicalRule[]> GetSystemStateRulesAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Cut" +
        "over", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Cut" +
        "overResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Cut" +
        "overCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Core.Contract.SystemStateCutoverStatus Cutover(DoubleTake.Core.Contract1.RebootAction actionAfterCutover);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Cut" +
        "over", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Cut" +
        "overResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.SystemStateCutoverStatus> CutoverAsync(DoubleTake.Core.Contract1.RebootAction actionAfterCutover);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "SystemStateStatus", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "SystemStateStatusResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "SystemStateStatusCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Core.Contract.SystemStateCutoverStatus GetSystemStateStatus();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "SystemStateStatus", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "SystemStateStatusResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.SystemStateCutoverStatus> GetSystemStateStatusAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "SystemStateRulesFromSource", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "SystemStateRulesFromSourceResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "SystemStateRulesFromSourceCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Core.Contract.PhysicalRule[] GetSystemStateRulesFromSource();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "SystemStateRulesFromSource", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "SystemStateRulesFromSourceResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.PhysicalRule[]> GetSystemStateRulesFromSourceAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "SystemStateRulesFromTarget", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "SystemStateRulesFromTargetResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "SystemStateRulesFromTargetCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Core.Contract.PhysicalRule[] GetSystemStateRulesFromTarget();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "SystemStateRulesFromTarget", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "SystemStateRulesFromTargetResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.PhysicalRule[]> GetSystemStateRulesFromTargetAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "SystemStateRulesFromImage", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "SystemStateRulesFromImageResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "SystemStateRulesFromImageCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Core.Contract.PhysicalRule[] GetSystemStateRulesFromImage(System.Guid imageId, System.Guid snapshotSetId, string imagePath);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "SystemStateRulesFromImage", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "SystemStateRulesFromImageResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.PhysicalRule[]> GetSystemStateRulesFromImageAsync(System.Guid imageId, System.Guid snapshotSetId, string imagePath);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "KeepTargetActivationCode", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "KeepTargetActivationCodeResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "KeepTargetActivationCodeCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    bool GetKeepTargetActivationCode();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "KeepTargetActivationCode", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "KeepTargetActivationCodeResponse")]
    System.Threading.Tasks.Task<bool> GetKeepTargetActivationCodeAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Set" +
        "KeepTargetActivationCode", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Set" +
        "KeepTargetActivationCodeResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Set" +
        "KeepTargetActivationCodeCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void SetKeepTargetActivationCode(bool keepTargetActivationCode);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Set" +
        "KeepTargetActivationCode", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Set" +
        "KeepTargetActivationCodeResponse")]
    System.Threading.Tasks.Task SetKeepTargetActivationCodeAsync(bool keepTargetActivationCode);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "DefaultDnsConfiguration", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "DefaultDnsConfigurationResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "DefaultDnsConfigurationCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Jobs.Contract.DNSOptions GetDefaultDnsConfiguration();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "DefaultDnsConfiguration", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "DefaultDnsConfigurationResponse")]
    System.Threading.Tasks.Task<DoubleTake.Jobs.Contract.DNSOptions> GetDefaultDnsConfigurationAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/App" +
        "lyDnsOptions", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/App" +
        "lyDnsOptionsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/App" +
        "lyDnsOptionsCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void ApplyDnsOptions(DoubleTake.Jobs.Contract.DNSOptions dnsConfigOptions, DoubleTake.Jobs.Contract.JobCredentials jobCredentials, DoubleTake.Core.Contract1.DnsLockInfo lockInfo);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/App" +
        "lyDnsOptions", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/App" +
        "lyDnsOptionsResponse")]
    System.Threading.Tasks.Task ApplyDnsOptionsAsync(DoubleTake.Jobs.Contract.DNSOptions dnsConfigOptions, DoubleTake.Jobs.Contract.JobCredentials jobCredentials, DoubleTake.Core.Contract1.DnsLockInfo lockInfo);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Tes" +
        "tDnsOptions", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Tes" +
        "tDnsOptionsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Tes" +
        "tDnsOptionsCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Core.Contract.Options.TestDnsResult[] TestDnsOptions(DoubleTake.Jobs.Contract.DNSOptions dnsConfigOptions, DoubleTake.Jobs.Contract.JobCredentials jobCredentials);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Tes" +
        "tDnsOptions", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Tes" +
        "tDnsOptionsResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.Options.TestDnsResult[]> TestDnsOptionsAsync(DoubleTake.Jobs.Contract.DNSOptions dnsConfigOptions, DoubleTake.Jobs.Contract.JobCredentials jobCredentials);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "ServicesToStop", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "ServicesToStopResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "ServicesToStopCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Core.Contract.Options.TargetServicesToStop[] GetServicesToStop();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "ServicesToStop", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "ServicesToStopResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.Options.TargetServicesToStop[]> GetServicesToStopAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Set" +
        "ServicesToStop", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Set" +
        "ServicesToStopResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Set" +
        "ServicesToStopCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void SetServicesToStop(DoubleTake.Core.Contract.Options.TargetServicesToStop[] targetServices);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Set" +
        "ServicesToStop", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Set" +
        "ServicesToStopResponse")]
    System.Threading.Tasks.Task SetServicesToStopAsync(DoubleTake.Core.Contract.Options.TargetServicesToStop[] targetServices);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Loc" +
        "kDnsRecords", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Loc" +
        "kDnsRecordsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Loc" +
        "kDnsRecordsCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void LockDnsRecords(DoubleTake.Jobs.Contract.DNSOptions dnsConfigOptions, DoubleTake.Jobs.Contract.JobCredentials jobCredentials, DoubleTake.Core.Contract1.DnsLockInfo lockInfo, bool useSourceSide);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Loc" +
        "kDnsRecords", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Loc" +
        "kDnsRecordsResponse")]
    System.Threading.Tasks.Task LockDnsRecordsAsync(DoubleTake.Jobs.Contract.DNSOptions dnsConfigOptions, DoubleTake.Jobs.Contract.JobCredentials jobCredentials, DoubleTake.Core.Contract1.DnsLockInfo lockInfo, bool useSourceSide);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Shu" +
        "tdownNonCriticalTargetServices", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Shu" +
        "tdownNonCriticalTargetServicesResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Shu" +
        "tdownNonCriticalTargetServicesCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void ShutdownNonCriticalTargetServices();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Shu" +
        "tdownNonCriticalTargetServices", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Shu" +
        "tdownNonCriticalTargetServicesResponse")]
    System.Threading.Tasks.Task ShutdownNonCriticalTargetServicesAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "NicMappings", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "NicMappingsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "NicMappingsCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Core.Contract.Options.FullServerNicMappings[] GetNicMappings();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "NicMappings", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "NicMappingsResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.Options.FullServerNicMappings[]> GetNicMappingsAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Set" +
        "NicMappings", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Set" +
        "NicMappingsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Set" +
        "NicMappingsCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void SetNicMappings(DoubleTake.Core.Contract.Options.FullServerNicMappings[] nicMappings);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Set" +
        "NicMappings", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Set" +
        "NicMappingsResponse")]
    System.Threading.Tasks.Task SetNicMappingsAsync(DoubleTake.Core.Contract.Options.FullServerNicMappings[] nicMappings);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "StagingFolder", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "StagingFolderResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "StagingFolderCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    string GetStagingFolder();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "StagingFolder", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "StagingFolderResponse")]
    System.Threading.Tasks.Task<string> GetStagingFolderAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Set" +
        "StagingFolder", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Set" +
        "StagingFolderResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Set" +
        "StagingFolderCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void SetStagingFolder(string stagingFolder);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Set" +
        "StagingFolder", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Set" +
        "StagingFolderResponse")]
    System.Threading.Tasks.Task SetStagingFolderAsync(string stagingFolder);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "IsWanFailover", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "IsWanFailoverResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "IsWanFailoverCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    bool GetIsWanFailover();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "IsWanFailover", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "IsWanFailoverResponse")]
    System.Threading.Tasks.Task<bool> GetIsWanFailoverAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Set" +
        "IsWanFailover", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Set" +
        "IsWanFailoverResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Set" +
        "IsWanFailoverCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void SetIsWanFailover(bool isWanFailover);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Set" +
        "IsWanFailover", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Set" +
        "IsWanFailoverResponse")]
    System.Threading.Tasks.Task SetIsWanFailoverAsync(bool isWanFailover);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "ShouldApplyDiskSignatures", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "ShouldApplyDiskSignaturesResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "ShouldApplyDiskSignaturesCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    bool GetShouldApplyDiskSignatures();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "ShouldApplyDiskSignatures", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "ShouldApplyDiskSignaturesResponse")]
    System.Threading.Tasks.Task<bool> GetShouldApplyDiskSignaturesAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Set" +
        "ShouldApplyDiskSignatures", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Set" +
        "ShouldApplyDiskSignaturesResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Set" +
        "ShouldApplyDiskSignaturesCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void SetShouldApplyDiskSignatures(bool applySignatures);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Set" +
        "ShouldApplyDiskSignatures", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Set" +
        "ShouldApplyDiskSignaturesResponse")]
    System.Threading.Tasks.Task SetShouldApplyDiskSignaturesAsync(bool applySignatures);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "SystemStateOptions", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "SystemStateOptionsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "SystemStateOptionsCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Jobs.Contract.SystemStateOptions GetSystemStateOptions();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "SystemStateOptions", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "SystemStateOptionsResponse")]
    System.Threading.Tasks.Task<DoubleTake.Jobs.Contract.SystemStateOptions> GetSystemStateOptionsAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Set" +
        "SystemStateOptions", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Set" +
        "SystemStateOptionsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Set" +
        "SystemStateOptionsCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void SetSystemStateOptions(DoubleTake.Jobs.Contract.SystemStateOptions jobParameters);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Set" +
        "SystemStateOptions", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Set" +
        "SystemStateOptionsResponse")]
    System.Threading.Tasks.Task SetSystemStateOptionsAsync(DoubleTake.Jobs.Contract.SystemStateOptions jobParameters);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Shu" +
        "tdownThisServer", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Shu" +
        "tdownThisServerResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Shu" +
        "tdownThisServerCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void ShutdownThisServer();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Shu" +
        "tdownThisServer", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Shu" +
        "tdownThisServerResponse")]
    System.Threading.Tasks.Task ShutdownThisServerAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Reb" +
        "ootThisServer", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Reb" +
        "ootThisServerResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Reb" +
        "ootThisServerCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void RebootThisServer();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Reb" +
        "ootThisServer", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Reb" +
        "ootThisServerResponse")]
    System.Threading.Tasks.Task RebootThisServerAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "TransformPaths", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "TransformPathsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "TransformPathsCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    string[] GetTransformPaths();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "TransformPaths", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "TransformPathsResponse")]
    System.Threading.Tasks.Task<string[]> GetTransformPathsAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Set" +
        "SourceReservedAddress", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Set" +
        "SourceReservedAddressResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Set" +
        "SourceReservedAddressCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void SetSourceReservedAddress(System.Net.IPAddress reservedAddress);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Set" +
        "SourceReservedAddress", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Set" +
        "SourceReservedAddressResponse")]
    System.Threading.Tasks.Task SetSourceReservedAddressAsync(System.Net.IPAddress reservedAddress);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Set" +
        "TargetReservedAddress", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Set" +
        "TargetReservedAddressResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Set" +
        "TargetReservedAddressCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void SetTargetReservedAddress(System.Net.IPAddress reservedAddress);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Set" +
        "TargetReservedAddress", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Set" +
        "TargetReservedAddressResponse")]
    System.Threading.Tasks.Task SetTargetReservedAddressAsync(System.Net.IPAddress reservedAddress);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "SourceReservedAddress", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "SourceReservedAddressResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "SourceReservedAddressCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    System.Net.IPAddress GetSourceReservedAddress();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "SourceReservedAddress", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "SourceReservedAddressResponse")]
    System.Threading.Tasks.Task<System.Net.IPAddress> GetSourceReservedAddressAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "TargetReservedAddress", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "TargetReservedAddressResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "TargetReservedAddressCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    System.Net.IPAddress GetTargetReservedAddress();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "TargetReservedAddress", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "TargetReservedAddressResponse")]
    System.Threading.Tasks.Task<System.Net.IPAddress> GetTargetReservedAddressAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Upd" +
        "ateSourceConfiguration", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Upd" +
        "ateSourceConfigurationResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Upd" +
        "ateSourceConfigurationCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void UpdateSourceConfiguration(string sourceSystemStateDefinition);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Upd" +
        "ateSourceConfiguration", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Upd" +
        "ateSourceConfigurationResponse")]
    System.Threading.Tasks.Task UpdateSourceConfigurationAsync(string sourceSystemStateDefinition);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Upd" +
        "ateTargetConfiguration", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Upd" +
        "ateTargetConfigurationResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Upd" +
        "ateTargetConfigurationCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void UpdateTargetConfiguration(string targetSystemStateDefinition);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Upd" +
        "ateTargetConfiguration", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Upd" +
        "ateTargetConfigurationResponse")]
    System.Threading.Tasks.Task UpdateTargetConfigurationAsync(string targetSystemStateDefinition);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Set" +
        "AlternateVolumeStaging", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Set" +
        "AlternateVolumeStagingResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Set" +
        "AlternateVolumeStagingCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void SetAlternateVolumeStaging(bool alternateStaging);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Set" +
        "AlternateVolumeStaging", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Set" +
        "AlternateVolumeStagingResponse")]
    System.Threading.Tasks.Task SetAlternateVolumeStagingAsync(bool alternateStaging);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Set" +
        "AlternateVolumeMapping", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Set" +
        "AlternateVolumeMappingResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Set" +
        "AlternateVolumeMappingCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void SetAlternateVolumeMapping(string alternateVolumeMapping);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Set" +
        "AlternateVolumeMapping", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Set" +
        "AlternateVolumeMappingResponse")]
    System.Threading.Tasks.Task SetAlternateVolumeMappingAsync(string alternateVolumeMapping);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "AlternateVolumeStaging", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "AlternateVolumeStagingResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "AlternateVolumeStagingCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    bool GetAlternateVolumeStaging();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "AlternateVolumeStaging", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "AlternateVolumeStagingResponse")]
    System.Threading.Tasks.Task<bool> GetAlternateVolumeStagingAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "AlternateVolumeMapping", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "AlternateVolumeMappingResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "AlternateVolumeMappingCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    string GetAlternateVolumeMapping();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "AlternateVolumeMapping", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/Get" +
        "AlternateVolumeMappingResponse")]
    System.Threading.Tasks.Task<string> GetAlternateVolumeMappingAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/set" +
        "UpPreConnection", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/set" +
        "UpPreConnectionResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/set" +
        "UpPreConnectionCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    bool setUpPreConnection();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/set" +
        "UpPreConnection", ReplyAction="http://www.doubletake.com/Core/Contract/SystemStateOperations/CoreSystemState/set" +
        "UpPreConnectionResponse")]
    System.Threading.Tasks.Task<bool> setUpPreConnectionAsync();
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface CoreSystemStateChannel : CoreSystemState, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class CoreSystemStateClient : System.ServiceModel.ClientBase<CoreSystemState>, CoreSystemState
{
    
    public CoreSystemStateClient()
    {
    }
    
    public CoreSystemStateClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public CoreSystemStateClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public CoreSystemStateClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public CoreSystemStateClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public string GetSystemStateDefinition()
    {
        return base.Channel.GetSystemStateDefinition();
    }
    
    public System.Threading.Tasks.Task<string> GetSystemStateDefinitionAsync()
    {
        return base.Channel.GetSystemStateDefinitionAsync();
    }
    
    public string GetSystemStateDefinitionFromImage(System.Guid imageId, System.Guid snapshotSetId, string imagePath)
    {
        return base.Channel.GetSystemStateDefinitionFromImage(imageId, snapshotSetId, imagePath);
    }
    
    public System.Threading.Tasks.Task<string> GetSystemStateDefinitionFromImageAsync(System.Guid imageId, System.Guid snapshotSetId, string imagePath)
    {
        return base.Channel.GetSystemStateDefinitionFromImageAsync(imageId, snapshotSetId, imagePath);
    }
    
    public string[] GetSystemStateVolumes()
    {
        return base.Channel.GetSystemStateVolumes();
    }
    
    public System.Threading.Tasks.Task<string[]> GetSystemStateVolumesAsync()
    {
        return base.Channel.GetSystemStateVolumesAsync();
    }
    
    public string[] GetSystemStateDirectories()
    {
        return base.Channel.GetSystemStateDirectories();
    }
    
    public System.Threading.Tasks.Task<string[]> GetSystemStateDirectoriesAsync()
    {
        return base.Channel.GetSystemStateDirectoriesAsync();
    }
    
    public string GetImageProperty(System.Guid imageId, string propertyName)
    {
        return base.Channel.GetImageProperty(imageId, propertyName);
    }
    
    public System.Threading.Tasks.Task<string> GetImagePropertyAsync(System.Guid imageId, string propertyName)
    {
        return base.Channel.GetImagePropertyAsync(imageId, propertyName);
    }
    
    public bool GetClearMonitor()
    {
        return base.Channel.GetClearMonitor();
    }
    
    public System.Threading.Tasks.Task<bool> GetClearMonitorAsync()
    {
        return base.Channel.GetClearMonitorAsync();
    }
    
    public void SetClearMonitor(bool clearMonitor)
    {
        base.Channel.SetClearMonitor(clearMonitor);
    }
    
    public System.Threading.Tasks.Task SetClearMonitorAsync(bool clearMonitor)
    {
        return base.Channel.SetClearMonitorAsync(clearMonitor);
    }
    
    public void BuildSystemStateConfiguration(string sourceSystemStateDef, string targetSystemStateDef)
    {
        base.Channel.BuildSystemStateConfiguration(sourceSystemStateDef, targetSystemStateDef);
    }
    
    public System.Threading.Tasks.Task BuildSystemStateConfigurationAsync(string sourceSystemStateDef, string targetSystemStateDef)
    {
        return base.Channel.BuildSystemStateConfigurationAsync(sourceSystemStateDef, targetSystemStateDef);
    }
    
    public DoubleTake.Core.Contract.SystemStateVerificationResult VerifySystemStateConfiguration(DoubleTake.Core.Contract.FullServerJobType jobType)
    {
        return base.Channel.VerifySystemStateConfiguration(jobType);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.SystemStateVerificationResult> VerifySystemStateConfigurationAsync(DoubleTake.Core.Contract.FullServerJobType jobType)
    {
        return base.Channel.VerifySystemStateConfigurationAsync(jobType);
    }
    
    public DoubleTake.Core.Contract.PhysicalRule[] GetSystemStateRules()
    {
        return base.Channel.GetSystemStateRules();
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.PhysicalRule[]> GetSystemStateRulesAsync()
    {
        return base.Channel.GetSystemStateRulesAsync();
    }
    
    public DoubleTake.Core.Contract.SystemStateCutoverStatus Cutover(DoubleTake.Core.Contract1.RebootAction actionAfterCutover)
    {
        return base.Channel.Cutover(actionAfterCutover);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.SystemStateCutoverStatus> CutoverAsync(DoubleTake.Core.Contract1.RebootAction actionAfterCutover)
    {
        return base.Channel.CutoverAsync(actionAfterCutover);
    }
    
    public DoubleTake.Core.Contract.SystemStateCutoverStatus GetSystemStateStatus()
    {
        return base.Channel.GetSystemStateStatus();
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.SystemStateCutoverStatus> GetSystemStateStatusAsync()
    {
        return base.Channel.GetSystemStateStatusAsync();
    }
    
    public DoubleTake.Core.Contract.PhysicalRule[] GetSystemStateRulesFromSource()
    {
        return base.Channel.GetSystemStateRulesFromSource();
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.PhysicalRule[]> GetSystemStateRulesFromSourceAsync()
    {
        return base.Channel.GetSystemStateRulesFromSourceAsync();
    }
    
    public DoubleTake.Core.Contract.PhysicalRule[] GetSystemStateRulesFromTarget()
    {
        return base.Channel.GetSystemStateRulesFromTarget();
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.PhysicalRule[]> GetSystemStateRulesFromTargetAsync()
    {
        return base.Channel.GetSystemStateRulesFromTargetAsync();
    }
    
    public DoubleTake.Core.Contract.PhysicalRule[] GetSystemStateRulesFromImage(System.Guid imageId, System.Guid snapshotSetId, string imagePath)
    {
        return base.Channel.GetSystemStateRulesFromImage(imageId, snapshotSetId, imagePath);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.PhysicalRule[]> GetSystemStateRulesFromImageAsync(System.Guid imageId, System.Guid snapshotSetId, string imagePath)
    {
        return base.Channel.GetSystemStateRulesFromImageAsync(imageId, snapshotSetId, imagePath);
    }
    
    public bool GetKeepTargetActivationCode()
    {
        return base.Channel.GetKeepTargetActivationCode();
    }
    
    public System.Threading.Tasks.Task<bool> GetKeepTargetActivationCodeAsync()
    {
        return base.Channel.GetKeepTargetActivationCodeAsync();
    }
    
    public void SetKeepTargetActivationCode(bool keepTargetActivationCode)
    {
        base.Channel.SetKeepTargetActivationCode(keepTargetActivationCode);
    }
    
    public System.Threading.Tasks.Task SetKeepTargetActivationCodeAsync(bool keepTargetActivationCode)
    {
        return base.Channel.SetKeepTargetActivationCodeAsync(keepTargetActivationCode);
    }
    
    public DoubleTake.Jobs.Contract.DNSOptions GetDefaultDnsConfiguration()
    {
        return base.Channel.GetDefaultDnsConfiguration();
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Jobs.Contract.DNSOptions> GetDefaultDnsConfigurationAsync()
    {
        return base.Channel.GetDefaultDnsConfigurationAsync();
    }
    
    public void ApplyDnsOptions(DoubleTake.Jobs.Contract.DNSOptions dnsConfigOptions, DoubleTake.Jobs.Contract.JobCredentials jobCredentials, DoubleTake.Core.Contract1.DnsLockInfo lockInfo)
    {
        base.Channel.ApplyDnsOptions(dnsConfigOptions, jobCredentials, lockInfo);
    }
    
    public System.Threading.Tasks.Task ApplyDnsOptionsAsync(DoubleTake.Jobs.Contract.DNSOptions dnsConfigOptions, DoubleTake.Jobs.Contract.JobCredentials jobCredentials, DoubleTake.Core.Contract1.DnsLockInfo lockInfo)
    {
        return base.Channel.ApplyDnsOptionsAsync(dnsConfigOptions, jobCredentials, lockInfo);
    }
    
    public DoubleTake.Core.Contract.Options.TestDnsResult[] TestDnsOptions(DoubleTake.Jobs.Contract.DNSOptions dnsConfigOptions, DoubleTake.Jobs.Contract.JobCredentials jobCredentials)
    {
        return base.Channel.TestDnsOptions(dnsConfigOptions, jobCredentials);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.Options.TestDnsResult[]> TestDnsOptionsAsync(DoubleTake.Jobs.Contract.DNSOptions dnsConfigOptions, DoubleTake.Jobs.Contract.JobCredentials jobCredentials)
    {
        return base.Channel.TestDnsOptionsAsync(dnsConfigOptions, jobCredentials);
    }
    
    public DoubleTake.Core.Contract.Options.TargetServicesToStop[] GetServicesToStop()
    {
        return base.Channel.GetServicesToStop();
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.Options.TargetServicesToStop[]> GetServicesToStopAsync()
    {
        return base.Channel.GetServicesToStopAsync();
    }
    
    public void SetServicesToStop(DoubleTake.Core.Contract.Options.TargetServicesToStop[] targetServices)
    {
        base.Channel.SetServicesToStop(targetServices);
    }
    
    public System.Threading.Tasks.Task SetServicesToStopAsync(DoubleTake.Core.Contract.Options.TargetServicesToStop[] targetServices)
    {
        return base.Channel.SetServicesToStopAsync(targetServices);
    }
    
    public void LockDnsRecords(DoubleTake.Jobs.Contract.DNSOptions dnsConfigOptions, DoubleTake.Jobs.Contract.JobCredentials jobCredentials, DoubleTake.Core.Contract1.DnsLockInfo lockInfo, bool useSourceSide)
    {
        base.Channel.LockDnsRecords(dnsConfigOptions, jobCredentials, lockInfo, useSourceSide);
    }
    
    public System.Threading.Tasks.Task LockDnsRecordsAsync(DoubleTake.Jobs.Contract.DNSOptions dnsConfigOptions, DoubleTake.Jobs.Contract.JobCredentials jobCredentials, DoubleTake.Core.Contract1.DnsLockInfo lockInfo, bool useSourceSide)
    {
        return base.Channel.LockDnsRecordsAsync(dnsConfigOptions, jobCredentials, lockInfo, useSourceSide);
    }
    
    public void ShutdownNonCriticalTargetServices()
    {
        base.Channel.ShutdownNonCriticalTargetServices();
    }
    
    public System.Threading.Tasks.Task ShutdownNonCriticalTargetServicesAsync()
    {
        return base.Channel.ShutdownNonCriticalTargetServicesAsync();
    }
    
    public DoubleTake.Core.Contract.Options.FullServerNicMappings[] GetNicMappings()
    {
        return base.Channel.GetNicMappings();
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.Options.FullServerNicMappings[]> GetNicMappingsAsync()
    {
        return base.Channel.GetNicMappingsAsync();
    }
    
    public void SetNicMappings(DoubleTake.Core.Contract.Options.FullServerNicMappings[] nicMappings)
    {
        base.Channel.SetNicMappings(nicMappings);
    }
    
    public System.Threading.Tasks.Task SetNicMappingsAsync(DoubleTake.Core.Contract.Options.FullServerNicMappings[] nicMappings)
    {
        return base.Channel.SetNicMappingsAsync(nicMappings);
    }
    
    public string GetStagingFolder()
    {
        return base.Channel.GetStagingFolder();
    }
    
    public System.Threading.Tasks.Task<string> GetStagingFolderAsync()
    {
        return base.Channel.GetStagingFolderAsync();
    }
    
    public void SetStagingFolder(string stagingFolder)
    {
        base.Channel.SetStagingFolder(stagingFolder);
    }
    
    public System.Threading.Tasks.Task SetStagingFolderAsync(string stagingFolder)
    {
        return base.Channel.SetStagingFolderAsync(stagingFolder);
    }
    
    public bool GetIsWanFailover()
    {
        return base.Channel.GetIsWanFailover();
    }
    
    public System.Threading.Tasks.Task<bool> GetIsWanFailoverAsync()
    {
        return base.Channel.GetIsWanFailoverAsync();
    }
    
    public void SetIsWanFailover(bool isWanFailover)
    {
        base.Channel.SetIsWanFailover(isWanFailover);
    }
    
    public System.Threading.Tasks.Task SetIsWanFailoverAsync(bool isWanFailover)
    {
        return base.Channel.SetIsWanFailoverAsync(isWanFailover);
    }
    
    public bool GetShouldApplyDiskSignatures()
    {
        return base.Channel.GetShouldApplyDiskSignatures();
    }
    
    public System.Threading.Tasks.Task<bool> GetShouldApplyDiskSignaturesAsync()
    {
        return base.Channel.GetShouldApplyDiskSignaturesAsync();
    }
    
    public void SetShouldApplyDiskSignatures(bool applySignatures)
    {
        base.Channel.SetShouldApplyDiskSignatures(applySignatures);
    }
    
    public System.Threading.Tasks.Task SetShouldApplyDiskSignaturesAsync(bool applySignatures)
    {
        return base.Channel.SetShouldApplyDiskSignaturesAsync(applySignatures);
    }
    
    public DoubleTake.Jobs.Contract.SystemStateOptions GetSystemStateOptions()
    {
        return base.Channel.GetSystemStateOptions();
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Jobs.Contract.SystemStateOptions> GetSystemStateOptionsAsync()
    {
        return base.Channel.GetSystemStateOptionsAsync();
    }
    
    public void SetSystemStateOptions(DoubleTake.Jobs.Contract.SystemStateOptions jobParameters)
    {
        base.Channel.SetSystemStateOptions(jobParameters);
    }
    
    public System.Threading.Tasks.Task SetSystemStateOptionsAsync(DoubleTake.Jobs.Contract.SystemStateOptions jobParameters)
    {
        return base.Channel.SetSystemStateOptionsAsync(jobParameters);
    }
    
    public void ShutdownThisServer()
    {
        base.Channel.ShutdownThisServer();
    }
    
    public System.Threading.Tasks.Task ShutdownThisServerAsync()
    {
        return base.Channel.ShutdownThisServerAsync();
    }
    
    public void RebootThisServer()
    {
        base.Channel.RebootThisServer();
    }
    
    public System.Threading.Tasks.Task RebootThisServerAsync()
    {
        return base.Channel.RebootThisServerAsync();
    }
    
    public string[] GetTransformPaths()
    {
        return base.Channel.GetTransformPaths();
    }
    
    public System.Threading.Tasks.Task<string[]> GetTransformPathsAsync()
    {
        return base.Channel.GetTransformPathsAsync();
    }
    
    public void SetSourceReservedAddress(System.Net.IPAddress reservedAddress)
    {
        base.Channel.SetSourceReservedAddress(reservedAddress);
    }
    
    public System.Threading.Tasks.Task SetSourceReservedAddressAsync(System.Net.IPAddress reservedAddress)
    {
        return base.Channel.SetSourceReservedAddressAsync(reservedAddress);
    }
    
    public void SetTargetReservedAddress(System.Net.IPAddress reservedAddress)
    {
        base.Channel.SetTargetReservedAddress(reservedAddress);
    }
    
    public System.Threading.Tasks.Task SetTargetReservedAddressAsync(System.Net.IPAddress reservedAddress)
    {
        return base.Channel.SetTargetReservedAddressAsync(reservedAddress);
    }
    
    public System.Net.IPAddress GetSourceReservedAddress()
    {
        return base.Channel.GetSourceReservedAddress();
    }
    
    public System.Threading.Tasks.Task<System.Net.IPAddress> GetSourceReservedAddressAsync()
    {
        return base.Channel.GetSourceReservedAddressAsync();
    }
    
    public System.Net.IPAddress GetTargetReservedAddress()
    {
        return base.Channel.GetTargetReservedAddress();
    }
    
    public System.Threading.Tasks.Task<System.Net.IPAddress> GetTargetReservedAddressAsync()
    {
        return base.Channel.GetTargetReservedAddressAsync();
    }
    
    public void UpdateSourceConfiguration(string sourceSystemStateDefinition)
    {
        base.Channel.UpdateSourceConfiguration(sourceSystemStateDefinition);
    }
    
    public System.Threading.Tasks.Task UpdateSourceConfigurationAsync(string sourceSystemStateDefinition)
    {
        return base.Channel.UpdateSourceConfigurationAsync(sourceSystemStateDefinition);
    }
    
    public void UpdateTargetConfiguration(string targetSystemStateDefinition)
    {
        base.Channel.UpdateTargetConfiguration(targetSystemStateDefinition);
    }
    
    public System.Threading.Tasks.Task UpdateTargetConfigurationAsync(string targetSystemStateDefinition)
    {
        return base.Channel.UpdateTargetConfigurationAsync(targetSystemStateDefinition);
    }
    
    public void SetAlternateVolumeStaging(bool alternateStaging)
    {
        base.Channel.SetAlternateVolumeStaging(alternateStaging);
    }
    
    public System.Threading.Tasks.Task SetAlternateVolumeStagingAsync(bool alternateStaging)
    {
        return base.Channel.SetAlternateVolumeStagingAsync(alternateStaging);
    }
    
    public void SetAlternateVolumeMapping(string alternateVolumeMapping)
    {
        base.Channel.SetAlternateVolumeMapping(alternateVolumeMapping);
    }
    
    public System.Threading.Tasks.Task SetAlternateVolumeMappingAsync(string alternateVolumeMapping)
    {
        return base.Channel.SetAlternateVolumeMappingAsync(alternateVolumeMapping);
    }
    
    public bool GetAlternateVolumeStaging()
    {
        return base.Channel.GetAlternateVolumeStaging();
    }
    
    public System.Threading.Tasks.Task<bool> GetAlternateVolumeStagingAsync()
    {
        return base.Channel.GetAlternateVolumeStagingAsync();
    }
    
    public string GetAlternateVolumeMapping()
    {
        return base.Channel.GetAlternateVolumeMapping();
    }
    
    public System.Threading.Tasks.Task<string> GetAlternateVolumeMappingAsync()
    {
        return base.Channel.GetAlternateVolumeMappingAsync();
    }
    
    public bool setUpPreConnection()
    {
        return base.Channel.setUpPreConnection();
    }
    
    public System.Threading.Tasks.Task<bool> setUpPreConnectionAsync()
    {
        return base.Channel.setUpPreConnectionAsync();
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace="http://www.doubletake.com/Core/Contract/UtilityOperations", ConfigurationName="CoreUtility")]
public interface CoreUtility
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/UtilityOperations/CoreUtility/GetServerTi" +
        "me", ReplyAction="http://www.doubletake.com/Core/Contract/UtilityOperations/CoreUtility/GetServerTi" +
        "meResponse")]
    System.DateTime GetServerTime();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/UtilityOperations/CoreUtility/GetServerTi" +
        "me", ReplyAction="http://www.doubletake.com/Core/Contract/UtilityOperations/CoreUtility/GetServerTi" +
        "meResponse")]
    System.Threading.Tasks.Task<System.DateTime> GetServerTimeAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/UtilityOperations/CoreUtility/GetWinServi" +
        "ceInfo", ReplyAction="http://www.doubletake.com/Core/Contract/UtilityOperations/CoreUtility/GetWinServi" +
        "ceInfoResponse")]
    DoubleTake.Core.Contract.WinServiceInfo GetWinServiceInfo(string name);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/UtilityOperations/CoreUtility/GetWinServi" +
        "ceInfo", ReplyAction="http://www.doubletake.com/Core/Contract/UtilityOperations/CoreUtility/GetWinServi" +
        "ceInfoResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.WinServiceInfo> GetWinServiceInfoAsync(string name);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/UtilityOperations/CoreUtility/GetWinDevic" +
        "eServiceInfo", ReplyAction="http://www.doubletake.com/Core/Contract/UtilityOperations/CoreUtility/GetWinDevic" +
        "eServiceInfoResponse")]
    DoubleTake.Core.Contract.WinServiceInfo GetWinDeviceServiceInfo(string name);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/UtilityOperations/CoreUtility/GetWinDevic" +
        "eServiceInfo", ReplyAction="http://www.doubletake.com/Core/Contract/UtilityOperations/CoreUtility/GetWinDevic" +
        "eServiceInfoResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.WinServiceInfo> GetWinDeviceServiceInfoAsync(string name);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/UtilityOperations/CoreUtility/SetWinServi" +
        "ceStartMode", ReplyAction="http://www.doubletake.com/Core/Contract/UtilityOperations/CoreUtility/SetWinServi" +
        "ceStartModeResponse")]
    void SetWinServiceStartMode(string name, DoubleTake.Core.Contract.WinServiceStartMode mode);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/UtilityOperations/CoreUtility/SetWinServi" +
        "ceStartMode", ReplyAction="http://www.doubletake.com/Core/Contract/UtilityOperations/CoreUtility/SetWinServi" +
        "ceStartModeResponse")]
    System.Threading.Tasks.Task SetWinServiceStartModeAsync(string name, DoubleTake.Core.Contract.WinServiceStartMode mode);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/UtilityOperations/CoreUtility/StartWinSer" +
        "vice", ReplyAction="http://www.doubletake.com/Core/Contract/UtilityOperations/CoreUtility/StartWinSer" +
        "viceResponse")]
    void StartWinService(string name);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/UtilityOperations/CoreUtility/StartWinSer" +
        "vice", ReplyAction="http://www.doubletake.com/Core/Contract/UtilityOperations/CoreUtility/StartWinSer" +
        "viceResponse")]
    System.Threading.Tasks.Task StartWinServiceAsync(string name);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/UtilityOperations/CoreUtility/StopWinServ" +
        "ice", ReplyAction="http://www.doubletake.com/Core/Contract/UtilityOperations/CoreUtility/StopWinServ" +
        "iceResponse")]
    void StopWinService(string name);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/UtilityOperations/CoreUtility/StopWinServ" +
        "ice", ReplyAction="http://www.doubletake.com/Core/Contract/UtilityOperations/CoreUtility/StopWinServ" +
        "iceResponse")]
    System.Threading.Tasks.Task StopWinServiceAsync(string name);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/UtilityOperations/CoreUtility/GetIntegerR" +
        "egValue", ReplyAction="http://www.doubletake.com/Core/Contract/UtilityOperations/CoreUtility/GetIntegerR" +
        "egValueResponse")]
    int GetIntegerRegValue(string key, string value);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/UtilityOperations/CoreUtility/GetIntegerR" +
        "egValue", ReplyAction="http://www.doubletake.com/Core/Contract/UtilityOperations/CoreUtility/GetIntegerR" +
        "egValueResponse")]
    System.Threading.Tasks.Task<int> GetIntegerRegValueAsync(string key, string value);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/UtilityOperations/CoreUtility/GetStringRe" +
        "gValue", ReplyAction="http://www.doubletake.com/Core/Contract/UtilityOperations/CoreUtility/GetStringRe" +
        "gValueResponse")]
    string GetStringRegValue(string key, string value);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/UtilityOperations/CoreUtility/GetStringRe" +
        "gValue", ReplyAction="http://www.doubletake.com/Core/Contract/UtilityOperations/CoreUtility/GetStringRe" +
        "gValueResponse")]
    System.Threading.Tasks.Task<string> GetStringRegValueAsync(string key, string value);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/UtilityOperations/CoreUtility/GetMultiStr" +
        "ingRegValue", ReplyAction="http://www.doubletake.com/Core/Contract/UtilityOperations/CoreUtility/GetMultiStr" +
        "ingRegValueResponse")]
    string[] GetMultiStringRegValue(string key, string value);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/UtilityOperations/CoreUtility/GetMultiStr" +
        "ingRegValue", ReplyAction="http://www.doubletake.com/Core/Contract/UtilityOperations/CoreUtility/GetMultiStr" +
        "ingRegValueResponse")]
    System.Threading.Tasks.Task<string[]> GetMultiStringRegValueAsync(string key, string value);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/UtilityOperations/CoreUtility/GetBinaryRe" +
        "gValue", ReplyAction="http://www.doubletake.com/Core/Contract/UtilityOperations/CoreUtility/GetBinaryRe" +
        "gValueResponse")]
    byte[] GetBinaryRegValue(string key, string value);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/UtilityOperations/CoreUtility/GetBinaryRe" +
        "gValue", ReplyAction="http://www.doubletake.com/Core/Contract/UtilityOperations/CoreUtility/GetBinaryRe" +
        "gValueResponse")]
    System.Threading.Tasks.Task<byte[]> GetBinaryRegValueAsync(string key, string value);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/UtilityOperations/CoreUtility/SetIntegerR" +
        "egValue", ReplyAction="http://www.doubletake.com/Core/Contract/UtilityOperations/CoreUtility/SetIntegerR" +
        "egValueResponse")]
    void SetIntegerRegValue(string key, string value, int data);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/UtilityOperations/CoreUtility/SetIntegerR" +
        "egValue", ReplyAction="http://www.doubletake.com/Core/Contract/UtilityOperations/CoreUtility/SetIntegerR" +
        "egValueResponse")]
    System.Threading.Tasks.Task SetIntegerRegValueAsync(string key, string value, int data);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/UtilityOperations/CoreUtility/SetStringRe" +
        "gValue", ReplyAction="http://www.doubletake.com/Core/Contract/UtilityOperations/CoreUtility/SetStringRe" +
        "gValueResponse")]
    void SetStringRegValue(string key, string value, string data);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/UtilityOperations/CoreUtility/SetStringRe" +
        "gValue", ReplyAction="http://www.doubletake.com/Core/Contract/UtilityOperations/CoreUtility/SetStringRe" +
        "gValueResponse")]
    System.Threading.Tasks.Task SetStringRegValueAsync(string key, string value, string data);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/UtilityOperations/CoreUtility/SetMultiStr" +
        "ingRegValue", ReplyAction="http://www.doubletake.com/Core/Contract/UtilityOperations/CoreUtility/SetMultiStr" +
        "ingRegValueResponse")]
    void SetMultiStringRegValue(string key, string value, string[] data);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/UtilityOperations/CoreUtility/SetMultiStr" +
        "ingRegValue", ReplyAction="http://www.doubletake.com/Core/Contract/UtilityOperations/CoreUtility/SetMultiStr" +
        "ingRegValueResponse")]
    System.Threading.Tasks.Task SetMultiStringRegValueAsync(string key, string value, string[] data);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/UtilityOperations/CoreUtility/SetBinaryRe" +
        "gValue", ReplyAction="http://www.doubletake.com/Core/Contract/UtilityOperations/CoreUtility/SetBinaryRe" +
        "gValueResponse")]
    void SetBinaryRegValue(string key, string value, byte[] data);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/UtilityOperations/CoreUtility/SetBinaryRe" +
        "gValue", ReplyAction="http://www.doubletake.com/Core/Contract/UtilityOperations/CoreUtility/SetBinaryRe" +
        "gValueResponse")]
    System.Threading.Tasks.Task SetBinaryRegValueAsync(string key, string value, byte[] data);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/UtilityOperations/CoreUtility/StartProces" +
        "s", ReplyAction="http://www.doubletake.com/Core/Contract/UtilityOperations/CoreUtility/StartProces" +
        "sResponse")]
    void StartProcess(string cmd, DoubleTake.Core.Contract.DesktopInteractionMode interaction);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/UtilityOperations/CoreUtility/StartProces" +
        "s", ReplyAction="http://www.doubletake.com/Core/Contract/UtilityOperations/CoreUtility/StartProces" +
        "sResponse")]
    System.Threading.Tasks.Task StartProcessAsync(string cmd, DoubleTake.Core.Contract.DesktopInteractionMode interaction);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/UtilityOperations/CoreUtility/FileExists", ReplyAction="http://www.doubletake.com/Core/Contract/UtilityOperations/CoreUtility/FileExistsR" +
        "esponse")]
    bool FileExists(string filePath);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Core/Contract/UtilityOperations/CoreUtility/FileExists", ReplyAction="http://www.doubletake.com/Core/Contract/UtilityOperations/CoreUtility/FileExistsR" +
        "esponse")]
    System.Threading.Tasks.Task<bool> FileExistsAsync(string filePath);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface CoreUtilityChannel : CoreUtility, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class CoreUtilityClient : System.ServiceModel.ClientBase<CoreUtility>, CoreUtility
{
    
    public CoreUtilityClient()
    {
    }
    
    public CoreUtilityClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public CoreUtilityClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public CoreUtilityClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public CoreUtilityClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public System.DateTime GetServerTime()
    {
        return base.Channel.GetServerTime();
    }
    
    public System.Threading.Tasks.Task<System.DateTime> GetServerTimeAsync()
    {
        return base.Channel.GetServerTimeAsync();
    }
    
    public DoubleTake.Core.Contract.WinServiceInfo GetWinServiceInfo(string name)
    {
        return base.Channel.GetWinServiceInfo(name);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.WinServiceInfo> GetWinServiceInfoAsync(string name)
    {
        return base.Channel.GetWinServiceInfoAsync(name);
    }
    
    public DoubleTake.Core.Contract.WinServiceInfo GetWinDeviceServiceInfo(string name)
    {
        return base.Channel.GetWinDeviceServiceInfo(name);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.WinServiceInfo> GetWinDeviceServiceInfoAsync(string name)
    {
        return base.Channel.GetWinDeviceServiceInfoAsync(name);
    }
    
    public void SetWinServiceStartMode(string name, DoubleTake.Core.Contract.WinServiceStartMode mode)
    {
        base.Channel.SetWinServiceStartMode(name, mode);
    }
    
    public System.Threading.Tasks.Task SetWinServiceStartModeAsync(string name, DoubleTake.Core.Contract.WinServiceStartMode mode)
    {
        return base.Channel.SetWinServiceStartModeAsync(name, mode);
    }
    
    public void StartWinService(string name)
    {
        base.Channel.StartWinService(name);
    }
    
    public System.Threading.Tasks.Task StartWinServiceAsync(string name)
    {
        return base.Channel.StartWinServiceAsync(name);
    }
    
    public void StopWinService(string name)
    {
        base.Channel.StopWinService(name);
    }
    
    public System.Threading.Tasks.Task StopWinServiceAsync(string name)
    {
        return base.Channel.StopWinServiceAsync(name);
    }
    
    public int GetIntegerRegValue(string key, string value)
    {
        return base.Channel.GetIntegerRegValue(key, value);
    }
    
    public System.Threading.Tasks.Task<int> GetIntegerRegValueAsync(string key, string value)
    {
        return base.Channel.GetIntegerRegValueAsync(key, value);
    }
    
    public string GetStringRegValue(string key, string value)
    {
        return base.Channel.GetStringRegValue(key, value);
    }
    
    public System.Threading.Tasks.Task<string> GetStringRegValueAsync(string key, string value)
    {
        return base.Channel.GetStringRegValueAsync(key, value);
    }
    
    public string[] GetMultiStringRegValue(string key, string value)
    {
        return base.Channel.GetMultiStringRegValue(key, value);
    }
    
    public System.Threading.Tasks.Task<string[]> GetMultiStringRegValueAsync(string key, string value)
    {
        return base.Channel.GetMultiStringRegValueAsync(key, value);
    }
    
    public byte[] GetBinaryRegValue(string key, string value)
    {
        return base.Channel.GetBinaryRegValue(key, value);
    }
    
    public System.Threading.Tasks.Task<byte[]> GetBinaryRegValueAsync(string key, string value)
    {
        return base.Channel.GetBinaryRegValueAsync(key, value);
    }
    
    public void SetIntegerRegValue(string key, string value, int data)
    {
        base.Channel.SetIntegerRegValue(key, value, data);
    }
    
    public System.Threading.Tasks.Task SetIntegerRegValueAsync(string key, string value, int data)
    {
        return base.Channel.SetIntegerRegValueAsync(key, value, data);
    }
    
    public void SetStringRegValue(string key, string value, string data)
    {
        base.Channel.SetStringRegValue(key, value, data);
    }
    
    public System.Threading.Tasks.Task SetStringRegValueAsync(string key, string value, string data)
    {
        return base.Channel.SetStringRegValueAsync(key, value, data);
    }
    
    public void SetMultiStringRegValue(string key, string value, string[] data)
    {
        base.Channel.SetMultiStringRegValue(key, value, data);
    }
    
    public System.Threading.Tasks.Task SetMultiStringRegValueAsync(string key, string value, string[] data)
    {
        return base.Channel.SetMultiStringRegValueAsync(key, value, data);
    }
    
    public void SetBinaryRegValue(string key, string value, byte[] data)
    {
        base.Channel.SetBinaryRegValue(key, value, data);
    }
    
    public System.Threading.Tasks.Task SetBinaryRegValueAsync(string key, string value, byte[] data)
    {
        return base.Channel.SetBinaryRegValueAsync(key, value, data);
    }
    
    public void StartProcess(string cmd, DoubleTake.Core.Contract.DesktopInteractionMode interaction)
    {
        base.Channel.StartProcess(cmd, interaction);
    }
    
    public System.Threading.Tasks.Task StartProcessAsync(string cmd, DoubleTake.Core.Contract.DesktopInteractionMode interaction)
    {
        return base.Channel.StartProcessAsync(cmd, interaction);
    }
    
    public bool FileExists(string filePath)
    {
        return base.Channel.FileExists(filePath);
    }
    
    public System.Threading.Tasks.Task<bool> FileExistsAsync(string filePath)
    {
        return base.Channel.FileExistsAsync(filePath);
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace="http://www.doubletake.com/Failover/Contract", ConfigurationName="IFailoverIdentitySupport")]
public interface IFailoverIdentitySupport
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Failover/Contract/IFailoverIdentitySupport/AddShares", ReplyAction="http://www.doubletake.com/Failover/Contract/IFailoverIdentitySupport/AddSharesRes" +
        "ponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Failover/Contract/IFailoverIdentitySupport/AddSharesCom" +
        "monFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Failover/Contract/IFailoverIdentitySupport/AddSharesAcc" +
        "essLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void AddShares(string pathJobXml, string filterSharePath);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Failover/Contract/IFailoverIdentitySupport/AddShares", ReplyAction="http://www.doubletake.com/Failover/Contract/IFailoverIdentitySupport/AddSharesRes" +
        "ponse")]
    System.Threading.Tasks.Task AddSharesAsync(string pathJobXml, string filterSharePath);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Failover/Contract/IFailoverIdentitySupport/RemoveShares" +
        "", ReplyAction="http://www.doubletake.com/Failover/Contract/IFailoverIdentitySupport/RemoveShares" +
        "Response")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Failover/Contract/IFailoverIdentitySupport/RemoveShares" +
        "AccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Failover/Contract/IFailoverIdentitySupport/RemoveShares" +
        "CommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void RemoveShares(string pathJobXml, string filterSharePath);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Failover/Contract/IFailoverIdentitySupport/RemoveShares" +
        "", ReplyAction="http://www.doubletake.com/Failover/Contract/IFailoverIdentitySupport/RemoveShares" +
        "Response")]
    System.Threading.Tasks.Task RemoveSharesAsync(string pathJobXml, string filterSharePath);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IFailoverIdentitySupportChannel : IFailoverIdentitySupport, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class FailoverIdentitySupportClient : System.ServiceModel.ClientBase<IFailoverIdentitySupport>, IFailoverIdentitySupport
{
    
    public FailoverIdentitySupportClient()
    {
    }
    
    public FailoverIdentitySupportClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public FailoverIdentitySupportClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public FailoverIdentitySupportClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public FailoverIdentitySupportClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public void AddShares(string pathJobXml, string filterSharePath)
    {
        base.Channel.AddShares(pathJobXml, filterSharePath);
    }
    
    public System.Threading.Tasks.Task AddSharesAsync(string pathJobXml, string filterSharePath)
    {
        return base.Channel.AddSharesAsync(pathJobXml, filterSharePath);
    }
    
    public void RemoveShares(string pathJobXml, string filterSharePath)
    {
        base.Channel.RemoveShares(pathJobXml, filterSharePath);
    }
    
    public System.Threading.Tasks.Task RemoveSharesAsync(string pathJobXml, string filterSharePath)
    {
        return base.Channel.RemoveSharesAsync(pathJobXml, filterSharePath);
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace="http://www.doubletake.com/Internal/Contract/ClusterOperations", ConfigurationName="Cluster")]
public interface Cluster
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetFileServ" +
        "erGroups", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetFileServ" +
        "erGroupsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetFileServ" +
        "erGroupsCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Core.ClusterGroupInfo[] GetFileServerGroups();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetFileServ" +
        "erGroups", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetFileServ" +
        "erGroupsResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.ClusterGroupInfo[]> GetFileServerGroupsAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetResource" +
        "Info", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetResource" +
        "InfoResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetResource" +
        "InfoCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Core.ClusterResourceInfo[] GetResourceInfo();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetResource" +
        "Info", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetResource" +
        "InfoResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.ClusterResourceInfo[]> GetResourceInfoAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetGroupsCo" +
        "ntainingResourceType", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetGroupsCo" +
        "ntainingResourceTypeResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetGroupsCo" +
        "ntainingResourceTypeCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    string[] GetGroupsContainingResourceType(string resourceType);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetGroupsCo" +
        "ntainingResourceType", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetGroupsCo" +
        "ntainingResourceTypeResponse")]
    System.Threading.Tasks.Task<string[]> GetGroupsContainingResourceTypeAsync(string resourceType);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetIPAddres" +
        "ses", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetIPAddres" +
        "sesResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetIPAddres" +
        "sesCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    string[] GetIPAddresses(string groupName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetIPAddres" +
        "ses", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetIPAddres" +
        "sesResponse")]
    System.Threading.Tasks.Task<string[]> GetIPAddressesAsync(string groupName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetIpAddres" +
        "sInfo", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetIpAddres" +
        "sInfoResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetIpAddres" +
        "sInfoCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Core.Contract.UnicastIPAddressInfo[] GetIpAddressInfo(string group);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetIpAddres" +
        "sInfo", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetIpAddres" +
        "sInfoResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.UnicastIPAddressInfo[]> GetIpAddressInfoAsync(string group);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetOnlineIp" +
        "AddressInfo", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetOnlineIp" +
        "AddressInfoResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetOnlineIp" +
        "AddressInfoCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Core.Contract.UnicastIPAddressInfo[] GetOnlineIpAddressInfo(string groupName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetOnlineIp" +
        "AddressInfo", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetOnlineIp" +
        "AddressInfoResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.UnicastIPAddressInfo[]> GetOnlineIpAddressInfoAsync(string groupName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetClustere" +
        "dVirtualMachines", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetClustere" +
        "dVirtualMachinesResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetClustere" +
        "dVirtualMachinesCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Core.ClusteredVirtualMachinesInfo[] GetClusteredVirtualMachines();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetClustere" +
        "dVirtualMachines", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetClustere" +
        "dVirtualMachinesResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.ClusteredVirtualMachinesInfo[]> GetClusteredVirtualMachinesAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/ApplyStartP" +
        "arameters", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/ApplyStartP" +
        "arametersResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/ApplyStartP" +
        "arametersCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void ApplyStartParameters(string repsetName, DoubleTake.Core.Contract.Connection.ConnectionStartParameters paramsStart);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/ApplyStartP" +
        "arameters", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/ApplyStartP" +
        "arametersResponse")]
    System.Threading.Tasks.Task ApplyStartParametersAsync(string repsetName, DoubleTake.Core.Contract.Connection.ConnectionStartParameters paramsStart);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetOwningNo" +
        "deForResourceGroup", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetOwningNo" +
        "deForResourceGroupResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetOwningNo" +
        "deForResourceGroupCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    string GetOwningNodeForResourceGroup(string group);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetOwningNo" +
        "deForResourceGroup", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetOwningNo" +
        "deForResourceGroupResponse")]
    System.Threading.Tasks.Task<string> GetOwningNodeForResourceGroupAsync(string group);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetNodeName" +
        "s", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetNodeName" +
        "sResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetNodeName" +
        "sCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    string[] GetNodeNames();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetNodeName" +
        "s", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetNodeName" +
        "sResponse")]
    System.Threading.Tasks.Task<string[]> GetNodeNamesAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/DeleteConne" +
        "ction", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/DeleteConne" +
        "ctionResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/DeleteConne" +
        "ctionCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void DeleteConnection(string resourceName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/DeleteConne" +
        "ction", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/DeleteConne" +
        "ctionResponse")]
    System.Threading.Tasks.Task DeleteConnectionAsync(string resourceName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/IsClusterNa" +
        "me", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/IsClusterNa" +
        "meResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/IsClusterNa" +
        "meCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    bool IsClusterName(string serverName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/IsClusterNa" +
        "me", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/IsClusterNa" +
        "meResponse")]
    System.Threading.Tasks.Task<bool> IsClusterNameAsync(string serverName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/CreateTarge" +
        "tResource", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/CreateTarge" +
        "tResourceResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/CreateTarge" +
        "tResourceCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void CreateTargetResource(string resourceName, string jobId, string targetPathVolumeLetter, string jobPath);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/CreateTarge" +
        "tResource", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/CreateTarge" +
        "tResourceResponse")]
    System.Threading.Tasks.Task CreateTargetResourceAsync(string resourceName, string jobId, string targetPathVolumeLetter, string jobPath);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetDiskVolu" +
        "meForTargetResource", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetDiskVolu" +
        "meForTargetResourceResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetDiskVolu" +
        "meForTargetResourceCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    string GetDiskVolumeForTargetResource(string resourceName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetDiskVolu" +
        "meForTargetResource", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetDiskVolu" +
        "meForTargetResourceResponse")]
    System.Threading.Tasks.Task<string> GetDiskVolumeForTargetResourceAsync(string resourceName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetNetworkN" +
        "ameForGroup", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetNetworkN" +
        "ameForGroupResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetNetworkN" +
        "ameForGroupCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    string GetNetworkNameForGroup(string groupName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetNetworkN" +
        "ameForGroup", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetNetworkN" +
        "ameForGroupResponse")]
    System.Threading.Tasks.Task<string> GetNetworkNameForGroupAsync(string groupName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetNetworkN" +
        "amesForGroup", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetNetworkN" +
        "amesForGroupResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetNetworkN" +
        "amesForGroupCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    string[] GetNetworkNamesForGroup(string groupName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetNetworkN" +
        "amesForGroup", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetNetworkN" +
        "amesForGroupResponse")]
    System.Threading.Tasks.Task<string[]> GetNetworkNamesForGroupAsync(string groupName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/DeleteClust" +
        "erResource", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/DeleteClust" +
        "erResourceResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/DeleteClust" +
        "erResourceCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void DeleteClusterResource(string resourceName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/DeleteClust" +
        "erResource", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/DeleteClust" +
        "erResourceResponse")]
    System.Threading.Tasks.Task DeleteClusterResourceAsync(string resourceName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/DeleteEmpty" +
        "Group", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/DeleteEmpty" +
        "GroupResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/DeleteEmpty" +
        "GroupCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void DeleteEmptyGroup(string groupName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/DeleteEmpty" +
        "Group", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/DeleteEmpty" +
        "GroupResponse")]
    System.Threading.Tasks.Task DeleteEmptyGroupAsync(string groupName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetClustere" +
        "dDisks", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetClustere" +
        "dDisksResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetClustere" +
        "dDisksCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    string[] GetClusteredDisks();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetClustere" +
        "dDisks", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetClustere" +
        "dDisksResponse")]
    System.Threading.Tasks.Task<string[]> GetClusteredDisksAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetOwningNo" +
        "deForDisk", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetOwningNo" +
        "deForDiskResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetOwningNo" +
        "deForDiskCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    string GetOwningNodeForDisk(string volume);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetOwningNo" +
        "deForDisk", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetOwningNo" +
        "deForDiskResponse")]
    System.Threading.Tasks.Task<string> GetOwningNodeForDiskAsync(string volume);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/IsThisServe" +
        "rClustered", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/IsThisServe" +
        "rClusteredResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/IsThisServe" +
        "rClusteredCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    bool IsThisServerClustered();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/IsThisServe" +
        "rClustered", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/IsThisServe" +
        "rClusteredResponse")]
    System.Threading.Tasks.Task<bool> IsThisServerClusteredAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetResource" +
        "GroupForStorageDisk", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetResource" +
        "GroupForStorageDiskResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetResource" +
        "GroupForStorageDiskCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    string GetResourceGroupForStorageDisk(string disk);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetResource" +
        "GroupForStorageDisk", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetResource" +
        "GroupForStorageDiskResponse")]
    System.Threading.Tasks.Task<string> GetResourceGroupForStorageDiskAsync(string disk);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetStorageI" +
        "nfo", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetStorageI" +
        "nfoResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetStorageI" +
        "nfoCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Core.StorageInfo[] GetStorageInfo();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetStorageI" +
        "nfo", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetStorageI" +
        "nfoResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.StorageInfo[]> GetStorageInfoAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/TakeResourc" +
        "eGroupIpsOffline", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/TakeResourc" +
        "eGroupIpsOfflineResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/TakeResourc" +
        "eGroupIpsOfflineCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void TakeResourceGroupIpsOffline(string resourceGroup);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/TakeResourc" +
        "eGroupIpsOffline", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/TakeResourc" +
        "eGroupIpsOfflineResponse")]
    System.Threading.Tasks.Task TakeResourceGroupIpsOfflineAsync(string resourceGroup);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/TakeResourc" +
        "eTypeOfflineForGroup", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/TakeResourc" +
        "eTypeOfflineForGroupResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/TakeResourc" +
        "eTypeOfflineForGroupCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void TakeResourceTypeOfflineForGroup(string resourceGroup, string resourceType);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/TakeResourc" +
        "eTypeOfflineForGroup", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/TakeResourc" +
        "eTypeOfflineForGroupResponse")]
    System.Threading.Tasks.Task TakeResourceTypeOfflineForGroupAsync(string resourceGroup, string resourceType);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/BringResour" +
        "ceGroupOnline", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/BringResour" +
        "ceGroupOnlineResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/BringResour" +
        "ceGroupOnlineCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void BringResourceGroupOnline(string resourceGroup);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/BringResour" +
        "ceGroupOnline", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/BringResour" +
        "ceGroupOnlineResponse")]
    System.Threading.Tasks.Task BringResourceGroupOnlineAsync(string resourceGroup);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/BringResour" +
        "ceGroupContainingDiskOnline", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/BringResour" +
        "ceGroupContainingDiskOnlineResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/BringResour" +
        "ceGroupContainingDiskOnlineCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void BringResourceGroupContainingDiskOnline(string diskPath);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/BringResour" +
        "ceGroupContainingDiskOnline", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/BringResour" +
        "ceGroupContainingDiskOnlineResponse")]
    System.Threading.Tasks.Task BringResourceGroupContainingDiskOnlineAsync(string diskPath);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/SetRequireD" +
        "NSPropertyForNetworkNameResourceInGroup", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/SetRequireD" +
        "NSPropertyForNetworkNameResourceInGroupResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/SetRequireD" +
        "NSPropertyForNetworkNameResourceInGroupCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void SetRequireDNSPropertyForNetworkNameResourceInGroup(string networkName, int value);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/SetRequireD" +
        "NSPropertyForNetworkNameResourceInGroup", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/SetRequireD" +
        "NSPropertyForNetworkNameResourceInGroupResponse")]
    System.Threading.Tasks.Task SetRequireDNSPropertyForNetworkNameResourceInGroupAsync(string networkName, int value);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetRequireD" +
        "NSPropertyForNetworkNameResourceInGroup", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetRequireD" +
        "NSPropertyForNetworkNameResourceInGroupResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetRequireD" +
        "NSPropertyForNetworkNameResourceInGroupCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    int GetRequireDNSPropertyForNetworkNameResourceInGroup(string networkName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetRequireD" +
        "NSPropertyForNetworkNameResourceInGroup", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetRequireD" +
        "NSPropertyForNetworkNameResourceInGroupResponse")]
    System.Threading.Tasks.Task<int> GetRequireDNSPropertyForNetworkNameResourceInGroupAsync(string networkName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/SetPublishP" +
        "trRecordsPropertyForNetworkNameResourceInGroup", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/SetPublishP" +
        "trRecordsPropertyForNetworkNameResourceInGroupResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/SetPublishP" +
        "trRecordsPropertyForNetworkNameResourceInGroupCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void SetPublishPtrRecordsPropertyForNetworkNameResourceInGroup(string networkName, int value);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/SetPublishP" +
        "trRecordsPropertyForNetworkNameResourceInGroup", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/SetPublishP" +
        "trRecordsPropertyForNetworkNameResourceInGroupResponse")]
    System.Threading.Tasks.Task SetPublishPtrRecordsPropertyForNetworkNameResourceInGroupAsync(string networkName, int value);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetPublishP" +
        "trRecordsPropertyForNetworkNameResourceInGroup", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetPublishP" +
        "trRecordsPropertyForNetworkNameResourceInGroupResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetPublishP" +
        "trRecordsPropertyForNetworkNameResourceInGroupCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    int GetPublishPtrRecordsPropertyForNetworkNameResourceInGroup(string groupName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetPublishP" +
        "trRecordsPropertyForNetworkNameResourceInGroup", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetPublishP" +
        "trRecordsPropertyForNetworkNameResourceInGroupResponse")]
    System.Threading.Tasks.Task<int> GetPublishPtrRecordsPropertyForNetworkNameResourceInGroupAsync(string groupName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetName", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetNameResp" +
        "onse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetNameComm" +
        "onFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    string GetName();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetName", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetNameResp" +
        "onse")]
    System.Threading.Tasks.Task<string> GetNameAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetClusterS" +
        "erviceAccount", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetClusterS" +
        "erviceAccountResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetClusterS" +
        "erviceAccountCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    string GetClusterServiceAccount();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetClusterS" +
        "erviceAccount", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetClusterS" +
        "erviceAccountResponse")]
    System.Threading.Tasks.Task<string> GetClusterServiceAccountAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetPrivateS" +
        "tringProperty", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetPrivateS" +
        "tringPropertyResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetPrivateS" +
        "tringPropertyCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    string GetPrivateStringProperty(string resourceName, string propertyName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetPrivateS" +
        "tringProperty", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetPrivateS" +
        "tringPropertyResponse")]
    System.Threading.Tasks.Task<string> GetPrivateStringPropertyAsync(string resourceName, string propertyName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/TakeStorage" +
        "ResourceGroupIpsOffline", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/TakeStorage" +
        "ResourceGroupIpsOfflineResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/TakeStorage" +
        "ResourceGroupIpsOfflineCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void TakeStorageResourceGroupIpsOffline(string diskPath);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/TakeStorage" +
        "ResourceGroupIpsOffline", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/TakeStorage" +
        "ResourceGroupIpsOfflineResponse")]
    System.Threading.Tasks.Task TakeStorageResourceGroupIpsOfflineAsync(string diskPath);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetGroupFor" +
        "NetworkName", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetGroupFor" +
        "NetworkNameResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetGroupFor" +
        "NetworkNameCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    string GetGroupForNetworkName(string name);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetGroupFor" +
        "NetworkName", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetGroupFor" +
        "NetworkNameResponse")]
    System.Threading.Tasks.Task<string> GetGroupForNetworkNameAsync(string name);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetPossible" +
        "OwningNodesForNetworkName", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetPossible" +
        "OwningNodesForNetworkNameResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetPossible" +
        "OwningNodesForNetworkNameCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    string[] GetPossibleOwningNodesForNetworkName(string name);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetPossible" +
        "OwningNodesForNetworkName", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetPossible" +
        "OwningNodesForNetworkNameResponse")]
    System.Threading.Tasks.Task<string[]> GetPossibleOwningNodesForNetworkNameAsync(string name);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/IsResourceT" +
        "ypeRegisteredWithCluster", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/IsResourceT" +
        "ypeRegisteredWithClusterResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/IsResourceT" +
        "ypeRegisteredWithClusterCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    bool IsResourceTypeRegisteredWithCluster(string resourceTypeName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/IsResourceT" +
        "ypeRegisteredWithCluster", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/IsResourceT" +
        "ypeRegisteredWithClusterResponse")]
    System.Threading.Tasks.Task<bool> IsResourceTypeRegisteredWithClusterAsync(string resourceTypeName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/DoesResourc" +
        "eExist", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/DoesResourc" +
        "eExistResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/DoesResourc" +
        "eExistCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    bool DoesResourceExist(string resourceName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/DoesResourc" +
        "eExist", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/DoesResourc" +
        "eExistResponse")]
    System.Threading.Tasks.Task<bool> DoesResourceExistAsync(string resourceName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/WaitForGrou" +
        "pOutOfPendingState", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/WaitForGrou" +
        "pOutOfPendingStateResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/WaitForGrou" +
        "pOutOfPendingStateCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    bool WaitForGroupOutOfPendingState(string groupName, int waitTimeoutInSeconds);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/WaitForGrou" +
        "pOutOfPendingState", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/WaitForGrou" +
        "pOutOfPendingStateResponse")]
    System.Threading.Tasks.Task<bool> WaitForGroupOutOfPendingStateAsync(string groupName, int waitTimeoutInSeconds);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetStorageP" +
        "athRoot", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetStorageP" +
        "athRootResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetStorageP" +
        "athRootCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    string GetStoragePathRoot(string targetPath);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetStorageP" +
        "athRoot", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetStorageP" +
        "athRootResponse")]
    System.Threading.Tasks.Task<string> GetStoragePathRootAsync(string targetPath);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetJobsOnNo" +
        "de", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetJobsOnNo" +
        "deResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetJobsOnNo" +
        "deCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    string[] GetJobsOnNode(string nodeName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetJobsOnNo" +
        "de", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetJobsOnNo" +
        "deResponse")]
    System.Threading.Tasks.Task<string[]> GetJobsOnNodeAsync(string nodeName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetCoreClus" +
        "terGroupName", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetCoreClus" +
        "terGroupNameResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetCoreClus" +
        "terGroupNameCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    string GetCoreClusterGroupName();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetCoreClus" +
        "terGroupName", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetCoreClus" +
        "terGroupNameResponse")]
    System.Threading.Tasks.Task<string> GetCoreClusterGroupNameAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetPossible" +
        "OwningNodesForDiskResource", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetPossible" +
        "OwningNodesForDiskResourceResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetPossible" +
        "OwningNodesForDiskResourceCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    string[] GetPossibleOwningNodesForDiskResource(string resourceName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetPossible" +
        "OwningNodesForDiskResource", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetPossible" +
        "OwningNodesForDiskResourceResponse")]
    System.Threading.Tasks.Task<string[]> GetPossibleOwningNodesForDiskResourceAsync(string resourceName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetPhysical" +
        "DiskResourceForPath", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetPhysical" +
        "DiskResourceForPathResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetPhysical" +
        "DiskResourceForPathCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    string GetPhysicalDiskResourceForPath(string diskPath);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetPhysical" +
        "DiskResourceForPath", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetPhysical" +
        "DiskResourceForPathResponse")]
    System.Threading.Tasks.Task<string> GetPhysicalDiskResourceForPathAsync(string diskPath);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/AddPossible" +
        "OwnersToResource", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/AddPossible" +
        "OwnersToResourceResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/AddPossible" +
        "OwnersToResourceCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void AddPossibleOwnersToResource(string resourceName, string[] possibleOwners);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/AddPossible" +
        "OwnersToResource", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/AddPossible" +
        "OwnersToResourceResponse")]
    System.Threading.Tasks.Task AddPossibleOwnersToResourceAsync(string resourceName, string[] possibleOwners);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/RemovePassi" +
        "veOwnersForResource", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/RemovePassi" +
        "veOwnersForResourceResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/RemovePassi" +
        "veOwnersForResourceCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void RemovePassiveOwnersForResource(string resourceName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/RemovePassi" +
        "veOwnersForResource", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/RemovePassi" +
        "veOwnersForResourceResponse")]
    System.Threading.Tasks.Task RemovePassiveOwnersForResourceAsync(string resourceName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/IsTargetClu" +
        "sterJob", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/IsTargetClu" +
        "sterJobResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/IsTargetClu" +
        "sterJobCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    bool IsTargetClusterJob(string jobId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/IsTargetClu" +
        "sterJob", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/IsTargetClu" +
        "sterJobResponse")]
    System.Threading.Tasks.Task<bool> IsTargetClusterJobAsync(string jobId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/DeleteSourc" +
        "eConnectionResourcesFromGroup", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/DeleteSourc" +
        "eConnectionResourcesFromGroupResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/DeleteSourc" +
        "eConnectionResourcesFromGroupCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void DeleteSourceConnectionResourcesFromGroup(string groupName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/DeleteSourc" +
        "eConnectionResourcesFromGroup", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/DeleteSourc" +
        "eConnectionResourcesFromGroupResponse")]
    System.Threading.Tasks.Task DeleteSourceConnectionResourcesFromGroupAsync(string groupName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetUniqueId" +
        "", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetUniqueId" +
        "Response")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetUniqueId" +
        "CommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    string GetUniqueId();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetUniqueId" +
        "", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetUniqueId" +
        "Response")]
    System.Threading.Tasks.Task<string> GetUniqueIdAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/BuildCluste" +
        "redVM", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/BuildCluste" +
        "redVMResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/BuildCluste" +
        "redVMCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void BuildClusteredVM(string vmName, string vmGuid, string vmRootPath, string vmResTypeName, string vmCfgResTypeName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/BuildCluste" +
        "redVM", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/BuildCluste" +
        "redVMResponse")]
    System.Threading.Tasks.Task BuildClusteredVMAsync(string vmName, string vmGuid, string vmRootPath, string vmResTypeName, string vmCfgResTypeName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/IsStorageCS" +
        "V", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/IsStorageCS" +
        "VResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/IsStorageCS" +
        "VCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    bool IsStorageCSV(string resourceName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/IsStorageCS" +
        "V", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/IsStorageCS" +
        "VResponse")]
    System.Threading.Tasks.Task<bool> IsStorageCSVAsync(string resourceName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetVmNameRe" +
        "sourceNames", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetVmNameRe" +
        "sourceNamesResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetVmNameRe" +
        "sourceNamesCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Core.VirtualMachineResourceInfo GetVmNameResourceNames(string vmGuid);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetVmNameRe" +
        "sourceNames", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetVmNameRe" +
        "sourceNamesResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.VirtualMachineResourceInfo> GetVmNameResourceNamesAsync(string vmGuid);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/SetTargetCr" +
        "edentials", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/SetTargetCr" +
        "edentialsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/SetTargetCr" +
        "edentialsCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void SetTargetCredentials(string resourceName, DoubleTake.Core.Contract.Credentials credentials);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/SetTargetCr" +
        "edentials", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/SetTargetCr" +
        "edentialsResponse")]
    System.Threading.Tasks.Task SetTargetCredentialsAsync(string resourceName, DoubleTake.Core.Contract.Credentials credentials);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetResoureS" +
        "tatus", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetResoureS" +
        "tatusResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetResoureS" +
        "tatusCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Core.Contract1.ClusteredResourceState GetResoureStatus(string name);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetResoureS" +
        "tatus", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetResoureS" +
        "tatusResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract1.ClusteredResourceState> GetResoureStatusAsync(string name);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetNetworkN" +
        "ameForResource", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetNetworkN" +
        "ameForResourceResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetNetworkN" +
        "ameForResourceCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    string GetNetworkNameForResource(string resource);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetNetworkN" +
        "ameForResource", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetNetworkN" +
        "ameForResourceResponse")]
    System.Threading.Tasks.Task<string> GetNetworkNameForResourceAsync(string resource);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/BringResour" +
        "ceTypeToState", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/BringResour" +
        "ceTypeToStateResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/BringResour" +
        "ceTypeToStateCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void BringResourceTypeToState(string resourceType, string groupName, DoubleTake.Core.Contract1.ClusteredResourceState state);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/BringResour" +
        "ceTypeToState", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/BringResour" +
        "ceTypeToStateResponse")]
    System.Threading.Tasks.Task BringResourceTypeToStateAsync(string resourceType, string groupName, DoubleTake.Core.Contract1.ClusteredResourceState state);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetOwningNo" +
        "deForResource", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetOwningNo" +
        "deForResourceResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetOwningNo" +
        "deForResourceCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    string GetOwningNodeForResource(string resourceName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetOwningNo" +
        "deForResource", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetOwningNo" +
        "deForResourceResponse")]
    System.Threading.Tasks.Task<string> GetOwningNodeForResourceAsync(string resourceName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetResource" +
        "ForIpAddress", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetResource" +
        "ForIpAddressResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetResource" +
        "ForIpAddressCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Core.ClusterResourceInfo GetResourceForIpAddress(string ipAddress);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetResource" +
        "ForIpAddress", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetResource" +
        "ForIpAddressResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.ClusterResourceInfo> GetResourceForIpAddressAsync(string ipAddress);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/BringResour" +
        "ceOnline", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/BringResour" +
        "ceOnlineResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/BringResour" +
        "ceOnlineCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void BringResourceOnline(string resource);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/BringResour" +
        "ceOnline", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/BringResour" +
        "ceOnlineResponse")]
    System.Threading.Tasks.Task BringResourceOnlineAsync(string resource);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/TakeResourc" +
        "eOffline", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/TakeResourc" +
        "eOfflineResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/TakeResourc" +
        "eOfflineCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void TakeResourceOffline(string resource);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/TakeResourc" +
        "eOffline", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/TakeResourc" +
        "eOfflineResponse")]
    System.Threading.Tasks.Task TakeResourceOfflineAsync(string resource);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/DoesResourc" +
        "eTypeExistInGroup", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/DoesResourc" +
        "eTypeExistInGroupResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/DoesResourc" +
        "eTypeExistInGroupCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    bool DoesResourceTypeExistInGroup(string resourceType, string groupName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/DoesResourc" +
        "eTypeExistInGroup", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/DoesResourc" +
        "eTypeExistInGroupResponse")]
    System.Threading.Tasks.Task<bool> DoesResourceTypeExistInGroupAsync(string resourceType, string groupName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/CreateTarge" +
        "tResourceEx", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/CreateTarge" +
        "tResourceExResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/CreateTarge" +
        "tResourceExCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void CreateTargetResourceEx(string resourceName, string jobId, string targetPathVolumeLetter, string jobPath, string jobType);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/CreateTarge" +
        "tResourceEx", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/CreateTarge" +
        "tResourceExResponse")]
    System.Threading.Tasks.Task CreateTargetResourceExAsync(string resourceName, string jobId, string targetPathVolumeLetter, string jobPath, string jobType);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetResource" +
        "ForNetworkName", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetResource" +
        "ForNetworkNameResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetResource" +
        "ForNetworkNameCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Core.ClusterResourceInfo GetResourceForNetworkName(string name);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetResource" +
        "ForNetworkName", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetResource" +
        "ForNetworkNameResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.ClusterResourceInfo> GetResourceForNetworkNameAsync(string name);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/SetPrivateP" +
        "roperty", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/SetPrivateP" +
        "ropertyResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/SetPrivateP" +
        "ropertyCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void SetPrivateProperty(string resourceName, string propertyName, int propertyValue);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/SetPrivateP" +
        "roperty", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/SetPrivateP" +
        "ropertyResponse")]
    System.Threading.Tasks.Task SetPrivatePropertyAsync(string resourceName, string propertyName, int propertyValue);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/SetCoreReso" +
        "urcePrivateProperty", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/SetCoreReso" +
        "urcePrivatePropertyResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/SetCoreReso" +
        "urcePrivatePropertyCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void SetCoreResourcePrivateProperty(string propertyName, string propertyValue);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/SetCoreReso" +
        "urcePrivateProperty", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/SetCoreReso" +
        "urcePrivatePropertyResponse")]
    System.Threading.Tasks.Task SetCoreResourcePrivatePropertyAsync(string propertyName, string propertyValue);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetCoreReso" +
        "urcePrivateProperty", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetCoreReso" +
        "urcePrivatePropertyResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetCoreReso" +
        "urcePrivatePropertyCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    string GetCoreResourcePrivateProperty(string propertyName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetCoreReso" +
        "urcePrivateProperty", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetCoreReso" +
        "urcePrivatePropertyResponse")]
    System.Threading.Tasks.Task<string> GetCoreResourcePrivatePropertyAsync(string propertyName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/DeleteCoreR" +
        "esourcePrivateProperty", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/DeleteCoreR" +
        "esourcePrivatePropertyResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/DeleteCoreR" +
        "esourcePrivatePropertyCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void DeleteCoreResourcePrivateProperty(string propertyName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/DeleteCoreR" +
        "esourcePrivateProperty", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/DeleteCoreR" +
        "esourcePrivatePropertyResponse")]
    System.Threading.Tasks.Task DeleteCoreResourcePrivatePropertyAsync(string propertyName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/SetFailedOv" +
        "erFlag", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/SetFailedOv" +
        "erFlagResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/SetFailedOv" +
        "erFlagCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    bool SetFailedOverFlag(string repsetName, int value);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/SetFailedOv" +
        "erFlag", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/SetFailedOv" +
        "erFlagResponse")]
    System.Threading.Tasks.Task<bool> SetFailedOverFlagAsync(string repsetName, int value);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/SetTargetRe" +
        "sourceProperties", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/SetTargetRe" +
        "sourcePropertiesResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/SetTargetRe" +
        "sourcePropertiesCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    string SetTargetResourceProperties(string jobId, string engineJobId, string sourceHost, string targetHost);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/SetTargetRe" +
        "sourceProperties", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/SetTargetRe" +
        "sourcePropertiesResponse")]
    System.Threading.Tasks.Task<string> SetTargetResourcePropertiesAsync(string jobId, string engineJobId, string sourceHost, string targetHost);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/DeleteJobSt" +
        "atusResource", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/DeleteJobSt" +
        "atusResourceResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/DeleteJobSt" +
        "atusResourceCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void DeleteJobStatusResource(string jobId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/DeleteJobSt" +
        "atusResource", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/DeleteJobSt" +
        "atusResourceResponse")]
    System.Threading.Tasks.Task DeleteJobStatusResourceAsync(string jobId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/SetPrivateS" +
        "tringProperty", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/SetPrivateS" +
        "tringPropertyResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/SetPrivateS" +
        "tringPropertyCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void SetPrivateStringProperty(string resourceName, string propertyName, string propertyValue);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/SetPrivateS" +
        "tringProperty", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/SetPrivateS" +
        "tringPropertyResponse")]
    System.Threading.Tasks.Task SetPrivateStringPropertyAsync(string resourceName, string propertyName, string propertyValue);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetClustere" +
        "dVirtualMachineOwner", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetClustere" +
        "dVirtualMachineOwnerResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetClustere" +
        "dVirtualMachineOwnerCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    string GetClusteredVirtualMachineOwner(string vmId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetClustere" +
        "dVirtualMachineOwner", ReplyAction="http://www.doubletake.com/Internal/Contract/ClusterOperations/Cluster/GetClustere" +
        "dVirtualMachineOwnerResponse")]
    System.Threading.Tasks.Task<string> GetClusteredVirtualMachineOwnerAsync(string vmId);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface ClusterChannel : Cluster, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class ClusterClient : System.ServiceModel.ClientBase<Cluster>, Cluster
{
    
    public ClusterClient()
    {
    }
    
    public ClusterClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public ClusterClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public ClusterClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public ClusterClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public DoubleTake.Core.ClusterGroupInfo[] GetFileServerGroups()
    {
        return base.Channel.GetFileServerGroups();
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.ClusterGroupInfo[]> GetFileServerGroupsAsync()
    {
        return base.Channel.GetFileServerGroupsAsync();
    }
    
    public DoubleTake.Core.ClusterResourceInfo[] GetResourceInfo()
    {
        return base.Channel.GetResourceInfo();
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.ClusterResourceInfo[]> GetResourceInfoAsync()
    {
        return base.Channel.GetResourceInfoAsync();
    }
    
    public string[] GetGroupsContainingResourceType(string resourceType)
    {
        return base.Channel.GetGroupsContainingResourceType(resourceType);
    }
    
    public System.Threading.Tasks.Task<string[]> GetGroupsContainingResourceTypeAsync(string resourceType)
    {
        return base.Channel.GetGroupsContainingResourceTypeAsync(resourceType);
    }
    
    public string[] GetIPAddresses(string groupName)
    {
        return base.Channel.GetIPAddresses(groupName);
    }
    
    public System.Threading.Tasks.Task<string[]> GetIPAddressesAsync(string groupName)
    {
        return base.Channel.GetIPAddressesAsync(groupName);
    }
    
    public DoubleTake.Core.Contract.UnicastIPAddressInfo[] GetIpAddressInfo(string group)
    {
        return base.Channel.GetIpAddressInfo(group);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.UnicastIPAddressInfo[]> GetIpAddressInfoAsync(string group)
    {
        return base.Channel.GetIpAddressInfoAsync(group);
    }
    
    public DoubleTake.Core.Contract.UnicastIPAddressInfo[] GetOnlineIpAddressInfo(string groupName)
    {
        return base.Channel.GetOnlineIpAddressInfo(groupName);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.UnicastIPAddressInfo[]> GetOnlineIpAddressInfoAsync(string groupName)
    {
        return base.Channel.GetOnlineIpAddressInfoAsync(groupName);
    }
    
    public DoubleTake.Core.ClusteredVirtualMachinesInfo[] GetClusteredVirtualMachines()
    {
        return base.Channel.GetClusteredVirtualMachines();
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.ClusteredVirtualMachinesInfo[]> GetClusteredVirtualMachinesAsync()
    {
        return base.Channel.GetClusteredVirtualMachinesAsync();
    }
    
    public void ApplyStartParameters(string repsetName, DoubleTake.Core.Contract.Connection.ConnectionStartParameters paramsStart)
    {
        base.Channel.ApplyStartParameters(repsetName, paramsStart);
    }
    
    public System.Threading.Tasks.Task ApplyStartParametersAsync(string repsetName, DoubleTake.Core.Contract.Connection.ConnectionStartParameters paramsStart)
    {
        return base.Channel.ApplyStartParametersAsync(repsetName, paramsStart);
    }
    
    public string GetOwningNodeForResourceGroup(string group)
    {
        return base.Channel.GetOwningNodeForResourceGroup(group);
    }
    
    public System.Threading.Tasks.Task<string> GetOwningNodeForResourceGroupAsync(string group)
    {
        return base.Channel.GetOwningNodeForResourceGroupAsync(group);
    }
    
    public string[] GetNodeNames()
    {
        return base.Channel.GetNodeNames();
    }
    
    public System.Threading.Tasks.Task<string[]> GetNodeNamesAsync()
    {
        return base.Channel.GetNodeNamesAsync();
    }
    
    public void DeleteConnection(string resourceName)
    {
        base.Channel.DeleteConnection(resourceName);
    }
    
    public System.Threading.Tasks.Task DeleteConnectionAsync(string resourceName)
    {
        return base.Channel.DeleteConnectionAsync(resourceName);
    }
    
    public bool IsClusterName(string serverName)
    {
        return base.Channel.IsClusterName(serverName);
    }
    
    public System.Threading.Tasks.Task<bool> IsClusterNameAsync(string serverName)
    {
        return base.Channel.IsClusterNameAsync(serverName);
    }
    
    public void CreateTargetResource(string resourceName, string jobId, string targetPathVolumeLetter, string jobPath)
    {
        base.Channel.CreateTargetResource(resourceName, jobId, targetPathVolumeLetter, jobPath);
    }
    
    public System.Threading.Tasks.Task CreateTargetResourceAsync(string resourceName, string jobId, string targetPathVolumeLetter, string jobPath)
    {
        return base.Channel.CreateTargetResourceAsync(resourceName, jobId, targetPathVolumeLetter, jobPath);
    }
    
    public string GetDiskVolumeForTargetResource(string resourceName)
    {
        return base.Channel.GetDiskVolumeForTargetResource(resourceName);
    }
    
    public System.Threading.Tasks.Task<string> GetDiskVolumeForTargetResourceAsync(string resourceName)
    {
        return base.Channel.GetDiskVolumeForTargetResourceAsync(resourceName);
    }
    
    public string GetNetworkNameForGroup(string groupName)
    {
        return base.Channel.GetNetworkNameForGroup(groupName);
    }
    
    public System.Threading.Tasks.Task<string> GetNetworkNameForGroupAsync(string groupName)
    {
        return base.Channel.GetNetworkNameForGroupAsync(groupName);
    }
    
    public string[] GetNetworkNamesForGroup(string groupName)
    {
        return base.Channel.GetNetworkNamesForGroup(groupName);
    }
    
    public System.Threading.Tasks.Task<string[]> GetNetworkNamesForGroupAsync(string groupName)
    {
        return base.Channel.GetNetworkNamesForGroupAsync(groupName);
    }
    
    public void DeleteClusterResource(string resourceName)
    {
        base.Channel.DeleteClusterResource(resourceName);
    }
    
    public System.Threading.Tasks.Task DeleteClusterResourceAsync(string resourceName)
    {
        return base.Channel.DeleteClusterResourceAsync(resourceName);
    }
    
    public void DeleteEmptyGroup(string groupName)
    {
        base.Channel.DeleteEmptyGroup(groupName);
    }
    
    public System.Threading.Tasks.Task DeleteEmptyGroupAsync(string groupName)
    {
        return base.Channel.DeleteEmptyGroupAsync(groupName);
    }
    
    public string[] GetClusteredDisks()
    {
        return base.Channel.GetClusteredDisks();
    }
    
    public System.Threading.Tasks.Task<string[]> GetClusteredDisksAsync()
    {
        return base.Channel.GetClusteredDisksAsync();
    }
    
    public string GetOwningNodeForDisk(string volume)
    {
        return base.Channel.GetOwningNodeForDisk(volume);
    }
    
    public System.Threading.Tasks.Task<string> GetOwningNodeForDiskAsync(string volume)
    {
        return base.Channel.GetOwningNodeForDiskAsync(volume);
    }
    
    public bool IsThisServerClustered()
    {
        return base.Channel.IsThisServerClustered();
    }
    
    public System.Threading.Tasks.Task<bool> IsThisServerClusteredAsync()
    {
        return base.Channel.IsThisServerClusteredAsync();
    }
    
    public string GetResourceGroupForStorageDisk(string disk)
    {
        return base.Channel.GetResourceGroupForStorageDisk(disk);
    }
    
    public System.Threading.Tasks.Task<string> GetResourceGroupForStorageDiskAsync(string disk)
    {
        return base.Channel.GetResourceGroupForStorageDiskAsync(disk);
    }
    
    public DoubleTake.Core.StorageInfo[] GetStorageInfo()
    {
        return base.Channel.GetStorageInfo();
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.StorageInfo[]> GetStorageInfoAsync()
    {
        return base.Channel.GetStorageInfoAsync();
    }
    
    public void TakeResourceGroupIpsOffline(string resourceGroup)
    {
        base.Channel.TakeResourceGroupIpsOffline(resourceGroup);
    }
    
    public System.Threading.Tasks.Task TakeResourceGroupIpsOfflineAsync(string resourceGroup)
    {
        return base.Channel.TakeResourceGroupIpsOfflineAsync(resourceGroup);
    }
    
    public void TakeResourceTypeOfflineForGroup(string resourceGroup, string resourceType)
    {
        base.Channel.TakeResourceTypeOfflineForGroup(resourceGroup, resourceType);
    }
    
    public System.Threading.Tasks.Task TakeResourceTypeOfflineForGroupAsync(string resourceGroup, string resourceType)
    {
        return base.Channel.TakeResourceTypeOfflineForGroupAsync(resourceGroup, resourceType);
    }
    
    public void BringResourceGroupOnline(string resourceGroup)
    {
        base.Channel.BringResourceGroupOnline(resourceGroup);
    }
    
    public System.Threading.Tasks.Task BringResourceGroupOnlineAsync(string resourceGroup)
    {
        return base.Channel.BringResourceGroupOnlineAsync(resourceGroup);
    }
    
    public void BringResourceGroupContainingDiskOnline(string diskPath)
    {
        base.Channel.BringResourceGroupContainingDiskOnline(diskPath);
    }
    
    public System.Threading.Tasks.Task BringResourceGroupContainingDiskOnlineAsync(string diskPath)
    {
        return base.Channel.BringResourceGroupContainingDiskOnlineAsync(diskPath);
    }
    
    public void SetRequireDNSPropertyForNetworkNameResourceInGroup(string networkName, int value)
    {
        base.Channel.SetRequireDNSPropertyForNetworkNameResourceInGroup(networkName, value);
    }
    
    public System.Threading.Tasks.Task SetRequireDNSPropertyForNetworkNameResourceInGroupAsync(string networkName, int value)
    {
        return base.Channel.SetRequireDNSPropertyForNetworkNameResourceInGroupAsync(networkName, value);
    }
    
    public int GetRequireDNSPropertyForNetworkNameResourceInGroup(string networkName)
    {
        return base.Channel.GetRequireDNSPropertyForNetworkNameResourceInGroup(networkName);
    }
    
    public System.Threading.Tasks.Task<int> GetRequireDNSPropertyForNetworkNameResourceInGroupAsync(string networkName)
    {
        return base.Channel.GetRequireDNSPropertyForNetworkNameResourceInGroupAsync(networkName);
    }
    
    public void SetPublishPtrRecordsPropertyForNetworkNameResourceInGroup(string networkName, int value)
    {
        base.Channel.SetPublishPtrRecordsPropertyForNetworkNameResourceInGroup(networkName, value);
    }
    
    public System.Threading.Tasks.Task SetPublishPtrRecordsPropertyForNetworkNameResourceInGroupAsync(string networkName, int value)
    {
        return base.Channel.SetPublishPtrRecordsPropertyForNetworkNameResourceInGroupAsync(networkName, value);
    }
    
    public int GetPublishPtrRecordsPropertyForNetworkNameResourceInGroup(string groupName)
    {
        return base.Channel.GetPublishPtrRecordsPropertyForNetworkNameResourceInGroup(groupName);
    }
    
    public System.Threading.Tasks.Task<int> GetPublishPtrRecordsPropertyForNetworkNameResourceInGroupAsync(string groupName)
    {
        return base.Channel.GetPublishPtrRecordsPropertyForNetworkNameResourceInGroupAsync(groupName);
    }
    
    public string GetName()
    {
        return base.Channel.GetName();
    }
    
    public System.Threading.Tasks.Task<string> GetNameAsync()
    {
        return base.Channel.GetNameAsync();
    }
    
    public string GetClusterServiceAccount()
    {
        return base.Channel.GetClusterServiceAccount();
    }
    
    public System.Threading.Tasks.Task<string> GetClusterServiceAccountAsync()
    {
        return base.Channel.GetClusterServiceAccountAsync();
    }
    
    public string GetPrivateStringProperty(string resourceName, string propertyName)
    {
        return base.Channel.GetPrivateStringProperty(resourceName, propertyName);
    }
    
    public System.Threading.Tasks.Task<string> GetPrivateStringPropertyAsync(string resourceName, string propertyName)
    {
        return base.Channel.GetPrivateStringPropertyAsync(resourceName, propertyName);
    }
    
    public void TakeStorageResourceGroupIpsOffline(string diskPath)
    {
        base.Channel.TakeStorageResourceGroupIpsOffline(diskPath);
    }
    
    public System.Threading.Tasks.Task TakeStorageResourceGroupIpsOfflineAsync(string diskPath)
    {
        return base.Channel.TakeStorageResourceGroupIpsOfflineAsync(diskPath);
    }
    
    public string GetGroupForNetworkName(string name)
    {
        return base.Channel.GetGroupForNetworkName(name);
    }
    
    public System.Threading.Tasks.Task<string> GetGroupForNetworkNameAsync(string name)
    {
        return base.Channel.GetGroupForNetworkNameAsync(name);
    }
    
    public string[] GetPossibleOwningNodesForNetworkName(string name)
    {
        return base.Channel.GetPossibleOwningNodesForNetworkName(name);
    }
    
    public System.Threading.Tasks.Task<string[]> GetPossibleOwningNodesForNetworkNameAsync(string name)
    {
        return base.Channel.GetPossibleOwningNodesForNetworkNameAsync(name);
    }
    
    public bool IsResourceTypeRegisteredWithCluster(string resourceTypeName)
    {
        return base.Channel.IsResourceTypeRegisteredWithCluster(resourceTypeName);
    }
    
    public System.Threading.Tasks.Task<bool> IsResourceTypeRegisteredWithClusterAsync(string resourceTypeName)
    {
        return base.Channel.IsResourceTypeRegisteredWithClusterAsync(resourceTypeName);
    }
    
    public bool DoesResourceExist(string resourceName)
    {
        return base.Channel.DoesResourceExist(resourceName);
    }
    
    public System.Threading.Tasks.Task<bool> DoesResourceExistAsync(string resourceName)
    {
        return base.Channel.DoesResourceExistAsync(resourceName);
    }
    
    public bool WaitForGroupOutOfPendingState(string groupName, int waitTimeoutInSeconds)
    {
        return base.Channel.WaitForGroupOutOfPendingState(groupName, waitTimeoutInSeconds);
    }
    
    public System.Threading.Tasks.Task<bool> WaitForGroupOutOfPendingStateAsync(string groupName, int waitTimeoutInSeconds)
    {
        return base.Channel.WaitForGroupOutOfPendingStateAsync(groupName, waitTimeoutInSeconds);
    }
    
    public string GetStoragePathRoot(string targetPath)
    {
        return base.Channel.GetStoragePathRoot(targetPath);
    }
    
    public System.Threading.Tasks.Task<string> GetStoragePathRootAsync(string targetPath)
    {
        return base.Channel.GetStoragePathRootAsync(targetPath);
    }
    
    public string[] GetJobsOnNode(string nodeName)
    {
        return base.Channel.GetJobsOnNode(nodeName);
    }
    
    public System.Threading.Tasks.Task<string[]> GetJobsOnNodeAsync(string nodeName)
    {
        return base.Channel.GetJobsOnNodeAsync(nodeName);
    }
    
    public string GetCoreClusterGroupName()
    {
        return base.Channel.GetCoreClusterGroupName();
    }
    
    public System.Threading.Tasks.Task<string> GetCoreClusterGroupNameAsync()
    {
        return base.Channel.GetCoreClusterGroupNameAsync();
    }
    
    public string[] GetPossibleOwningNodesForDiskResource(string resourceName)
    {
        return base.Channel.GetPossibleOwningNodesForDiskResource(resourceName);
    }
    
    public System.Threading.Tasks.Task<string[]> GetPossibleOwningNodesForDiskResourceAsync(string resourceName)
    {
        return base.Channel.GetPossibleOwningNodesForDiskResourceAsync(resourceName);
    }
    
    public string GetPhysicalDiskResourceForPath(string diskPath)
    {
        return base.Channel.GetPhysicalDiskResourceForPath(diskPath);
    }
    
    public System.Threading.Tasks.Task<string> GetPhysicalDiskResourceForPathAsync(string diskPath)
    {
        return base.Channel.GetPhysicalDiskResourceForPathAsync(diskPath);
    }
    
    public void AddPossibleOwnersToResource(string resourceName, string[] possibleOwners)
    {
        base.Channel.AddPossibleOwnersToResource(resourceName, possibleOwners);
    }
    
    public System.Threading.Tasks.Task AddPossibleOwnersToResourceAsync(string resourceName, string[] possibleOwners)
    {
        return base.Channel.AddPossibleOwnersToResourceAsync(resourceName, possibleOwners);
    }
    
    public void RemovePassiveOwnersForResource(string resourceName)
    {
        base.Channel.RemovePassiveOwnersForResource(resourceName);
    }
    
    public System.Threading.Tasks.Task RemovePassiveOwnersForResourceAsync(string resourceName)
    {
        return base.Channel.RemovePassiveOwnersForResourceAsync(resourceName);
    }
    
    public bool IsTargetClusterJob(string jobId)
    {
        return base.Channel.IsTargetClusterJob(jobId);
    }
    
    public System.Threading.Tasks.Task<bool> IsTargetClusterJobAsync(string jobId)
    {
        return base.Channel.IsTargetClusterJobAsync(jobId);
    }
    
    public void DeleteSourceConnectionResourcesFromGroup(string groupName)
    {
        base.Channel.DeleteSourceConnectionResourcesFromGroup(groupName);
    }
    
    public System.Threading.Tasks.Task DeleteSourceConnectionResourcesFromGroupAsync(string groupName)
    {
        return base.Channel.DeleteSourceConnectionResourcesFromGroupAsync(groupName);
    }
    
    public string GetUniqueId()
    {
        return base.Channel.GetUniqueId();
    }
    
    public System.Threading.Tasks.Task<string> GetUniqueIdAsync()
    {
        return base.Channel.GetUniqueIdAsync();
    }
    
    public void BuildClusteredVM(string vmName, string vmGuid, string vmRootPath, string vmResTypeName, string vmCfgResTypeName)
    {
        base.Channel.BuildClusteredVM(vmName, vmGuid, vmRootPath, vmResTypeName, vmCfgResTypeName);
    }
    
    public System.Threading.Tasks.Task BuildClusteredVMAsync(string vmName, string vmGuid, string vmRootPath, string vmResTypeName, string vmCfgResTypeName)
    {
        return base.Channel.BuildClusteredVMAsync(vmName, vmGuid, vmRootPath, vmResTypeName, vmCfgResTypeName);
    }
    
    public bool IsStorageCSV(string resourceName)
    {
        return base.Channel.IsStorageCSV(resourceName);
    }
    
    public System.Threading.Tasks.Task<bool> IsStorageCSVAsync(string resourceName)
    {
        return base.Channel.IsStorageCSVAsync(resourceName);
    }
    
    public DoubleTake.Core.VirtualMachineResourceInfo GetVmNameResourceNames(string vmGuid)
    {
        return base.Channel.GetVmNameResourceNames(vmGuid);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.VirtualMachineResourceInfo> GetVmNameResourceNamesAsync(string vmGuid)
    {
        return base.Channel.GetVmNameResourceNamesAsync(vmGuid);
    }
    
    public void SetTargetCredentials(string resourceName, DoubleTake.Core.Contract.Credentials credentials)
    {
        base.Channel.SetTargetCredentials(resourceName, credentials);
    }
    
    public System.Threading.Tasks.Task SetTargetCredentialsAsync(string resourceName, DoubleTake.Core.Contract.Credentials credentials)
    {
        return base.Channel.SetTargetCredentialsAsync(resourceName, credentials);
    }
    
    public DoubleTake.Core.Contract1.ClusteredResourceState GetResoureStatus(string name)
    {
        return base.Channel.GetResoureStatus(name);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract1.ClusteredResourceState> GetResoureStatusAsync(string name)
    {
        return base.Channel.GetResoureStatusAsync(name);
    }
    
    public string GetNetworkNameForResource(string resource)
    {
        return base.Channel.GetNetworkNameForResource(resource);
    }
    
    public System.Threading.Tasks.Task<string> GetNetworkNameForResourceAsync(string resource)
    {
        return base.Channel.GetNetworkNameForResourceAsync(resource);
    }
    
    public void BringResourceTypeToState(string resourceType, string groupName, DoubleTake.Core.Contract1.ClusteredResourceState state)
    {
        base.Channel.BringResourceTypeToState(resourceType, groupName, state);
    }
    
    public System.Threading.Tasks.Task BringResourceTypeToStateAsync(string resourceType, string groupName, DoubleTake.Core.Contract1.ClusteredResourceState state)
    {
        return base.Channel.BringResourceTypeToStateAsync(resourceType, groupName, state);
    }
    
    public string GetOwningNodeForResource(string resourceName)
    {
        return base.Channel.GetOwningNodeForResource(resourceName);
    }
    
    public System.Threading.Tasks.Task<string> GetOwningNodeForResourceAsync(string resourceName)
    {
        return base.Channel.GetOwningNodeForResourceAsync(resourceName);
    }
    
    public DoubleTake.Core.ClusterResourceInfo GetResourceForIpAddress(string ipAddress)
    {
        return base.Channel.GetResourceForIpAddress(ipAddress);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.ClusterResourceInfo> GetResourceForIpAddressAsync(string ipAddress)
    {
        return base.Channel.GetResourceForIpAddressAsync(ipAddress);
    }
    
    public void BringResourceOnline(string resource)
    {
        base.Channel.BringResourceOnline(resource);
    }
    
    public System.Threading.Tasks.Task BringResourceOnlineAsync(string resource)
    {
        return base.Channel.BringResourceOnlineAsync(resource);
    }
    
    public void TakeResourceOffline(string resource)
    {
        base.Channel.TakeResourceOffline(resource);
    }
    
    public System.Threading.Tasks.Task TakeResourceOfflineAsync(string resource)
    {
        return base.Channel.TakeResourceOfflineAsync(resource);
    }
    
    public bool DoesResourceTypeExistInGroup(string resourceType, string groupName)
    {
        return base.Channel.DoesResourceTypeExistInGroup(resourceType, groupName);
    }
    
    public System.Threading.Tasks.Task<bool> DoesResourceTypeExistInGroupAsync(string resourceType, string groupName)
    {
        return base.Channel.DoesResourceTypeExistInGroupAsync(resourceType, groupName);
    }
    
    public void CreateTargetResourceEx(string resourceName, string jobId, string targetPathVolumeLetter, string jobPath, string jobType)
    {
        base.Channel.CreateTargetResourceEx(resourceName, jobId, targetPathVolumeLetter, jobPath, jobType);
    }
    
    public System.Threading.Tasks.Task CreateTargetResourceExAsync(string resourceName, string jobId, string targetPathVolumeLetter, string jobPath, string jobType)
    {
        return base.Channel.CreateTargetResourceExAsync(resourceName, jobId, targetPathVolumeLetter, jobPath, jobType);
    }
    
    public DoubleTake.Core.ClusterResourceInfo GetResourceForNetworkName(string name)
    {
        return base.Channel.GetResourceForNetworkName(name);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.ClusterResourceInfo> GetResourceForNetworkNameAsync(string name)
    {
        return base.Channel.GetResourceForNetworkNameAsync(name);
    }
    
    public void SetPrivateProperty(string resourceName, string propertyName, int propertyValue)
    {
        base.Channel.SetPrivateProperty(resourceName, propertyName, propertyValue);
    }
    
    public System.Threading.Tasks.Task SetPrivatePropertyAsync(string resourceName, string propertyName, int propertyValue)
    {
        return base.Channel.SetPrivatePropertyAsync(resourceName, propertyName, propertyValue);
    }
    
    public void SetCoreResourcePrivateProperty(string propertyName, string propertyValue)
    {
        base.Channel.SetCoreResourcePrivateProperty(propertyName, propertyValue);
    }
    
    public System.Threading.Tasks.Task SetCoreResourcePrivatePropertyAsync(string propertyName, string propertyValue)
    {
        return base.Channel.SetCoreResourcePrivatePropertyAsync(propertyName, propertyValue);
    }
    
    public string GetCoreResourcePrivateProperty(string propertyName)
    {
        return base.Channel.GetCoreResourcePrivateProperty(propertyName);
    }
    
    public System.Threading.Tasks.Task<string> GetCoreResourcePrivatePropertyAsync(string propertyName)
    {
        return base.Channel.GetCoreResourcePrivatePropertyAsync(propertyName);
    }
    
    public void DeleteCoreResourcePrivateProperty(string propertyName)
    {
        base.Channel.DeleteCoreResourcePrivateProperty(propertyName);
    }
    
    public System.Threading.Tasks.Task DeleteCoreResourcePrivatePropertyAsync(string propertyName)
    {
        return base.Channel.DeleteCoreResourcePrivatePropertyAsync(propertyName);
    }
    
    public bool SetFailedOverFlag(string repsetName, int value)
    {
        return base.Channel.SetFailedOverFlag(repsetName, value);
    }
    
    public System.Threading.Tasks.Task<bool> SetFailedOverFlagAsync(string repsetName, int value)
    {
        return base.Channel.SetFailedOverFlagAsync(repsetName, value);
    }
    
    public string SetTargetResourceProperties(string jobId, string engineJobId, string sourceHost, string targetHost)
    {
        return base.Channel.SetTargetResourceProperties(jobId, engineJobId, sourceHost, targetHost);
    }
    
    public System.Threading.Tasks.Task<string> SetTargetResourcePropertiesAsync(string jobId, string engineJobId, string sourceHost, string targetHost)
    {
        return base.Channel.SetTargetResourcePropertiesAsync(jobId, engineJobId, sourceHost, targetHost);
    }
    
    public void DeleteJobStatusResource(string jobId)
    {
        base.Channel.DeleteJobStatusResource(jobId);
    }
    
    public System.Threading.Tasks.Task DeleteJobStatusResourceAsync(string jobId)
    {
        return base.Channel.DeleteJobStatusResourceAsync(jobId);
    }
    
    public void SetPrivateStringProperty(string resourceName, string propertyName, string propertyValue)
    {
        base.Channel.SetPrivateStringProperty(resourceName, propertyName, propertyValue);
    }
    
    public System.Threading.Tasks.Task SetPrivateStringPropertyAsync(string resourceName, string propertyName, string propertyValue)
    {
        return base.Channel.SetPrivateStringPropertyAsync(resourceName, propertyName, propertyValue);
    }
    
    public string GetClusteredVirtualMachineOwner(string vmId)
    {
        return base.Channel.GetClusteredVirtualMachineOwner(vmId);
    }
    
    public System.Threading.Tasks.Task<string> GetClusteredVirtualMachineOwnerAsync(string vmId)
    {
        return base.Channel.GetClusteredVirtualMachineOwnerAsync(vmId);
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace="http://www.doubletake.com/Internal/Contract/CoreEngineOperations", ConfigurationName="CoreEngine")]
public interface CoreEngine
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetMa" +
        "chineInfo", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetMa" +
        "chineInfoResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetMa" +
        "chineInfoCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Core.Contract.MachineInfo GetMachineInfo();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetMa" +
        "chineInfo", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetMa" +
        "chineInfoResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.MachineInfo> GetMachineInfoAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetSe" +
        "rverInfo", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetSe" +
        "rverInfoResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetSe" +
        "rverInfoCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Core.Contract.ServerInfo GetServerInfo();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetSe" +
        "rverInfo", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetSe" +
        "rverInfoResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.ServerInfo> GetServerInfoAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetNe" +
        "tworkInterfaceInfo", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetNe" +
        "tworkInterfaceInfoResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetNe" +
        "tworkInterfaceInfoCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Core.Contract.NetworkInterfaceInfo[] GetNetworkInterfaceInfo();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetNe" +
        "tworkInterfaceInfo", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetNe" +
        "tworkInterfaceInfoResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.NetworkInterfaceInfo[]> GetNetworkInterfaceInfoAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetPr" +
        "oductInfo", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetPr" +
        "oductInfoResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetPr" +
        "oductInfoCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Core.Contract.ProductInfo GetProductInfo();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetPr" +
        "oductInfo", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetPr" +
        "oductInfoResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.ProductInfo> GetProductInfoAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetSe" +
        "ssionKey", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetSe" +
        "ssionKeyResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetSe" +
        "ssionKeyCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    long GetSessionKey();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetSe" +
        "ssionKey", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetSe" +
        "ssionKeyResponse")]
    System.Threading.Tasks.Task<long> GetSessionKeyAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Regis" +
        "terSession", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Regis" +
        "terSessionResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Regis" +
        "terSessionCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void RegisterSession(long sessionKey);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Regis" +
        "terSession", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Regis" +
        "terSessionResponse")]
    System.Threading.Tasks.Task RegisterSessionAsync(long sessionKey);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetPh" +
        "ysicalItems", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetPh" +
        "ysicalItemsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetPh" +
        "ysicalItemsCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Core.Contract.ProtectableItem[] GetPhysicalItems(DoubleTake.Core.Contract.ProtectableItem refItem);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetPh" +
        "ysicalItems", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetPh" +
        "ysicalItemsResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.ProtectableItem[]> GetPhysicalItemsAsync(DoubleTake.Core.Contract.ProtectableItem refItem);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetCo" +
        "mpressionAlgorithms", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetCo" +
        "mpressionAlgorithmsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetCo" +
        "mpressionAlgorithmsCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    int[] GetCompressionAlgorithms();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetCo" +
        "mpressionAlgorithms", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetCo" +
        "mpressionAlgorithmsResponse")]
    System.Threading.Tasks.Task<int[]> GetCompressionAlgorithmsAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Coale" +
        "sceCompressionAlgorithms", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Coale" +
        "sceCompressionAlgorithmsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Coale" +
        "sceCompressionAlgorithmsCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Coale" +
        "sceCompressionAlgorithmsArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Core.Contract.Connection.CompressionLevel[] CoalesceCompressionAlgorithms(int[] algorithms);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Coale" +
        "sceCompressionAlgorithms", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Coale" +
        "sceCompressionAlgorithmsResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.Connection.CompressionLevel[]> CoalesceCompressionAlgorithmsAsync(int[] algorithms);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetOp" +
        "tions", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetOp" +
        "tionsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetOp" +
        "tionsCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Common.Contract.PropertyBag GetOptions(string[] optionNames);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetOp" +
        "tions", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetOp" +
        "tionsResponse")]
    System.Threading.Tasks.Task<DoubleTake.Common.Contract.PropertyBag> GetOptionsAsync(string[] optionNames);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/SetOp" +
        "tions", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/SetOp" +
        "tionsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/SetOp" +
        "tionsCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/SetOp" +
        "tionsArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void SetOptions(DoubleTake.Common.Contract.PropertyBag options);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/SetOp" +
        "tions", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/SetOp" +
        "tionsResponse")]
    System.Threading.Tasks.Task SetOptionsAsync(DoubleTake.Common.Contract.PropertyBag options);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Valid" +
        "ateActivationParameters", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Valid" +
        "ateActivationParametersResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Valid" +
        "ateActivationParametersCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Core.Contract.ActivationStatus ValidateActivationParameters(string[] activationCodes, string[] additionalCodes);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Valid" +
        "ateActivationParameters", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Valid" +
        "ateActivationParametersResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.ActivationStatus> ValidateActivationParametersAsync(string[] activationCodes, string[] additionalCodes);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Apply" +
        "ActivationParameters", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Apply" +
        "ActivationParametersResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Apply" +
        "ActivationParametersCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Core.Contract.ActivationStatus ApplyActivationParameters(string[] activationCodes, string[] additionalCodes);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Apply" +
        "ActivationParameters", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Apply" +
        "ActivationParametersResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.ActivationStatus> ApplyActivationParametersAsync(string[] activationCodes, string[] additionalCodes);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Creat" +
        "eReplicationSet", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Creat" +
        "eReplicationSetResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Creat" +
        "eReplicationSetCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Creat" +
        "eReplicationSetEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void CreateReplicationSet(string name, string usageType, DoubleTake.Core.Contract.PhysicalRule[] rules);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Creat" +
        "eReplicationSet", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Creat" +
        "eReplicationSetResponse")]
    System.Threading.Tasks.Task CreateReplicationSetAsync(string name, string usageType, DoubleTake.Core.Contract.PhysicalRule[] rules);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetRe" +
        "plicationSetRules", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetRe" +
        "plicationSetRulesResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetRe" +
        "plicationSetRulesCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetRe" +
        "plicationSetRulesEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Core.Contract.PhysicalRule[] GetReplicationSetRules(string name);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetRe" +
        "plicationSetRules", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetRe" +
        "plicationSetRulesResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.PhysicalRule[]> GetReplicationSetRulesAsync(string name);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetRe" +
        "plicationSetInfo", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetRe" +
        "plicationSetInfoResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetRe" +
        "plicationSetInfoCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetRe" +
        "plicationSetInfoEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Core.Contract.ReplicationSetInfo GetReplicationSetInfo(string name);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetRe" +
        "plicationSetInfo", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetRe" +
        "plicationSetInfoResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.ReplicationSetInfo> GetReplicationSetInfoAsync(string name);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/SetRe" +
        "plicationSetRules", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/SetRe" +
        "plicationSetRulesResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/SetRe" +
        "plicationSetRulesEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/SetRe" +
        "plicationSetRulesCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void SetReplicationSetRules(string name, DoubleTake.Core.Contract.PhysicalRule[] rules);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/SetRe" +
        "plicationSetRules", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/SetRe" +
        "plicationSetRulesResponse")]
    System.Threading.Tasks.Task SetReplicationSetRulesAsync(string name, DoubleTake.Core.Contract.PhysicalRule[] rules);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/AddRe" +
        "plicationSetRules", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/AddRe" +
        "plicationSetRulesResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/AddRe" +
        "plicationSetRulesEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/AddRe" +
        "plicationSetRulesCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void AddReplicationSetRules(string name, DoubleTake.Core.Contract.PhysicalRule[] rules);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/AddRe" +
        "plicationSetRules", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/AddRe" +
        "plicationSetRulesResponse")]
    System.Threading.Tasks.Task AddReplicationSetRulesAsync(string name, DoubleTake.Core.Contract.PhysicalRule[] rules);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Delet" +
        "eReplicationSetRules", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Delet" +
        "eReplicationSetRulesResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Delet" +
        "eReplicationSetRulesEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Delet" +
        "eReplicationSetRulesCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void DeleteReplicationSetRules(string name, string[] rulePaths);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Delet" +
        "eReplicationSetRules", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Delet" +
        "eReplicationSetRulesResponse")]
    System.Threading.Tasks.Task DeleteReplicationSetRulesAsync(string name, string[] rulePaths);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Delet" +
        "eReplicationSet", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Delet" +
        "eReplicationSetResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Delet" +
        "eReplicationSetCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Delet" +
        "eReplicationSetEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Delet" +
        "eReplicationSetInvalidOperationFaultFault", Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    bool DeleteReplicationSet(string name);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Delet" +
        "eReplicationSet", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Delet" +
        "eReplicationSetResponse")]
    System.Threading.Tasks.Task<bool> DeleteReplicationSetAsync(string name);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetAl" +
        "lReplicationSets", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetAl" +
        "lReplicationSetsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetAl" +
        "lReplicationSetsCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetAl" +
        "lReplicationSetsEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    string[] GetAllReplicationSets();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetAl" +
        "lReplicationSets", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetAl" +
        "lReplicationSetsResponse")]
    System.Threading.Tasks.Task<string[]> GetAllReplicationSetsAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Creat" +
        "eConnection", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Creat" +
        "eConnectionResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Creat" +
        "eConnectionArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Creat" +
        "eConnectionEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Creat" +
        "eConnectionCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Creat" +
        "eConnectionEngineCommandFailedFaultFault", Name="EngineCommandFailedFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Creat" +
        "eConnectionInvalidOperationFaultFault", Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Core.Contract.Connection.ConnectionInfo CreateConnection(DoubleTake.Core.Contract.Connection.ConnectionParameters parameters, DoubleTake.Core.Contract.Connection.ConnectionStartParameters startParameters);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Creat" +
        "eConnection", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Creat" +
        "eConnectionResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.Connection.ConnectionInfo> CreateConnectionAsync(DoubleTake.Core.Contract.Connection.ConnectionParameters parameters, DoubleTake.Core.Contract.Connection.ConnectionStartParameters startParameters);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetCo" +
        "nnection", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetCo" +
        "nnectionResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetCo" +
        "nnectionArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetCo" +
        "nnectionCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Core.Contract.Connection.ConnectionInfo GetConnection(System.Guid connectionId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetCo" +
        "nnection", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetCo" +
        "nnectionResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.Connection.ConnectionInfo> GetConnectionAsync(System.Guid connectionId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Delet" +
        "eConnection", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Delet" +
        "eConnectionResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Delet" +
        "eConnectionArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Delet" +
        "eConnectionEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Delet" +
        "eConnectionCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Delet" +
        "eConnectionEngineCommandFailedFaultFault", Name="EngineCommandFailedFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    bool DeleteConnection(System.Guid connectionId, bool discardTargetQueue);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Delet" +
        "eConnection", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Delet" +
        "eConnectionResponse")]
    System.Threading.Tasks.Task<bool> DeleteConnectionAsync(System.Guid connectionId, bool discardTargetQueue);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Delet" +
        "eClusteredConnection", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Delet" +
        "eClusteredConnectionResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Delet" +
        "eClusteredConnectionEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Delet" +
        "eClusteredConnectionCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Delet" +
        "eClusteredConnectionArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Delet" +
        "eClusteredConnectionEngineCommandFailedFaultFault", Name="EngineCommandFailedFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    bool DeleteClusteredConnection(System.Guid connectionId, bool discardTargetQueue, string resourceName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Delet" +
        "eClusteredConnection", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Delet" +
        "eClusteredConnectionResponse")]
    System.Threading.Tasks.Task<bool> DeleteClusteredConnectionAsync(System.Guid connectionId, bool discardTargetQueue, string resourceName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Resto" +
        "re", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Resto" +
        "reResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Resto" +
        "reEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Resto" +
        "reCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Resto" +
        "reArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Resto" +
        "reEngineCommandFailedFaultFault", Name="EngineCommandFailedFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    int Restore(DoubleTake.Core.Contract.Connection.RestoreParameters restoreParameters);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Resto" +
        "re", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Resto" +
        "reResponse")]
    System.Threading.Tasks.Task<int> RestoreAsync(DoubleTake.Core.Contract.Connection.RestoreParameters restoreParameters);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Contr" +
        "olReplication", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Contr" +
        "olReplicationResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Contr" +
        "olReplicationEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Contr" +
        "olReplicationCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Contr" +
        "olReplicationArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Contr" +
        "olReplicationEngineCommandFailedFaultFault", Name="EngineCommandFailedFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void ControlReplication(System.Guid connectionId, DoubleTake.Core.Contract.Connection.ControlOperation operation);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Contr" +
        "olReplication", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Contr" +
        "olReplicationResponse")]
    System.Threading.Tasks.Task ControlReplicationAsync(System.Guid connectionId, DoubleTake.Core.Contract.Connection.ControlOperation operation);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Contr" +
        "olMirroring", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Contr" +
        "olMirroringResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Contr" +
        "olMirroringCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Contr" +
        "olMirroringArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Contr" +
        "olMirroringEngineCommandFailedFaultFault", Name="EngineCommandFailedFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Contr" +
        "olMirroringEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void ControlMirroring(System.Guid connectionId, DoubleTake.Core.Contract.Connection.ControlOperation operation, DoubleTake.Core.Contract.Connection.MirrorParameters startParameters);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Contr" +
        "olMirroring", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Contr" +
        "olMirroringResponse")]
    System.Threading.Tasks.Task ControlMirroringAsync(System.Guid connectionId, DoubleTake.Core.Contract.Connection.ControlOperation operation, DoubleTake.Core.Contract.Connection.MirrorParameters startParameters);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Contr" +
        "olTransmission", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Contr" +
        "olTransmissionResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Contr" +
        "olTransmissionArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Contr" +
        "olTransmissionCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Contr" +
        "olTransmissionEngineCommandFailedFaultFault", Name="EngineCommandFailedFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Contr" +
        "olTransmissionEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void ControlTransmission(System.Guid connectionId, DoubleTake.Core.Contract.Connection.ControlOperation operation);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Contr" +
        "olTransmission", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Contr" +
        "olTransmissionResponse")]
    System.Threading.Tasks.Task ControlTransmissionAsync(System.Guid connectionId, DoubleTake.Core.Contract.Connection.ControlOperation operation);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetCo" +
        "mpressionLevel", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetCo" +
        "mpressionLevelResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetCo" +
        "mpressionLevelCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetCo" +
        "mpressionLevelArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetCo" +
        "mpressionLevelEngineCommandFailedFaultFault", Name="EngineCommandFailedFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetCo" +
        "mpressionLevelEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Core.Contract.Connection.CompressionLevel GetCompressionLevel(System.Guid connectionId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetCo" +
        "mpressionLevel", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetCo" +
        "mpressionLevelResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.Connection.CompressionLevel> GetCompressionLevelAsync(System.Guid connectionId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/SetCo" +
        "mpressionLevel", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/SetCo" +
        "mpressionLevelResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/SetCo" +
        "mpressionLevelCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/SetCo" +
        "mpressionLevelArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/SetCo" +
        "mpressionLevelEngineCommandFailedFaultFault", Name="EngineCommandFailedFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/SetCo" +
        "mpressionLevelEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void SetCompressionLevel(System.Guid connectionId, DoubleTake.Core.Contract.Connection.CompressionLevel level);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/SetCo" +
        "mpressionLevel", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/SetCo" +
        "mpressionLevelResponse")]
    System.Threading.Tasks.Task SetCompressionLevelAsync(System.Guid connectionId, DoubleTake.Core.Contract.Connection.CompressionLevel level);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetCo" +
        "nnectionSchedule", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetCo" +
        "nnectionScheduleResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetCo" +
        "nnectionScheduleEngineCommandFailedFaultFault", Name="EngineCommandFailedFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetCo" +
        "nnectionScheduleArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetCo" +
        "nnectionScheduleEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetCo" +
        "nnectionScheduleCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Core.Contract.Connection.ConnectionSchedule GetConnectionSchedule(System.Guid connectionId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetCo" +
        "nnectionSchedule", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetCo" +
        "nnectionScheduleResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.Connection.ConnectionSchedule> GetConnectionScheduleAsync(System.Guid connectionId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/SetCo" +
        "nnectionSchedule", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/SetCo" +
        "nnectionScheduleResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/SetCo" +
        "nnectionScheduleArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/SetCo" +
        "nnectionScheduleCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/SetCo" +
        "nnectionScheduleEngineCommandFailedFaultFault", Name="EngineCommandFailedFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/SetCo" +
        "nnectionScheduleEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void SetConnectionSchedule(System.Guid connectionId, DoubleTake.Core.Contract.Connection.ConnectionSchedule schedule);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/SetCo" +
        "nnectionSchedule", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/SetCo" +
        "nnectionScheduleResponse")]
    System.Threading.Tasks.Task SetConnectionScheduleAsync(System.Guid connectionId, DoubleTake.Core.Contract.Connection.ConnectionSchedule schedule);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Queue" +
        "Task", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Queue" +
        "TaskResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Queue" +
        "TaskArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Queue" +
        "TaskEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Queue" +
        "TaskCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Queue" +
        "TaskEngineCommandFailedFaultFault", Name="EngineCommandFailedFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void QueueTask(System.Guid connectionId, DoubleTake.Core.Contract.Connection.QueueTaskParameters parameters);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Queue" +
        "Task", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Queue" +
        "TaskResponse")]
    System.Threading.Tasks.Task QueueTaskAsync(System.Guid connectionId, DoubleTake.Core.Contract.Connection.QueueTaskParameters parameters);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/IsRes" +
        "toreRequired", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/IsRes" +
        "toreRequiredResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/IsRes" +
        "toreRequiredEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/IsRes" +
        "toreRequiredCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/IsRes" +
        "toreRequiredEngineCommandFailedFaultFault", Name="EngineCommandFailedFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    bool IsRestoreRequired(string[] sourceIPEndpoints, string sourceName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/IsRes" +
        "toreRequired", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/IsRes" +
        "toreRequiredResponse")]
    System.Threading.Tasks.Task<bool> IsRestoreRequiredAsync(string[] sourceIPEndpoints, string sourceName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/SetRe" +
        "storeRequired", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/SetRe" +
        "storeRequiredResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/SetRe" +
        "storeRequiredEngineCommandFailedFaultFault", Name="EngineCommandFailedFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/SetRe" +
        "storeRequiredCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/SetRe" +
        "storeRequiredEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void SetRestoreRequired(string[] sourceIPEndpoints, string sourceName, bool restoreRequired);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/SetRe" +
        "storeRequired", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/SetRe" +
        "storeRequiredResponse")]
    System.Threading.Tasks.Task SetRestoreRequiredAsync(string[] sourceIPEndpoints, string sourceName, bool restoreRequired);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/SetRe" +
        "storeRequiredWithRepsetName", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/SetRe" +
        "storeRequiredWithRepsetNameResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/SetRe" +
        "storeRequiredWithRepsetNameEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/SetRe" +
        "storeRequiredWithRepsetNameCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/SetRe" +
        "storeRequiredWithRepsetNameEngineCommandFailedFaultFault", Name="EngineCommandFailedFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void SetRestoreRequiredWithRepsetName(string[] sourceIPEndpoints, string sourceName, string repsetName, bool restoreRequired);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/SetRe" +
        "storeRequiredWithRepsetName", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/SetRe" +
        "storeRequiredWithRepsetNameResponse")]
    System.Threading.Tasks.Task SetRestoreRequiredWithRepsetNameAsync(string[] sourceIPEndpoints, string sourceName, string repsetName, bool restoreRequired);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/MarkF" +
        "orDeletion", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/MarkF" +
        "orDeletionResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/MarkF" +
        "orDeletionCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/MarkF" +
        "orDeletionEngineCommandFailedFaultFault", Name="EngineCommandFailedFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/MarkF" +
        "orDeletionEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void MarkForDeletion(string[] sourceIPEndpoints, string sourceName, int connectionId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/MarkF" +
        "orDeletion", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/MarkF" +
        "orDeletionResponse")]
    System.Threading.Tasks.Task MarkForDeletionAsync(string[] sourceIPEndpoints, string sourceName, int connectionId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Contr" +
        "olTargetOperations", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Contr" +
        "olTargetOperationsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Contr" +
        "olTargetOperationsEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Contr" +
        "olTargetOperationsCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Contr" +
        "olTargetOperationsEngineCommandFailedFaultFault", Name="EngineCommandFailedFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void ControlTargetOperations(string sourceIPEndpoint, DoubleTake.Core.Contract.Connection.ControlOperation operation);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Contr" +
        "olTargetOperations", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Contr" +
        "olTargetOperationsResponse")]
    System.Threading.Tasks.Task ControlTargetOperationsAsync(string sourceIPEndpoint, DoubleTake.Core.Contract.Connection.ControlOperation operation);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/TakeS" +
        "napshot", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/TakeS" +
        "napshotResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/TakeS" +
        "napshotCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/TakeS" +
        "napshotEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/TakeS" +
        "napshotEngineCommandFailedFaultFault", Name="EngineCommandFailedFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void TakeSnapshot(int engineConnectionId, string[] sourceIPEndpoints, DoubleTake.Core.Contract.Connection.SnapshotCreationReason reason);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/TakeS" +
        "napshot", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/TakeS" +
        "napshotResponse")]
    System.Threading.Tasks.Task TakeSnapshotAsync(int engineConnectionId, string[] sourceIPEndpoints, DoubleTake.Core.Contract.Connection.SnapshotCreationReason reason);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetSn" +
        "apshotSchedule", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetSn" +
        "apshotScheduleResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetSn" +
        "apshotScheduleCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetSn" +
        "apshotScheduleEngineCommandFailedFaultFault", Name="EngineCommandFailedFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetSn" +
        "apshotScheduleEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Core.Contract.Connection.SnapshotSchedule GetSnapshotSchedule(int engineConnectionId, string[] sourceIPEndpoints);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetSn" +
        "apshotSchedule", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetSn" +
        "apshotScheduleResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.Connection.SnapshotSchedule> GetSnapshotScheduleAsync(int engineConnectionId, string[] sourceIPEndpoints);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/SetSn" +
        "apshotSchedule", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/SetSn" +
        "apshotScheduleResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/SetSn" +
        "apshotScheduleEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/SetSn" +
        "apshotScheduleCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/SetSn" +
        "apshotScheduleEngineCommandFailedFaultFault", Name="EngineCommandFailedFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void SetSnapshotSchedule(int engineConnectionId, string[] sourceIPEndpoints, DoubleTake.Core.Contract.Connection.SnapshotSchedule schedule);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/SetSn" +
        "apshotSchedule", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/SetSn" +
        "apshotScheduleResponse")]
    System.Threading.Tasks.Task SetSnapshotScheduleAsync(int engineConnectionId, string[] sourceIPEndpoints, DoubleTake.Core.Contract.Connection.SnapshotSchedule schedule);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetSn" +
        "apshots", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetSn" +
        "apshotsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetSn" +
        "apshotsCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetSn" +
        "apshotsEngineCommandFailedFaultFault", Name="EngineCommandFailedFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetSn" +
        "apshotsEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Core.Contract.Connection.SnapshotEntry[] GetSnapshots(int engineConnectionId, string sourceIPEndpoint);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetSn" +
        "apshots", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetSn" +
        "apshotsResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.Connection.SnapshotEntry[]> GetSnapshotsAsync(int engineConnectionId, string sourceIPEndpoint);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Rever" +
        "tToLastSnapshot", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Rever" +
        "tToLastSnapshotResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Rever" +
        "tToLastSnapshotEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Rever" +
        "tToLastSnapshotEngineCommandFailedFaultFault", Name="EngineCommandFailedFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Rever" +
        "tToLastSnapshotCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void RevertToLastSnapshot(int engineConnectionId, string[] sourceIPEndpoints, DoubleTake.Core.Contract.Connection.SnapshotCreationReason reason);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Rever" +
        "tToLastSnapshot", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Rever" +
        "tToLastSnapshotResponse")]
    System.Threading.Tasks.Task RevertToLastSnapshotAsync(int engineConnectionId, string[] sourceIPEndpoints, DoubleTake.Core.Contract.Connection.SnapshotCreationReason reason);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Rever" +
        "tToSpecificSnapshot", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Rever" +
        "tToSpecificSnapshotResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Rever" +
        "tToSpecificSnapshotEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Rever" +
        "tToSpecificSnapshotCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Rever" +
        "tToSpecificSnapshotEngineCommandFailedFaultFault", Name="EngineCommandFailedFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void RevertToSpecificSnapshot(int engineConnectionId, string[] sourceIPEndpoints, System.Guid snapshotId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Rever" +
        "tToSpecificSnapshot", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Rever" +
        "tToSpecificSnapshotResponse")]
    System.Threading.Tasks.Task RevertToSpecificSnapshotAsync(int engineConnectionId, string[] sourceIPEndpoints, System.Guid snapshotId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetSn" +
        "apshotRevertStatus", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetSn" +
        "apshotRevertStatusResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetSn" +
        "apshotRevertStatusCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetSn" +
        "apshotRevertStatusEngineCommandFailedFaultFault", Name="EngineCommandFailedFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetSn" +
        "apshotRevertStatusEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    int GetSnapshotRevertStatus(int engineConnectionId, string[] sourceIPEndpoints);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetSn" +
        "apshotRevertStatus", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetSn" +
        "apshotRevertStatusResponse")]
    System.Threading.Tasks.Task<int> GetSnapshotRevertStatusAsync(int engineConnectionId, string[] sourceIPEndpoints);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Remov" +
        "eSnapshots", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Remov" +
        "eSnapshotsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Remov" +
        "eSnapshotsEngineCommandFailedFaultFault", Name="EngineCommandFailedFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Remov" +
        "eSnapshotsCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Remov" +
        "eSnapshotsEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void RemoveSnapshots(int engineConnectionId, string[] sourceIPEndpoints, DoubleTake.Core.Contract.Connection.SnapshotQuality qualityCriteria, DoubleTake.Core.Contract.Connection.SnapshotAge ageCriteria);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Remov" +
        "eSnapshots", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Remov" +
        "eSnapshotsResponse")]
    System.Threading.Tasks.Task RemoveSnapshotsAsync(int engineConnectionId, string[] sourceIPEndpoints, DoubleTake.Core.Contract.Connection.SnapshotQuality qualityCriteria, DoubleTake.Core.Contract.Connection.SnapshotAge ageCriteria);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Remov" +
        "eSnapshot", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Remov" +
        "eSnapshotResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Remov" +
        "eSnapshotEngineCommandFailedFaultFault", Name="EngineCommandFailedFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Remov" +
        "eSnapshotCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Remov" +
        "eSnapshotEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void RemoveSnapshot(int engineConnectionId, string[] sourceIPEndpoints, System.Guid snapshotId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Remov" +
        "eSnapshot", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Remov" +
        "eSnapshotResponse")]
    System.Threading.Tasks.Task RemoveSnapshotAsync(int engineConnectionId, string[] sourceIPEndpoints, System.Guid snapshotId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Mount" +
        "Snapshot", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Mount" +
        "SnapshotResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Mount" +
        "SnapshotEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Mount" +
        "SnapshotCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Mount" +
        "SnapshotEngineCommandFailedFaultFault", Name="EngineCommandFailedFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void MountSnapshot(System.Guid snapshotId, string mountPath);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Mount" +
        "Snapshot", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Mount" +
        "SnapshotResponse")]
    System.Threading.Tasks.Task MountSnapshotAsync(System.Guid snapshotId, string mountPath);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetSc" +
        "riptPoints", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetSc" +
        "riptPointsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetSc" +
        "riptPointsEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetSc" +
        "riptPointsCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetSc" +
        "riptPointsEngineCommandFailedFaultFault", Name="EngineCommandFailedFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Core.Contract.Connection.ScriptPoint[] GetScriptPoints(int engineConnectionId, string[] sourceIPEndpoints);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetSc" +
        "riptPoints", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetSc" +
        "riptPointsResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.Connection.ScriptPoint[]> GetScriptPointsAsync(int engineConnectionId, string[] sourceIPEndpoints);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/SetSc" +
        "riptPoints", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/SetSc" +
        "riptPointsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/SetSc" +
        "riptPointsCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/SetSc" +
        "riptPointsEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/SetSc" +
        "riptPointsEngineCommandFailedFaultFault", Name="EngineCommandFailedFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void SetScriptPoints(int engineConnectionId, string[] sourceIPEndpoints, DoubleTake.Core.Contract.Connection.ScriptPoint[] scriptPoints);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/SetSc" +
        "riptPoints", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/SetSc" +
        "riptPointsResponse")]
    System.Threading.Tasks.Task SetScriptPointsAsync(int engineConnectionId, string[] sourceIPEndpoints, DoubleTake.Core.Contract.Connection.ScriptPoint[] scriptPoints);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Remov" +
        "eScriptPoint", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Remov" +
        "eScriptPointResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Remov" +
        "eScriptPointCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Remov" +
        "eScriptPointEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Remov" +
        "eScriptPointEngineCommandFailedFaultFault", Name="EngineCommandFailedFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void RemoveScriptPoint(int engineConnectionId, string[] sourceIPEndpoints, DoubleTake.Core.Contract.Connection.ScriptPointType type);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Remov" +
        "eScriptPoint", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Remov" +
        "eScriptPointResponse")]
    System.Threading.Tasks.Task RemoveScriptPointAsync(int engineConnectionId, string[] sourceIPEndpoints, DoubleTake.Core.Contract.Connection.ScriptPointType type);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetCo" +
        "nnectionPathBlockingMode", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetCo" +
        "nnectionPathBlockingModeResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetCo" +
        "nnectionPathBlockingModeCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetCo" +
        "nnectionPathBlockingModeEngineCommandFailedFaultFault", Name="EngineCommandFailedFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetCo" +
        "nnectionPathBlockingModeEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Core.Contract.PathBlockingMode GetConnectionPathBlockingMode(int engineConnectionId, string sourceIPEndpoint);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetCo" +
        "nnectionPathBlockingMode", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetCo" +
        "nnectionPathBlockingModeResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.PathBlockingMode> GetConnectionPathBlockingModeAsync(int engineConnectionId, string sourceIPEndpoint);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/SetPa" +
        "thBlocking", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/SetPa" +
        "thBlockingResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/SetPa" +
        "thBlockingEngineCommandFailedFaultFault", Name="EngineCommandFailedFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/SetPa" +
        "thBlockingCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/SetPa" +
        "thBlockingEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void SetPathBlocking(int engineConnectionId, string sourceIPEndpoint, DoubleTake.Core.Contract.PathBlockingMode pathBlockingMode);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/SetPa" +
        "thBlocking", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/SetPa" +
        "thBlockingResponse")]
    System.Threading.Tasks.Task SetPathBlockingAsync(int engineConnectionId, string sourceIPEndpoint, DoubleTake.Core.Contract.PathBlockingMode pathBlockingMode);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Creat" +
        "eMonitor", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Creat" +
        "eMonitorResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Creat" +
        "eMonitorEngineCommandFailedFaultFault", Name="EngineCommandFailedFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Creat" +
        "eMonitorCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Creat" +
        "eMonitorEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Core.Contract.Monitor.MonitorInfo CreateMonitor(DoubleTake.Core.Contract.Monitor.MonitorConfiguration monitorConfiguration);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Creat" +
        "eMonitor", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Creat" +
        "eMonitorResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.Monitor.MonitorInfo> CreateMonitorAsync(DoubleTake.Core.Contract.Monitor.MonitorConfiguration monitorConfiguration);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetMo" +
        "nitor", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetMo" +
        "nitorResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetMo" +
        "nitorCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetMo" +
        "nitorArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Core.Contract.Monitor.MonitorInfo GetMonitor(System.Guid monitorId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetMo" +
        "nitor", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetMo" +
        "nitorResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.Monitor.MonitorInfo> GetMonitorAsync(System.Guid monitorId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/EditM" +
        "onitor", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/EditM" +
        "onitorResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/EditM" +
        "onitorEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/EditM" +
        "onitorArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/EditM" +
        "onitorEngineCommandFailedFaultFault", Name="EngineCommandFailedFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/EditM" +
        "onitorCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void EditMonitor(System.Guid monitorId, DoubleTake.Core.Contract.Monitor.MonitorConfiguration monitorConfiguration);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/EditM" +
        "onitor", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/EditM" +
        "onitorResponse")]
    System.Threading.Tasks.Task EditMonitorAsync(System.Guid monitorId, DoubleTake.Core.Contract.Monitor.MonitorConfiguration monitorConfiguration);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Remov" +
        "eMonitor", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Remov" +
        "eMonitorResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Remov" +
        "eMonitorCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Remov" +
        "eMonitorArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Remov" +
        "eMonitorEngineCommandFailedFaultFault", Name="EngineCommandFailedFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Remov" +
        "eMonitorEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void RemoveMonitor(System.Guid monitorId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Remov" +
        "eMonitor", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Remov" +
        "eMonitorResponse")]
    System.Threading.Tasks.Task RemoveMonitorAsync(System.Guid monitorId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Updat" +
        "eFileShares", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Updat" +
        "eFileSharesResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Updat" +
        "eFileSharesEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Updat" +
        "eFileSharesArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Updat" +
        "eFileSharesCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Updat" +
        "eFileSharesEngineCommandFailedFaultFault", Name="EngineCommandFailedFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void UpdateFileShares(System.Guid monitorId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Updat" +
        "eFileShares", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Updat" +
        "eFileSharesResponse")]
    System.Threading.Tasks.Task UpdateFileSharesAsync(System.Guid monitorId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Failo" +
        "ver", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Failo" +
        "verResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Failo" +
        "verEngineCommandFailedFaultFault", Name="EngineCommandFailedFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Failo" +
        "verEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Failo" +
        "verCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Failo" +
        "verArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void Failover(System.Guid monitorId, DoubleTake.Core.Contract.Monitor.FailoverDataAction failoverDataAction);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Failo" +
        "ver", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Failo" +
        "verResponse")]
    System.Threading.Tasks.Task FailoverAsync(System.Guid monitorId, DoubleTake.Core.Contract.Monitor.FailoverDataAction failoverDataAction);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Failb" +
        "ack", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Failb" +
        "ackResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Failb" +
        "ackEngineCommandFailedFaultFault", Name="EngineCommandFailedFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Failb" +
        "ackCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Failb" +
        "ackArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Failb" +
        "ackEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void Failback(System.Guid monitorId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Failb" +
        "ack", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Failb" +
        "ackResponse")]
    System.Threading.Tasks.Task FailbackAsync(System.Guid monitorId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/ReMon" +
        "itor", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/ReMon" +
        "itorResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/ReMon" +
        "itorEngineCommandFailedFaultFault", Name="EngineCommandFailedFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/ReMon" +
        "itorCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/ReMon" +
        "itorArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/ReMon" +
        "itorEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void ReMonitor(System.Guid monitorId, DoubleTake.Core.Contract.Monitor.ReMonitorAction reMonitorAction);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/ReMon" +
        "itor", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/ReMon" +
        "itorResponse")]
    System.Threading.Tasks.Task ReMonitorAsync(System.Guid monitorId, DoubleTake.Core.Contract.Monitor.ReMonitorAction reMonitorAction);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Verif" +
        "yTargetRoute", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Verif" +
        "yTargetRouteResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Verif" +
        "yTargetRouteEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Verif" +
        "yTargetRouteArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void VerifyTargetRoute(string targetRoute);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Verif" +
        "yTargetRoute", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Verif" +
        "yTargetRouteResponse")]
    System.Threading.Tasks.Task VerifyTargetRouteAsync(string targetRoute);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Valid" +
        "ateActiveDirectoryCredentials", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Valid" +
        "ateActiveDirectoryCredentialsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Valid" +
        "ateActiveDirectoryCredentialsArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Valid" +
        "ateActiveDirectoryCredentialsEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    bool ValidateActiveDirectoryCredentials(DoubleTake.Core.Contract.Credentials credentials);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Valid" +
        "ateActiveDirectoryCredentials", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Valid" +
        "ateActiveDirectoryCredentialsResponse")]
    System.Threading.Tasks.Task<bool> ValidateActiveDirectoryCredentialsAsync(DoubleTake.Core.Contract.Credentials credentials);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Valid" +
        "ateScriptCredentials", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Valid" +
        "ateScriptCredentialsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Valid" +
        "ateScriptCredentialsEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Valid" +
        "ateScriptCredentialsArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    bool ValidateScriptCredentials(DoubleTake.Core.Contract.Credentials credentials);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Valid" +
        "ateScriptCredentials", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/Valid" +
        "ateScriptCredentialsResponse")]
    System.Threading.Tasks.Task<bool> ValidateScriptCredentialsAsync(DoubleTake.Core.Contract.Credentials credentials);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetAl" +
        "lConnections", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetAl" +
        "lConnectionsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetAl" +
        "lConnectionsCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Core.Contract.Connection.ConnectionInfo[] GetAllConnections();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetAl" +
        "lConnections", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetAl" +
        "lConnectionsResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.Connection.ConnectionInfo[]> GetAllConnectionsAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetMo" +
        "nitors", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetMo" +
        "nitorsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetMo" +
        "nitorsCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Core.Contract.Monitor.MonitorInfo[] GetMonitors();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetMo" +
        "nitors", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetMo" +
        "nitorsResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.Monitor.MonitorInfo[]> GetMonitorsAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetTa" +
        "rgetStates", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetTa" +
        "rgetStatesResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetTa" +
        "rgetStatesEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetTa" +
        "rgetStatesCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault), Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetTa" +
        "rgetStatesEngineCommandFailedFaultFault", Name="EngineCommandFailedFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Core.Contract.Connection.TargetStateInfo[] GetTargetStates();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetTa" +
        "rgetStates", ReplyAction="http://www.doubletake.com/Internal/Contract/CoreEngineOperations/CoreEngine/GetTa" +
        "rgetStatesResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.Connection.TargetStateInfo[]> GetTargetStatesAsync();
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface CoreEngineChannel : CoreEngine, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class CoreEngineClient : System.ServiceModel.ClientBase<CoreEngine>, CoreEngine
{
    
    public CoreEngineClient()
    {
    }
    
    public CoreEngineClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public CoreEngineClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public CoreEngineClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public CoreEngineClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public DoubleTake.Core.Contract.MachineInfo GetMachineInfo()
    {
        return base.Channel.GetMachineInfo();
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.MachineInfo> GetMachineInfoAsync()
    {
        return base.Channel.GetMachineInfoAsync();
    }
    
    public DoubleTake.Core.Contract.ServerInfo GetServerInfo()
    {
        return base.Channel.GetServerInfo();
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.ServerInfo> GetServerInfoAsync()
    {
        return base.Channel.GetServerInfoAsync();
    }
    
    public DoubleTake.Core.Contract.NetworkInterfaceInfo[] GetNetworkInterfaceInfo()
    {
        return base.Channel.GetNetworkInterfaceInfo();
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.NetworkInterfaceInfo[]> GetNetworkInterfaceInfoAsync()
    {
        return base.Channel.GetNetworkInterfaceInfoAsync();
    }
    
    public DoubleTake.Core.Contract.ProductInfo GetProductInfo()
    {
        return base.Channel.GetProductInfo();
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.ProductInfo> GetProductInfoAsync()
    {
        return base.Channel.GetProductInfoAsync();
    }
    
    public long GetSessionKey()
    {
        return base.Channel.GetSessionKey();
    }
    
    public System.Threading.Tasks.Task<long> GetSessionKeyAsync()
    {
        return base.Channel.GetSessionKeyAsync();
    }
    
    public void RegisterSession(long sessionKey)
    {
        base.Channel.RegisterSession(sessionKey);
    }
    
    public System.Threading.Tasks.Task RegisterSessionAsync(long sessionKey)
    {
        return base.Channel.RegisterSessionAsync(sessionKey);
    }
    
    public DoubleTake.Core.Contract.ProtectableItem[] GetPhysicalItems(DoubleTake.Core.Contract.ProtectableItem refItem)
    {
        return base.Channel.GetPhysicalItems(refItem);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.ProtectableItem[]> GetPhysicalItemsAsync(DoubleTake.Core.Contract.ProtectableItem refItem)
    {
        return base.Channel.GetPhysicalItemsAsync(refItem);
    }
    
    public int[] GetCompressionAlgorithms()
    {
        return base.Channel.GetCompressionAlgorithms();
    }
    
    public System.Threading.Tasks.Task<int[]> GetCompressionAlgorithmsAsync()
    {
        return base.Channel.GetCompressionAlgorithmsAsync();
    }
    
    public DoubleTake.Core.Contract.Connection.CompressionLevel[] CoalesceCompressionAlgorithms(int[] algorithms)
    {
        return base.Channel.CoalesceCompressionAlgorithms(algorithms);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.Connection.CompressionLevel[]> CoalesceCompressionAlgorithmsAsync(int[] algorithms)
    {
        return base.Channel.CoalesceCompressionAlgorithmsAsync(algorithms);
    }
    
    public DoubleTake.Common.Contract.PropertyBag GetOptions(string[] optionNames)
    {
        return base.Channel.GetOptions(optionNames);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Common.Contract.PropertyBag> GetOptionsAsync(string[] optionNames)
    {
        return base.Channel.GetOptionsAsync(optionNames);
    }
    
    public void SetOptions(DoubleTake.Common.Contract.PropertyBag options)
    {
        base.Channel.SetOptions(options);
    }
    
    public System.Threading.Tasks.Task SetOptionsAsync(DoubleTake.Common.Contract.PropertyBag options)
    {
        return base.Channel.SetOptionsAsync(options);
    }
    
    public DoubleTake.Core.Contract.ActivationStatus ValidateActivationParameters(string[] activationCodes, string[] additionalCodes)
    {
        return base.Channel.ValidateActivationParameters(activationCodes, additionalCodes);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.ActivationStatus> ValidateActivationParametersAsync(string[] activationCodes, string[] additionalCodes)
    {
        return base.Channel.ValidateActivationParametersAsync(activationCodes, additionalCodes);
    }
    
    public DoubleTake.Core.Contract.ActivationStatus ApplyActivationParameters(string[] activationCodes, string[] additionalCodes)
    {
        return base.Channel.ApplyActivationParameters(activationCodes, additionalCodes);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.ActivationStatus> ApplyActivationParametersAsync(string[] activationCodes, string[] additionalCodes)
    {
        return base.Channel.ApplyActivationParametersAsync(activationCodes, additionalCodes);
    }
    
    public void CreateReplicationSet(string name, string usageType, DoubleTake.Core.Contract.PhysicalRule[] rules)
    {
        base.Channel.CreateReplicationSet(name, usageType, rules);
    }
    
    public System.Threading.Tasks.Task CreateReplicationSetAsync(string name, string usageType, DoubleTake.Core.Contract.PhysicalRule[] rules)
    {
        return base.Channel.CreateReplicationSetAsync(name, usageType, rules);
    }
    
    public DoubleTake.Core.Contract.PhysicalRule[] GetReplicationSetRules(string name)
    {
        return base.Channel.GetReplicationSetRules(name);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.PhysicalRule[]> GetReplicationSetRulesAsync(string name)
    {
        return base.Channel.GetReplicationSetRulesAsync(name);
    }
    
    public DoubleTake.Core.Contract.ReplicationSetInfo GetReplicationSetInfo(string name)
    {
        return base.Channel.GetReplicationSetInfo(name);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.ReplicationSetInfo> GetReplicationSetInfoAsync(string name)
    {
        return base.Channel.GetReplicationSetInfoAsync(name);
    }
    
    public void SetReplicationSetRules(string name, DoubleTake.Core.Contract.PhysicalRule[] rules)
    {
        base.Channel.SetReplicationSetRules(name, rules);
    }
    
    public System.Threading.Tasks.Task SetReplicationSetRulesAsync(string name, DoubleTake.Core.Contract.PhysicalRule[] rules)
    {
        return base.Channel.SetReplicationSetRulesAsync(name, rules);
    }
    
    public void AddReplicationSetRules(string name, DoubleTake.Core.Contract.PhysicalRule[] rules)
    {
        base.Channel.AddReplicationSetRules(name, rules);
    }
    
    public System.Threading.Tasks.Task AddReplicationSetRulesAsync(string name, DoubleTake.Core.Contract.PhysicalRule[] rules)
    {
        return base.Channel.AddReplicationSetRulesAsync(name, rules);
    }
    
    public void DeleteReplicationSetRules(string name, string[] rulePaths)
    {
        base.Channel.DeleteReplicationSetRules(name, rulePaths);
    }
    
    public System.Threading.Tasks.Task DeleteReplicationSetRulesAsync(string name, string[] rulePaths)
    {
        return base.Channel.DeleteReplicationSetRulesAsync(name, rulePaths);
    }
    
    public bool DeleteReplicationSet(string name)
    {
        return base.Channel.DeleteReplicationSet(name);
    }
    
    public System.Threading.Tasks.Task<bool> DeleteReplicationSetAsync(string name)
    {
        return base.Channel.DeleteReplicationSetAsync(name);
    }
    
    public string[] GetAllReplicationSets()
    {
        return base.Channel.GetAllReplicationSets();
    }
    
    public System.Threading.Tasks.Task<string[]> GetAllReplicationSetsAsync()
    {
        return base.Channel.GetAllReplicationSetsAsync();
    }
    
    public DoubleTake.Core.Contract.Connection.ConnectionInfo CreateConnection(DoubleTake.Core.Contract.Connection.ConnectionParameters parameters, DoubleTake.Core.Contract.Connection.ConnectionStartParameters startParameters)
    {
        return base.Channel.CreateConnection(parameters, startParameters);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.Connection.ConnectionInfo> CreateConnectionAsync(DoubleTake.Core.Contract.Connection.ConnectionParameters parameters, DoubleTake.Core.Contract.Connection.ConnectionStartParameters startParameters)
    {
        return base.Channel.CreateConnectionAsync(parameters, startParameters);
    }
    
    public DoubleTake.Core.Contract.Connection.ConnectionInfo GetConnection(System.Guid connectionId)
    {
        return base.Channel.GetConnection(connectionId);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.Connection.ConnectionInfo> GetConnectionAsync(System.Guid connectionId)
    {
        return base.Channel.GetConnectionAsync(connectionId);
    }
    
    public bool DeleteConnection(System.Guid connectionId, bool discardTargetQueue)
    {
        return base.Channel.DeleteConnection(connectionId, discardTargetQueue);
    }
    
    public System.Threading.Tasks.Task<bool> DeleteConnectionAsync(System.Guid connectionId, bool discardTargetQueue)
    {
        return base.Channel.DeleteConnectionAsync(connectionId, discardTargetQueue);
    }
    
    public bool DeleteClusteredConnection(System.Guid connectionId, bool discardTargetQueue, string resourceName)
    {
        return base.Channel.DeleteClusteredConnection(connectionId, discardTargetQueue, resourceName);
    }
    
    public System.Threading.Tasks.Task<bool> DeleteClusteredConnectionAsync(System.Guid connectionId, bool discardTargetQueue, string resourceName)
    {
        return base.Channel.DeleteClusteredConnectionAsync(connectionId, discardTargetQueue, resourceName);
    }
    
    public int Restore(DoubleTake.Core.Contract.Connection.RestoreParameters restoreParameters)
    {
        return base.Channel.Restore(restoreParameters);
    }
    
    public System.Threading.Tasks.Task<int> RestoreAsync(DoubleTake.Core.Contract.Connection.RestoreParameters restoreParameters)
    {
        return base.Channel.RestoreAsync(restoreParameters);
    }
    
    public void ControlReplication(System.Guid connectionId, DoubleTake.Core.Contract.Connection.ControlOperation operation)
    {
        base.Channel.ControlReplication(connectionId, operation);
    }
    
    public System.Threading.Tasks.Task ControlReplicationAsync(System.Guid connectionId, DoubleTake.Core.Contract.Connection.ControlOperation operation)
    {
        return base.Channel.ControlReplicationAsync(connectionId, operation);
    }
    
    public void ControlMirroring(System.Guid connectionId, DoubleTake.Core.Contract.Connection.ControlOperation operation, DoubleTake.Core.Contract.Connection.MirrorParameters startParameters)
    {
        base.Channel.ControlMirroring(connectionId, operation, startParameters);
    }
    
    public System.Threading.Tasks.Task ControlMirroringAsync(System.Guid connectionId, DoubleTake.Core.Contract.Connection.ControlOperation operation, DoubleTake.Core.Contract.Connection.MirrorParameters startParameters)
    {
        return base.Channel.ControlMirroringAsync(connectionId, operation, startParameters);
    }
    
    public void ControlTransmission(System.Guid connectionId, DoubleTake.Core.Contract.Connection.ControlOperation operation)
    {
        base.Channel.ControlTransmission(connectionId, operation);
    }
    
    public System.Threading.Tasks.Task ControlTransmissionAsync(System.Guid connectionId, DoubleTake.Core.Contract.Connection.ControlOperation operation)
    {
        return base.Channel.ControlTransmissionAsync(connectionId, operation);
    }
    
    public DoubleTake.Core.Contract.Connection.CompressionLevel GetCompressionLevel(System.Guid connectionId)
    {
        return base.Channel.GetCompressionLevel(connectionId);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.Connection.CompressionLevel> GetCompressionLevelAsync(System.Guid connectionId)
    {
        return base.Channel.GetCompressionLevelAsync(connectionId);
    }
    
    public void SetCompressionLevel(System.Guid connectionId, DoubleTake.Core.Contract.Connection.CompressionLevel level)
    {
        base.Channel.SetCompressionLevel(connectionId, level);
    }
    
    public System.Threading.Tasks.Task SetCompressionLevelAsync(System.Guid connectionId, DoubleTake.Core.Contract.Connection.CompressionLevel level)
    {
        return base.Channel.SetCompressionLevelAsync(connectionId, level);
    }
    
    public DoubleTake.Core.Contract.Connection.ConnectionSchedule GetConnectionSchedule(System.Guid connectionId)
    {
        return base.Channel.GetConnectionSchedule(connectionId);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.Connection.ConnectionSchedule> GetConnectionScheduleAsync(System.Guid connectionId)
    {
        return base.Channel.GetConnectionScheduleAsync(connectionId);
    }
    
    public void SetConnectionSchedule(System.Guid connectionId, DoubleTake.Core.Contract.Connection.ConnectionSchedule schedule)
    {
        base.Channel.SetConnectionSchedule(connectionId, schedule);
    }
    
    public System.Threading.Tasks.Task SetConnectionScheduleAsync(System.Guid connectionId, DoubleTake.Core.Contract.Connection.ConnectionSchedule schedule)
    {
        return base.Channel.SetConnectionScheduleAsync(connectionId, schedule);
    }
    
    public void QueueTask(System.Guid connectionId, DoubleTake.Core.Contract.Connection.QueueTaskParameters parameters)
    {
        base.Channel.QueueTask(connectionId, parameters);
    }
    
    public System.Threading.Tasks.Task QueueTaskAsync(System.Guid connectionId, DoubleTake.Core.Contract.Connection.QueueTaskParameters parameters)
    {
        return base.Channel.QueueTaskAsync(connectionId, parameters);
    }
    
    public bool IsRestoreRequired(string[] sourceIPEndpoints, string sourceName)
    {
        return base.Channel.IsRestoreRequired(sourceIPEndpoints, sourceName);
    }
    
    public System.Threading.Tasks.Task<bool> IsRestoreRequiredAsync(string[] sourceIPEndpoints, string sourceName)
    {
        return base.Channel.IsRestoreRequiredAsync(sourceIPEndpoints, sourceName);
    }
    
    public void SetRestoreRequired(string[] sourceIPEndpoints, string sourceName, bool restoreRequired)
    {
        base.Channel.SetRestoreRequired(sourceIPEndpoints, sourceName, restoreRequired);
    }
    
    public System.Threading.Tasks.Task SetRestoreRequiredAsync(string[] sourceIPEndpoints, string sourceName, bool restoreRequired)
    {
        return base.Channel.SetRestoreRequiredAsync(sourceIPEndpoints, sourceName, restoreRequired);
    }
    
    public void SetRestoreRequiredWithRepsetName(string[] sourceIPEndpoints, string sourceName, string repsetName, bool restoreRequired)
    {
        base.Channel.SetRestoreRequiredWithRepsetName(sourceIPEndpoints, sourceName, repsetName, restoreRequired);
    }
    
    public System.Threading.Tasks.Task SetRestoreRequiredWithRepsetNameAsync(string[] sourceIPEndpoints, string sourceName, string repsetName, bool restoreRequired)
    {
        return base.Channel.SetRestoreRequiredWithRepsetNameAsync(sourceIPEndpoints, sourceName, repsetName, restoreRequired);
    }
    
    public void MarkForDeletion(string[] sourceIPEndpoints, string sourceName, int connectionId)
    {
        base.Channel.MarkForDeletion(sourceIPEndpoints, sourceName, connectionId);
    }
    
    public System.Threading.Tasks.Task MarkForDeletionAsync(string[] sourceIPEndpoints, string sourceName, int connectionId)
    {
        return base.Channel.MarkForDeletionAsync(sourceIPEndpoints, sourceName, connectionId);
    }
    
    public void ControlTargetOperations(string sourceIPEndpoint, DoubleTake.Core.Contract.Connection.ControlOperation operation)
    {
        base.Channel.ControlTargetOperations(sourceIPEndpoint, operation);
    }
    
    public System.Threading.Tasks.Task ControlTargetOperationsAsync(string sourceIPEndpoint, DoubleTake.Core.Contract.Connection.ControlOperation operation)
    {
        return base.Channel.ControlTargetOperationsAsync(sourceIPEndpoint, operation);
    }
    
    public void TakeSnapshot(int engineConnectionId, string[] sourceIPEndpoints, DoubleTake.Core.Contract.Connection.SnapshotCreationReason reason)
    {
        base.Channel.TakeSnapshot(engineConnectionId, sourceIPEndpoints, reason);
    }
    
    public System.Threading.Tasks.Task TakeSnapshotAsync(int engineConnectionId, string[] sourceIPEndpoints, DoubleTake.Core.Contract.Connection.SnapshotCreationReason reason)
    {
        return base.Channel.TakeSnapshotAsync(engineConnectionId, sourceIPEndpoints, reason);
    }
    
    public DoubleTake.Core.Contract.Connection.SnapshotSchedule GetSnapshotSchedule(int engineConnectionId, string[] sourceIPEndpoints)
    {
        return base.Channel.GetSnapshotSchedule(engineConnectionId, sourceIPEndpoints);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.Connection.SnapshotSchedule> GetSnapshotScheduleAsync(int engineConnectionId, string[] sourceIPEndpoints)
    {
        return base.Channel.GetSnapshotScheduleAsync(engineConnectionId, sourceIPEndpoints);
    }
    
    public void SetSnapshotSchedule(int engineConnectionId, string[] sourceIPEndpoints, DoubleTake.Core.Contract.Connection.SnapshotSchedule schedule)
    {
        base.Channel.SetSnapshotSchedule(engineConnectionId, sourceIPEndpoints, schedule);
    }
    
    public System.Threading.Tasks.Task SetSnapshotScheduleAsync(int engineConnectionId, string[] sourceIPEndpoints, DoubleTake.Core.Contract.Connection.SnapshotSchedule schedule)
    {
        return base.Channel.SetSnapshotScheduleAsync(engineConnectionId, sourceIPEndpoints, schedule);
    }
    
    public DoubleTake.Core.Contract.Connection.SnapshotEntry[] GetSnapshots(int engineConnectionId, string sourceIPEndpoint)
    {
        return base.Channel.GetSnapshots(engineConnectionId, sourceIPEndpoint);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.Connection.SnapshotEntry[]> GetSnapshotsAsync(int engineConnectionId, string sourceIPEndpoint)
    {
        return base.Channel.GetSnapshotsAsync(engineConnectionId, sourceIPEndpoint);
    }
    
    public void RevertToLastSnapshot(int engineConnectionId, string[] sourceIPEndpoints, DoubleTake.Core.Contract.Connection.SnapshotCreationReason reason)
    {
        base.Channel.RevertToLastSnapshot(engineConnectionId, sourceIPEndpoints, reason);
    }
    
    public System.Threading.Tasks.Task RevertToLastSnapshotAsync(int engineConnectionId, string[] sourceIPEndpoints, DoubleTake.Core.Contract.Connection.SnapshotCreationReason reason)
    {
        return base.Channel.RevertToLastSnapshotAsync(engineConnectionId, sourceIPEndpoints, reason);
    }
    
    public void RevertToSpecificSnapshot(int engineConnectionId, string[] sourceIPEndpoints, System.Guid snapshotId)
    {
        base.Channel.RevertToSpecificSnapshot(engineConnectionId, sourceIPEndpoints, snapshotId);
    }
    
    public System.Threading.Tasks.Task RevertToSpecificSnapshotAsync(int engineConnectionId, string[] sourceIPEndpoints, System.Guid snapshotId)
    {
        return base.Channel.RevertToSpecificSnapshotAsync(engineConnectionId, sourceIPEndpoints, snapshotId);
    }
    
    public int GetSnapshotRevertStatus(int engineConnectionId, string[] sourceIPEndpoints)
    {
        return base.Channel.GetSnapshotRevertStatus(engineConnectionId, sourceIPEndpoints);
    }
    
    public System.Threading.Tasks.Task<int> GetSnapshotRevertStatusAsync(int engineConnectionId, string[] sourceIPEndpoints)
    {
        return base.Channel.GetSnapshotRevertStatusAsync(engineConnectionId, sourceIPEndpoints);
    }
    
    public void RemoveSnapshots(int engineConnectionId, string[] sourceIPEndpoints, DoubleTake.Core.Contract.Connection.SnapshotQuality qualityCriteria, DoubleTake.Core.Contract.Connection.SnapshotAge ageCriteria)
    {
        base.Channel.RemoveSnapshots(engineConnectionId, sourceIPEndpoints, qualityCriteria, ageCriteria);
    }
    
    public System.Threading.Tasks.Task RemoveSnapshotsAsync(int engineConnectionId, string[] sourceIPEndpoints, DoubleTake.Core.Contract.Connection.SnapshotQuality qualityCriteria, DoubleTake.Core.Contract.Connection.SnapshotAge ageCriteria)
    {
        return base.Channel.RemoveSnapshotsAsync(engineConnectionId, sourceIPEndpoints, qualityCriteria, ageCriteria);
    }
    
    public void RemoveSnapshot(int engineConnectionId, string[] sourceIPEndpoints, System.Guid snapshotId)
    {
        base.Channel.RemoveSnapshot(engineConnectionId, sourceIPEndpoints, snapshotId);
    }
    
    public System.Threading.Tasks.Task RemoveSnapshotAsync(int engineConnectionId, string[] sourceIPEndpoints, System.Guid snapshotId)
    {
        return base.Channel.RemoveSnapshotAsync(engineConnectionId, sourceIPEndpoints, snapshotId);
    }
    
    public void MountSnapshot(System.Guid snapshotId, string mountPath)
    {
        base.Channel.MountSnapshot(snapshotId, mountPath);
    }
    
    public System.Threading.Tasks.Task MountSnapshotAsync(System.Guid snapshotId, string mountPath)
    {
        return base.Channel.MountSnapshotAsync(snapshotId, mountPath);
    }
    
    public DoubleTake.Core.Contract.Connection.ScriptPoint[] GetScriptPoints(int engineConnectionId, string[] sourceIPEndpoints)
    {
        return base.Channel.GetScriptPoints(engineConnectionId, sourceIPEndpoints);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.Connection.ScriptPoint[]> GetScriptPointsAsync(int engineConnectionId, string[] sourceIPEndpoints)
    {
        return base.Channel.GetScriptPointsAsync(engineConnectionId, sourceIPEndpoints);
    }
    
    public void SetScriptPoints(int engineConnectionId, string[] sourceIPEndpoints, DoubleTake.Core.Contract.Connection.ScriptPoint[] scriptPoints)
    {
        base.Channel.SetScriptPoints(engineConnectionId, sourceIPEndpoints, scriptPoints);
    }
    
    public System.Threading.Tasks.Task SetScriptPointsAsync(int engineConnectionId, string[] sourceIPEndpoints, DoubleTake.Core.Contract.Connection.ScriptPoint[] scriptPoints)
    {
        return base.Channel.SetScriptPointsAsync(engineConnectionId, sourceIPEndpoints, scriptPoints);
    }
    
    public void RemoveScriptPoint(int engineConnectionId, string[] sourceIPEndpoints, DoubleTake.Core.Contract.Connection.ScriptPointType type)
    {
        base.Channel.RemoveScriptPoint(engineConnectionId, sourceIPEndpoints, type);
    }
    
    public System.Threading.Tasks.Task RemoveScriptPointAsync(int engineConnectionId, string[] sourceIPEndpoints, DoubleTake.Core.Contract.Connection.ScriptPointType type)
    {
        return base.Channel.RemoveScriptPointAsync(engineConnectionId, sourceIPEndpoints, type);
    }
    
    public DoubleTake.Core.Contract.PathBlockingMode GetConnectionPathBlockingMode(int engineConnectionId, string sourceIPEndpoint)
    {
        return base.Channel.GetConnectionPathBlockingMode(engineConnectionId, sourceIPEndpoint);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.PathBlockingMode> GetConnectionPathBlockingModeAsync(int engineConnectionId, string sourceIPEndpoint)
    {
        return base.Channel.GetConnectionPathBlockingModeAsync(engineConnectionId, sourceIPEndpoint);
    }
    
    public void SetPathBlocking(int engineConnectionId, string sourceIPEndpoint, DoubleTake.Core.Contract.PathBlockingMode pathBlockingMode)
    {
        base.Channel.SetPathBlocking(engineConnectionId, sourceIPEndpoint, pathBlockingMode);
    }
    
    public System.Threading.Tasks.Task SetPathBlockingAsync(int engineConnectionId, string sourceIPEndpoint, DoubleTake.Core.Contract.PathBlockingMode pathBlockingMode)
    {
        return base.Channel.SetPathBlockingAsync(engineConnectionId, sourceIPEndpoint, pathBlockingMode);
    }
    
    public DoubleTake.Core.Contract.Monitor.MonitorInfo CreateMonitor(DoubleTake.Core.Contract.Monitor.MonitorConfiguration monitorConfiguration)
    {
        return base.Channel.CreateMonitor(monitorConfiguration);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.Monitor.MonitorInfo> CreateMonitorAsync(DoubleTake.Core.Contract.Monitor.MonitorConfiguration monitorConfiguration)
    {
        return base.Channel.CreateMonitorAsync(monitorConfiguration);
    }
    
    public DoubleTake.Core.Contract.Monitor.MonitorInfo GetMonitor(System.Guid monitorId)
    {
        return base.Channel.GetMonitor(monitorId);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.Monitor.MonitorInfo> GetMonitorAsync(System.Guid monitorId)
    {
        return base.Channel.GetMonitorAsync(monitorId);
    }
    
    public void EditMonitor(System.Guid monitorId, DoubleTake.Core.Contract.Monitor.MonitorConfiguration monitorConfiguration)
    {
        base.Channel.EditMonitor(monitorId, monitorConfiguration);
    }
    
    public System.Threading.Tasks.Task EditMonitorAsync(System.Guid monitorId, DoubleTake.Core.Contract.Monitor.MonitorConfiguration monitorConfiguration)
    {
        return base.Channel.EditMonitorAsync(monitorId, monitorConfiguration);
    }
    
    public void RemoveMonitor(System.Guid monitorId)
    {
        base.Channel.RemoveMonitor(monitorId);
    }
    
    public System.Threading.Tasks.Task RemoveMonitorAsync(System.Guid monitorId)
    {
        return base.Channel.RemoveMonitorAsync(monitorId);
    }
    
    public void UpdateFileShares(System.Guid monitorId)
    {
        base.Channel.UpdateFileShares(monitorId);
    }
    
    public System.Threading.Tasks.Task UpdateFileSharesAsync(System.Guid monitorId)
    {
        return base.Channel.UpdateFileSharesAsync(monitorId);
    }
    
    public void Failover(System.Guid monitorId, DoubleTake.Core.Contract.Monitor.FailoverDataAction failoverDataAction)
    {
        base.Channel.Failover(monitorId, failoverDataAction);
    }
    
    public System.Threading.Tasks.Task FailoverAsync(System.Guid monitorId, DoubleTake.Core.Contract.Monitor.FailoverDataAction failoverDataAction)
    {
        return base.Channel.FailoverAsync(monitorId, failoverDataAction);
    }
    
    public void Failback(System.Guid monitorId)
    {
        base.Channel.Failback(monitorId);
    }
    
    public System.Threading.Tasks.Task FailbackAsync(System.Guid monitorId)
    {
        return base.Channel.FailbackAsync(monitorId);
    }
    
    public void ReMonitor(System.Guid monitorId, DoubleTake.Core.Contract.Monitor.ReMonitorAction reMonitorAction)
    {
        base.Channel.ReMonitor(monitorId, reMonitorAction);
    }
    
    public System.Threading.Tasks.Task ReMonitorAsync(System.Guid monitorId, DoubleTake.Core.Contract.Monitor.ReMonitorAction reMonitorAction)
    {
        return base.Channel.ReMonitorAsync(monitorId, reMonitorAction);
    }
    
    public void VerifyTargetRoute(string targetRoute)
    {
        base.Channel.VerifyTargetRoute(targetRoute);
    }
    
    public System.Threading.Tasks.Task VerifyTargetRouteAsync(string targetRoute)
    {
        return base.Channel.VerifyTargetRouteAsync(targetRoute);
    }
    
    public bool ValidateActiveDirectoryCredentials(DoubleTake.Core.Contract.Credentials credentials)
    {
        return base.Channel.ValidateActiveDirectoryCredentials(credentials);
    }
    
    public System.Threading.Tasks.Task<bool> ValidateActiveDirectoryCredentialsAsync(DoubleTake.Core.Contract.Credentials credentials)
    {
        return base.Channel.ValidateActiveDirectoryCredentialsAsync(credentials);
    }
    
    public bool ValidateScriptCredentials(DoubleTake.Core.Contract.Credentials credentials)
    {
        return base.Channel.ValidateScriptCredentials(credentials);
    }
    
    public System.Threading.Tasks.Task<bool> ValidateScriptCredentialsAsync(DoubleTake.Core.Contract.Credentials credentials)
    {
        return base.Channel.ValidateScriptCredentialsAsync(credentials);
    }
    
    public DoubleTake.Core.Contract.Connection.ConnectionInfo[] GetAllConnections()
    {
        return base.Channel.GetAllConnections();
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.Connection.ConnectionInfo[]> GetAllConnectionsAsync()
    {
        return base.Channel.GetAllConnectionsAsync();
    }
    
    public DoubleTake.Core.Contract.Monitor.MonitorInfo[] GetMonitors()
    {
        return base.Channel.GetMonitors();
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.Monitor.MonitorInfo[]> GetMonitorsAsync()
    {
        return base.Channel.GetMonitorsAsync();
    }
    
    public DoubleTake.Core.Contract.Connection.TargetStateInfo[] GetTargetStates()
    {
        return base.Channel.GetTargetStates();
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.Connection.TargetStateInfo[]> GetTargetStatesAsync()
    {
        return base.Channel.GetTargetStatesAsync();
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace="http://www.doubletake.com/Internal/Contract/EngineDiscoveryOperations", ConfigurationName="EngineDiscovery")]
public interface EngineDiscovery
{
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface EngineDiscoveryChannel : EngineDiscovery, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class EngineDiscoveryClient : System.ServiceModel.ClientBase<EngineDiscovery>, EngineDiscovery
{
    
    public EngineDiscoveryClient()
    {
    }
    
    public EngineDiscoveryClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public EngineDiscoveryClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public EngineDiscoveryClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public EngineDiscoveryClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations", ConfigurationName="IEngineControlManager")]
public interface IEngineControlManager
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/GetConnectionIds", ReplyAction="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/GetConnectionIdsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/GetConnectionIdsArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    System.Collections.Generic.Dictionary<string, System.Guid> GetConnectionIds(System.Guid jobId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/GetConnectionIds", ReplyAction="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/GetConnectionIdsResponse")]
    System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, System.Guid>> GetConnectionIdsAsync(System.Guid jobId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/StartMirrorOperation", ReplyAction="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/StartMirrorOperationResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/StartMirrorOperationEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault), Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/StartMirrorOperationEngineCommandFailedFaultFault", Name="EngineCommandFailedFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault), Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/StartMirrorOperationInvalidOperationFaultFault", Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/StartMirrorOperationArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Common.Tasks.ActivityToken StartMirrorOperation(System.Guid jobId, System.Guid connectionId, DoubleTake.Core.Contract.Connection.MirrorParameters mirrorParameters);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/StartMirrorOperation", ReplyAction="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/StartMirrorOperationResponse")]
    System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> StartMirrorOperationAsync(System.Guid jobId, System.Guid connectionId, DoubleTake.Core.Contract.Connection.MirrorParameters mirrorParameters);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/StopMirrorOperation", ReplyAction="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/StopMirrorOperationResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault), Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/StopMirrorOperationEngineCommandFailedFaultFault", Name="EngineCommandFailedFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/StopMirrorOperationArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault), Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/StopMirrorOperationInvalidOperationFaultFault", Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/StopMirrorOperationEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Common.Tasks.ActivityToken StopMirrorOperation(System.Guid jobId, System.Guid connectionId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/StopMirrorOperation", ReplyAction="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/StopMirrorOperationResponse")]
    System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> StopMirrorOperationAsync(System.Guid jobId, System.Guid connectionId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/PauseMirrorOperation", ReplyAction="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/PauseMirrorOperationResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/PauseMirrorOperationEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault), Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/PauseMirrorOperationEngineCommandFailedFaultFault", Name="EngineCommandFailedFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault), Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/PauseMirrorOperationInvalidOperationFaultFault", Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/PauseMirrorOperationArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Common.Tasks.ActivityToken PauseMirrorOperation(System.Guid jobId, System.Guid connectionId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/PauseMirrorOperation", ReplyAction="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/PauseMirrorOperationResponse")]
    System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> PauseMirrorOperationAsync(System.Guid jobId, System.Guid connectionId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/ResumeMirrorOperation", ReplyAction="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/ResumeMirrorOperationResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/ResumeMirrorOperationEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault), Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/ResumeMirrorOperationEngineCommandFailedFaultFault", Name="EngineCommandFailedFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault), Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/ResumeMirrorOperationInvalidOperationFaultFault", Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/ResumeMirrorOperationArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Common.Tasks.ActivityToken ResumeMirrorOperation(System.Guid jobId, System.Guid connectionId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/ResumeMirrorOperation", ReplyAction="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/ResumeMirrorOperationResponse")]
    System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> ResumeMirrorOperationAsync(System.Guid jobId, System.Guid connectionId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/StartReplication", ReplyAction="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/StartReplicationResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/StartReplicationArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault), Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/StartReplicationInvalidOperationFaultFault", Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/StartReplicationEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault), Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/StartReplicationEngineCommandFailedFaultFault", Name="EngineCommandFailedFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Common.Tasks.ActivityToken StartReplication(System.Guid jobId, System.Guid connectionId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/StartReplication", ReplyAction="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/StartReplicationResponse")]
    System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> StartReplicationAsync(System.Guid jobId, System.Guid connectionId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/StopReplication", ReplyAction="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/StopReplicationResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/StopReplicationEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault), Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/StopReplicationEngineCommandFailedFaultFault", Name="EngineCommandFailedFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault), Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/StopReplicationInvalidOperationFaultFault", Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/StopReplicationArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Common.Tasks.ActivityToken StopReplication(System.Guid jobId, System.Guid connectionId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/StopReplication", ReplyAction="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/StopReplicationResponse")]
    System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> StopReplicationAsync(System.Guid jobId, System.Guid connectionId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/PauseTransmission", ReplyAction="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/PauseTransmissionResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/PauseTransmissionEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault), Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/PauseTransmissionEngineCommandFailedFaultFault", Name="EngineCommandFailedFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault), Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/PauseTransmissionInvalidOperationFaultFault", Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/PauseTransmissionArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Common.Tasks.ActivityToken PauseTransmission(System.Guid jobId, System.Guid connectionId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/PauseTransmission", ReplyAction="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/PauseTransmissionResponse")]
    System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> PauseTransmissionAsync(System.Guid jobId, System.Guid connectionId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/ResumeTransmission", ReplyAction="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/ResumeTransmissionResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault), Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/ResumeTransmissionInvalidOperationFaultFault", Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/ResumeTransmissionArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/ResumeTransmissionEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault), Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/ResumeTransmissionEngineCommandFailedFaultFault", Name="EngineCommandFailedFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Common.Tasks.ActivityToken ResumeTransmission(System.Guid jobId, System.Guid connectionId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/ResumeTransmission", ReplyAction="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/ResumeTransmissionResponse")]
    System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> ResumeTransmissionAsync(System.Guid jobId, System.Guid connectionId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/StartTransmission", ReplyAction="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/StartTransmissionResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault), Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/StartTransmissionInvalidOperationFaultFault", Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/StartTransmissionArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/StartTransmissionEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault), Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/StartTransmissionEngineCommandFailedFaultFault", Name="EngineCommandFailedFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Common.Tasks.ActivityToken StartTransmission(System.Guid jobId, System.Guid connectionId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/StartTransmission", ReplyAction="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/StartTransmissionResponse")]
    System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> StartTransmissionAsync(System.Guid jobId, System.Guid connectionId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/GetBandwidthLimit", ReplyAction="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/GetBandwidthLimitResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault), Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/GetBandwidthLimitInvalidOperationFaultFault", Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/GetBandwidthLimitArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/GetBandwidthLimitEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault), Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/GetBandwidthLimitEngineCommandFailedFaultFault", Name="EngineCommandFailedFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Core.Contract.Connection.BandwidthLimit GetBandwidthLimit(System.Guid jobId, System.Guid connectionId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/GetBandwidthLimit", ReplyAction="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/GetBandwidthLimitResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.Connection.BandwidthLimit> GetBandwidthLimitAsync(System.Guid jobId, System.Guid connectionId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/SetBandwidthLimit", ReplyAction="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/SetBandwidthLimitResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/SetBandwidthLimitArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault), Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/SetBandwidthLimitInvalidOperationFaultFault", Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/SetBandwidthLimitEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault), Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/SetBandwidthLimitEngineCommandFailedFaultFault", Name="EngineCommandFailedFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Common.Tasks.ActivityToken SetBandwidthLimit(System.Guid jobId, System.Guid connectionId, DoubleTake.Core.Contract.Connection.BandwidthLimit bandwidthLimit);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/SetBandwidthLimit", ReplyAction="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/SetBandwidthLimitResponse")]
    System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> SetBandwidthLimitAsync(System.Guid jobId, System.Guid connectionId, DoubleTake.Core.Contract.Connection.BandwidthLimit bandwidthLimit);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/PauseTargetOperations", ReplyAction="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/PauseTargetOperationsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault), Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/PauseTargetOperationsInvalidOperationFaultFault", Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/PauseTargetOperationsArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/PauseTargetOperationsEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault), Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/PauseTargetOperationsEngineCommandFailedFaultFault", Name="EngineCommandFailedFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Common.Tasks.ActivityToken PauseTargetOperations(System.Guid jobId, System.Guid connectionId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/PauseTargetOperations", ReplyAction="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/PauseTargetOperationsResponse")]
    System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> PauseTargetOperationsAsync(System.Guid jobId, System.Guid connectionId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/ResumeTargetOperations", ReplyAction="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/ResumeTargetOperationsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault), Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/ResumeTargetOperationsInvalidOperationFaultFault", Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/ResumeTargetOperationsArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/ResumeTargetOperationsEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault), Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/ResumeTargetOperationsEngineCommandFailedFaultFault", Name="EngineCommandFailedFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Common.Tasks.ActivityToken ResumeTargetOperations(System.Guid jobId, System.Guid connectionId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/ResumeTargetOperations", ReplyAction="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/ResumeTargetOperationsResponse")]
    System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> ResumeTargetOperationsAsync(System.Guid jobId, System.Guid connectionId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/GetSnapshots", ReplyAction="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/GetSnapshotsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/GetSnapshotsEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault), Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/GetSnapshotsInvalidOperationFaultFault", Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault), Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/GetSnapshotsEngineCommandFailedFaultFault", Name="EngineCommandFailedFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Core.Contract.Connection.SnapshotEntry[] GetSnapshots(System.Guid jobId, System.Guid connectionId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/GetSnapshots", ReplyAction="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/GetSnapshotsResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.Connection.SnapshotEntry[]> GetSnapshotsAsync(System.Guid jobId, System.Guid connectionId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/TakeSnapshot", ReplyAction="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/TakeSnapshotResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault), Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/TakeSnapshotInvalidOperationFaultFault", Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/TakeSnapshotArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/TakeSnapshotEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault), Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/TakeSnapshotEngineCommandFailedFaultFault", Name="EngineCommandFailedFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Common.Tasks.ActivityToken TakeSnapshot(System.Guid jobId, System.Guid connectionId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/TakeSnapshot", ReplyAction="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/TakeSnapshotResponse")]
    System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> TakeSnapshotAsync(System.Guid jobId, System.Guid connectionId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/DeleteSnapshot", ReplyAction="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/DeleteSnapshotResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/DeleteSnapshotArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/DeleteSnapshotEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault), Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/DeleteSnapshotEngineCommandFailedFaultFault", Name="EngineCommandFailedFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault), Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/DeleteSnapshotInvalidOperationFaultFault", Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Common.Tasks.ActivityToken DeleteSnapshot(System.Guid jobId, System.Guid connectionId, System.Guid snapshotId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/DeleteSnapshot", ReplyAction="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/DeleteSnapshotResponse")]
    System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> DeleteSnapshotAsync(System.Guid jobId, System.Guid connectionId, System.Guid snapshotId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/DeleteSnapshots", ReplyAction="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/DeleteSnapshotsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault), Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/DeleteSnapshotsEngineCommandFailedFaultFault", Name="EngineCommandFailedFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/DeleteSnapshotsArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/DeleteSnapshotsEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault), Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/DeleteSnapshotsInvalidOperationFaultFault", Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Common.Tasks.ActivityToken DeleteSnapshots(System.Guid jobId, System.Guid connectionId, DoubleTake.Core.Contract.Connection.SnapshotQuality snapshotQuality, DoubleTake.Core.Contract.Connection.SnapshotAge snapshotAge);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/DeleteSnapshots", ReplyAction="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/DeleteSnapshotsResponse")]
    System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> DeleteSnapshotsAsync(System.Guid jobId, System.Guid connectionId, DoubleTake.Core.Contract.Connection.SnapshotQuality snapshotQuality, DoubleTake.Core.Contract.Connection.SnapshotAge snapshotAge);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/GetConnectionDetails", ReplyAction="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/GetConnectionDetailsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault), Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/GetConnectionDetailsInvalidOperationFaultFault", Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/GetConnectionDetailsArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Jobs.Contract.CoreConnectionDetails GetConnectionDetails(System.Guid jobId, System.Guid connectionId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/GetConnectionDetails", ReplyAction="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/GetConnectionDetailsResponse")]
    System.Threading.Tasks.Task<DoubleTake.Jobs.Contract.CoreConnectionDetails> GetConnectionDetailsAsync(System.Guid jobId, System.Guid connectionId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/UpdateShares", ReplyAction="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/UpdateSharesResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault), Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/UpdateSharesInvalidOperationFaultFault", Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/UpdateSharesArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/UpdateSharesEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault), Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/UpdateSharesEngineCommandFailedFaultFault", Name="EngineCommandFailedFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Common.Tasks.ActivityToken UpdateShares(System.Guid jobId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/UpdateShares", ReplyAction="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/UpdateSharesResponse")]
    System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> UpdateSharesAsync(System.Guid jobId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/QueueTask", ReplyAction="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/QueueTaskResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommandFailedFault), Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/QueueTaskEngineCommandFailedFaultFault", Name="EngineCommandFailedFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault), Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/QueueTaskInvalidOperationFaultFault", Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/QueueTaskArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.EngineCommunicationFault), Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/QueueTaskEngineCommunicationFaultFault", Name="EngineCommunicationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Common.Tasks.ActivityToken QueueTask(System.Guid jobId, System.Guid connectionId, DoubleTake.Core.Contract.Connection.QueueTaskParameters queueTaskParameters);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/QueueTask", ReplyAction="http://www.doubletake.com/Jobs/Contract/EngineControlManagerOperations/IEngineCon" +
        "trolManager/QueueTaskResponse")]
    System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> QueueTaskAsync(System.Guid jobId, System.Guid connectionId, DoubleTake.Core.Contract.Connection.QueueTaskParameters queueTaskParameters);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IEngineControlManagerChannel : IEngineControlManager, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class EngineControlManagerClient : System.ServiceModel.ClientBase<IEngineControlManager>, IEngineControlManager
{
    
    public EngineControlManagerClient()
    {
    }
    
    public EngineControlManagerClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public EngineControlManagerClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public EngineControlManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public EngineControlManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public System.Collections.Generic.Dictionary<string, System.Guid> GetConnectionIds(System.Guid jobId)
    {
        return base.Channel.GetConnectionIds(jobId);
    }
    
    public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, System.Guid>> GetConnectionIdsAsync(System.Guid jobId)
    {
        return base.Channel.GetConnectionIdsAsync(jobId);
    }
    
    public DoubleTake.Common.Tasks.ActivityToken StartMirrorOperation(System.Guid jobId, System.Guid connectionId, DoubleTake.Core.Contract.Connection.MirrorParameters mirrorParameters)
    {
        return base.Channel.StartMirrorOperation(jobId, connectionId, mirrorParameters);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> StartMirrorOperationAsync(System.Guid jobId, System.Guid connectionId, DoubleTake.Core.Contract.Connection.MirrorParameters mirrorParameters)
    {
        return base.Channel.StartMirrorOperationAsync(jobId, connectionId, mirrorParameters);
    }
    
    public DoubleTake.Common.Tasks.ActivityToken StopMirrorOperation(System.Guid jobId, System.Guid connectionId)
    {
        return base.Channel.StopMirrorOperation(jobId, connectionId);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> StopMirrorOperationAsync(System.Guid jobId, System.Guid connectionId)
    {
        return base.Channel.StopMirrorOperationAsync(jobId, connectionId);
    }
    
    public DoubleTake.Common.Tasks.ActivityToken PauseMirrorOperation(System.Guid jobId, System.Guid connectionId)
    {
        return base.Channel.PauseMirrorOperation(jobId, connectionId);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> PauseMirrorOperationAsync(System.Guid jobId, System.Guid connectionId)
    {
        return base.Channel.PauseMirrorOperationAsync(jobId, connectionId);
    }
    
    public DoubleTake.Common.Tasks.ActivityToken ResumeMirrorOperation(System.Guid jobId, System.Guid connectionId)
    {
        return base.Channel.ResumeMirrorOperation(jobId, connectionId);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> ResumeMirrorOperationAsync(System.Guid jobId, System.Guid connectionId)
    {
        return base.Channel.ResumeMirrorOperationAsync(jobId, connectionId);
    }
    
    public DoubleTake.Common.Tasks.ActivityToken StartReplication(System.Guid jobId, System.Guid connectionId)
    {
        return base.Channel.StartReplication(jobId, connectionId);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> StartReplicationAsync(System.Guid jobId, System.Guid connectionId)
    {
        return base.Channel.StartReplicationAsync(jobId, connectionId);
    }
    
    public DoubleTake.Common.Tasks.ActivityToken StopReplication(System.Guid jobId, System.Guid connectionId)
    {
        return base.Channel.StopReplication(jobId, connectionId);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> StopReplicationAsync(System.Guid jobId, System.Guid connectionId)
    {
        return base.Channel.StopReplicationAsync(jobId, connectionId);
    }
    
    public DoubleTake.Common.Tasks.ActivityToken PauseTransmission(System.Guid jobId, System.Guid connectionId)
    {
        return base.Channel.PauseTransmission(jobId, connectionId);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> PauseTransmissionAsync(System.Guid jobId, System.Guid connectionId)
    {
        return base.Channel.PauseTransmissionAsync(jobId, connectionId);
    }
    
    public DoubleTake.Common.Tasks.ActivityToken ResumeTransmission(System.Guid jobId, System.Guid connectionId)
    {
        return base.Channel.ResumeTransmission(jobId, connectionId);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> ResumeTransmissionAsync(System.Guid jobId, System.Guid connectionId)
    {
        return base.Channel.ResumeTransmissionAsync(jobId, connectionId);
    }
    
    public DoubleTake.Common.Tasks.ActivityToken StartTransmission(System.Guid jobId, System.Guid connectionId)
    {
        return base.Channel.StartTransmission(jobId, connectionId);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> StartTransmissionAsync(System.Guid jobId, System.Guid connectionId)
    {
        return base.Channel.StartTransmissionAsync(jobId, connectionId);
    }
    
    public DoubleTake.Core.Contract.Connection.BandwidthLimit GetBandwidthLimit(System.Guid jobId, System.Guid connectionId)
    {
        return base.Channel.GetBandwidthLimit(jobId, connectionId);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.Connection.BandwidthLimit> GetBandwidthLimitAsync(System.Guid jobId, System.Guid connectionId)
    {
        return base.Channel.GetBandwidthLimitAsync(jobId, connectionId);
    }
    
    public DoubleTake.Common.Tasks.ActivityToken SetBandwidthLimit(System.Guid jobId, System.Guid connectionId, DoubleTake.Core.Contract.Connection.BandwidthLimit bandwidthLimit)
    {
        return base.Channel.SetBandwidthLimit(jobId, connectionId, bandwidthLimit);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> SetBandwidthLimitAsync(System.Guid jobId, System.Guid connectionId, DoubleTake.Core.Contract.Connection.BandwidthLimit bandwidthLimit)
    {
        return base.Channel.SetBandwidthLimitAsync(jobId, connectionId, bandwidthLimit);
    }
    
    public DoubleTake.Common.Tasks.ActivityToken PauseTargetOperations(System.Guid jobId, System.Guid connectionId)
    {
        return base.Channel.PauseTargetOperations(jobId, connectionId);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> PauseTargetOperationsAsync(System.Guid jobId, System.Guid connectionId)
    {
        return base.Channel.PauseTargetOperationsAsync(jobId, connectionId);
    }
    
    public DoubleTake.Common.Tasks.ActivityToken ResumeTargetOperations(System.Guid jobId, System.Guid connectionId)
    {
        return base.Channel.ResumeTargetOperations(jobId, connectionId);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> ResumeTargetOperationsAsync(System.Guid jobId, System.Guid connectionId)
    {
        return base.Channel.ResumeTargetOperationsAsync(jobId, connectionId);
    }
    
    public DoubleTake.Core.Contract.Connection.SnapshotEntry[] GetSnapshots(System.Guid jobId, System.Guid connectionId)
    {
        return base.Channel.GetSnapshots(jobId, connectionId);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.Connection.SnapshotEntry[]> GetSnapshotsAsync(System.Guid jobId, System.Guid connectionId)
    {
        return base.Channel.GetSnapshotsAsync(jobId, connectionId);
    }
    
    public DoubleTake.Common.Tasks.ActivityToken TakeSnapshot(System.Guid jobId, System.Guid connectionId)
    {
        return base.Channel.TakeSnapshot(jobId, connectionId);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> TakeSnapshotAsync(System.Guid jobId, System.Guid connectionId)
    {
        return base.Channel.TakeSnapshotAsync(jobId, connectionId);
    }
    
    public DoubleTake.Common.Tasks.ActivityToken DeleteSnapshot(System.Guid jobId, System.Guid connectionId, System.Guid snapshotId)
    {
        return base.Channel.DeleteSnapshot(jobId, connectionId, snapshotId);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> DeleteSnapshotAsync(System.Guid jobId, System.Guid connectionId, System.Guid snapshotId)
    {
        return base.Channel.DeleteSnapshotAsync(jobId, connectionId, snapshotId);
    }
    
    public DoubleTake.Common.Tasks.ActivityToken DeleteSnapshots(System.Guid jobId, System.Guid connectionId, DoubleTake.Core.Contract.Connection.SnapshotQuality snapshotQuality, DoubleTake.Core.Contract.Connection.SnapshotAge snapshotAge)
    {
        return base.Channel.DeleteSnapshots(jobId, connectionId, snapshotQuality, snapshotAge);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> DeleteSnapshotsAsync(System.Guid jobId, System.Guid connectionId, DoubleTake.Core.Contract.Connection.SnapshotQuality snapshotQuality, DoubleTake.Core.Contract.Connection.SnapshotAge snapshotAge)
    {
        return base.Channel.DeleteSnapshotsAsync(jobId, connectionId, snapshotQuality, snapshotAge);
    }
    
    public DoubleTake.Jobs.Contract.CoreConnectionDetails GetConnectionDetails(System.Guid jobId, System.Guid connectionId)
    {
        return base.Channel.GetConnectionDetails(jobId, connectionId);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Jobs.Contract.CoreConnectionDetails> GetConnectionDetailsAsync(System.Guid jobId, System.Guid connectionId)
    {
        return base.Channel.GetConnectionDetailsAsync(jobId, connectionId);
    }
    
    public DoubleTake.Common.Tasks.ActivityToken UpdateShares(System.Guid jobId)
    {
        return base.Channel.UpdateShares(jobId);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> UpdateSharesAsync(System.Guid jobId)
    {
        return base.Channel.UpdateSharesAsync(jobId);
    }
    
    public DoubleTake.Common.Tasks.ActivityToken QueueTask(System.Guid jobId, System.Guid connectionId, DoubleTake.Core.Contract.Connection.QueueTaskParameters queueTaskParameters)
    {
        return base.Channel.QueueTask(jobId, connectionId, queueTaskParameters);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> QueueTaskAsync(System.Guid jobId, System.Guid connectionId, DoubleTake.Core.Contract.Connection.QueueTaskParameters queueTaskParameters)
    {
        return base.Channel.QueueTaskAsync(jobId, connectionId, queueTaskParameters);
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace="http://www.doubletake.com/Jobs/Contract/JobConfigurationVerifierOperations", ConfigurationName="IJobConfigurationVerifier")]
public interface IJobConfigurationVerifier
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobConfigurationVerifierOperations/IJobCo" +
        "nfigurationVerifier/GetRecommendedJobOptions", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobConfigurationVerifierOperations/IJobCo" +
        "nfigurationVerifier/GetRecommendedJobOptionsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault), Action="http://www.doubletake.com/Jobs/Contract/JobConfigurationVerifierOperations/IJobCo" +
        "nfigurationVerifier/GetRecommendedJobOptionsInvalidOperationFaultFault", Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Jobs/Contract/JobConfigurationVerifierOperations/IJobCo" +
        "nfigurationVerifier/GetRecommendedJobOptionsCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Jobs.Contract.SourceQualificationFault), Action="http://www.doubletake.com/Jobs/Contract/JobConfigurationVerifierOperations/IJobCo" +
        "nfigurationVerifier/GetRecommendedJobOptionsSourceQualificationFaultFault", Name="SourceQualificationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Jobs.Contract")]
    DoubleTake.Jobs.Contract.RecommendedJobOptions GetRecommendedJobOptions(string jobType, DoubleTake.Common.Contract.Workload workload, DoubleTake.Jobs.Contract.JobCredentials jobCredentials);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobConfigurationVerifierOperations/IJobCo" +
        "nfigurationVerifier/GetRecommendedJobOptions", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobConfigurationVerifierOperations/IJobCo" +
        "nfigurationVerifier/GetRecommendedJobOptionsResponse")]
    System.Threading.Tasks.Task<DoubleTake.Jobs.Contract.RecommendedJobOptions> GetRecommendedJobOptionsAsync(string jobType, DoubleTake.Common.Contract.Workload workload, DoubleTake.Jobs.Contract.JobCredentials jobCredentials);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobConfigurationVerifierOperations/IJobCo" +
        "nfigurationVerifier/UpdateRecommendedJobOptions", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobConfigurationVerifierOperations/IJobCo" +
        "nfigurationVerifier/UpdateRecommendedJobOptionsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Jobs/Contract/JobConfigurationVerifierOperations/IJobCo" +
        "nfigurationVerifier/UpdateRecommendedJobOptionsCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Jobs.Contract.SourceQualificationFault), Action="http://www.doubletake.com/Jobs/Contract/JobConfigurationVerifierOperations/IJobCo" +
        "nfigurationVerifier/UpdateRecommendedJobOptionsSourceQualificationFaultFault", Name="SourceQualificationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Jobs.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault), Action="http://www.doubletake.com/Jobs/Contract/JobConfigurationVerifierOperations/IJobCo" +
        "nfigurationVerifier/UpdateRecommendedJobOptionsInvalidOperationFaultFault", Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Jobs.Contract.RecommendedJobOptions UpdateRecommendedJobOptions(string jobType, DoubleTake.Jobs.Contract.JobOptions currentOptions, DoubleTake.Common.Contract.Workload newWorkload, DoubleTake.Jobs.Contract.JobCredentials jobCredentials);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobConfigurationVerifierOperations/IJobCo" +
        "nfigurationVerifier/UpdateRecommendedJobOptions", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobConfigurationVerifierOperations/IJobCo" +
        "nfigurationVerifier/UpdateRecommendedJobOptionsResponse")]
    System.Threading.Tasks.Task<DoubleTake.Jobs.Contract.RecommendedJobOptions> UpdateRecommendedJobOptionsAsync(string jobType, DoubleTake.Jobs.Contract.JobOptions currentOptions, DoubleTake.Common.Contract.Workload newWorkload, DoubleTake.Jobs.Contract.JobCredentials jobCredentials);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobConfigurationVerifierOperations/IJobCo" +
        "nfigurationVerifier/VerifyJobOptions", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobConfigurationVerifierOperations/IJobCo" +
        "nfigurationVerifier/VerifyJobOptionsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Jobs/Contract/JobConfigurationVerifierOperations/IJobCo" +
        "nfigurationVerifier/VerifyJobOptionsCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault), Action="http://www.doubletake.com/Jobs/Contract/JobConfigurationVerifierOperations/IJobCo" +
        "nfigurationVerifier/VerifyJobOptionsInvalidOperationFaultFault", Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Common.Tasks.ActivityToken VerifyJobOptions(string jobType, DoubleTake.Jobs.Contract.JobOptions jobOptions, DoubleTake.Jobs.Contract.JobCredentials jobCredentials);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobConfigurationVerifierOperations/IJobCo" +
        "nfigurationVerifier/VerifyJobOptions", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobConfigurationVerifierOperations/IJobCo" +
        "nfigurationVerifier/VerifyJobOptionsResponse")]
    System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> VerifyJobOptionsAsync(string jobType, DoubleTake.Jobs.Contract.JobOptions jobOptions, DoubleTake.Jobs.Contract.JobCredentials jobCredentials);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobConfigurationVerifierOperations/IJobCo" +
        "nfigurationVerifier/FixJobOptions", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobConfigurationVerifierOperations/IJobCo" +
        "nfigurationVerifier/FixJobOptionsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault), Action="http://www.doubletake.com/Jobs/Contract/JobConfigurationVerifierOperations/IJobCo" +
        "nfigurationVerifier/FixJobOptionsInvalidOperationFaultFault", Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Jobs/Contract/JobConfigurationVerifierOperations/IJobCo" +
        "nfigurationVerifier/FixJobOptionsCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Common.Tasks.ActivityToken FixJobOptions(DoubleTake.Jobs.Contract1.VerificationStep[] stepsToFix, string jobType, DoubleTake.Jobs.Contract.JobOptions jobOptions, DoubleTake.Jobs.Contract.JobCredentials jobCredentials);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobConfigurationVerifierOperations/IJobCo" +
        "nfigurationVerifier/FixJobOptions", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobConfigurationVerifierOperations/IJobCo" +
        "nfigurationVerifier/FixJobOptionsResponse")]
    System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> FixJobOptionsAsync(DoubleTake.Jobs.Contract1.VerificationStep[] stepsToFix, string jobType, DoubleTake.Jobs.Contract.JobOptions jobOptions, DoubleTake.Jobs.Contract.JobCredentials jobCredentials);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobConfigurationVerifierOperations/IJobCo" +
        "nfigurationVerifier/GetVerificationStatus", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobConfigurationVerifierOperations/IJobCo" +
        "nfigurationVerifier/GetVerificationStatusResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault), Action="http://www.doubletake.com/Jobs/Contract/JobConfigurationVerifierOperations/IJobCo" +
        "nfigurationVerifier/GetVerificationStatusInvalidOperationFaultFault", Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Jobs/Contract/JobConfigurationVerifierOperations/IJobCo" +
        "nfigurationVerifier/GetVerificationStatusCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Jobs.Contract1.VerificationTaskStatus GetVerificationStatus(DoubleTake.Common.Tasks.ActivityToken taskToken);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobConfigurationVerifierOperations/IJobCo" +
        "nfigurationVerifier/GetVerificationStatus", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobConfigurationVerifierOperations/IJobCo" +
        "nfigurationVerifier/GetVerificationStatusResponse")]
    System.Threading.Tasks.Task<DoubleTake.Jobs.Contract1.VerificationTaskStatus> GetVerificationStatusAsync(DoubleTake.Common.Tasks.ActivityToken taskToken);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobConfigurationVerifierOperations/IJobCo" +
        "nfigurationVerifier/GetFixJobOptionsStatus", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobConfigurationVerifierOperations/IJobCo" +
        "nfigurationVerifier/GetFixJobOptionsStatusResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault), Action="http://www.doubletake.com/Jobs/Contract/JobConfigurationVerifierOperations/IJobCo" +
        "nfigurationVerifier/GetFixJobOptionsStatusInvalidOperationFaultFault", Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Jobs/Contract/JobConfigurationVerifierOperations/IJobCo" +
        "nfigurationVerifier/GetFixJobOptionsStatusCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Jobs.Contract1.FixJobOptionsTaskStatus GetFixJobOptionsStatus(DoubleTake.Common.Tasks.ActivityToken taskToken);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobConfigurationVerifierOperations/IJobCo" +
        "nfigurationVerifier/GetFixJobOptionsStatus", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobConfigurationVerifierOperations/IJobCo" +
        "nfigurationVerifier/GetFixJobOptionsStatusResponse")]
    System.Threading.Tasks.Task<DoubleTake.Jobs.Contract1.FixJobOptionsTaskStatus> GetFixJobOptionsStatusAsync(DoubleTake.Common.Tasks.ActivityToken taskToken);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobConfigurationVerifierOperations/IJobCo" +
        "nfigurationVerifier/GetRecommendedPathTransformations", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobConfigurationVerifierOperations/IJobCo" +
        "nfigurationVerifier/GetRecommendedPathTransformationsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Jobs/Contract/JobConfigurationVerifierOperations/IJobCo" +
        "nfigurationVerifier/GetRecommendedPathTransformationsArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault), Action="http://www.doubletake.com/Jobs/Contract/JobConfigurationVerifierOperations/IJobCo" +
        "nfigurationVerifier/GetRecommendedPathTransformationsInvalidOperationFaultFault", Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Jobs/Contract/JobConfigurationVerifierOperations/IJobCo" +
        "nfigurationVerifier/GetRecommendedPathTransformationsCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Core.Contract.PathTransformation[] GetRecommendedPathTransformations(DoubleTake.Common.Contract.Workload workload, string basePath);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobConfigurationVerifierOperations/IJobCo" +
        "nfigurationVerifier/GetRecommendedPathTransformations", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobConfigurationVerifierOperations/IJobCo" +
        "nfigurationVerifier/GetRecommendedPathTransformationsResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.PathTransformation[]> GetRecommendedPathTransformationsAsync(DoubleTake.Common.Contract.Workload workload, string basePath);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobConfigurationVerifierOperations/IJobCo" +
        "nfigurationVerifier/GetDnsOptionsWithWorkload", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobConfigurationVerifierOperations/IJobCo" +
        "nfigurationVerifier/GetDnsOptionsWithWorkloadResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault), Action="http://www.doubletake.com/Jobs/Contract/JobConfigurationVerifierOperations/IJobCo" +
        "nfigurationVerifier/GetDnsOptionsWithWorkloadInvalidOperationFaultFault", Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Jobs/Contract/JobConfigurationVerifierOperations/IJobCo" +
        "nfigurationVerifier/GetDnsOptionsWithWorkloadCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Jobs.Contract.DNSOptions GetDnsOptionsWithWorkload(string jobType, DoubleTake.Common.Contract.Workload workload, DoubleTake.Jobs.Contract.JobCredentials credentialsJob, DoubleTake.Core.Contract.Credentials credentialsDomain);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobConfigurationVerifierOperations/IJobCo" +
        "nfigurationVerifier/GetDnsOptionsWithWorkload", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobConfigurationVerifierOperations/IJobCo" +
        "nfigurationVerifier/GetDnsOptionsWithWorkloadResponse")]
    System.Threading.Tasks.Task<DoubleTake.Jobs.Contract.DNSOptions> GetDnsOptionsWithWorkloadAsync(string jobType, DoubleTake.Common.Contract.Workload workload, DoubleTake.Jobs.Contract.JobCredentials credentialsJob, DoubleTake.Core.Contract.Credentials credentialsDomain);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobConfigurationVerifierOperations/IJobCo" +
        "nfigurationVerifier/GetDnsOptions", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobConfigurationVerifierOperations/IJobCo" +
        "nfigurationVerifier/GetDnsOptionsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Jobs/Contract/JobConfigurationVerifierOperations/IJobCo" +
        "nfigurationVerifier/GetDnsOptionsCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault), Action="http://www.doubletake.com/Jobs/Contract/JobConfigurationVerifierOperations/IJobCo" +
        "nfigurationVerifier/GetDnsOptionsInvalidOperationFaultFault", Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Jobs.Contract.DNSOptions GetDnsOptions(DoubleTake.Jobs.Contract.JobCredentials jobCredentials, System.Net.NetworkCredential domainCredentials);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobConfigurationVerifierOperations/IJobCo" +
        "nfigurationVerifier/GetDnsOptions", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobConfigurationVerifierOperations/IJobCo" +
        "nfigurationVerifier/GetDnsOptionsResponse")]
    System.Threading.Tasks.Task<DoubleTake.Jobs.Contract.DNSOptions> GetDnsOptionsAsync(DoubleTake.Jobs.Contract.JobCredentials jobCredentials, System.Net.NetworkCredential domainCredentials);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IJobConfigurationVerifierChannel : IJobConfigurationVerifier, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class JobConfigurationVerifierClient : System.ServiceModel.ClientBase<IJobConfigurationVerifier>, IJobConfigurationVerifier
{
    
    public JobConfigurationVerifierClient()
    {
    }
    
    public JobConfigurationVerifierClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public JobConfigurationVerifierClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public JobConfigurationVerifierClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public JobConfigurationVerifierClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public DoubleTake.Jobs.Contract.RecommendedJobOptions GetRecommendedJobOptions(string jobType, DoubleTake.Common.Contract.Workload workload, DoubleTake.Jobs.Contract.JobCredentials jobCredentials)
    {
        return base.Channel.GetRecommendedJobOptions(jobType, workload, jobCredentials);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Jobs.Contract.RecommendedJobOptions> GetRecommendedJobOptionsAsync(string jobType, DoubleTake.Common.Contract.Workload workload, DoubleTake.Jobs.Contract.JobCredentials jobCredentials)
    {
        return base.Channel.GetRecommendedJobOptionsAsync(jobType, workload, jobCredentials);
    }
    
    public DoubleTake.Jobs.Contract.RecommendedJobOptions UpdateRecommendedJobOptions(string jobType, DoubleTake.Jobs.Contract.JobOptions currentOptions, DoubleTake.Common.Contract.Workload newWorkload, DoubleTake.Jobs.Contract.JobCredentials jobCredentials)
    {
        return base.Channel.UpdateRecommendedJobOptions(jobType, currentOptions, newWorkload, jobCredentials);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Jobs.Contract.RecommendedJobOptions> UpdateRecommendedJobOptionsAsync(string jobType, DoubleTake.Jobs.Contract.JobOptions currentOptions, DoubleTake.Common.Contract.Workload newWorkload, DoubleTake.Jobs.Contract.JobCredentials jobCredentials)
    {
        return base.Channel.UpdateRecommendedJobOptionsAsync(jobType, currentOptions, newWorkload, jobCredentials);
    }
    
    public DoubleTake.Common.Tasks.ActivityToken VerifyJobOptions(string jobType, DoubleTake.Jobs.Contract.JobOptions jobOptions, DoubleTake.Jobs.Contract.JobCredentials jobCredentials)
    {
        return base.Channel.VerifyJobOptions(jobType, jobOptions, jobCredentials);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> VerifyJobOptionsAsync(string jobType, DoubleTake.Jobs.Contract.JobOptions jobOptions, DoubleTake.Jobs.Contract.JobCredentials jobCredentials)
    {
        return base.Channel.VerifyJobOptionsAsync(jobType, jobOptions, jobCredentials);
    }
    
    public DoubleTake.Common.Tasks.ActivityToken FixJobOptions(DoubleTake.Jobs.Contract1.VerificationStep[] stepsToFix, string jobType, DoubleTake.Jobs.Contract.JobOptions jobOptions, DoubleTake.Jobs.Contract.JobCredentials jobCredentials)
    {
        return base.Channel.FixJobOptions(stepsToFix, jobType, jobOptions, jobCredentials);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> FixJobOptionsAsync(DoubleTake.Jobs.Contract1.VerificationStep[] stepsToFix, string jobType, DoubleTake.Jobs.Contract.JobOptions jobOptions, DoubleTake.Jobs.Contract.JobCredentials jobCredentials)
    {
        return base.Channel.FixJobOptionsAsync(stepsToFix, jobType, jobOptions, jobCredentials);
    }
    
    public DoubleTake.Jobs.Contract1.VerificationTaskStatus GetVerificationStatus(DoubleTake.Common.Tasks.ActivityToken taskToken)
    {
        return base.Channel.GetVerificationStatus(taskToken);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Jobs.Contract1.VerificationTaskStatus> GetVerificationStatusAsync(DoubleTake.Common.Tasks.ActivityToken taskToken)
    {
        return base.Channel.GetVerificationStatusAsync(taskToken);
    }
    
    public DoubleTake.Jobs.Contract1.FixJobOptionsTaskStatus GetFixJobOptionsStatus(DoubleTake.Common.Tasks.ActivityToken taskToken)
    {
        return base.Channel.GetFixJobOptionsStatus(taskToken);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Jobs.Contract1.FixJobOptionsTaskStatus> GetFixJobOptionsStatusAsync(DoubleTake.Common.Tasks.ActivityToken taskToken)
    {
        return base.Channel.GetFixJobOptionsStatusAsync(taskToken);
    }
    
    public DoubleTake.Core.Contract.PathTransformation[] GetRecommendedPathTransformations(DoubleTake.Common.Contract.Workload workload, string basePath)
    {
        return base.Channel.GetRecommendedPathTransformations(workload, basePath);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.PathTransformation[]> GetRecommendedPathTransformationsAsync(DoubleTake.Common.Contract.Workload workload, string basePath)
    {
        return base.Channel.GetRecommendedPathTransformationsAsync(workload, basePath);
    }
    
    public DoubleTake.Jobs.Contract.DNSOptions GetDnsOptionsWithWorkload(string jobType, DoubleTake.Common.Contract.Workload workload, DoubleTake.Jobs.Contract.JobCredentials credentialsJob, DoubleTake.Core.Contract.Credentials credentialsDomain)
    {
        return base.Channel.GetDnsOptionsWithWorkload(jobType, workload, credentialsJob, credentialsDomain);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Jobs.Contract.DNSOptions> GetDnsOptionsWithWorkloadAsync(string jobType, DoubleTake.Common.Contract.Workload workload, DoubleTake.Jobs.Contract.JobCredentials credentialsJob, DoubleTake.Core.Contract.Credentials credentialsDomain)
    {
        return base.Channel.GetDnsOptionsWithWorkloadAsync(jobType, workload, credentialsJob, credentialsDomain);
    }
    
    public DoubleTake.Jobs.Contract.DNSOptions GetDnsOptions(DoubleTake.Jobs.Contract.JobCredentials jobCredentials, System.Net.NetworkCredential domainCredentials)
    {
        return base.Channel.GetDnsOptions(jobCredentials, domainCredentials);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Jobs.Contract.DNSOptions> GetDnsOptionsAsync(DoubleTake.Jobs.Contract.JobCredentials jobCredentials, System.Net.NetworkCredential domainCredentials)
    {
        return base.Channel.GetDnsOptionsAsync(jobCredentials, domainCredentials);
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace="http://www.doubletake.com/Jobs/Contract/JobDiscoveryOperations", ConfigurationName="IJobDiscovery")]
public interface IJobDiscovery
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobDiscoveryOperations/IJobDiscovery/GetC" +
        "onnections", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobDiscoveryOperations/IJobDiscovery/GetC" +
        "onnectionsResponse")]
    DoubleTake.Jobs.Contract.EngineConnectionInfo[] GetConnections();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobDiscoveryOperations/IJobDiscovery/GetC" +
        "onnections", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobDiscoveryOperations/IJobDiscovery/GetC" +
        "onnectionsResponse")]
    System.Threading.Tasks.Task<DoubleTake.Jobs.Contract.EngineConnectionInfo[]> GetConnectionsAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobDiscoveryOperations/IJobDiscovery/Conn" +
        "ectionExists", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobDiscoveryOperations/IJobDiscovery/Conn" +
        "ectionExistsResponse")]
    bool ConnectionExists(int engineConnectionId, string replicationSetName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobDiscoveryOperations/IJobDiscovery/Conn" +
        "ectionExists", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobDiscoveryOperations/IJobDiscovery/Conn" +
        "ectionExistsResponse")]
    System.Threading.Tasks.Task<bool> ConnectionExistsAsync(int engineConnectionId, string replicationSetName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobDiscoveryOperations/IJobDiscovery/GetJ" +
        "obIds", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobDiscoveryOperations/IJobDiscovery/GetJ" +
        "obIdsResponse")]
    System.Guid[] GetJobIds();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobDiscoveryOperations/IJobDiscovery/GetJ" +
        "obIds", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobDiscoveryOperations/IJobDiscovery/GetJ" +
        "obIdsResponse")]
    System.Threading.Tasks.Task<System.Guid[]> GetJobIdsAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobDiscoveryOperations/IJobDiscovery/JobE" +
        "xists", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobDiscoveryOperations/IJobDiscovery/JobE" +
        "xistsResponse")]
    bool JobExists(System.Guid jobId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobDiscoveryOperations/IJobDiscovery/JobE" +
        "xists", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobDiscoveryOperations/IJobDiscovery/JobE" +
        "xistsResponse")]
    System.Threading.Tasks.Task<bool> JobExistsAsync(System.Guid jobId);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IJobDiscoveryChannel : IJobDiscovery, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class JobDiscoveryClient : System.ServiceModel.ClientBase<IJobDiscovery>, IJobDiscovery
{
    
    public JobDiscoveryClient()
    {
    }
    
    public JobDiscoveryClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public JobDiscoveryClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public JobDiscoveryClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public JobDiscoveryClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public DoubleTake.Jobs.Contract.EngineConnectionInfo[] GetConnections()
    {
        return base.Channel.GetConnections();
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Jobs.Contract.EngineConnectionInfo[]> GetConnectionsAsync()
    {
        return base.Channel.GetConnectionsAsync();
    }
    
    public bool ConnectionExists(int engineConnectionId, string replicationSetName)
    {
        return base.Channel.ConnectionExists(engineConnectionId, replicationSetName);
    }
    
    public System.Threading.Tasks.Task<bool> ConnectionExistsAsync(int engineConnectionId, string replicationSetName)
    {
        return base.Channel.ConnectionExistsAsync(engineConnectionId, replicationSetName);
    }
    
    public System.Guid[] GetJobIds()
    {
        return base.Channel.GetJobIds();
    }
    
    public System.Threading.Tasks.Task<System.Guid[]> GetJobIdsAsync()
    {
        return base.Channel.GetJobIdsAsync();
    }
    
    public bool JobExists(System.Guid jobId)
    {
        return base.Channel.JobExists(jobId);
    }
    
    public System.Threading.Tasks.Task<bool> JobExistsAsync(System.Guid jobId)
    {
        return base.Channel.JobExistsAsync(jobId);
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace="http://www.doubletake.com/Jobs/Contract/JobManagerOperations", ConfigurationName="IJobManager")]
public interface IJobManager
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/Add", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/AddRespo" +
        "nse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/AddInval" +
        "idOperationFaultFault", Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/AddCommo" +
        "nFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/AddArgum" +
        "entFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    System.Guid Add(DoubleTake.Jobs.Contract.JobInfo jobInfo);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/Add", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/AddRespo" +
        "nse")]
    System.Threading.Tasks.Task<System.Guid> AddAsync(DoubleTake.Jobs.Contract.JobInfo jobInfo);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/Create", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/CreateRe" +
        "sponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/CreateCo" +
        "mmonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/CreateAr" +
        "gumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/CreateIn" +
        "validOperationFaultFault", Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/CreateAc" +
        "cessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    System.Guid Create(DoubleTake.Jobs.Contract.CreateOptions createOptions, System.Guid requestId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/Create", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/CreateRe" +
        "sponse")]
    System.Threading.Tasks.Task<System.Guid> CreateAsync(DoubleTake.Jobs.Contract.CreateOptions createOptions, System.Guid requestId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/Delete", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/DeleteRe" +
        "sponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/DeleteIn" +
        "validOperationFaultFault", Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/DeleteAc" +
        "cessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/DeleteCo" +
        "mmonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/DeleteAr" +
        "gumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Common.Tasks.ActivityToken Delete(System.Guid jobId, DoubleTake.Jobs.Contract.DeleteOptions deleteOptions);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/Delete", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/DeleteRe" +
        "sponse")]
    System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> DeleteAsync(System.Guid jobId, DoubleTake.Jobs.Contract.DeleteOptions deleteOptions);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/Edit", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/EditResp" +
        "onse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/EditAcce" +
        "ssLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/EditComm" +
        "onFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/EditArgu" +
        "mentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/EditInva" +
        "lidOperationFaultFault", Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Common.Tasks.ActivityToken Edit(System.Guid jobId, DoubleTake.Jobs.Contract.JobOptions jobOptions, System.Guid requestId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/Edit", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/EditResp" +
        "onse")]
    System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> EditAsync(System.Guid jobId, DoubleTake.Jobs.Contract.JobOptions jobOptions, System.Guid requestId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetQuali" +
        "ficationResults", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetQuali" +
        "ficationResultsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetQuali" +
        "ficationResultsCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetQuali" +
        "ficationResultsArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetQuali" +
        "ficationResultsInvalidOperationFaultFault", Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetQuali" +
        "ficationResultsAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Jobs.Contract.JobQualificationResults GetQualificationResults(System.Guid jobId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetQuali" +
        "ficationResults", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetQuali" +
        "ficationResultsResponse")]
    System.Threading.Tasks.Task<DoubleTake.Jobs.Contract.JobQualificationResults> GetQualificationResultsAsync(System.Guid jobId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/UpdateRe" +
        "commendedJobOptions", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/UpdateRe" +
        "commendedJobOptionsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/UpdateRe" +
        "commendedJobOptionsArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/UpdateRe" +
        "commendedJobOptionsInvalidOperationFaultFault", Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/UpdateRe" +
        "commendedJobOptionsAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/UpdateRe" +
        "commendedJobOptionsCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Jobs.Contract.RecommendedJobOptions UpdateRecommendedJobOptions(System.Guid jobId, DoubleTake.Jobs.Contract.JobOptions candidateOptions, DoubleTake.Common.Contract.Workload newWorkload);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/UpdateRe" +
        "commendedJobOptions", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/UpdateRe" +
        "commendedJobOptionsResponse")]
    System.Threading.Tasks.Task<DoubleTake.Jobs.Contract.RecommendedJobOptions> UpdateRecommendedJobOptionsAsync(System.Guid jobId, DoubleTake.Jobs.Contract.JobOptions candidateOptions, DoubleTake.Common.Contract.Workload newWorkload);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/VerifyJo" +
        "bOptions", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/VerifyJo" +
        "bOptionsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/VerifyJo" +
        "bOptionsAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/VerifyJo" +
        "bOptionsCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/VerifyJo" +
        "bOptionsArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/VerifyJo" +
        "bOptionsInvalidOperationFaultFault", Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Common.Tasks.ActivityToken VerifyJobOptions(System.Guid jobId, DoubleTake.Jobs.Contract.JobOptions jobOptions);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/VerifyJo" +
        "bOptions", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/VerifyJo" +
        "bOptionsResponse")]
    System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> VerifyJobOptionsAsync(System.Guid jobId, DoubleTake.Jobs.Contract.JobOptions jobOptions);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/FixJobOp" +
        "tions", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/FixJobOp" +
        "tionsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/FixJobOp" +
        "tionsCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/FixJobOp" +
        "tionsArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/FixJobOp" +
        "tionsInvalidOperationFaultFault", Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/FixJobOp" +
        "tionsAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Common.Tasks.ActivityToken FixJobOptions(DoubleTake.Jobs.Contract1.VerificationStep[] stepsToFix, System.Guid jobId, DoubleTake.Jobs.Contract.JobOptions jobOptions);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/FixJobOp" +
        "tions", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/FixJobOp" +
        "tionsResponse")]
    System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> FixJobOptionsAsync(DoubleTake.Jobs.Contract1.VerificationStep[] stepsToFix, System.Guid jobId, DoubleTake.Jobs.Contract.JobOptions jobOptions);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetJob", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetJobRe" +
        "sponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetJobIn" +
        "validOperationFaultFault", Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetJobAc" +
        "cessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetJobCo" +
        "mmonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetJobAr" +
        "gumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Jobs.Contract.JobInfo GetJob(System.Guid jobId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetJob", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetJobRe" +
        "sponse")]
    System.Threading.Tasks.Task<DoubleTake.Jobs.Contract.JobInfo> GetJobAsync(System.Guid jobId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetJobs", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetJobsR" +
        "esponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetJobsC" +
        "ommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetJobsA" +
        "ccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Jobs.Contract.JobInfo[] GetJobs();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetJobs", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetJobsR" +
        "esponse")]
    System.Threading.Tasks.Task<DoubleTake.Jobs.Contract.JobInfo[]> GetJobsAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/Start", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/StartRes" +
        "ponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/StartArg" +
        "umentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/StartCom" +
        "monFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/StartInv" +
        "alidOperationFaultFault", Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/StartAcc" +
        "essLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Common.Tasks.ActivityToken Start(System.Guid jobId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/Start", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/StartRes" +
        "ponse")]
    System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> StartAsync(System.Guid jobId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/Stop", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/StopResp" +
        "onse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/StopInva" +
        "lidOperationFaultFault", Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/StopComm" +
        "onFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/StopArgu" +
        "mentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/StopAcce" +
        "ssLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Common.Tasks.ActivityToken Stop(System.Guid jobId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/Stop", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/StopResp" +
        "onse")]
    System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> StopAsync(System.Guid jobId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/Pause", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/PauseRes" +
        "ponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/PauseCom" +
        "monFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/PauseArg" +
        "umentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/PauseInv" +
        "alidOperationFaultFault", Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/PauseAcc" +
        "essLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Common.Tasks.ActivityToken Pause(System.Guid jobId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/Pause", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/PauseRes" +
        "ponse")]
    System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> PauseAsync(System.Guid jobId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/Failover" +
        "", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/Failover" +
        "Response")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/Failover" +
        "ArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/Failover" +
        "InvalidOperationFaultFault", Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/Failover" +
        "AccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/Failover" +
        "CommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Common.Tasks.ActivityToken Failover(System.Guid jobId, DoubleTake.Jobs.Contract.FailoverOptions parameters);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/Failover" +
        "", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/Failover" +
        "Response")]
    System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> FailoverAsync(System.Guid jobId, DoubleTake.Jobs.Contract.FailoverOptions parameters);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetRecom" +
        "mendedFailoverOptions", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetRecom" +
        "mendedFailoverOptionsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetRecom" +
        "mendedFailoverOptionsArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetRecom" +
        "mendedFailoverOptionsInvalidOperationFaultFault", Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetRecom" +
        "mendedFailoverOptionsAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetRecom" +
        "mendedFailoverOptionsCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Jobs.Contract.RecommendedFailoverOptions GetRecommendedFailoverOptions(System.Guid jobId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetRecom" +
        "mendedFailoverOptions", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetRecom" +
        "mendedFailoverOptionsResponse")]
    System.Threading.Tasks.Task<DoubleTake.Jobs.Contract.RecommendedFailoverOptions> GetRecommendedFailoverOptionsAsync(System.Guid jobId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/VerifyFa" +
        "iloverOptions", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/VerifyFa" +
        "iloverOptionsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/VerifyFa" +
        "iloverOptionsInvalidOperationFaultFault", Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/VerifyFa" +
        "iloverOptionsAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/VerifyFa" +
        "iloverOptionsCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/VerifyFa" +
        "iloverOptionsArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Common.Tasks.ActivityToken VerifyFailoverOptions(System.Guid jobId, DoubleTake.Jobs.Contract.FailoverOptions failoverOptions);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/VerifyFa" +
        "iloverOptions", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/VerifyFa" +
        "iloverOptionsResponse")]
    System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> VerifyFailoverOptionsAsync(System.Guid jobId, DoubleTake.Jobs.Contract.FailoverOptions failoverOptions);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/Failback" +
        "", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/Failback" +
        "Response")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/Failback" +
        "InvalidOperationFaultFault", Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/Failback" +
        "ArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/Failback" +
        "CommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/Failback" +
        "AccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Common.Tasks.ActivityToken Failback(System.Guid jobId, DoubleTake.Jobs.Contract.FailbackOptions parameters);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/Failback" +
        "", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/Failback" +
        "Response")]
    System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> FailbackAsync(System.Guid jobId, DoubleTake.Jobs.Contract.FailbackOptions parameters);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetRecom" +
        "mendedFailbackOptions", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetRecom" +
        "mendedFailbackOptionsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetRecom" +
        "mendedFailbackOptionsCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetRecom" +
        "mendedFailbackOptionsArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetRecom" +
        "mendedFailbackOptionsInvalidOperationFaultFault", Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetRecom" +
        "mendedFailbackOptionsAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Jobs.Contract.RecommendedFailbackOptions GetRecommendedFailbackOptions(System.Guid jobId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetRecom" +
        "mendedFailbackOptions", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetRecom" +
        "mendedFailbackOptionsResponse")]
    System.Threading.Tasks.Task<DoubleTake.Jobs.Contract.RecommendedFailbackOptions> GetRecommendedFailbackOptionsAsync(System.Guid jobId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/VerifyFa" +
        "ilbackOptions", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/VerifyFa" +
        "ilbackOptionsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/VerifyFa" +
        "ilbackOptionsAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/VerifyFa" +
        "ilbackOptionsArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/VerifyFa" +
        "ilbackOptionsCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/VerifyFa" +
        "ilbackOptionsInvalidOperationFaultFault", Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Common.Tasks.ActivityToken VerifyFailbackOptions(System.Guid jobId, DoubleTake.Jobs.Contract.FailbackOptions failbackOptions);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/VerifyFa" +
        "ilbackOptions", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/VerifyFa" +
        "ilbackOptionsResponse")]
    System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> VerifyFailbackOptionsAsync(System.Guid jobId, DoubleTake.Jobs.Contract.FailbackOptions failbackOptions);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/Restore", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/RestoreR" +
        "esponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/RestoreC" +
        "ommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/RestoreA" +
        "rgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/RestoreI" +
        "nvalidOperationFaultFault", Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/RestoreA" +
        "ccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Common.Tasks.ActivityToken Restore(System.Guid jobId, DoubleTake.Jobs.Contract.RestoreOptions parameters);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/Restore", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/RestoreR" +
        "esponse")]
    System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> RestoreAsync(System.Guid jobId, DoubleTake.Jobs.Contract.RestoreOptions parameters);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetRecom" +
        "mendedRestoreOptions", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetRecom" +
        "mendedRestoreOptionsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetRecom" +
        "mendedRestoreOptionsInvalidOperationFaultFault", Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetRecom" +
        "mendedRestoreOptionsCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetRecom" +
        "mendedRestoreOptionsArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetRecom" +
        "mendedRestoreOptionsAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Jobs.Contract.RecommendedRestoreOptions GetRecommendedRestoreOptions(System.Guid jobId, DoubleTake.Jobs.Contract.JobCredentials credentials);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetRecom" +
        "mendedRestoreOptions", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetRecom" +
        "mendedRestoreOptionsResponse")]
    System.Threading.Tasks.Task<DoubleTake.Jobs.Contract.RecommendedRestoreOptions> GetRecommendedRestoreOptionsAsync(System.Guid jobId, DoubleTake.Jobs.Contract.JobCredentials credentials);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/VerifyRe" +
        "storeOptions", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/VerifyRe" +
        "storeOptionsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/VerifyRe" +
        "storeOptionsCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/VerifyRe" +
        "storeOptionsArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/VerifyRe" +
        "storeOptionsInvalidOperationFaultFault", Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/VerifyRe" +
        "storeOptionsAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Common.Tasks.ActivityToken VerifyRestoreOptions(System.Guid jobId, DoubleTake.Jobs.Contract.RestoreOptions restoreOptions);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/VerifyRe" +
        "storeOptions", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/VerifyRe" +
        "storeOptionsResponse")]
    System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> VerifyRestoreOptionsAsync(System.Guid jobId, DoubleTake.Jobs.Contract.RestoreOptions restoreOptions);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/Reverse", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/ReverseR" +
        "esponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/ReverseI" +
        "nvalidOperationFaultFault", Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/ReverseA" +
        "rgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/ReverseC" +
        "ommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/ReverseA" +
        "ccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Common.Tasks.ActivityToken Reverse(System.Guid jobId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/Reverse", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/ReverseR" +
        "esponse")]
    System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> ReverseAsync(System.Guid jobId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/UndoFail" +
        "over", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/UndoFail" +
        "overResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/UndoFail" +
        "overCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/UndoFail" +
        "overInvalidOperationFaultFault", Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/UndoFail" +
        "overAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/UndoFail" +
        "overArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Common.Tasks.ActivityToken UndoFailover(System.Guid jobId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/UndoFail" +
        "over", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/UndoFail" +
        "overResponse")]
    System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> UndoFailoverAsync(System.Guid jobId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetVerif" +
        "icationStatus", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetVerif" +
        "icationStatusResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetVerif" +
        "icationStatusInvalidOperationFaultFault", Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetVerif" +
        "icationStatusAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetVerif" +
        "icationStatusCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetVerif" +
        "icationStatusArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Jobs.Contract1.VerificationTaskStatus GetVerificationStatus(DoubleTake.Common.Tasks.ActivityToken taskToken);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetVerif" +
        "icationStatus", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetVerif" +
        "icationStatusResponse")]
    System.Threading.Tasks.Task<DoubleTake.Jobs.Contract1.VerificationTaskStatus> GetVerificationStatusAsync(DoubleTake.Common.Tasks.ActivityToken taskToken);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetFixJo" +
        "bOptionsStatus", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetFixJo" +
        "bOptionsStatusResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetFixJo" +
        "bOptionsStatusCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetFixJo" +
        "bOptionsStatusAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetFixJo" +
        "bOptionsStatusArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetFixJo" +
        "bOptionsStatusInvalidOperationFaultFault", Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Jobs.Contract1.FixJobOptionsTaskStatus GetFixJobOptionsStatus(DoubleTake.Common.Tasks.ActivityToken taskToken);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetFixJo" +
        "bOptionsStatus", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetFixJo" +
        "bOptionsStatusResponse")]
    System.Threading.Tasks.Task<DoubleTake.Jobs.Contract1.FixJobOptionsTaskStatus> GetFixJobOptionsStatusAsync(DoubleTake.Common.Tasks.ActivityToken taskToken);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/UpdateCr" +
        "edentials", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/UpdateCr" +
        "edentialsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/UpdateCr" +
        "edentialsArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/UpdateCr" +
        "edentialsAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/UpdateCr" +
        "edentialsCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/UpdateCr" +
        "edentialsInvalidOperationFaultFault", Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Common.Tasks.ActivityToken UpdateCredentials(System.Guid jobId, DoubleTake.Jobs.Contract.JobCredentials credentials);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/UpdateCr" +
        "edentials", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/UpdateCr" +
        "edentialsResponse")]
    System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> UpdateCredentialsAsync(System.Guid jobId, DoubleTake.Jobs.Contract.JobCredentials credentials);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/PersistS" +
        "hares", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/PersistS" +
        "haresResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/PersistS" +
        "haresCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/PersistS" +
        "haresArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/PersistS" +
        "haresInvalidOperationFaultFault", Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/PersistS" +
        "haresAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Common.Tasks.ActivityToken PersistShares(System.Guid jobId, DoubleTake.Monitoring.Contract.Share[] shares);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/PersistS" +
        "hares", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/PersistS" +
        "haresResponse")]
    System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> PersistSharesAsync(System.Guid jobId, DoubleTake.Monitoring.Contract.Share[] shares);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetActio" +
        "nStatus", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetActio" +
        "nStatusResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetActio" +
        "nStatusInvalidOperationFaultFault", Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetActio" +
        "nStatusArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetActio" +
        "nStatusAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetActio" +
        "nStatusCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Common.Tasks.ActivityStatusEntry GetActionStatus(DoubleTake.Common.Tasks.ActivityToken taskToken);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetActio" +
        "nStatus", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetActio" +
        "nStatusResponse")]
    System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityStatusEntry> GetActionStatusAsync(DoubleTake.Common.Tasks.ActivityToken taskToken);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetActio" +
        "nStatuses", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetActio" +
        "nStatusesResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.ArgumentFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetActio" +
        "nStatusesArgumentFaultFault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.InvalidOperationFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetActio" +
        "nStatusesInvalidOperationFaultFault", Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetActio" +
        "nStatusesAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetActio" +
        "nStatusesCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Common.Tasks.ActivityStatusEntry[] GetActionStatuses(System.Guid jobId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetActio" +
        "nStatuses", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetActio" +
        "nStatusesResponse")]
    System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityStatusEntry[]> GetActionStatusesAsync(System.Guid jobId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetLogMe" +
        "ssages", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetLogMe" +
        "ssagesResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.AccessLevelRequiredFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetLogMe" +
        "ssagesAccessLevelRequiredFaultFault", Name="AccessLevelRequiredFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetLogMe" +
        "ssagesCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    www.doubletake.com.Common.Contract.LogMessage[] GetLogMessages(System.Guid jobId, int chunkSize, string source, int hash, System.DateTimeOffset lastTimestamp);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetLogMe" +
        "ssages", ReplyAction="http://www.doubletake.com/Jobs/Contract/JobManagerOperations/IJobManager/GetLogMe" +
        "ssagesResponse")]
    System.Threading.Tasks.Task<www.doubletake.com.Common.Contract.LogMessage[]> GetLogMessagesAsync(System.Guid jobId, int chunkSize, string source, int hash, System.DateTimeOffset lastTimestamp);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IJobManagerChannel : IJobManager, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class JobManagerClient : System.ServiceModel.ClientBase<IJobManager>, IJobManager
{
    
    public JobManagerClient()
    {
    }
    
    public JobManagerClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public JobManagerClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public JobManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public JobManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public System.Guid Add(DoubleTake.Jobs.Contract.JobInfo jobInfo)
    {
        return base.Channel.Add(jobInfo);
    }
    
    public System.Threading.Tasks.Task<System.Guid> AddAsync(DoubleTake.Jobs.Contract.JobInfo jobInfo)
    {
        return base.Channel.AddAsync(jobInfo);
    }
    
    public System.Guid Create(DoubleTake.Jobs.Contract.CreateOptions createOptions, System.Guid requestId)
    {
        return base.Channel.Create(createOptions, requestId);
    }
    
    public System.Threading.Tasks.Task<System.Guid> CreateAsync(DoubleTake.Jobs.Contract.CreateOptions createOptions, System.Guid requestId)
    {
        return base.Channel.CreateAsync(createOptions, requestId);
    }
    
    public DoubleTake.Common.Tasks.ActivityToken Delete(System.Guid jobId, DoubleTake.Jobs.Contract.DeleteOptions deleteOptions)
    {
        return base.Channel.Delete(jobId, deleteOptions);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> DeleteAsync(System.Guid jobId, DoubleTake.Jobs.Contract.DeleteOptions deleteOptions)
    {
        return base.Channel.DeleteAsync(jobId, deleteOptions);
    }
    
    public DoubleTake.Common.Tasks.ActivityToken Edit(System.Guid jobId, DoubleTake.Jobs.Contract.JobOptions jobOptions, System.Guid requestId)
    {
        return base.Channel.Edit(jobId, jobOptions, requestId);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> EditAsync(System.Guid jobId, DoubleTake.Jobs.Contract.JobOptions jobOptions, System.Guid requestId)
    {
        return base.Channel.EditAsync(jobId, jobOptions, requestId);
    }
    
    public DoubleTake.Jobs.Contract.JobQualificationResults GetQualificationResults(System.Guid jobId)
    {
        return base.Channel.GetQualificationResults(jobId);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Jobs.Contract.JobQualificationResults> GetQualificationResultsAsync(System.Guid jobId)
    {
        return base.Channel.GetQualificationResultsAsync(jobId);
    }
    
    public DoubleTake.Jobs.Contract.RecommendedJobOptions UpdateRecommendedJobOptions(System.Guid jobId, DoubleTake.Jobs.Contract.JobOptions candidateOptions, DoubleTake.Common.Contract.Workload newWorkload)
    {
        return base.Channel.UpdateRecommendedJobOptions(jobId, candidateOptions, newWorkload);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Jobs.Contract.RecommendedJobOptions> UpdateRecommendedJobOptionsAsync(System.Guid jobId, DoubleTake.Jobs.Contract.JobOptions candidateOptions, DoubleTake.Common.Contract.Workload newWorkload)
    {
        return base.Channel.UpdateRecommendedJobOptionsAsync(jobId, candidateOptions, newWorkload);
    }
    
    public DoubleTake.Common.Tasks.ActivityToken VerifyJobOptions(System.Guid jobId, DoubleTake.Jobs.Contract.JobOptions jobOptions)
    {
        return base.Channel.VerifyJobOptions(jobId, jobOptions);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> VerifyJobOptionsAsync(System.Guid jobId, DoubleTake.Jobs.Contract.JobOptions jobOptions)
    {
        return base.Channel.VerifyJobOptionsAsync(jobId, jobOptions);
    }
    
    public DoubleTake.Common.Tasks.ActivityToken FixJobOptions(DoubleTake.Jobs.Contract1.VerificationStep[] stepsToFix, System.Guid jobId, DoubleTake.Jobs.Contract.JobOptions jobOptions)
    {
        return base.Channel.FixJobOptions(stepsToFix, jobId, jobOptions);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> FixJobOptionsAsync(DoubleTake.Jobs.Contract1.VerificationStep[] stepsToFix, System.Guid jobId, DoubleTake.Jobs.Contract.JobOptions jobOptions)
    {
        return base.Channel.FixJobOptionsAsync(stepsToFix, jobId, jobOptions);
    }
    
    public DoubleTake.Jobs.Contract.JobInfo GetJob(System.Guid jobId)
    {
        return base.Channel.GetJob(jobId);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Jobs.Contract.JobInfo> GetJobAsync(System.Guid jobId)
    {
        return base.Channel.GetJobAsync(jobId);
    }
    
    public DoubleTake.Jobs.Contract.JobInfo[] GetJobs()
    {
        return base.Channel.GetJobs();
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Jobs.Contract.JobInfo[]> GetJobsAsync()
    {
        return base.Channel.GetJobsAsync();
    }
    
    public DoubleTake.Common.Tasks.ActivityToken Start(System.Guid jobId)
    {
        return base.Channel.Start(jobId);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> StartAsync(System.Guid jobId)
    {
        return base.Channel.StartAsync(jobId);
    }
    
    public DoubleTake.Common.Tasks.ActivityToken Stop(System.Guid jobId)
    {
        return base.Channel.Stop(jobId);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> StopAsync(System.Guid jobId)
    {
        return base.Channel.StopAsync(jobId);
    }
    
    public DoubleTake.Common.Tasks.ActivityToken Pause(System.Guid jobId)
    {
        return base.Channel.Pause(jobId);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> PauseAsync(System.Guid jobId)
    {
        return base.Channel.PauseAsync(jobId);
    }
    
    public DoubleTake.Common.Tasks.ActivityToken Failover(System.Guid jobId, DoubleTake.Jobs.Contract.FailoverOptions parameters)
    {
        return base.Channel.Failover(jobId, parameters);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> FailoverAsync(System.Guid jobId, DoubleTake.Jobs.Contract.FailoverOptions parameters)
    {
        return base.Channel.FailoverAsync(jobId, parameters);
    }
    
    public DoubleTake.Jobs.Contract.RecommendedFailoverOptions GetRecommendedFailoverOptions(System.Guid jobId)
    {
        return base.Channel.GetRecommendedFailoverOptions(jobId);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Jobs.Contract.RecommendedFailoverOptions> GetRecommendedFailoverOptionsAsync(System.Guid jobId)
    {
        return base.Channel.GetRecommendedFailoverOptionsAsync(jobId);
    }
    
    public DoubleTake.Common.Tasks.ActivityToken VerifyFailoverOptions(System.Guid jobId, DoubleTake.Jobs.Contract.FailoverOptions failoverOptions)
    {
        return base.Channel.VerifyFailoverOptions(jobId, failoverOptions);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> VerifyFailoverOptionsAsync(System.Guid jobId, DoubleTake.Jobs.Contract.FailoverOptions failoverOptions)
    {
        return base.Channel.VerifyFailoverOptionsAsync(jobId, failoverOptions);
    }
    
    public DoubleTake.Common.Tasks.ActivityToken Failback(System.Guid jobId, DoubleTake.Jobs.Contract.FailbackOptions parameters)
    {
        return base.Channel.Failback(jobId, parameters);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> FailbackAsync(System.Guid jobId, DoubleTake.Jobs.Contract.FailbackOptions parameters)
    {
        return base.Channel.FailbackAsync(jobId, parameters);
    }
    
    public DoubleTake.Jobs.Contract.RecommendedFailbackOptions GetRecommendedFailbackOptions(System.Guid jobId)
    {
        return base.Channel.GetRecommendedFailbackOptions(jobId);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Jobs.Contract.RecommendedFailbackOptions> GetRecommendedFailbackOptionsAsync(System.Guid jobId)
    {
        return base.Channel.GetRecommendedFailbackOptionsAsync(jobId);
    }
    
    public DoubleTake.Common.Tasks.ActivityToken VerifyFailbackOptions(System.Guid jobId, DoubleTake.Jobs.Contract.FailbackOptions failbackOptions)
    {
        return base.Channel.VerifyFailbackOptions(jobId, failbackOptions);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> VerifyFailbackOptionsAsync(System.Guid jobId, DoubleTake.Jobs.Contract.FailbackOptions failbackOptions)
    {
        return base.Channel.VerifyFailbackOptionsAsync(jobId, failbackOptions);
    }
    
    public DoubleTake.Common.Tasks.ActivityToken Restore(System.Guid jobId, DoubleTake.Jobs.Contract.RestoreOptions parameters)
    {
        return base.Channel.Restore(jobId, parameters);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> RestoreAsync(System.Guid jobId, DoubleTake.Jobs.Contract.RestoreOptions parameters)
    {
        return base.Channel.RestoreAsync(jobId, parameters);
    }
    
    public DoubleTake.Jobs.Contract.RecommendedRestoreOptions GetRecommendedRestoreOptions(System.Guid jobId, DoubleTake.Jobs.Contract.JobCredentials credentials)
    {
        return base.Channel.GetRecommendedRestoreOptions(jobId, credentials);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Jobs.Contract.RecommendedRestoreOptions> GetRecommendedRestoreOptionsAsync(System.Guid jobId, DoubleTake.Jobs.Contract.JobCredentials credentials)
    {
        return base.Channel.GetRecommendedRestoreOptionsAsync(jobId, credentials);
    }
    
    public DoubleTake.Common.Tasks.ActivityToken VerifyRestoreOptions(System.Guid jobId, DoubleTake.Jobs.Contract.RestoreOptions restoreOptions)
    {
        return base.Channel.VerifyRestoreOptions(jobId, restoreOptions);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> VerifyRestoreOptionsAsync(System.Guid jobId, DoubleTake.Jobs.Contract.RestoreOptions restoreOptions)
    {
        return base.Channel.VerifyRestoreOptionsAsync(jobId, restoreOptions);
    }
    
    public DoubleTake.Common.Tasks.ActivityToken Reverse(System.Guid jobId)
    {
        return base.Channel.Reverse(jobId);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> ReverseAsync(System.Guid jobId)
    {
        return base.Channel.ReverseAsync(jobId);
    }
    
    public DoubleTake.Common.Tasks.ActivityToken UndoFailover(System.Guid jobId)
    {
        return base.Channel.UndoFailover(jobId);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> UndoFailoverAsync(System.Guid jobId)
    {
        return base.Channel.UndoFailoverAsync(jobId);
    }
    
    public DoubleTake.Jobs.Contract1.VerificationTaskStatus GetVerificationStatus(DoubleTake.Common.Tasks.ActivityToken taskToken)
    {
        return base.Channel.GetVerificationStatus(taskToken);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Jobs.Contract1.VerificationTaskStatus> GetVerificationStatusAsync(DoubleTake.Common.Tasks.ActivityToken taskToken)
    {
        return base.Channel.GetVerificationStatusAsync(taskToken);
    }
    
    public DoubleTake.Jobs.Contract1.FixJobOptionsTaskStatus GetFixJobOptionsStatus(DoubleTake.Common.Tasks.ActivityToken taskToken)
    {
        return base.Channel.GetFixJobOptionsStatus(taskToken);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Jobs.Contract1.FixJobOptionsTaskStatus> GetFixJobOptionsStatusAsync(DoubleTake.Common.Tasks.ActivityToken taskToken)
    {
        return base.Channel.GetFixJobOptionsStatusAsync(taskToken);
    }
    
    public DoubleTake.Common.Tasks.ActivityToken UpdateCredentials(System.Guid jobId, DoubleTake.Jobs.Contract.JobCredentials credentials)
    {
        return base.Channel.UpdateCredentials(jobId, credentials);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> UpdateCredentialsAsync(System.Guid jobId, DoubleTake.Jobs.Contract.JobCredentials credentials)
    {
        return base.Channel.UpdateCredentialsAsync(jobId, credentials);
    }
    
    public DoubleTake.Common.Tasks.ActivityToken PersistShares(System.Guid jobId, DoubleTake.Monitoring.Contract.Share[] shares)
    {
        return base.Channel.PersistShares(jobId, shares);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> PersistSharesAsync(System.Guid jobId, DoubleTake.Monitoring.Contract.Share[] shares)
    {
        return base.Channel.PersistSharesAsync(jobId, shares);
    }
    
    public DoubleTake.Common.Tasks.ActivityStatusEntry GetActionStatus(DoubleTake.Common.Tasks.ActivityToken taskToken)
    {
        return base.Channel.GetActionStatus(taskToken);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityStatusEntry> GetActionStatusAsync(DoubleTake.Common.Tasks.ActivityToken taskToken)
    {
        return base.Channel.GetActionStatusAsync(taskToken);
    }
    
    public DoubleTake.Common.Tasks.ActivityStatusEntry[] GetActionStatuses(System.Guid jobId)
    {
        return base.Channel.GetActionStatuses(jobId);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityStatusEntry[]> GetActionStatusesAsync(System.Guid jobId)
    {
        return base.Channel.GetActionStatusesAsync(jobId);
    }
    
    public www.doubletake.com.Common.Contract.LogMessage[] GetLogMessages(System.Guid jobId, int chunkSize, string source, int hash, System.DateTimeOffset lastTimestamp)
    {
        return base.Channel.GetLogMessages(jobId, chunkSize, source, hash, lastTimestamp);
    }
    
    public System.Threading.Tasks.Task<www.doubletake.com.Common.Contract.LogMessage[]> GetLogMessagesAsync(System.Guid jobId, int chunkSize, string source, int hash, System.DateTimeOffset lastTimestamp)
    {
        return base.Channel.GetLogMessagesAsync(jobId, chunkSize, source, hash, lastTimestamp);
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace="http://www.doubletake.com/Services/Contract/MetaserviceOperations", ConfigurationName="IMetaservice")]
public interface IMetaservice
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Services/Contract/MetaserviceOperations/IMetaservice/Ge" +
        "tMachineId", ReplyAction="http://www.doubletake.com/Services/Contract/MetaserviceOperations/IMetaservice/Ge" +
        "tMachineIdResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Core.Contract.CoreFault), Action="http://www.doubletake.com/Services/Contract/MetaserviceOperations/IMetaservice/Ge" +
        "tMachineIdCoreFaultFault", Name="CoreFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    System.Guid GetMachineId();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Services/Contract/MetaserviceOperations/IMetaservice/Ge" +
        "tMachineId", ReplyAction="http://www.doubletake.com/Services/Contract/MetaserviceOperations/IMetaservice/Ge" +
        "tMachineIdResponse")]
    System.Threading.Tasks.Task<System.Guid> GetMachineIdAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Services/Contract/MetaserviceOperations/IMetaservice/Ge" +
        "tVersion", ReplyAction="http://www.doubletake.com/Services/Contract/MetaserviceOperations/IMetaservice/Ge" +
        "tVersionResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Core.Contract.CoreFault), Action="http://www.doubletake.com/Services/Contract/MetaserviceOperations/IMetaservice/Ge" +
        "tVersionCoreFaultFault", Name="CoreFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    string GetVersion();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Services/Contract/MetaserviceOperations/IMetaservice/Ge" +
        "tVersion", ReplyAction="http://www.doubletake.com/Services/Contract/MetaserviceOperations/IMetaservice/Ge" +
        "tVersionResponse")]
    System.Threading.Tasks.Task<string> GetVersionAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Services/Contract/MetaserviceOperations/IMetaservice/Ge" +
        "tServiceTags", ReplyAction="http://www.doubletake.com/Services/Contract/MetaserviceOperations/IMetaservice/Ge" +
        "tServiceTagsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Core.Contract.CoreFault), Action="http://www.doubletake.com/Services/Contract/MetaserviceOperations/IMetaservice/Ge" +
        "tServiceTagsCoreFaultFault", Name="CoreFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    string[] GetServiceTags();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Services/Contract/MetaserviceOperations/IMetaservice/Ge" +
        "tServiceTags", ReplyAction="http://www.doubletake.com/Services/Contract/MetaserviceOperations/IMetaservice/Ge" +
        "tServiceTagsResponse")]
    System.Threading.Tasks.Task<string[]> GetServiceTagsAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Services/Contract/MetaserviceOperations/IMetaservice/Ge" +
        "tDynamicServiceEndpoints", ReplyAction="http://www.doubletake.com/Services/Contract/MetaserviceOperations/IMetaservice/Ge" +
        "tDynamicServiceEndpointsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Core.Contract.CoreFault), Action="http://www.doubletake.com/Services/Contract/MetaserviceOperations/IMetaservice/Ge" +
        "tDynamicServiceEndpointsCoreFaultFault", Name="CoreFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Core.Contract")]
    DoubleTake.Discovery.Contract.DynamicServiceEndpoint[] GetDynamicServiceEndpoints(string serviceTag);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Services/Contract/MetaserviceOperations/IMetaservice/Ge" +
        "tDynamicServiceEndpoints", ReplyAction="http://www.doubletake.com/Services/Contract/MetaserviceOperations/IMetaservice/Ge" +
        "tDynamicServiceEndpointsResponse")]
    System.Threading.Tasks.Task<DoubleTake.Discovery.Contract.DynamicServiceEndpoint[]> GetDynamicServiceEndpointsAsync(string serviceTag);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IMetaserviceChannel : IMetaservice, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class MetaserviceClient : System.ServiceModel.ClientBase<IMetaservice>, IMetaservice
{
    
    public MetaserviceClient()
    {
    }
    
    public MetaserviceClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public MetaserviceClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public MetaserviceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public MetaserviceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public System.Guid GetMachineId()
    {
        return base.Channel.GetMachineId();
    }
    
    public System.Threading.Tasks.Task<System.Guid> GetMachineIdAsync()
    {
        return base.Channel.GetMachineIdAsync();
    }
    
    public string GetVersion()
    {
        return base.Channel.GetVersion();
    }
    
    public System.Threading.Tasks.Task<string> GetVersionAsync()
    {
        return base.Channel.GetVersionAsync();
    }
    
    public string[] GetServiceTags()
    {
        return base.Channel.GetServiceTags();
    }
    
    public System.Threading.Tasks.Task<string[]> GetServiceTagsAsync()
    {
        return base.Channel.GetServiceTagsAsync();
    }
    
    public DoubleTake.Discovery.Contract.DynamicServiceEndpoint[] GetDynamicServiceEndpoints(string serviceTag)
    {
        return base.Channel.GetDynamicServiceEndpoints(serviceTag);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Discovery.Contract.DynamicServiceEndpoint[]> GetDynamicServiceEndpointsAsync(string serviceTag)
    {
        return base.Channel.GetDynamicServiceEndpointsAsync(serviceTag);
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace="http://www.doubletake.com/Virtualization/Contract/DTAVServerManager", ConfigurationName="IDTAVServerManager")]
public interface IDTAVServerManager
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/Contract/DTAVServerManager/IDTAVServerMa" +
        "nager/GetControlledServerInfo", ReplyAction="http://www.doubletake.com/Virtualization/Contract/DTAVServerManager/IDTAVServerMa" +
        "nager/GetControlledServerInfoResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Virtualization/Contract/DTAVServerManager/IDTAVServerMa" +
        "nager/GetControlledServerInfoCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Core.Contract.ControlledServerInfo[] GetControlledServerInfo();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/Contract/DTAVServerManager/IDTAVServerMa" +
        "nager/GetControlledServerInfo", ReplyAction="http://www.doubletake.com/Virtualization/Contract/DTAVServerManager/IDTAVServerMa" +
        "nager/GetControlledServerInfoResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.ControlledServerInfo[]> GetControlledServerInfoAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/Contract/DTAVServerManager/IDTAVServerMa" +
        "nager/GetControlledServers", ReplyAction="http://www.doubletake.com/Virtualization/Contract/DTAVServerManager/IDTAVServerMa" +
        "nager/GetControlledServersResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Virtualization/Contract/DTAVServerManager/IDTAVServerMa" +
        "nager/GetControlledServersCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Core.Contract.ControlledServerInfoSimple[] GetControlledServers();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/Contract/DTAVServerManager/IDTAVServerMa" +
        "nager/GetControlledServers", ReplyAction="http://www.doubletake.com/Virtualization/Contract/DTAVServerManager/IDTAVServerMa" +
        "nager/GetControlledServersResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.ControlledServerInfoSimple[]> GetControlledServersAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/Contract/DTAVServerManager/IDTAVServerMa" +
        "nager/GetControlledServer", ReplyAction="http://www.doubletake.com/Virtualization/Contract/DTAVServerManager/IDTAVServerMa" +
        "nager/GetControlledServerResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Virtualization/Contract/DTAVServerManager/IDTAVServerMa" +
        "nager/GetControlledServerCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Core.Contract.ControlledServerInfo GetControlledServer(System.Guid ServerId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/Contract/DTAVServerManager/IDTAVServerMa" +
        "nager/GetControlledServer", ReplyAction="http://www.doubletake.com/Virtualization/Contract/DTAVServerManager/IDTAVServerMa" +
        "nager/GetControlledServerResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.ControlledServerInfo> GetControlledServerAsync(System.Guid ServerId);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IDTAVServerManagerChannel : IDTAVServerManager, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class DTAVServerManagerClient : System.ServiceModel.ClientBase<IDTAVServerManager>, IDTAVServerManager
{
    
    public DTAVServerManagerClient()
    {
    }
    
    public DTAVServerManagerClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public DTAVServerManagerClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public DTAVServerManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public DTAVServerManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public DoubleTake.Core.Contract.ControlledServerInfo[] GetControlledServerInfo()
    {
        return base.Channel.GetControlledServerInfo();
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.ControlledServerInfo[]> GetControlledServerInfoAsync()
    {
        return base.Channel.GetControlledServerInfoAsync();
    }
    
    public DoubleTake.Core.Contract.ControlledServerInfoSimple[] GetControlledServers()
    {
        return base.Channel.GetControlledServers();
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.ControlledServerInfoSimple[]> GetControlledServersAsync()
    {
        return base.Channel.GetControlledServersAsync();
    }
    
    public DoubleTake.Core.Contract.ControlledServerInfo GetControlledServer(System.Guid ServerId)
    {
        return base.Channel.GetControlledServer(ServerId);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.ControlledServerInfo> GetControlledServerAsync(System.Guid ServerId)
    {
        return base.Channel.GetControlledServerAsync(ServerId);
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace="http://www.doubletake.com/Virtualization/Contract/DTHV", ConfigurationName="IDTHVService")]
public interface IDTHVService
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/Contract/DTHV/IDTHVService/GetVMSystemSt" +
        "ate", ReplyAction="http://www.doubletake.com/Virtualization/Contract/DTHV/IDTHVService/GetVMSystemSt" +
        "ateResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Virtualization.Contract.DtServiceException_Fault), Action="http://www.doubletake.com/Virtualization/Contract/DTHV/IDTHVService/GetVMSystemSt" +
        "ateDtServiceException_FaultFault", Name="DtServiceException_Fault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Virtualization.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Virtualization/Contract/DTHV/IDTHVService/GetVMSystemSt" +
        "ateCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Virtualization.Contract.HyperVmNotFoundException_Fault), Action="http://www.doubletake.com/Virtualization/Contract/DTHV/IDTHVService/GetVMSystemSt" +
        "ateHyperVmNotFoundException_FaultFault", Name="HyperVmNotFoundException_Fault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Virtualization.Contract")]
    DoubleTake.Virtualization.Contract.DTHV.VMSystemState GetVMSystemState(string vmGuestDNSName, string vmUsername, string vmPassword, string vmDomain, string vmBiosGuid);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/Contract/DTHV/IDTHVService/GetVMSystemSt" +
        "ate", ReplyAction="http://www.doubletake.com/Virtualization/Contract/DTHV/IDTHVService/GetVMSystemSt" +
        "ateResponse")]
    System.Threading.Tasks.Task<DoubleTake.Virtualization.Contract.DTHV.VMSystemState> GetVMSystemStateAsync(string vmGuestDNSName, string vmUsername, string vmPassword, string vmDomain, string vmBiosGuid);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/Contract/DTHV/IDTHVService/GetVMSystemSt" +
        "ateUsingCredentials", ReplyAction="http://www.doubletake.com/Virtualization/Contract/DTHV/IDTHVService/GetVMSystemSt" +
        "ateUsingCredentialsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Virtualization.Contract.HyperVmNotFoundException_Fault), Action="http://www.doubletake.com/Virtualization/Contract/DTHV/IDTHVService/GetVMSystemSt" +
        "ateUsingCredentialsHyperVmNotFoundException_FaultFault", Name="HyperVmNotFoundException_Fault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Virtualization.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Virtualization.Contract.DtServiceException_Fault), Action="http://www.doubletake.com/Virtualization/Contract/DTHV/IDTHVService/GetVMSystemSt" +
        "ateUsingCredentialsDtServiceException_FaultFault", Name="DtServiceException_Fault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Virtualization.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Virtualization/Contract/DTHV/IDTHVService/GetVMSystemSt" +
        "ateUsingCredentialsCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Virtualization.Contract.DTHV.VMSystemState GetVMSystemStateUsingCredentials(string vmGuestDNSName, DoubleTake.Core.Contract.Credentials vmCredentials, string vmBiosGuid);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/Contract/DTHV/IDTHVService/GetVMSystemSt" +
        "ateUsingCredentials", ReplyAction="http://www.doubletake.com/Virtualization/Contract/DTHV/IDTHVService/GetVMSystemSt" +
        "ateUsingCredentialsResponse")]
    System.Threading.Tasks.Task<DoubleTake.Virtualization.Contract.DTHV.VMSystemState> GetVMSystemStateUsingCredentialsAsync(string vmGuestDNSName, DoubleTake.Core.Contract.Credentials vmCredentials, string vmBiosGuid);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/Contract/DTHV/IDTHVService/PopulateDnsOp" +
        "tions", ReplyAction="http://www.doubletake.com/Virtualization/Contract/DTHV/IDTHVService/PopulateDnsOp" +
        "tionsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Virtualization/Contract/DTHV/IDTHVService/PopulateDnsOp" +
        "tionsCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Virtualization.Contract.DtServiceException_Fault), Action="http://www.doubletake.com/Virtualization/Contract/DTHV/IDTHVService/PopulateDnsOp" +
        "tionsDtServiceException_FaultFault", Name="DtServiceException_Fault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Virtualization.Contract")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Virtualization.Contract.HyperVmNotFoundException_Fault), Action="http://www.doubletake.com/Virtualization/Contract/DTHV/IDTHVService/PopulateDnsOp" +
        "tionsHyperVmNotFoundException_FaultFault", Name="HyperVmNotFoundException_Fault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Virtualization.Contract")]
    DoubleTake.Jobs.Contract.DNSOptions PopulateDnsOptions(string vmHostName, DoubleTake.Virtualization.Contract.DTHV.VMSystemState vmSystemState, string targetHostName, DoubleTake.Core.Contract.Credentials targetHostCredentials);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/Contract/DTHV/IDTHVService/PopulateDnsOp" +
        "tions", ReplyAction="http://www.doubletake.com/Virtualization/Contract/DTHV/IDTHVService/PopulateDnsOp" +
        "tionsResponse")]
    System.Threading.Tasks.Task<DoubleTake.Jobs.Contract.DNSOptions> PopulateDnsOptionsAsync(string vmHostName, DoubleTake.Virtualization.Contract.DTHV.VMSystemState vmSystemState, string targetHostName, DoubleTake.Core.Contract.Credentials targetHostCredentials);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IDTHVServiceChannel : IDTHVService, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class DTHVServiceClient : System.ServiceModel.ClientBase<IDTHVService>, IDTHVService
{
    
    public DTHVServiceClient()
    {
    }
    
    public DTHVServiceClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public DTHVServiceClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public DTHVServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public DTHVServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public DoubleTake.Virtualization.Contract.DTHV.VMSystemState GetVMSystemState(string vmGuestDNSName, string vmUsername, string vmPassword, string vmDomain, string vmBiosGuid)
    {
        return base.Channel.GetVMSystemState(vmGuestDNSName, vmUsername, vmPassword, vmDomain, vmBiosGuid);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Virtualization.Contract.DTHV.VMSystemState> GetVMSystemStateAsync(string vmGuestDNSName, string vmUsername, string vmPassword, string vmDomain, string vmBiosGuid)
    {
        return base.Channel.GetVMSystemStateAsync(vmGuestDNSName, vmUsername, vmPassword, vmDomain, vmBiosGuid);
    }
    
    public DoubleTake.Virtualization.Contract.DTHV.VMSystemState GetVMSystemStateUsingCredentials(string vmGuestDNSName, DoubleTake.Core.Contract.Credentials vmCredentials, string vmBiosGuid)
    {
        return base.Channel.GetVMSystemStateUsingCredentials(vmGuestDNSName, vmCredentials, vmBiosGuid);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Virtualization.Contract.DTHV.VMSystemState> GetVMSystemStateUsingCredentialsAsync(string vmGuestDNSName, DoubleTake.Core.Contract.Credentials vmCredentials, string vmBiosGuid)
    {
        return base.Channel.GetVMSystemStateUsingCredentialsAsync(vmGuestDNSName, vmCredentials, vmBiosGuid);
    }
    
    public DoubleTake.Jobs.Contract.DNSOptions PopulateDnsOptions(string vmHostName, DoubleTake.Virtualization.Contract.DTHV.VMSystemState vmSystemState, string targetHostName, DoubleTake.Core.Contract.Credentials targetHostCredentials)
    {
        return base.Channel.PopulateDnsOptions(vmHostName, vmSystemState, targetHostName, targetHostCredentials);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Jobs.Contract.DNSOptions> PopulateDnsOptionsAsync(string vmHostName, DoubleTake.Virtualization.Contract.DTHV.VMSystemState vmSystemState, string targetHostName, DoubleTake.Core.Contract.Credentials targetHostCredentials)
    {
        return base.Channel.PopulateDnsOptionsAsync(vmHostName, vmSystemState, targetHostName, targetHostCredentials);
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace="http://www.doubletake.com/Virtualization/Contract/VirtualizationService", ConfigurationName="IVirtualizationService")]
public interface IVirtualizationService
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/Contract/VirtualizationService/IVirtuali" +
        "zationService/FindDatastoreItemsInFolder", ReplyAction="http://www.doubletake.com/Virtualization/Contract/VirtualizationService/IVirtuali" +
        "zationService/FindDatastoreItemsInFolderResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Virtualization/Contract/VirtualizationService/IVirtuali" +
        "zationService/FindDatastoreItemsInFolderCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Virtualization.Contract.VimDatastoreItem[] FindDatastoreItemsInFolder(string vimServerNetworkId, DoubleTake.Core.Contract.Credentials vimCredentials, string datastoreName, string folderPath);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/Contract/VirtualizationService/IVirtuali" +
        "zationService/FindDatastoreItemsInFolder", ReplyAction="http://www.doubletake.com/Virtualization/Contract/VirtualizationService/IVirtuali" +
        "zationService/FindDatastoreItemsInFolderResponse")]
    System.Threading.Tasks.Task<DoubleTake.Virtualization.Contract.VimDatastoreItem[]> FindDatastoreItemsInFolderAsync(string vimServerNetworkId, DoubleTake.Core.Contract.Credentials vimCredentials, string datastoreName, string folderPath);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IVirtualizationServiceChannel : IVirtualizationService, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class VirtualizationServiceClient : System.ServiceModel.ClientBase<IVirtualizationService>, IVirtualizationService
{
    
    public VirtualizationServiceClient()
    {
    }
    
    public VirtualizationServiceClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public VirtualizationServiceClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public VirtualizationServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public VirtualizationServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public DoubleTake.Virtualization.Contract.VimDatastoreItem[] FindDatastoreItemsInFolder(string vimServerNetworkId, DoubleTake.Core.Contract.Credentials vimCredentials, string datastoreName, string folderPath)
    {
        return base.Channel.FindDatastoreItemsInFolder(vimServerNetworkId, vimCredentials, datastoreName, folderPath);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Virtualization.Contract.VimDatastoreItem[]> FindDatastoreItemsInFolderAsync(string vimServerNetworkId, DoubleTake.Core.Contract.Credentials vimCredentials, string datastoreName, string folderPath)
    {
        return base.Channel.FindDatastoreItemsInFolderAsync(vimServerNetworkId, vimCredentials, datastoreName, folderPath);
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace="http://www.doubletake.com/Virtualization/Contract/VRA", ConfigurationName="IVRAService")]
public interface IVRAService
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/GetDirectoryFre" +
        "eDiskspaceBytes", ReplyAction="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/GetDirectoryFre" +
        "eDiskspaceBytesResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/GetDirectoryFre" +
        "eDiskspaceBytesCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    long GetDirectoryFreeDiskspaceBytes(string mountPoint);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/GetDirectoryFre" +
        "eDiskspaceBytes", ReplyAction="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/GetDirectoryFre" +
        "eDiskspaceBytesResponse")]
    System.Threading.Tasks.Task<long> GetDirectoryFreeDiskspaceBytesAsync(string mountPoint);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/GetIPAddresses", ReplyAction="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/GetIPAddressesR" +
        "esponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/GetIPAddressesC" +
        "ommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    string[] GetIPAddresses();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/GetIPAddresses", ReplyAction="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/GetIPAddressesR" +
        "esponse")]
    System.Threading.Tasks.Task<string[]> GetIPAddressesAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/GetAllHyperVVMs" +
        "Info", ReplyAction="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/GetAllHyperVVMs" +
        "InfoResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/GetAllHyperVVMs" +
        "InfoCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Virtualization.Contract.VRA.V2VVirtualMachine[] GetAllHyperVVMsInfo();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/GetAllHyperVVMs" +
        "Info", ReplyAction="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/GetAllHyperVVMs" +
        "InfoResponse")]
    System.Threading.Tasks.Task<DoubleTake.Virtualization.Contract.VRA.V2VVirtualMachine[]> GetAllHyperVVMsInfoAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/GetListOfProtec" +
        "tedVMs", ReplyAction="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/GetListOfProtec" +
        "tedVMsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/GetListOfProtec" +
        "tedVMsCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    string[] GetListOfProtectedVMs(string[] vmHostNames);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/GetListOfProtec" +
        "tedVMs", ReplyAction="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/GetListOfProtec" +
        "tedVMsResponse")]
    System.Threading.Tasks.Task<string[]> GetListOfProtectedVMsAsync(string[] vmHostNames);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/Heartbeat", ReplyAction="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/HeartbeatRespon" +
        "se")]
    void Heartbeat();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/Heartbeat", ReplyAction="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/HeartbeatRespon" +
        "se")]
    System.Threading.Tasks.Task HeartbeatAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/GetActivationCo" +
        "deInfo", ReplyAction="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/GetActivationCo" +
        "deInfoResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/GetActivationCo" +
        "deInfoCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Virtualization.Contract.VRA.ActivationCodeInfo GetActivationCodeInfo();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/GetActivationCo" +
        "deInfo", ReplyAction="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/GetActivationCo" +
        "deInfoResponse")]
    System.Threading.Tasks.Task<DoubleTake.Virtualization.Contract.VRA.ActivationCodeInfo> GetActivationCodeInfoAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/VerifyTargetSer" +
        "verHostedByVimServer", ReplyAction="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/VerifyTargetSer" +
        "verHostedByVimServerResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/VerifyTargetSer" +
        "verHostedByVimServerCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Virtualization.Contract.VRA.ESXInfo VerifyTargetServerHostedByVimServer(string vimServer, string vimUsername, string vimPassword, string esxName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/VerifyTargetSer" +
        "verHostedByVimServer", ReplyAction="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/VerifyTargetSer" +
        "verHostedByVimServerResponse")]
    System.Threading.Tasks.Task<DoubleTake.Virtualization.Contract.VRA.ESXInfo> VerifyTargetServerHostedByVimServerAsync(string vimServer, string vimUsername, string vimPassword, string esxName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/GetVirtualSwitc" +
        "hInfo", ReplyAction="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/GetVirtualSwitc" +
        "hInfoResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/GetVirtualSwitc" +
        "hInfoCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Virtualization.Contract.VirtualSwitchInfo[] GetVirtualSwitchInfo();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/GetVirtualSwitc" +
        "hInfo", ReplyAction="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/GetVirtualSwitc" +
        "hInfoResponse")]
    System.Threading.Tasks.Task<DoubleTake.Virtualization.Contract.VirtualSwitchInfo[]> GetVirtualSwitchInfoAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/VerifyRoute", ReplyAction="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/VerifyRouteResp" +
        "onse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/VerifyRouteComm" +
        "onFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void VerifyRoute(string address, int enginePort);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/VerifyRoute", ReplyAction="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/VerifyRouteResp" +
        "onse")]
    System.Threading.Tasks.Task VerifyRouteAsync(string address, int enginePort);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/GetEnginePort", ReplyAction="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/GetEnginePortRe" +
        "sponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/GetEnginePortCo" +
        "mmonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    int GetEnginePort();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/GetEnginePort", ReplyAction="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/GetEnginePortRe" +
        "sponse")]
    System.Threading.Tasks.Task<int> GetEnginePortAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/GetOperatingSys" +
        "temVersion", ReplyAction="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/GetOperatingSys" +
        "temVersionResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/GetOperatingSys" +
        "temVersionCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Core.Contract.OperatingSystemVersion GetOperatingSystemVersion();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/GetOperatingSys" +
        "temVersion", ReplyAction="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/GetOperatingSys" +
        "temVersionResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.OperatingSystemVersion> GetOperatingSystemVersionAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/GetAllClustered" +
        "HyperVVMsInfo", ReplyAction="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/GetAllClustered" +
        "HyperVVMsInfoResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/GetAllClustered" +
        "HyperVVMsInfoCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Virtualization.Contract.VRA.V2VVirtualMachine[] GetAllClusteredHyperVVMsInfo(System.Uri uri);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/GetAllClustered" +
        "HyperVVMsInfo", ReplyAction="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/GetAllClustered" +
        "HyperVVMsInfoResponse")]
    System.Threading.Tasks.Task<DoubleTake.Virtualization.Contract.VRA.V2VVirtualMachine[]> GetAllClusteredHyperVVMsInfoAsync(System.Uri uri);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/GetClusterNodes" +
        "", ReplyAction="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/GetClusterNodes" +
        "Response")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/GetClusterNodes" +
        "CommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    string[] GetClusterNodes();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/GetClusterNodes" +
        "", ReplyAction="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/GetClusterNodes" +
        "Response")]
    System.Threading.Tasks.Task<string[]> GetClusterNodesAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/IsCluster", ReplyAction="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/IsClusterRespon" +
        "se")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/IsClusterCommon" +
        "FaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    bool IsCluster(string name);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/IsCluster", ReplyAction="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/IsClusterRespon" +
        "se")]
    System.Threading.Tasks.Task<bool> IsClusterAsync(string name);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/ValidateDoubleT" +
        "akePathForClusterNodes", ReplyAction="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/ValidateDoubleT" +
        "akePathForClusterNodesResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/ValidateDoubleT" +
        "akePathForClusterNodesCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void ValidateDoubleTakePathForClusterNodes(System.Uri uri);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/ValidateDoubleT" +
        "akePathForClusterNodes", ReplyAction="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/ValidateDoubleT" +
        "akePathForClusterNodesResponse")]
    System.Threading.Tasks.Task ValidateDoubleTakePathForClusterNodesAsync(System.Uri uri);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/ValidateCluster" +
        "ResourceType", ReplyAction="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/ValidateCluster" +
        "ResourceTypeResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/ValidateCluster" +
        "ResourceTypeCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void ValidateClusterResourceType(System.Uri clusterUri, string resourceTypeName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/ValidateCluster" +
        "ResourceType", ReplyAction="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/ValidateCluster" +
        "ResourceTypeResponse")]
    System.Threading.Tasks.Task ValidateClusterResourceTypeAsync(System.Uri clusterUri, string resourceTypeName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/IsServerPingabl" +
        "e", ReplyAction="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/IsServerPingabl" +
        "eResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/IsServerPingabl" +
        "eCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    bool IsServerPingable(string server);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/IsServerPingabl" +
        "e", ReplyAction="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/IsServerPingabl" +
        "eResponse")]
    System.Threading.Tasks.Task<bool> IsServerPingableAsync(string server);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/GetUnicastIPAdd" +
        "resses", ReplyAction="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/GetUnicastIPAdd" +
        "ressesResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/GetUnicastIPAdd" +
        "ressesCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Core.Contract.UnicastIPAddressInfo[] GetUnicastIPAddresses();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/GetUnicastIPAdd" +
        "resses", ReplyAction="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/GetUnicastIPAdd" +
        "ressesResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.UnicastIPAddressInfo[]> GetUnicastIPAddressesAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/IsVirtualizedHy" +
        "perV", ReplyAction="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/IsVirtualizedHy" +
        "perVResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/IsVirtualizedHy" +
        "perVCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    bool IsVirtualizedHyperV();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/IsVirtualizedHy" +
        "perV", ReplyAction="http://www.doubletake.com/Virtualization/Contract/VRA/IVRAService/IsVirtualizedHy" +
        "perVResponse")]
    System.Threading.Tasks.Task<bool> IsVirtualizedHyperVAsync();
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IVRAServiceChannel : IVRAService, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class VRAServiceClient : System.ServiceModel.ClientBase<IVRAService>, IVRAService
{
    
    public VRAServiceClient()
    {
    }
    
    public VRAServiceClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public VRAServiceClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public VRAServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public VRAServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public long GetDirectoryFreeDiskspaceBytes(string mountPoint)
    {
        return base.Channel.GetDirectoryFreeDiskspaceBytes(mountPoint);
    }
    
    public System.Threading.Tasks.Task<long> GetDirectoryFreeDiskspaceBytesAsync(string mountPoint)
    {
        return base.Channel.GetDirectoryFreeDiskspaceBytesAsync(mountPoint);
    }
    
    public string[] GetIPAddresses()
    {
        return base.Channel.GetIPAddresses();
    }
    
    public System.Threading.Tasks.Task<string[]> GetIPAddressesAsync()
    {
        return base.Channel.GetIPAddressesAsync();
    }
    
    public DoubleTake.Virtualization.Contract.VRA.V2VVirtualMachine[] GetAllHyperVVMsInfo()
    {
        return base.Channel.GetAllHyperVVMsInfo();
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Virtualization.Contract.VRA.V2VVirtualMachine[]> GetAllHyperVVMsInfoAsync()
    {
        return base.Channel.GetAllHyperVVMsInfoAsync();
    }
    
    public string[] GetListOfProtectedVMs(string[] vmHostNames)
    {
        return base.Channel.GetListOfProtectedVMs(vmHostNames);
    }
    
    public System.Threading.Tasks.Task<string[]> GetListOfProtectedVMsAsync(string[] vmHostNames)
    {
        return base.Channel.GetListOfProtectedVMsAsync(vmHostNames);
    }
    
    public void Heartbeat()
    {
        base.Channel.Heartbeat();
    }
    
    public System.Threading.Tasks.Task HeartbeatAsync()
    {
        return base.Channel.HeartbeatAsync();
    }
    
    public DoubleTake.Virtualization.Contract.VRA.ActivationCodeInfo GetActivationCodeInfo()
    {
        return base.Channel.GetActivationCodeInfo();
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Virtualization.Contract.VRA.ActivationCodeInfo> GetActivationCodeInfoAsync()
    {
        return base.Channel.GetActivationCodeInfoAsync();
    }
    
    public DoubleTake.Virtualization.Contract.VRA.ESXInfo VerifyTargetServerHostedByVimServer(string vimServer, string vimUsername, string vimPassword, string esxName)
    {
        return base.Channel.VerifyTargetServerHostedByVimServer(vimServer, vimUsername, vimPassword, esxName);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Virtualization.Contract.VRA.ESXInfo> VerifyTargetServerHostedByVimServerAsync(string vimServer, string vimUsername, string vimPassword, string esxName)
    {
        return base.Channel.VerifyTargetServerHostedByVimServerAsync(vimServer, vimUsername, vimPassword, esxName);
    }
    
    public DoubleTake.Virtualization.Contract.VirtualSwitchInfo[] GetVirtualSwitchInfo()
    {
        return base.Channel.GetVirtualSwitchInfo();
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Virtualization.Contract.VirtualSwitchInfo[]> GetVirtualSwitchInfoAsync()
    {
        return base.Channel.GetVirtualSwitchInfoAsync();
    }
    
    public void VerifyRoute(string address, int enginePort)
    {
        base.Channel.VerifyRoute(address, enginePort);
    }
    
    public System.Threading.Tasks.Task VerifyRouteAsync(string address, int enginePort)
    {
        return base.Channel.VerifyRouteAsync(address, enginePort);
    }
    
    public int GetEnginePort()
    {
        return base.Channel.GetEnginePort();
    }
    
    public System.Threading.Tasks.Task<int> GetEnginePortAsync()
    {
        return base.Channel.GetEnginePortAsync();
    }
    
    public DoubleTake.Core.Contract.OperatingSystemVersion GetOperatingSystemVersion()
    {
        return base.Channel.GetOperatingSystemVersion();
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.OperatingSystemVersion> GetOperatingSystemVersionAsync()
    {
        return base.Channel.GetOperatingSystemVersionAsync();
    }
    
    public DoubleTake.Virtualization.Contract.VRA.V2VVirtualMachine[] GetAllClusteredHyperVVMsInfo(System.Uri uri)
    {
        return base.Channel.GetAllClusteredHyperVVMsInfo(uri);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Virtualization.Contract.VRA.V2VVirtualMachine[]> GetAllClusteredHyperVVMsInfoAsync(System.Uri uri)
    {
        return base.Channel.GetAllClusteredHyperVVMsInfoAsync(uri);
    }
    
    public string[] GetClusterNodes()
    {
        return base.Channel.GetClusterNodes();
    }
    
    public System.Threading.Tasks.Task<string[]> GetClusterNodesAsync()
    {
        return base.Channel.GetClusterNodesAsync();
    }
    
    public bool IsCluster(string name)
    {
        return base.Channel.IsCluster(name);
    }
    
    public System.Threading.Tasks.Task<bool> IsClusterAsync(string name)
    {
        return base.Channel.IsClusterAsync(name);
    }
    
    public void ValidateDoubleTakePathForClusterNodes(System.Uri uri)
    {
        base.Channel.ValidateDoubleTakePathForClusterNodes(uri);
    }
    
    public System.Threading.Tasks.Task ValidateDoubleTakePathForClusterNodesAsync(System.Uri uri)
    {
        return base.Channel.ValidateDoubleTakePathForClusterNodesAsync(uri);
    }
    
    public void ValidateClusterResourceType(System.Uri clusterUri, string resourceTypeName)
    {
        base.Channel.ValidateClusterResourceType(clusterUri, resourceTypeName);
    }
    
    public System.Threading.Tasks.Task ValidateClusterResourceTypeAsync(System.Uri clusterUri, string resourceTypeName)
    {
        return base.Channel.ValidateClusterResourceTypeAsync(clusterUri, resourceTypeName);
    }
    
    public bool IsServerPingable(string server)
    {
        return base.Channel.IsServerPingable(server);
    }
    
    public System.Threading.Tasks.Task<bool> IsServerPingableAsync(string server)
    {
        return base.Channel.IsServerPingableAsync(server);
    }
    
    public DoubleTake.Core.Contract.UnicastIPAddressInfo[] GetUnicastIPAddresses()
    {
        return base.Channel.GetUnicastIPAddresses();
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.UnicastIPAddressInfo[]> GetUnicastIPAddressesAsync()
    {
        return base.Channel.GetUnicastIPAddressesAsync();
    }
    
    public bool IsVirtualizedHyperV()
    {
        return base.Channel.IsVirtualizedHyperV();
    }
    
    public System.Threading.Tasks.Task<bool> IsVirtualizedHyperVAsync()
    {
        return base.Channel.IsVirtualizedHyperVAsync();
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace="http://www.doubletake.com/Virtualization/Contract/VRAExtensionAPI", ConfigurationName="IVRAExtensionAPI")]
public interface IVRAExtensionAPI
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/Contract/VRAExtensionAPI/IVRAExtensionAP" +
        "I/MakeVolumeBootable", ReplyAction="http://www.doubletake.com/Virtualization/Contract/VRAExtensionAPI/IVRAExtensionAP" +
        "I/MakeVolumeBootableResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Virtualization/Contract/VRAExtensionAPI/IVRAExtensionAP" +
        "I/MakeVolumeBootableCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void MakeVolumeBootable(string jobUuid, string bootDiskMountPoint, string logFile);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/Contract/VRAExtensionAPI/IVRAExtensionAP" +
        "I/MakeVolumeBootable", ReplyAction="http://www.doubletake.com/Virtualization/Contract/VRAExtensionAPI/IVRAExtensionAP" +
        "I/MakeVolumeBootableResponse")]
    System.Threading.Tasks.Task MakeVolumeBootableAsync(string jobUuid, string bootDiskMountPoint, string logFile);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/Contract/VRAExtensionAPI/IVRAExtensionAP" +
        "I/PrepareForBooting", ReplyAction="http://www.doubletake.com/Virtualization/Contract/VRAExtensionAPI/IVRAExtensionAP" +
        "I/PrepareForBootingResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Virtualization/Contract/VRAExtensionAPI/IVRAExtensionAP" +
        "I/PrepareForBootingCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void PrepareForBooting(string bootInformationXMLFile, string logFile);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/Contract/VRAExtensionAPI/IVRAExtensionAP" +
        "I/PrepareForBooting", ReplyAction="http://www.doubletake.com/Virtualization/Contract/VRAExtensionAPI/IVRAExtensionAP" +
        "I/PrepareForBootingResponse")]
    System.Threading.Tasks.Task PrepareForBootingAsync(string bootInformationXMLFile, string logFile);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IVRAExtensionAPIChannel : IVRAExtensionAPI, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class VRAExtensionAPIClient : System.ServiceModel.ClientBase<IVRAExtensionAPI>, IVRAExtensionAPI
{
    
    public VRAExtensionAPIClient()
    {
    }
    
    public VRAExtensionAPIClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public VRAExtensionAPIClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public VRAExtensionAPIClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public VRAExtensionAPIClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public void MakeVolumeBootable(string jobUuid, string bootDiskMountPoint, string logFile)
    {
        base.Channel.MakeVolumeBootable(jobUuid, bootDiskMountPoint, logFile);
    }
    
    public System.Threading.Tasks.Task MakeVolumeBootableAsync(string jobUuid, string bootDiskMountPoint, string logFile)
    {
        return base.Channel.MakeVolumeBootableAsync(jobUuid, bootDiskMountPoint, logFile);
    }
    
    public void PrepareForBooting(string bootInformationXMLFile, string logFile)
    {
        base.Channel.PrepareForBooting(bootInformationXMLFile, logFile);
    }
    
    public System.Threading.Tasks.Task PrepareForBootingAsync(string bootInformationXMLFile, string logFile)
    {
        return base.Channel.PrepareForBootingAsync(bootInformationXMLFile, logFile);
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace="http://www.doubletake.com/Virtualization/DTAVReplicationApplianceManager", ConfigurationName="IDTAVReplicationApplianceManager")]
public interface IDTAVReplicationApplianceManager
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVReplicationApplianceManager/IDTAVRep" +
        "licationApplianceManager/GetVimServersandReplicationAppliances", ReplyAction="http://www.doubletake.com/Virtualization/DTAVReplicationApplianceManager/IDTAVRep" +
        "licationApplianceManager/GetVimServersandReplicationAppliancesResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Virtualization/DTAVReplicationApplianceManager/IDTAVRep" +
        "licationApplianceManager/GetVimServersandReplicationAppliancesCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Virtualization.Contract.DTAV.DtavVimServer[] GetVimServersandReplicationAppliances();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVReplicationApplianceManager/IDTAVRep" +
        "licationApplianceManager/GetVimServersandReplicationAppliances", ReplyAction="http://www.doubletake.com/Virtualization/DTAVReplicationApplianceManager/IDTAVRep" +
        "licationApplianceManager/GetVimServersandReplicationAppliancesResponse")]
    System.Threading.Tasks.Task<DoubleTake.Virtualization.Contract.DTAV.DtavVimServer[]> GetVimServersandReplicationAppliancesAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVReplicationApplianceManager/IDTAVRep" +
        "licationApplianceManager/RemoveVimServer", ReplyAction="http://www.doubletake.com/Virtualization/DTAVReplicationApplianceManager/IDTAVRep" +
        "licationApplianceManager/RemoveVimServerResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Virtualization/DTAVReplicationApplianceManager/IDTAVRep" +
        "licationApplianceManager/RemoveVimServerCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void RemoveVimServer(string networkId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVReplicationApplianceManager/IDTAVRep" +
        "licationApplianceManager/RemoveVimServer", ReplyAction="http://www.doubletake.com/Virtualization/DTAVReplicationApplianceManager/IDTAVRep" +
        "licationApplianceManager/RemoveVimServerResponse")]
    System.Threading.Tasks.Task RemoveVimServerAsync(string networkId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVReplicationApplianceManager/IDTAVRep" +
        "licationApplianceManager/RemoveReplicationAppliance", ReplyAction="http://www.doubletake.com/Virtualization/DTAVReplicationApplianceManager/IDTAVRep" +
        "licationApplianceManager/RemoveReplicationApplianceResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Virtualization/DTAVReplicationApplianceManager/IDTAVRep" +
        "licationApplianceManager/RemoveReplicationApplianceCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void RemoveReplicationAppliance(string networkId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVReplicationApplianceManager/IDTAVRep" +
        "licationApplianceManager/RemoveReplicationAppliance", ReplyAction="http://www.doubletake.com/Virtualization/DTAVReplicationApplianceManager/IDTAVRep" +
        "licationApplianceManager/RemoveReplicationApplianceResponse")]
    System.Threading.Tasks.Task RemoveReplicationApplianceAsync(string networkId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVReplicationApplianceManager/IDTAVRep" +
        "licationApplianceManager/SetVimServerCredentials", ReplyAction="http://www.doubletake.com/Virtualization/DTAVReplicationApplianceManager/IDTAVRep" +
        "licationApplianceManager/SetVimServerCredentialsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Virtualization/DTAVReplicationApplianceManager/IDTAVRep" +
        "licationApplianceManager/SetVimServerCredentialsCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void SetVimServerCredentials(string networkId, DoubleTake.Core.Contract.Credentials credentials);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVReplicationApplianceManager/IDTAVRep" +
        "licationApplianceManager/SetVimServerCredentials", ReplyAction="http://www.doubletake.com/Virtualization/DTAVReplicationApplianceManager/IDTAVRep" +
        "licationApplianceManager/SetVimServerCredentialsResponse")]
    System.Threading.Tasks.Task SetVimServerCredentialsAsync(string networkId, DoubleTake.Core.Contract.Credentials credentials);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVReplicationApplianceManager/IDTAVRep" +
        "licationApplianceManager/SetReplicationApplianceCredentials", ReplyAction="http://www.doubletake.com/Virtualization/DTAVReplicationApplianceManager/IDTAVRep" +
        "licationApplianceManager/SetReplicationApplianceCredentialsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Virtualization/DTAVReplicationApplianceManager/IDTAVRep" +
        "licationApplianceManager/SetReplicationApplianceCredentialsCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void SetReplicationApplianceCredentials(string managementAddress, DoubleTake.Core.Contract.Credentials credentials);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVReplicationApplianceManager/IDTAVRep" +
        "licationApplianceManager/SetReplicationApplianceCredentials", ReplyAction="http://www.doubletake.com/Virtualization/DTAVReplicationApplianceManager/IDTAVRep" +
        "licationApplianceManager/SetReplicationApplianceCredentialsResponse")]
    System.Threading.Tasks.Task SetReplicationApplianceCredentialsAsync(string managementAddress, DoubleTake.Core.Contract.Credentials credentials);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVReplicationApplianceManager/IDTAVRep" +
        "licationApplianceManager/AddVimServerAndReplicationAppliance", ReplyAction="http://www.doubletake.com/Virtualization/DTAVReplicationApplianceManager/IDTAVRep" +
        "licationApplianceManager/AddVimServerAndReplicationApplianceResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Virtualization.Contract.DTAV.AddVimServerAndRAFault), Action="http://www.doubletake.com/Virtualization/DTAVReplicationApplianceManager/IDTAVRep" +
        "licationApplianceManager/AddVimServerAndReplicationApplianceAddVimServerAndRAFau" +
        "ltFault", Name="AddVimServerAndRAFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Virtualization.Contract.DTAV")]
    void AddVimServerAndReplicationAppliance(DoubleTake.Virtualization.Contract.DTAV.DtavVimServer vimServer, DoubleTake.Virtualization.Contract.DTAV.DtavReplicationAppliance appliance);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVReplicationApplianceManager/IDTAVRep" +
        "licationApplianceManager/AddVimServerAndReplicationAppliance", ReplyAction="http://www.doubletake.com/Virtualization/DTAVReplicationApplianceManager/IDTAVRep" +
        "licationApplianceManager/AddVimServerAndReplicationApplianceResponse")]
    System.Threading.Tasks.Task AddVimServerAndReplicationApplianceAsync(DoubleTake.Virtualization.Contract.DTAV.DtavVimServer vimServer, DoubleTake.Virtualization.Contract.DTAV.DtavReplicationAppliance appliance);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IDTAVReplicationApplianceManagerChannel : IDTAVReplicationApplianceManager, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class DTAVReplicationApplianceManagerClient : System.ServiceModel.ClientBase<IDTAVReplicationApplianceManager>, IDTAVReplicationApplianceManager
{
    
    public DTAVReplicationApplianceManagerClient()
    {
    }
    
    public DTAVReplicationApplianceManagerClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public DTAVReplicationApplianceManagerClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public DTAVReplicationApplianceManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public DTAVReplicationApplianceManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public DoubleTake.Virtualization.Contract.DTAV.DtavVimServer[] GetVimServersandReplicationAppliances()
    {
        return base.Channel.GetVimServersandReplicationAppliances();
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Virtualization.Contract.DTAV.DtavVimServer[]> GetVimServersandReplicationAppliancesAsync()
    {
        return base.Channel.GetVimServersandReplicationAppliancesAsync();
    }
    
    public void RemoveVimServer(string networkId)
    {
        base.Channel.RemoveVimServer(networkId);
    }
    
    public System.Threading.Tasks.Task RemoveVimServerAsync(string networkId)
    {
        return base.Channel.RemoveVimServerAsync(networkId);
    }
    
    public void RemoveReplicationAppliance(string networkId)
    {
        base.Channel.RemoveReplicationAppliance(networkId);
    }
    
    public System.Threading.Tasks.Task RemoveReplicationApplianceAsync(string networkId)
    {
        return base.Channel.RemoveReplicationApplianceAsync(networkId);
    }
    
    public void SetVimServerCredentials(string networkId, DoubleTake.Core.Contract.Credentials credentials)
    {
        base.Channel.SetVimServerCredentials(networkId, credentials);
    }
    
    public System.Threading.Tasks.Task SetVimServerCredentialsAsync(string networkId, DoubleTake.Core.Contract.Credentials credentials)
    {
        return base.Channel.SetVimServerCredentialsAsync(networkId, credentials);
    }
    
    public void SetReplicationApplianceCredentials(string managementAddress, DoubleTake.Core.Contract.Credentials credentials)
    {
        base.Channel.SetReplicationApplianceCredentials(managementAddress, credentials);
    }
    
    public System.Threading.Tasks.Task SetReplicationApplianceCredentialsAsync(string managementAddress, DoubleTake.Core.Contract.Credentials credentials)
    {
        return base.Channel.SetReplicationApplianceCredentialsAsync(managementAddress, credentials);
    }
    
    public void AddVimServerAndReplicationAppliance(DoubleTake.Virtualization.Contract.DTAV.DtavVimServer vimServer, DoubleTake.Virtualization.Contract.DTAV.DtavReplicationAppliance appliance)
    {
        base.Channel.AddVimServerAndReplicationAppliance(vimServer, appliance);
    }
    
    public System.Threading.Tasks.Task AddVimServerAndReplicationApplianceAsync(DoubleTake.Virtualization.Contract.DTAV.DtavVimServer vimServer, DoubleTake.Virtualization.Contract.DTAV.DtavReplicationAppliance appliance)
    {
        return base.Channel.AddVimServerAndReplicationApplianceAsync(vimServer, appliance);
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate", ConfigurationName="IDTAVReplicationAppliancePrivate")]
public interface IDTAVReplicationAppliancePrivate
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetSnapshots", ReplyAction="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetSnapshotsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetSnapshotsCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Core.Contract.Connection.SnapshotEntry[] GetSnapshots(System.Guid jobId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetSnapshots", ReplyAction="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetSnapshotsResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.Connection.SnapshotEntry[]> GetSnapshotsAsync(System.Guid jobId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/SetLicensedStatus", ReplyAction="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/SetLicensedStatusResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/SetLicensedStatusCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void SetLicensedStatus(System.Guid jobId, DoubleTake.Virtualization.Contract.DTAV.LicenseData licenseData);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/SetLicensedStatus", ReplyAction="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/SetLicensedStatusResponse")]
    System.Threading.Tasks.Task SetLicensedStatusAsync(System.Guid jobId, DoubleTake.Virtualization.Contract.DTAV.LicenseData licenseData);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/SetLicensedStatusForAllJobs", ReplyAction="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/SetLicensedStatusForAllJobsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/SetLicensedStatusForAllJobsCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void SetLicensedStatusForAllJobs(DoubleTake.Virtualization.Contract.DTAV.LicenseData licenseData);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/SetLicensedStatusForAllJobs", ReplyAction="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/SetLicensedStatusForAllJobsResponse")]
    System.Threading.Tasks.Task SetLicensedStatusForAllJobsAsync(DoubleTake.Virtualization.Contract.DTAV.LicenseData licenseData);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetControlledServerInfo", ReplyAction="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetControlledServerInfoResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetControlledServerInfoCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Core.Contract.ControlledServerInfo GetControlledServerInfo();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetControlledServerInfo", ReplyAction="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetControlledServerInfoResponse")]
    System.Threading.Tasks.Task<DoubleTake.Core.Contract.ControlledServerInfo> GetControlledServerInfoAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/Ping", ReplyAction="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/PingResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/PingCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void Ping();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/Ping", ReplyAction="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/PingResponse")]
    System.Threading.Tasks.Task PingAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/Shutdown", ReplyAction="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/ShutdownResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/ShutdownCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void Shutdown();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/Shutdown", ReplyAction="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/ShutdownResponse")]
    System.Threading.Tasks.Task ShutdownAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetClustersandEsxServers", ReplyAction="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetClustersandEsxServersResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetClustersandEsxServersCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Virtualization.Contract.DTAV.DtavHostAndCluster[] GetClustersandEsxServers(DoubleTake.Communication.ServiceConnectionParameters vimScp);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetClustersandEsxServers", ReplyAction="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetClustersandEsxServersResponse")]
    System.Threading.Tasks.Task<DoubleTake.Virtualization.Contract.DTAV.DtavHostAndCluster[]> GetClustersandEsxServersAsync(DoubleTake.Communication.ServiceConnectionParameters vimScp);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetVirtualMachines", ReplyAction="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetVirtualMachinesResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetVirtualMachinesCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Virtualization.Contract.DTAV.DtavVmInfo[] GetVirtualMachines(DoubleTake.Communication.ServiceConnectionParameters vimScp, string esxOrClusterName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetVirtualMachines", ReplyAction="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetVirtualMachinesResponse")]
    System.Threading.Tasks.Task<DoubleTake.Virtualization.Contract.DTAV.DtavVmInfo[]> GetVirtualMachinesAsync(DoubleTake.Communication.ServiceConnectionParameters vimScp, string esxOrClusterName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetVirtualMachinesById", ReplyAction="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetVirtualMachinesByIdResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetVirtualMachinesByIdCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Virtualization.Contract.DTAV.DtavVmInfo[] GetVirtualMachinesById(DoubleTake.Communication.ServiceConnectionParameters vimScp, string[] vmGuids);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetVirtualMachinesById", ReplyAction="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetVirtualMachinesByIdResponse")]
    System.Threading.Tasks.Task<DoubleTake.Virtualization.Contract.DTAV.DtavVmInfo[]> GetVirtualMachinesByIdAsync(DoubleTake.Communication.ServiceConnectionParameters vimScp, string[] vmGuids);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetVolumeQualificationResults", ReplyAction="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetVolumeQualificationResultsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetVolumeQualificationResultsCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Virtualization.Contract.VolumeQualificationResults[] GetVolumeQualificationResults(DoubleTake.Communication.ServiceConnectionParameters vimScp, string esxorClusterName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetVolumeQualificationResults", ReplyAction="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetVolumeQualificationResultsResponse")]
    System.Threading.Tasks.Task<DoubleTake.Virtualization.Contract.VolumeQualificationResults[]> GetVolumeQualificationResultsAsync(DoubleTake.Communication.ServiceConnectionParameters vimScp, string esxorClusterName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetVirtualSwitchInfo", ReplyAction="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetVirtualSwitchInfoResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetVirtualSwitchInfoCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Virtualization.Contract.VirtualSwitchInfo[] GetVirtualSwitchInfo(DoubleTake.Communication.ServiceConnectionParameters vimScp, string esxorClusterName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetVirtualSwitchInfo", ReplyAction="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetVirtualSwitchInfoResponse")]
    System.Threading.Tasks.Task<DoubleTake.Virtualization.Contract.VirtualSwitchInfo[]> GetVirtualSwitchInfoAsync(DoubleTake.Communication.ServiceConnectionParameters vimScp, string esxorClusterName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetVmHostId", ReplyAction="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetVmHostIdResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetVmHostIdCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    string GetVmHostId(DoubleTake.Communication.ServiceConnectionParameters vimScp, string vmUuid);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetVmHostId", ReplyAction="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetVmHostIdResponse")]
    System.Threading.Tasks.Task<string> GetVmHostIdAsync(DoubleTake.Communication.ServiceConnectionParameters vimScp, string vmUuid);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetClusterHosts", ReplyAction="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetClusterHostsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetClusterHostsCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    string[] GetClusterHosts(DoubleTake.Communication.ServiceConnectionParameters vimScp, string clusterName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetClusterHosts", ReplyAction="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetClusterHostsResponse")]
    System.Threading.Tasks.Task<string[]> GetClusterHostsAsync(DoubleTake.Communication.ServiceConnectionParameters vimScp, string clusterName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetHostIdOrClusterName", ReplyAction="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetHostIdOrClusterNameResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetHostIdOrClusterNameCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    string GetHostIdOrClusterName(DoubleTake.Communication.ServiceConnectionParameters vimScp, string esxHostName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetHostIdOrClusterName", ReplyAction="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetHostIdOrClusterNameResponse")]
    System.Threading.Tasks.Task<string> GetHostIdOrClusterNameAsync(DoubleTake.Communication.ServiceConnectionParameters vimScp, string esxHostName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetVmIdByVmName", ReplyAction="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetVmIdByVmNameResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetVmIdByVmNameCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    string GetVmIdByVmName(DoubleTake.Communication.ServiceConnectionParameters vimScp, string vmDisplayName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetVmIdByVmName", ReplyAction="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetVmIdByVmNameResponse")]
    System.Threading.Tasks.Task<string> GetVmIdByVmNameAsync(DoubleTake.Communication.ServiceConnectionParameters vimScp, string vmDisplayName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetVmIdByHostUniqueId", ReplyAction="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetVmIdByHostUniqueIdResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetVmIdByHostUniqueIdCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    string GetVmIdByHostUniqueId(DoubleTake.Communication.ServiceConnectionParameters vimScp, string hostUniqueId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetVmIdByHostUniqueId", ReplyAction="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetVmIdByHostUniqueIdResponse")]
    System.Threading.Tasks.Task<string> GetVmIdByHostUniqueIdAsync(DoubleTake.Communication.ServiceConnectionParameters vimScp, string hostUniqueId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetDataStoreUrl", ReplyAction="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetDataStoreUrlResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetDataStoreUrlCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    string GetDataStoreUrl(DoubleTake.Communication.ServiceConnectionParameters vimScp, string targetEsxHostName, string dataStoreName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetDataStoreUrl", ReplyAction="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetDataStoreUrlResponse")]
    System.Threading.Tasks.Task<string> GetDataStoreUrlAsync(DoubleTake.Communication.ServiceConnectionParameters vimScp, string targetEsxHostName, string dataStoreName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetDataStoreFreeDiskSpaceBytes", ReplyAction="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetDataStoreFreeDiskSpaceBytesResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetDataStoreFreeDiskSpaceBytesCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    long GetDataStoreFreeDiskSpaceBytes(DoubleTake.Communication.ServiceConnectionParameters vimScp, string targetEsxHostName, string dataStoreName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetDataStoreFreeDiskSpaceBytes", ReplyAction="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetDataStoreFreeDiskSpaceBytesResponse")]
    System.Threading.Tasks.Task<long> GetDataStoreFreeDiskSpaceBytesAsync(DoubleTake.Communication.ServiceConnectionParameters vimScp, string targetEsxHostName, string dataStoreName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetVmById", ReplyAction="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetVmByIdResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetVmByIdCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Virtualization.Contract.DTAV.DtavVmInfo GetVmById(DoubleTake.Communication.ServiceConnectionParameters vimScp, string vmUuid);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetVmById", ReplyAction="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetVmByIdResponse")]
    System.Threading.Tasks.Task<DoubleTake.Virtualization.Contract.DTAV.DtavVmInfo> GetVmByIdAsync(DoubleTake.Communication.ServiceConnectionParameters vimScp, string vmUuid);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/IsVmPoweredOn", ReplyAction="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/IsVmPoweredOnResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/IsVmPoweredOnCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    bool IsVmPoweredOn(DoubleTake.Communication.ServiceConnectionParameters vimScp, string vmUuid);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/IsVmPoweredOn", ReplyAction="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/IsVmPoweredOnResponse")]
    System.Threading.Tasks.Task<bool> IsVmPoweredOnAsync(DoubleTake.Communication.ServiceConnectionParameters vimScp, string vmUuid);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/getDtavGuestInfo", ReplyAction="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/getDtavGuestInfoResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/getDtavGuestInfoCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Virtualization.Contract.DTAV.DtavGuestInfo[] getDtavGuestInfo(DoubleTake.Communication.ServiceConnectionParameters vimScp, string[] vmGuids, DoubleTake.Core.Contract.Credentials credentials);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/getDtavGuestInfo", ReplyAction="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/getDtavGuestInfoResponse")]
    System.Threading.Tasks.Task<DoubleTake.Virtualization.Contract.DTAV.DtavGuestInfo[]> getDtavGuestInfoAsync(DoubleTake.Communication.ServiceConnectionParameters vimScp, string[] vmGuids, DoubleTake.Core.Contract.Credentials credentials);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetAllVimInfo", ReplyAction="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetAllVimInfoResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetAllVimInfoCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Virtualization.Contract.DTAV.DtavVimInfo GetAllVimInfo(DoubleTake.Communication.ServiceConnectionParameters vimScp, string esxorClusterName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetAllVimInfo", ReplyAction="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetAllVimInfoResponse")]
    System.Threading.Tasks.Task<DoubleTake.Virtualization.Contract.DTAV.DtavVimInfo> GetAllVimInfoAsync(DoubleTake.Communication.ServiceConnectionParameters vimScp, string esxorClusterName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/CheckForDuplicateVms", ReplyAction="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/CheckForDuplicateVmsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/CheckForDuplicateVmsCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    string[] CheckForDuplicateVms(DoubleTake.Communication.ServiceConnectionParameters vimScp, string[] replicaVmDisplayNames);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/CheckForDuplicateVms", ReplyAction="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/CheckForDuplicateVmsResponse")]
    System.Threading.Tasks.Task<string[]> CheckForDuplicateVmsAsync(DoubleTake.Communication.ServiceConnectionParameters vimScp, string[] replicaVmDisplayNames);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/CheckForDuplicateFolders", ReplyAction="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/CheckForDuplicateFoldersResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/CheckForDuplicateFoldersCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    string[] CheckForDuplicateFolders(DoubleTake.Communication.ServiceConnectionParameters vimScp, string datastoreName, string[] replicaVmDisplayNames);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/CheckForDuplicateFolders", ReplyAction="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/CheckForDuplicateFoldersResponse")]
    System.Threading.Tasks.Task<string[]> CheckForDuplicateFoldersAsync(DoubleTake.Communication.ServiceConnectionParameters vimScp, string datastoreName, string[] replicaVmDisplayNames);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetVimVersion", ReplyAction="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetVimVersionResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetVimVersionCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    string GetVimVersion(DoubleTake.Communication.ServiceConnectionParameters vimScp);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetVimVersion", ReplyAction="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetVimVersionResponse")]
    System.Threading.Tasks.Task<string> GetVimVersionAsync(DoubleTake.Communication.ServiceConnectionParameters vimScp);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/ValidateVimCredentials", ReplyAction="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/ValidateVimCredentialsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/ValidateVimCredentialsCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    bool ValidateVimCredentials(DoubleTake.Communication.ServiceConnectionParameters vimScp);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/ValidateVimCredentials", ReplyAction="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/ValidateVimCredentialsResponse")]
    System.Threading.Tasks.Task<bool> ValidateVimCredentialsAsync(DoubleTake.Communication.ServiceConnectionParameters vimScp);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/SetEmailNotificationFilter", ReplyAction="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/SetEmailNotificationFilterResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/SetEmailNotificationFilterCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    void SetEmailNotificationFilter(string notificationFilter);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/SetEmailNotificationFilter", ReplyAction="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/SetEmailNotificationFilterResponse")]
    System.Threading.Tasks.Task SetEmailNotificationFilterAsync(string notificationFilter);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetPendingEmailNotifications", ReplyAction="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetPendingEmailNotificationsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetPendingEmailNotificationsCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Virtualization.Contract.DTAV.EmailNotificationInfo[] GetPendingEmailNotifications();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetPendingEmailNotifications", ReplyAction="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetPendingEmailNotificationsResponse")]
    System.Threading.Tasks.Task<DoubleTake.Virtualization.Contract.DTAV.EmailNotificationInfo[]> GetPendingEmailNotificationsAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/FindDatastoreItemsInFolder", ReplyAction="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/FindDatastoreItemsInFolderResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/FindDatastoreItemsInFolderCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Virtualization.Contract.VimDatastoreItem[] FindDatastoreItemsInFolder(DoubleTake.Communication.ServiceConnectionParameters vimScp, string datastoreName, string folderPath);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/FindDatastoreItemsInFolder", ReplyAction="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/FindDatastoreItemsInFolderResponse")]
    System.Threading.Tasks.Task<DoubleTake.Virtualization.Contract.VimDatastoreItem[]> FindDatastoreItemsInFolderAsync(DoubleTake.Communication.ServiceConnectionParameters vimScp, string datastoreName, string folderPath);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetCBTUnlicensedVms", ReplyAction="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetCBTUnlicensedVmsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetCBTUnlicensedVmsCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    string[] GetCBTUnlicensedVms(DoubleTake.Communication.ServiceConnectionParameters vimScp, string[] vmGuids);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetCBTUnlicensedVms", ReplyAction="http://www.doubletake.com/Virtualization/DTAVReplicationAppliancePrivate/IDTAVRep" +
        "licationAppliancePrivate/GetCBTUnlicensedVmsResponse")]
    System.Threading.Tasks.Task<string[]> GetCBTUnlicensedVmsAsync(DoubleTake.Communication.ServiceConnectionParameters vimScp, string[] vmGuids);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IDTAVReplicationAppliancePrivateChannel : IDTAVReplicationAppliancePrivate, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class DTAVReplicationAppliancePrivateClient : System.ServiceModel.ClientBase<IDTAVReplicationAppliancePrivate>, IDTAVReplicationAppliancePrivate
{
    
    public DTAVReplicationAppliancePrivateClient()
    {
    }
    
    public DTAVReplicationAppliancePrivateClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public DTAVReplicationAppliancePrivateClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public DTAVReplicationAppliancePrivateClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public DTAVReplicationAppliancePrivateClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public DoubleTake.Core.Contract.Connection.SnapshotEntry[] GetSnapshots(System.Guid jobId)
    {
        return base.Channel.GetSnapshots(jobId);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.Connection.SnapshotEntry[]> GetSnapshotsAsync(System.Guid jobId)
    {
        return base.Channel.GetSnapshotsAsync(jobId);
    }
    
    public void SetLicensedStatus(System.Guid jobId, DoubleTake.Virtualization.Contract.DTAV.LicenseData licenseData)
    {
        base.Channel.SetLicensedStatus(jobId, licenseData);
    }
    
    public System.Threading.Tasks.Task SetLicensedStatusAsync(System.Guid jobId, DoubleTake.Virtualization.Contract.DTAV.LicenseData licenseData)
    {
        return base.Channel.SetLicensedStatusAsync(jobId, licenseData);
    }
    
    public void SetLicensedStatusForAllJobs(DoubleTake.Virtualization.Contract.DTAV.LicenseData licenseData)
    {
        base.Channel.SetLicensedStatusForAllJobs(licenseData);
    }
    
    public System.Threading.Tasks.Task SetLicensedStatusForAllJobsAsync(DoubleTake.Virtualization.Contract.DTAV.LicenseData licenseData)
    {
        return base.Channel.SetLicensedStatusForAllJobsAsync(licenseData);
    }
    
    public DoubleTake.Core.Contract.ControlledServerInfo GetControlledServerInfo()
    {
        return base.Channel.GetControlledServerInfo();
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Core.Contract.ControlledServerInfo> GetControlledServerInfoAsync()
    {
        return base.Channel.GetControlledServerInfoAsync();
    }
    
    public void Ping()
    {
        base.Channel.Ping();
    }
    
    public System.Threading.Tasks.Task PingAsync()
    {
        return base.Channel.PingAsync();
    }
    
    public void Shutdown()
    {
        base.Channel.Shutdown();
    }
    
    public System.Threading.Tasks.Task ShutdownAsync()
    {
        return base.Channel.ShutdownAsync();
    }
    
    public DoubleTake.Virtualization.Contract.DTAV.DtavHostAndCluster[] GetClustersandEsxServers(DoubleTake.Communication.ServiceConnectionParameters vimScp)
    {
        return base.Channel.GetClustersandEsxServers(vimScp);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Virtualization.Contract.DTAV.DtavHostAndCluster[]> GetClustersandEsxServersAsync(DoubleTake.Communication.ServiceConnectionParameters vimScp)
    {
        return base.Channel.GetClustersandEsxServersAsync(vimScp);
    }
    
    public DoubleTake.Virtualization.Contract.DTAV.DtavVmInfo[] GetVirtualMachines(DoubleTake.Communication.ServiceConnectionParameters vimScp, string esxOrClusterName)
    {
        return base.Channel.GetVirtualMachines(vimScp, esxOrClusterName);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Virtualization.Contract.DTAV.DtavVmInfo[]> GetVirtualMachinesAsync(DoubleTake.Communication.ServiceConnectionParameters vimScp, string esxOrClusterName)
    {
        return base.Channel.GetVirtualMachinesAsync(vimScp, esxOrClusterName);
    }
    
    public DoubleTake.Virtualization.Contract.DTAV.DtavVmInfo[] GetVirtualMachinesById(DoubleTake.Communication.ServiceConnectionParameters vimScp, string[] vmGuids)
    {
        return base.Channel.GetVirtualMachinesById(vimScp, vmGuids);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Virtualization.Contract.DTAV.DtavVmInfo[]> GetVirtualMachinesByIdAsync(DoubleTake.Communication.ServiceConnectionParameters vimScp, string[] vmGuids)
    {
        return base.Channel.GetVirtualMachinesByIdAsync(vimScp, vmGuids);
    }
    
    public DoubleTake.Virtualization.Contract.VolumeQualificationResults[] GetVolumeQualificationResults(DoubleTake.Communication.ServiceConnectionParameters vimScp, string esxorClusterName)
    {
        return base.Channel.GetVolumeQualificationResults(vimScp, esxorClusterName);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Virtualization.Contract.VolumeQualificationResults[]> GetVolumeQualificationResultsAsync(DoubleTake.Communication.ServiceConnectionParameters vimScp, string esxorClusterName)
    {
        return base.Channel.GetVolumeQualificationResultsAsync(vimScp, esxorClusterName);
    }
    
    public DoubleTake.Virtualization.Contract.VirtualSwitchInfo[] GetVirtualSwitchInfo(DoubleTake.Communication.ServiceConnectionParameters vimScp, string esxorClusterName)
    {
        return base.Channel.GetVirtualSwitchInfo(vimScp, esxorClusterName);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Virtualization.Contract.VirtualSwitchInfo[]> GetVirtualSwitchInfoAsync(DoubleTake.Communication.ServiceConnectionParameters vimScp, string esxorClusterName)
    {
        return base.Channel.GetVirtualSwitchInfoAsync(vimScp, esxorClusterName);
    }
    
    public string GetVmHostId(DoubleTake.Communication.ServiceConnectionParameters vimScp, string vmUuid)
    {
        return base.Channel.GetVmHostId(vimScp, vmUuid);
    }
    
    public System.Threading.Tasks.Task<string> GetVmHostIdAsync(DoubleTake.Communication.ServiceConnectionParameters vimScp, string vmUuid)
    {
        return base.Channel.GetVmHostIdAsync(vimScp, vmUuid);
    }
    
    public string[] GetClusterHosts(DoubleTake.Communication.ServiceConnectionParameters vimScp, string clusterName)
    {
        return base.Channel.GetClusterHosts(vimScp, clusterName);
    }
    
    public System.Threading.Tasks.Task<string[]> GetClusterHostsAsync(DoubleTake.Communication.ServiceConnectionParameters vimScp, string clusterName)
    {
        return base.Channel.GetClusterHostsAsync(vimScp, clusterName);
    }
    
    public string GetHostIdOrClusterName(DoubleTake.Communication.ServiceConnectionParameters vimScp, string esxHostName)
    {
        return base.Channel.GetHostIdOrClusterName(vimScp, esxHostName);
    }
    
    public System.Threading.Tasks.Task<string> GetHostIdOrClusterNameAsync(DoubleTake.Communication.ServiceConnectionParameters vimScp, string esxHostName)
    {
        return base.Channel.GetHostIdOrClusterNameAsync(vimScp, esxHostName);
    }
    
    public string GetVmIdByVmName(DoubleTake.Communication.ServiceConnectionParameters vimScp, string vmDisplayName)
    {
        return base.Channel.GetVmIdByVmName(vimScp, vmDisplayName);
    }
    
    public System.Threading.Tasks.Task<string> GetVmIdByVmNameAsync(DoubleTake.Communication.ServiceConnectionParameters vimScp, string vmDisplayName)
    {
        return base.Channel.GetVmIdByVmNameAsync(vimScp, vmDisplayName);
    }
    
    public string GetVmIdByHostUniqueId(DoubleTake.Communication.ServiceConnectionParameters vimScp, string hostUniqueId)
    {
        return base.Channel.GetVmIdByHostUniqueId(vimScp, hostUniqueId);
    }
    
    public System.Threading.Tasks.Task<string> GetVmIdByHostUniqueIdAsync(DoubleTake.Communication.ServiceConnectionParameters vimScp, string hostUniqueId)
    {
        return base.Channel.GetVmIdByHostUniqueIdAsync(vimScp, hostUniqueId);
    }
    
    public string GetDataStoreUrl(DoubleTake.Communication.ServiceConnectionParameters vimScp, string targetEsxHostName, string dataStoreName)
    {
        return base.Channel.GetDataStoreUrl(vimScp, targetEsxHostName, dataStoreName);
    }
    
    public System.Threading.Tasks.Task<string> GetDataStoreUrlAsync(DoubleTake.Communication.ServiceConnectionParameters vimScp, string targetEsxHostName, string dataStoreName)
    {
        return base.Channel.GetDataStoreUrlAsync(vimScp, targetEsxHostName, dataStoreName);
    }
    
    public long GetDataStoreFreeDiskSpaceBytes(DoubleTake.Communication.ServiceConnectionParameters vimScp, string targetEsxHostName, string dataStoreName)
    {
        return base.Channel.GetDataStoreFreeDiskSpaceBytes(vimScp, targetEsxHostName, dataStoreName);
    }
    
    public System.Threading.Tasks.Task<long> GetDataStoreFreeDiskSpaceBytesAsync(DoubleTake.Communication.ServiceConnectionParameters vimScp, string targetEsxHostName, string dataStoreName)
    {
        return base.Channel.GetDataStoreFreeDiskSpaceBytesAsync(vimScp, targetEsxHostName, dataStoreName);
    }
    
    public DoubleTake.Virtualization.Contract.DTAV.DtavVmInfo GetVmById(DoubleTake.Communication.ServiceConnectionParameters vimScp, string vmUuid)
    {
        return base.Channel.GetVmById(vimScp, vmUuid);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Virtualization.Contract.DTAV.DtavVmInfo> GetVmByIdAsync(DoubleTake.Communication.ServiceConnectionParameters vimScp, string vmUuid)
    {
        return base.Channel.GetVmByIdAsync(vimScp, vmUuid);
    }
    
    public bool IsVmPoweredOn(DoubleTake.Communication.ServiceConnectionParameters vimScp, string vmUuid)
    {
        return base.Channel.IsVmPoweredOn(vimScp, vmUuid);
    }
    
    public System.Threading.Tasks.Task<bool> IsVmPoweredOnAsync(DoubleTake.Communication.ServiceConnectionParameters vimScp, string vmUuid)
    {
        return base.Channel.IsVmPoweredOnAsync(vimScp, vmUuid);
    }
    
    public DoubleTake.Virtualization.Contract.DTAV.DtavGuestInfo[] getDtavGuestInfo(DoubleTake.Communication.ServiceConnectionParameters vimScp, string[] vmGuids, DoubleTake.Core.Contract.Credentials credentials)
    {
        return base.Channel.getDtavGuestInfo(vimScp, vmGuids, credentials);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Virtualization.Contract.DTAV.DtavGuestInfo[]> getDtavGuestInfoAsync(DoubleTake.Communication.ServiceConnectionParameters vimScp, string[] vmGuids, DoubleTake.Core.Contract.Credentials credentials)
    {
        return base.Channel.getDtavGuestInfoAsync(vimScp, vmGuids, credentials);
    }
    
    public DoubleTake.Virtualization.Contract.DTAV.DtavVimInfo GetAllVimInfo(DoubleTake.Communication.ServiceConnectionParameters vimScp, string esxorClusterName)
    {
        return base.Channel.GetAllVimInfo(vimScp, esxorClusterName);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Virtualization.Contract.DTAV.DtavVimInfo> GetAllVimInfoAsync(DoubleTake.Communication.ServiceConnectionParameters vimScp, string esxorClusterName)
    {
        return base.Channel.GetAllVimInfoAsync(vimScp, esxorClusterName);
    }
    
    public string[] CheckForDuplicateVms(DoubleTake.Communication.ServiceConnectionParameters vimScp, string[] replicaVmDisplayNames)
    {
        return base.Channel.CheckForDuplicateVms(vimScp, replicaVmDisplayNames);
    }
    
    public System.Threading.Tasks.Task<string[]> CheckForDuplicateVmsAsync(DoubleTake.Communication.ServiceConnectionParameters vimScp, string[] replicaVmDisplayNames)
    {
        return base.Channel.CheckForDuplicateVmsAsync(vimScp, replicaVmDisplayNames);
    }
    
    public string[] CheckForDuplicateFolders(DoubleTake.Communication.ServiceConnectionParameters vimScp, string datastoreName, string[] replicaVmDisplayNames)
    {
        return base.Channel.CheckForDuplicateFolders(vimScp, datastoreName, replicaVmDisplayNames);
    }
    
    public System.Threading.Tasks.Task<string[]> CheckForDuplicateFoldersAsync(DoubleTake.Communication.ServiceConnectionParameters vimScp, string datastoreName, string[] replicaVmDisplayNames)
    {
        return base.Channel.CheckForDuplicateFoldersAsync(vimScp, datastoreName, replicaVmDisplayNames);
    }
    
    public string GetVimVersion(DoubleTake.Communication.ServiceConnectionParameters vimScp)
    {
        return base.Channel.GetVimVersion(vimScp);
    }
    
    public System.Threading.Tasks.Task<string> GetVimVersionAsync(DoubleTake.Communication.ServiceConnectionParameters vimScp)
    {
        return base.Channel.GetVimVersionAsync(vimScp);
    }
    
    public bool ValidateVimCredentials(DoubleTake.Communication.ServiceConnectionParameters vimScp)
    {
        return base.Channel.ValidateVimCredentials(vimScp);
    }
    
    public System.Threading.Tasks.Task<bool> ValidateVimCredentialsAsync(DoubleTake.Communication.ServiceConnectionParameters vimScp)
    {
        return base.Channel.ValidateVimCredentialsAsync(vimScp);
    }
    
    public void SetEmailNotificationFilter(string notificationFilter)
    {
        base.Channel.SetEmailNotificationFilter(notificationFilter);
    }
    
    public System.Threading.Tasks.Task SetEmailNotificationFilterAsync(string notificationFilter)
    {
        return base.Channel.SetEmailNotificationFilterAsync(notificationFilter);
    }
    
    public DoubleTake.Virtualization.Contract.DTAV.EmailNotificationInfo[] GetPendingEmailNotifications()
    {
        return base.Channel.GetPendingEmailNotifications();
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Virtualization.Contract.DTAV.EmailNotificationInfo[]> GetPendingEmailNotificationsAsync()
    {
        return base.Channel.GetPendingEmailNotificationsAsync();
    }
    
    public DoubleTake.Virtualization.Contract.VimDatastoreItem[] FindDatastoreItemsInFolder(DoubleTake.Communication.ServiceConnectionParameters vimScp, string datastoreName, string folderPath)
    {
        return base.Channel.FindDatastoreItemsInFolder(vimScp, datastoreName, folderPath);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Virtualization.Contract.VimDatastoreItem[]> FindDatastoreItemsInFolderAsync(DoubleTake.Communication.ServiceConnectionParameters vimScp, string datastoreName, string folderPath)
    {
        return base.Channel.FindDatastoreItemsInFolderAsync(vimScp, datastoreName, folderPath);
    }
    
    public string[] GetCBTUnlicensedVms(DoubleTake.Communication.ServiceConnectionParameters vimScp, string[] vmGuids)
    {
        return base.Channel.GetCBTUnlicensedVms(vimScp, vmGuids);
    }
    
    public System.Threading.Tasks.Task<string[]> GetCBTUnlicensedVmsAsync(DoubleTake.Communication.ServiceConnectionParameters vimScp, string[] vmGuids)
    {
        return base.Channel.GetCBTUnlicensedVmsAsync(vimScp, vmGuids);
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace="http://www.doubletake.com/Virtualization/DTAVWorkflowManager", ConfigurationName="IDTAVWorkflowManager")]
public interface IDTAVWorkflowManager
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVWorkflowManager/IDTAVWorkflowManager" +
        "/GetClustersAndEsxServers", ReplyAction="http://www.doubletake.com/Virtualization/DTAVWorkflowManager/IDTAVWorkflowManager" +
        "/GetClustersAndEsxServersResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Virtualization/DTAVWorkflowManager/IDTAVWorkflowManager" +
        "/GetClustersAndEsxServersCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Virtualization.Contract.DTAV.DtavHostAndCluster[] GetClustersAndEsxServers(string vimServerNetworkId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVWorkflowManager/IDTAVWorkflowManager" +
        "/GetClustersAndEsxServers", ReplyAction="http://www.doubletake.com/Virtualization/DTAVWorkflowManager/IDTAVWorkflowManager" +
        "/GetClustersAndEsxServersResponse")]
    System.Threading.Tasks.Task<DoubleTake.Virtualization.Contract.DTAV.DtavHostAndCluster[]> GetClustersAndEsxServersAsync(string vimServerNetworkId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVWorkflowManager/IDTAVWorkflowManager" +
        "/GetVirtualMachines", ReplyAction="http://www.doubletake.com/Virtualization/DTAVWorkflowManager/IDTAVWorkflowManager" +
        "/GetVirtualMachinesResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Virtualization/DTAVWorkflowManager/IDTAVWorkflowManager" +
        "/GetVirtualMachinesCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Virtualization.Contract.DTAV.DtavVmInfo[] GetVirtualMachines(string vimServerNetworkId, string esxOrClusterName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVWorkflowManager/IDTAVWorkflowManager" +
        "/GetVirtualMachines", ReplyAction="http://www.doubletake.com/Virtualization/DTAVWorkflowManager/IDTAVWorkflowManager" +
        "/GetVirtualMachinesResponse")]
    System.Threading.Tasks.Task<DoubleTake.Virtualization.Contract.DTAV.DtavVmInfo[]> GetVirtualMachinesAsync(string vimServerNetworkId, string esxOrClusterName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVWorkflowManager/IDTAVWorkflowManager" +
        "/GetRecommendedJobOptions", ReplyAction="http://www.doubletake.com/Virtualization/DTAVWorkflowManager/IDTAVWorkflowManager" +
        "/GetRecommendedJobOptionsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Virtualization/DTAVWorkflowManager/IDTAVWorkflowManager" +
        "/GetRecommendedJobOptionsCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Jobs.Contract.RecommendedJobOptions GetRecommendedJobOptions(DoubleTake.Common.Contract.Workload workload, DoubleTake.Jobs.Contract.JobCredentials jobCredentials, string sourceEsxOrCluster, string targetEsxOrCluster);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVWorkflowManager/IDTAVWorkflowManager" +
        "/GetRecommendedJobOptions", ReplyAction="http://www.doubletake.com/Virtualization/DTAVWorkflowManager/IDTAVWorkflowManager" +
        "/GetRecommendedJobOptionsResponse")]
    System.Threading.Tasks.Task<DoubleTake.Jobs.Contract.RecommendedJobOptions> GetRecommendedJobOptionsAsync(DoubleTake.Common.Contract.Workload workload, DoubleTake.Jobs.Contract.JobCredentials jobCredentials, string sourceEsxOrCluster, string targetEsxOrCluster);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVWorkflowManager/IDTAVWorkflowManager" +
        "/GetDtavOptions", ReplyAction="http://www.doubletake.com/Virtualization/DTAVWorkflowManager/IDTAVWorkflowManager" +
        "/GetDtavOptionsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Virtualization/DTAVWorkflowManager/IDTAVWorkflowManager" +
        "/GetDtavOptionsCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Jobs.Contract.DTAVOptions GetDtavOptions(string jobId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVWorkflowManager/IDTAVWorkflowManager" +
        "/GetDtavOptions", ReplyAction="http://www.doubletake.com/Virtualization/DTAVWorkflowManager/IDTAVWorkflowManager" +
        "/GetDtavOptionsResponse")]
    System.Threading.Tasks.Task<DoubleTake.Jobs.Contract.DTAVOptions> GetDtavOptionsAsync(string jobId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVWorkflowManager/IDTAVWorkflowManager" +
        "/VerifyJobOptions", ReplyAction="http://www.doubletake.com/Virtualization/DTAVWorkflowManager/IDTAVWorkflowManager" +
        "/VerifyJobOptionsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Virtualization/DTAVWorkflowManager/IDTAVWorkflowManager" +
        "/VerifyJobOptionsCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Common.Tasks.ActivityToken VerifyJobOptions(string jobType, DoubleTake.Jobs.Contract.JobOptions jobOptions, DoubleTake.Jobs.Contract.JobQualificationResults jobQualificationResults, DoubleTake.Jobs.Contract.JobCredentials jobCredentials);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVWorkflowManager/IDTAVWorkflowManager" +
        "/VerifyJobOptions", ReplyAction="http://www.doubletake.com/Virtualization/DTAVWorkflowManager/IDTAVWorkflowManager" +
        "/VerifyJobOptionsResponse")]
    System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> VerifyJobOptionsAsync(string jobType, DoubleTake.Jobs.Contract.JobOptions jobOptions, DoubleTake.Jobs.Contract.JobQualificationResults jobQualificationResults, DoubleTake.Jobs.Contract.JobCredentials jobCredentials);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVWorkflowManager/IDTAVWorkflowManager" +
        "/GetVerificationStatus", ReplyAction="http://www.doubletake.com/Virtualization/DTAVWorkflowManager/IDTAVWorkflowManager" +
        "/GetVerificationStatusResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Virtualization/DTAVWorkflowManager/IDTAVWorkflowManager" +
        "/GetVerificationStatusCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Jobs.Contract1.VerificationTaskStatus GetVerificationStatus(DoubleTake.Common.Tasks.ActivityToken taskToken);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVWorkflowManager/IDTAVWorkflowManager" +
        "/GetVerificationStatus", ReplyAction="http://www.doubletake.com/Virtualization/DTAVWorkflowManager/IDTAVWorkflowManager" +
        "/GetVerificationStatusResponse")]
    System.Threading.Tasks.Task<DoubleTake.Jobs.Contract1.VerificationTaskStatus> GetVerificationStatusAsync(DoubleTake.Common.Tasks.ActivityToken taskToken);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVWorkflowManager/IDTAVWorkflowManager" +
        "/GetLicenseQuantity", ReplyAction="http://www.doubletake.com/Virtualization/DTAVWorkflowManager/IDTAVWorkflowManager" +
        "/GetLicenseQuantityResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Virtualization/DTAVWorkflowManager/IDTAVWorkflowManager" +
        "/GetLicenseQuantityCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Virtualization.Contract.LicenseQuantity GetLicenseQuantity();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVWorkflowManager/IDTAVWorkflowManager" +
        "/GetLicenseQuantity", ReplyAction="http://www.doubletake.com/Virtualization/DTAVWorkflowManager/IDTAVWorkflowManager" +
        "/GetLicenseQuantityResponse")]
    System.Threading.Tasks.Task<DoubleTake.Virtualization.Contract.LicenseQuantity> GetLicenseQuantityAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVWorkflowManager/IDTAVWorkflowManager" +
        "/GetDtavGuestInfo", ReplyAction="http://www.doubletake.com/Virtualization/DTAVWorkflowManager/IDTAVWorkflowManager" +
        "/GetDtavGuestInfoResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Virtualization/DTAVWorkflowManager/IDTAVWorkflowManager" +
        "/GetDtavGuestInfoCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Virtualization.Contract.DTAV.DtavGuestInfo[] GetDtavGuestInfo(string vimServerNetworkId, string[] vmsGuid, DoubleTake.Core.Contract.Credentials vmCredentials);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVWorkflowManager/IDTAVWorkflowManager" +
        "/GetDtavGuestInfo", ReplyAction="http://www.doubletake.com/Virtualization/DTAVWorkflowManager/IDTAVWorkflowManager" +
        "/GetDtavGuestInfoResponse")]
    System.Threading.Tasks.Task<DoubleTake.Virtualization.Contract.DTAV.DtavGuestInfo[]> GetDtavGuestInfoAsync(string vimServerNetworkId, string[] vmsGuid, DoubleTake.Core.Contract.Credentials vmCredentials);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVWorkflowManager/IDTAVWorkflowManager" +
        "/FindDatastoreItemsInFolder", ReplyAction="http://www.doubletake.com/Virtualization/DTAVWorkflowManager/IDTAVWorkflowManager" +
        "/FindDatastoreItemsInFolderResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(DoubleTake.Common.Contract.CommonFault), Action="http://www.doubletake.com/Virtualization/DTAVWorkflowManager/IDTAVWorkflowManager" +
        "/FindDatastoreItemsInFolderCommonFaultFault", Name="CommonFault", Namespace="http://schemas.datacontract.org/2004/07/DoubleTake.Common.Contract")]
    DoubleTake.Virtualization.Contract.VimDatastoreItem[] FindDatastoreItemsInFolder(string vimServerNetworkId, DoubleTake.Core.Contract.Credentials vimCredentials, string datastoreName, string folderPath);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/DTAVWorkflowManager/IDTAVWorkflowManager" +
        "/FindDatastoreItemsInFolder", ReplyAction="http://www.doubletake.com/Virtualization/DTAVWorkflowManager/IDTAVWorkflowManager" +
        "/FindDatastoreItemsInFolderResponse")]
    System.Threading.Tasks.Task<DoubleTake.Virtualization.Contract.VimDatastoreItem[]> FindDatastoreItemsInFolderAsync(string vimServerNetworkId, DoubleTake.Core.Contract.Credentials vimCredentials, string datastoreName, string folderPath);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IDTAVWorkflowManagerChannel : IDTAVWorkflowManager, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class DTAVWorkflowManagerClient : System.ServiceModel.ClientBase<IDTAVWorkflowManager>, IDTAVWorkflowManager
{
    
    public DTAVWorkflowManagerClient()
    {
    }
    
    public DTAVWorkflowManagerClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public DTAVWorkflowManagerClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public DTAVWorkflowManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public DTAVWorkflowManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public DoubleTake.Virtualization.Contract.DTAV.DtavHostAndCluster[] GetClustersAndEsxServers(string vimServerNetworkId)
    {
        return base.Channel.GetClustersAndEsxServers(vimServerNetworkId);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Virtualization.Contract.DTAV.DtavHostAndCluster[]> GetClustersAndEsxServersAsync(string vimServerNetworkId)
    {
        return base.Channel.GetClustersAndEsxServersAsync(vimServerNetworkId);
    }
    
    public DoubleTake.Virtualization.Contract.DTAV.DtavVmInfo[] GetVirtualMachines(string vimServerNetworkId, string esxOrClusterName)
    {
        return base.Channel.GetVirtualMachines(vimServerNetworkId, esxOrClusterName);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Virtualization.Contract.DTAV.DtavVmInfo[]> GetVirtualMachinesAsync(string vimServerNetworkId, string esxOrClusterName)
    {
        return base.Channel.GetVirtualMachinesAsync(vimServerNetworkId, esxOrClusterName);
    }
    
    public DoubleTake.Jobs.Contract.RecommendedJobOptions GetRecommendedJobOptions(DoubleTake.Common.Contract.Workload workload, DoubleTake.Jobs.Contract.JobCredentials jobCredentials, string sourceEsxOrCluster, string targetEsxOrCluster)
    {
        return base.Channel.GetRecommendedJobOptions(workload, jobCredentials, sourceEsxOrCluster, targetEsxOrCluster);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Jobs.Contract.RecommendedJobOptions> GetRecommendedJobOptionsAsync(DoubleTake.Common.Contract.Workload workload, DoubleTake.Jobs.Contract.JobCredentials jobCredentials, string sourceEsxOrCluster, string targetEsxOrCluster)
    {
        return base.Channel.GetRecommendedJobOptionsAsync(workload, jobCredentials, sourceEsxOrCluster, targetEsxOrCluster);
    }
    
    public DoubleTake.Jobs.Contract.DTAVOptions GetDtavOptions(string jobId)
    {
        return base.Channel.GetDtavOptions(jobId);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Jobs.Contract.DTAVOptions> GetDtavOptionsAsync(string jobId)
    {
        return base.Channel.GetDtavOptionsAsync(jobId);
    }
    
    public DoubleTake.Common.Tasks.ActivityToken VerifyJobOptions(string jobType, DoubleTake.Jobs.Contract.JobOptions jobOptions, DoubleTake.Jobs.Contract.JobQualificationResults jobQualificationResults, DoubleTake.Jobs.Contract.JobCredentials jobCredentials)
    {
        return base.Channel.VerifyJobOptions(jobType, jobOptions, jobQualificationResults, jobCredentials);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Common.Tasks.ActivityToken> VerifyJobOptionsAsync(string jobType, DoubleTake.Jobs.Contract.JobOptions jobOptions, DoubleTake.Jobs.Contract.JobQualificationResults jobQualificationResults, DoubleTake.Jobs.Contract.JobCredentials jobCredentials)
    {
        return base.Channel.VerifyJobOptionsAsync(jobType, jobOptions, jobQualificationResults, jobCredentials);
    }
    
    public DoubleTake.Jobs.Contract1.VerificationTaskStatus GetVerificationStatus(DoubleTake.Common.Tasks.ActivityToken taskToken)
    {
        return base.Channel.GetVerificationStatus(taskToken);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Jobs.Contract1.VerificationTaskStatus> GetVerificationStatusAsync(DoubleTake.Common.Tasks.ActivityToken taskToken)
    {
        return base.Channel.GetVerificationStatusAsync(taskToken);
    }
    
    public DoubleTake.Virtualization.Contract.LicenseQuantity GetLicenseQuantity()
    {
        return base.Channel.GetLicenseQuantity();
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Virtualization.Contract.LicenseQuantity> GetLicenseQuantityAsync()
    {
        return base.Channel.GetLicenseQuantityAsync();
    }
    
    public DoubleTake.Virtualization.Contract.DTAV.DtavGuestInfo[] GetDtavGuestInfo(string vimServerNetworkId, string[] vmsGuid, DoubleTake.Core.Contract.Credentials vmCredentials)
    {
        return base.Channel.GetDtavGuestInfo(vimServerNetworkId, vmsGuid, vmCredentials);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Virtualization.Contract.DTAV.DtavGuestInfo[]> GetDtavGuestInfoAsync(string vimServerNetworkId, string[] vmsGuid, DoubleTake.Core.Contract.Credentials vmCredentials)
    {
        return base.Channel.GetDtavGuestInfoAsync(vimServerNetworkId, vmsGuid, vmCredentials);
    }
    
    public DoubleTake.Virtualization.Contract.VimDatastoreItem[] FindDatastoreItemsInFolder(string vimServerNetworkId, DoubleTake.Core.Contract.Credentials vimCredentials, string datastoreName, string folderPath)
    {
        return base.Channel.FindDatastoreItemsInFolder(vimServerNetworkId, vimCredentials, datastoreName, folderPath);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Virtualization.Contract.VimDatastoreItem[]> FindDatastoreItemsInFolderAsync(string vimServerNetworkId, DoubleTake.Core.Contract.Credentials vimCredentials, string datastoreName, string folderPath)
    {
        return base.Channel.FindDatastoreItemsInFolderAsync(vimServerNetworkId, vimCredentials, datastoreName, folderPath);
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace="http://www.doubletake.com/Virtualization/Uvra/PushInstall", ConfigurationName="IProxyPushInstaller")]
public interface IProxyPushInstaller
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/Uvra/PushInstall/IProxyPushInstaller/Ins" +
        "tall", ReplyAction="http://www.doubletake.com/Virtualization/Uvra/PushInstall/IProxyPushInstaller/Ins" +
        "tallResponse")]
    DoubleTake.Common.Contract.PushInstallToken Install(DoubleTake.Communication.ServiceConnectionParameters serviceConnectionParameters, DoubleTake.Common.Contract.PushInstallationOptions installationOption);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/Uvra/PushInstall/IProxyPushInstaller/Ins" +
        "tall", ReplyAction="http://www.doubletake.com/Virtualization/Uvra/PushInstall/IProxyPushInstaller/Ins" +
        "tallResponse")]
    System.Threading.Tasks.Task<DoubleTake.Common.Contract.PushInstallToken> InstallAsync(DoubleTake.Communication.ServiceConnectionParameters serviceConnectionParameters, DoubleTake.Common.Contract.PushInstallationOptions installationOption);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/Uvra/PushInstall/IProxyPushInstaller/Get" +
        "InstallStatus", ReplyAction="http://www.doubletake.com/Virtualization/Uvra/PushInstall/IProxyPushInstaller/Get" +
        "InstallStatusResponse")]
    DoubleTake.Common.Contract.PushInstallStatus GetInstallStatus(DoubleTake.Communication.ServiceConnectionParameters serviceConnectionParameters, DoubleTake.Common.Contract.PushInstallToken taskToken);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.doubletake.com/Virtualization/Uvra/PushInstall/IProxyPushInstaller/Get" +
        "InstallStatus", ReplyAction="http://www.doubletake.com/Virtualization/Uvra/PushInstall/IProxyPushInstaller/Get" +
        "InstallStatusResponse")]
    System.Threading.Tasks.Task<DoubleTake.Common.Contract.PushInstallStatus> GetInstallStatusAsync(DoubleTake.Communication.ServiceConnectionParameters serviceConnectionParameters, DoubleTake.Common.Contract.PushInstallToken taskToken);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IProxyPushInstallerChannel : IProxyPushInstaller, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class ProxyPushInstallerClient : System.ServiceModel.ClientBase<IProxyPushInstaller>, IProxyPushInstaller
{
    
    public ProxyPushInstallerClient()
    {
    }
    
    public ProxyPushInstallerClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public ProxyPushInstallerClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public ProxyPushInstallerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public ProxyPushInstallerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public DoubleTake.Common.Contract.PushInstallToken Install(DoubleTake.Communication.ServiceConnectionParameters serviceConnectionParameters, DoubleTake.Common.Contract.PushInstallationOptions installationOption)
    {
        return base.Channel.Install(serviceConnectionParameters, installationOption);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Common.Contract.PushInstallToken> InstallAsync(DoubleTake.Communication.ServiceConnectionParameters serviceConnectionParameters, DoubleTake.Common.Contract.PushInstallationOptions installationOption)
    {
        return base.Channel.InstallAsync(serviceConnectionParameters, installationOption);
    }
    
    public DoubleTake.Common.Contract.PushInstallStatus GetInstallStatus(DoubleTake.Communication.ServiceConnectionParameters serviceConnectionParameters, DoubleTake.Common.Contract.PushInstallToken taskToken)
    {
        return base.Channel.GetInstallStatus(serviceConnectionParameters, taskToken);
    }
    
    public System.Threading.Tasks.Task<DoubleTake.Common.Contract.PushInstallStatus> GetInstallStatusAsync(DoubleTake.Communication.ServiceConnectionParameters serviceConnectionParameters, DoubleTake.Common.Contract.PushInstallToken taskToken)
    {
        return base.Channel.GetInstallStatusAsync(serviceConnectionParameters, taskToken);
    }
}
